
STM32F429I_DISCO_REV_D01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027994  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002184  08027b44  08027b44  00037b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003328  08029cc8  08029cc8  00039cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001e0  0802cff0  0802cff0  0003cff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000046c  0802d1d0  0802d1d0  0003d1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 00176164  0802d63c  0802d63c  0003d63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  081a37a0  081a37a0  001c0170  2**0
                  CONTENTS
  8 .ARM          00000008  081a37a0  081a37a0  001b37a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  081a37a8  081a37a8  001c0170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  081a37a8  081a37a8  001b37a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  081a37c0  081a37c0  001b37c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000170  20000000  081a37c8  001c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000150d8  20000170  081a3938  001c0170  2**2
                  ALLOC
 14 ._user_heap_stack 00001400  20015248  081a3938  001c5248  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  001c0170  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  001d0000  2**2
                  ALLOC
 17 .comment      000000c2  00000000  00000000  001c01a0  2**0
                  CONTENTS, READONLY
 18 .debug_line   000568ff  00000000  00000000  001c0262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  00216b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_info   000f0c3e  00000000  00000000  00216bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 00019c19  00000000  00000000  00307805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 00003660  00000000  00000000  00321420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001117b1  00000000  00000000  00324a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 00003df4  00000000  00000000  00436231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loclists 0000d5d0  00000000  00000000  0043a025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macro  00031520  00000000  00000000  004475f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_frame  0000c414  00000000  00000000  00478b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000170 	.word	0x20000170
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08027b2c 	.word	0x08027b2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000174 	.word	0x20000174
 80001ec:	08027b2c 	.word	0x08027b2c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b970 	b.w	8000b94 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9e08      	ldr	r6, [sp, #32]
 80008d2:	460d      	mov	r5, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	460f      	mov	r7, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4694      	mov	ip, r2
 80008e0:	d965      	bls.n	80009ae <__udivmoddi4+0xe2>
 80008e2:	fab2 f382 	clz	r3, r2
 80008e6:	b143      	cbz	r3, 80008fa <__udivmoddi4+0x2e>
 80008e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008ec:	f1c3 0220 	rsb	r2, r3, #32
 80008f0:	409f      	lsls	r7, r3
 80008f2:	fa20 f202 	lsr.w	r2, r0, r2
 80008f6:	4317      	orrs	r7, r2
 80008f8:	409c      	lsls	r4, r3
 80008fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008fe:	fa1f f58c 	uxth.w	r5, ip
 8000902:	fbb7 f1fe 	udiv	r1, r7, lr
 8000906:	0c22      	lsrs	r2, r4, #16
 8000908:	fb0e 7711 	mls	r7, lr, r1, r7
 800090c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000910:	fb01 f005 	mul.w	r0, r1, r5
 8000914:	4290      	cmp	r0, r2
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x62>
 8000918:	eb1c 0202 	adds.w	r2, ip, r2
 800091c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000920:	f080 811c 	bcs.w	8000b5c <__udivmoddi4+0x290>
 8000924:	4290      	cmp	r0, r2
 8000926:	f240 8119 	bls.w	8000b5c <__udivmoddi4+0x290>
 800092a:	3902      	subs	r1, #2
 800092c:	4462      	add	r2, ip
 800092e:	1a12      	subs	r2, r2, r0
 8000930:	b2a4      	uxth	r4, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800093e:	fb00 f505 	mul.w	r5, r0, r5
 8000942:	42a5      	cmp	r5, r4
 8000944:	d90a      	bls.n	800095c <__udivmoddi4+0x90>
 8000946:	eb1c 0404 	adds.w	r4, ip, r4
 800094a:	f100 32ff 	add.w	r2, r0, #4294967295
 800094e:	f080 8107 	bcs.w	8000b60 <__udivmoddi4+0x294>
 8000952:	42a5      	cmp	r5, r4
 8000954:	f240 8104 	bls.w	8000b60 <__udivmoddi4+0x294>
 8000958:	4464      	add	r4, ip
 800095a:	3802      	subs	r0, #2
 800095c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	2100      	movs	r1, #0
 8000964:	b11e      	cbz	r6, 800096e <__udivmoddi4+0xa2>
 8000966:	40dc      	lsrs	r4, r3
 8000968:	2300      	movs	r3, #0
 800096a:	e9c6 4300 	strd	r4, r3, [r6]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0xbc>
 8000976:	2e00      	cmp	r6, #0
 8000978:	f000 80ed 	beq.w	8000b56 <__udivmoddi4+0x28a>
 800097c:	2100      	movs	r1, #0
 800097e:	e9c6 0500 	strd	r0, r5, [r6]
 8000982:	4608      	mov	r0, r1
 8000984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000988:	fab3 f183 	clz	r1, r3
 800098c:	2900      	cmp	r1, #0
 800098e:	d149      	bne.n	8000a24 <__udivmoddi4+0x158>
 8000990:	42ab      	cmp	r3, r5
 8000992:	d302      	bcc.n	800099a <__udivmoddi4+0xce>
 8000994:	4282      	cmp	r2, r0
 8000996:	f200 80f8 	bhi.w	8000b8a <__udivmoddi4+0x2be>
 800099a:	1a84      	subs	r4, r0, r2
 800099c:	eb65 0203 	sbc.w	r2, r5, r3
 80009a0:	2001      	movs	r0, #1
 80009a2:	4617      	mov	r7, r2
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d0e2      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a8:	e9c6 4700 	strd	r4, r7, [r6]
 80009ac:	e7df      	b.n	800096e <__udivmoddi4+0xa2>
 80009ae:	b902      	cbnz	r2, 80009b2 <__udivmoddi4+0xe6>
 80009b0:	deff      	udf	#255	; 0xff
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f040 8090 	bne.w	8000adc <__udivmoddi4+0x210>
 80009bc:	1a8a      	subs	r2, r1, r2
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2101      	movs	r1, #1
 80009c8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009cc:	fb07 2015 	mls	r0, r7, r5, r2
 80009d0:	0c22      	lsrs	r2, r4, #16
 80009d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009d6:	fb0e f005 	mul.w	r0, lr, r5
 80009da:	4290      	cmp	r0, r2
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x124>
 80009de:	eb1c 0202 	adds.w	r2, ip, r2
 80009e2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x122>
 80009e8:	4290      	cmp	r0, r2
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2b8>
 80009ee:	4645      	mov	r5, r8
 80009f0:	1a12      	subs	r2, r2, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009f8:	fb07 2210 	mls	r2, r7, r0, r2
 80009fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x14e>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x14c>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2c2>
 8000a18:	4610      	mov	r0, r2
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a22:	e79f      	b.n	8000964 <__udivmoddi4+0x98>
 8000a24:	f1c1 0720 	rsb	r7, r1, #32
 8000a28:	408b      	lsls	r3, r1
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa05 f401 	lsl.w	r4, r5, r1
 8000a36:	fa20 f307 	lsr.w	r3, r0, r7
 8000a3a:	40fd      	lsrs	r5, r7
 8000a3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a40:	4323      	orrs	r3, r4
 8000a42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a46:	fa1f fe8c 	uxth.w	lr, ip
 8000a4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a4e:	0c1c      	lsrs	r4, r3, #16
 8000a50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a54:	fb08 f50e 	mul.w	r5, r8, lr
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b0>
 8000a64:	eb1c 0404 	adds.w	r4, ip, r4
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2b4>
 8000a70:	42a5      	cmp	r5, r4
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2b4>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4464      	add	r4, ip
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	b29d      	uxth	r5, r3
 8000a80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a84:	fb09 4413 	mls	r4, r9, r3, r4
 8000a88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1da>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2ac>
 8000a9e:	45a6      	cmp	lr, r4
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2ac>
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	4464      	add	r4, ip
 8000aa6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000aae:	eba4 040e 	sub.w	r4, r4, lr
 8000ab2:	42ac      	cmp	r4, r5
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46ae      	mov	lr, r5
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x29c>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x298>
 8000abc:	b156      	cbz	r6, 8000ad4 <__udivmoddi4+0x208>
 8000abe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ac2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ac6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aca:	40ca      	lsrs	r2, r1
 8000acc:	40cc      	lsrs	r4, r1
 8000ace:	4317      	orrs	r7, r2
 8000ad0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000adc:	f1c3 0120 	rsb	r1, r3, #32
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ae8:	fa25 f101 	lsr.w	r1, r5, r1
 8000aec:	409d      	lsls	r5, r3
 8000aee:	432a      	orrs	r2, r5
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afc:	fb07 1510 	mls	r5, r7, r0, r1
 8000b00:	0c11      	lsrs	r1, r2, #16
 8000b02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b06:	fb00 f50e 	mul.w	r5, r0, lr
 8000b0a:	428d      	cmp	r5, r1
 8000b0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x258>
 8000b12:	eb1c 0101 	adds.w	r1, ip, r1
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b1c:	428d      	cmp	r5, r1
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4461      	add	r1, ip
 8000b24:	1b49      	subs	r1, r1, r5
 8000b26:	b292      	uxth	r2, r2
 8000b28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b34:	fb05 f10e 	mul.w	r1, r5, lr
 8000b38:	4291      	cmp	r1, r2
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x282>
 8000b3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000b46:	4291      	cmp	r1, r2
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000b4a:	3d02      	subs	r5, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a52      	subs	r2, r2, r1
 8000b50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0xfc>
 8000b56:	4631      	mov	r1, r6
 8000b58:	4630      	mov	r0, r6
 8000b5a:	e708      	b.n	800096e <__udivmoddi4+0xa2>
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e6e6      	b.n	800092e <__udivmoddi4+0x62>
 8000b60:	4610      	mov	r0, r2
 8000b62:	e6fb      	b.n	800095c <__udivmoddi4+0x90>
 8000b64:	4548      	cmp	r0, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f0>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b70:	3b01      	subs	r3, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f0>
 8000b74:	4645      	mov	r5, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b78:	462b      	mov	r3, r5
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1da>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x258>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b0>
 8000b84:	3d02      	subs	r5, #2
 8000b86:	4462      	add	r2, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x124>
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e70a      	b.n	80009a4 <__udivmoddi4+0xd8>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x14e>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
                                                             ldr   sp, =_estack       /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b9e:	e003      	b.n	8000ba8 <LoopCopyDataInit>

08000ba0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ba2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ba4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ba6:	3104      	adds	r1, #4

08000ba8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ba8:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bb0:	d3f6      	bcc.n	8000ba0 <CopyDataInit>
  ldr  r2, =_sbss
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bb4:	e002      	b.n	8000bbc <LoopFillZerobss>

08000bb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bb8:	f842 3b04 	str.w	r3, [r2], #4

08000bbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bc0:	d3f9      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bc2:	f006 fb77 	bl	80072b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f026 fa37 	bl	8027038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f000 f82b 	bl	8000c24 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
                                                             ldr   sp, =_estack       /* set stack pointer */
 8000bd0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000bd4:	081a37c8 	.word	0x081a37c8
  ldr  r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bdc:	20000170 	.word	0x20000170
  ldr  r2, =_sbss
 8000be0:	20000170 	.word	0x20000170
  ldr  r3, = _ebss
 8000be4:	20015248 	.word	0x20015248

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>

08000bea <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 8000bea:	4770      	bx	lr

08000bec <_ZN18MyButtonController4initEv>:
	extern uint8_t User_ButtonState;
	extern uint8_t autoMode;
}

void MyButtonController::init(){
	previousState = 0xFF;
 8000bec:	23ff      	movs	r3, #255	; 0xff
 8000bee:	7103      	strb	r3, [r0, #4]
}
 8000bf0:	4770      	bx	lr

08000bf2 <_ZN18MyButtonControllerD1Ev>:
#ifndef MyBUTTONCONTROLLER_HPP_
#define MyBUTTONCONTROLLER_HPP_

#include <platform/driver/button/ButtonController.hpp>

class MyButtonController : public touchgfx::ButtonController
 8000bf2:	4770      	bx	lr

08000bf4 <_ZN18MyButtonControllerD0Ev>:
 8000bf4:	b510      	push	{r4, lr}
 8000bf6:	2108      	movs	r1, #8
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	f025 fefc 	bl	80269f6 <_ZdlPvj>
 8000bfe:	4620      	mov	r0, r4
 8000c00:	bd10      	pop	{r4, pc}
	...

08000c04 <_ZN18MyButtonController6sampleERh>:

bool MyButtonController::sample(uint8_t& key){
	if (User_ButtonState && !autoMode){
 8000c04:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <_ZN18MyButtonController6sampleERh+0x18>)
 8000c06:	7810      	ldrb	r0, [r2, #0]
 8000c08:	b138      	cbz	r0, 8000c1a <_ZN18MyButtonController6sampleERh+0x16>
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <_ZN18MyButtonController6sampleERh+0x1c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b91b      	cbnz	r3, 8000c18 <_ZN18MyButtonController6sampleERh+0x14>
			User_ButtonState = 0x00;
 8000c10:	7013      	strb	r3, [r2, #0]
			key = 0;
			return true;
 8000c12:	2001      	movs	r0, #1
			key = 0;
 8000c14:	700b      	strb	r3, [r1, #0]
			return true;
 8000c16:	4770      	bx	lr
	}
	return false;
 8000c18:	2000      	movs	r0, #0
}
 8000c1a:	4770      	bx	lr
 8000c1c:	200003bc 	.word	0x200003bc
 8000c20:	200003cb 	.word	0x200003cb

08000c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c28:	f006 fb5a 	bl	80072e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2c:	f000 f838 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c30:	f000 faa4 	bl	800117c <MX_GPIO_Init>
  MX_CRC_Init();
 8000c34:	f000 f89e 	bl	8000d74 <MX_CRC_Init>
  MX_I2C3_Init();
 8000c38:	f000 f8e2 	bl	8000e00 <MX_I2C3_Init>
  MX_SPI5_Init();
 8000c3c:	f000 f9c2 	bl	8000fc4 <MX_SPI5_Init>
  MX_FMC_Init();
 8000c40:	f000 fa44 	bl	80010cc <MX_FMC_Init>
  MX_LTDC_Init();
 8000c44:	f000 f91c 	bl	8000e80 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8000c48:	f000 f8a8 	bl	8000d9c <MX_DMA2D_Init>
  MX_RNG_Init();
 8000c4c:	f000 f9a6 	bl	8000f9c <MX_RNG_Init>
  MX_TIM2_Init();
 8000c50:	f000 f9ee 	bl	8001030 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  MX_TouchGFX_PreOSInit();
 8000c54:	f001 fae6 	bl	8002224 <MX_TouchGFX_PreOSInit>
  MX_TouchGFX_Init();
 8000c58:	f001 faeb 	bl	8002232 <MX_TouchGFX_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c5c:	f00b fb1e 	bl	800c29c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c60:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <main+0x64>)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4809      	ldr	r0, [pc, #36]	; (8000c8c <main+0x68>)
 8000c66:	f00b fb63 	bl	800c330 <osThreadNew>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <main+0x6c>)
 8000c6e:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8000c70:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <main+0x70>)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4808      	ldr	r0, [pc, #32]	; (8000c98 <main+0x74>)
 8000c76:	f00b fb5b 	bl	800c330 <osThreadNew>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <main+0x78>)
 8000c7e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c80:	f00b fb30 	bl	800c2e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <main+0x60>
 8000c86:	bf00      	nop
 8000c88:	08027bf0 	.word	0x08027bf0
 8000c8c:	08001813 	.word	0x08001813
 8000c90:	200003b4 	.word	0x200003b4
 8000c94:	08027c14 	.word	0x08027c14
 8000c98:	08002243 	.word	0x08002243
 8000c9c:	200003b8 	.word	0x200003b8

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b094      	sub	sp, #80	; 0x50
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	2230      	movs	r2, #48	; 0x30
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f026 f8c3 	bl	8026e3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <SystemClock_Config+0xcc>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <SystemClock_Config+0xcc>)
 8000cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd4:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <SystemClock_Config+0xcc>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <SystemClock_Config+0xd0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <SystemClock_Config+0xd0>)
 8000cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <SystemClock_Config+0xd0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d06:	2302      	movs	r3, #2
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d10:	2308      	movs	r3, #8
 8000d12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d14:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d22:	f107 0320 	add.w	r3, r7, #32
 8000d26:	4618      	mov	r0, r3
 8000d28:	f008 ff10 	bl	8009b4c <HAL_RCC_OscConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d32:	f000 fd95 	bl	8001860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d36:	230f      	movs	r3, #15
 8000d38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	2105      	movs	r1, #5
 8000d54:	4618      	mov	r0, r3
 8000d56:	f009 f971 	bl	800a03c <HAL_RCC_ClockConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d60:	f000 fd7e 	bl	8001860 <Error_Handler>
  }
}
 8000d64:	bf00      	nop
 8000d66:	3750      	adds	r7, #80	; 0x50
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40007000 	.word	0x40007000

08000d74 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_CRC_Init+0x20>)
 8000d7a:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <MX_CRC_Init+0x24>)
 8000d7c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_CRC_Init+0x20>)
 8000d80:	f006 fbf6 	bl	8007570 <HAL_CRC_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000d8a:	f000 fd69 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000018c 	.word	0x2000018c
 8000d98:	40023000 	.word	0x40023000

08000d9c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_DMA2D_Init+0x5c>)
 8000da2:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <MX_DMA2D_Init+0x60>)
 8000da4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_DMA2D_Init+0x5c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_DMA2D_Init+0x5c>)
 8000dae:	2202      	movs	r2, #2
 8000db0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_DMA2D_Init+0x5c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_DMA2D_Init+0x5c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_DMA2D_Init+0x5c>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_DMA2D_Init+0x5c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_DMA2D_Init+0x5c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <MX_DMA2D_Init+0x5c>)
 8000dd2:	f006 fbe9 	bl	80075a8 <HAL_DMA2D_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ddc:	f000 fd40 	bl	8001860 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000de0:	2101      	movs	r1, #1
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_DMA2D_Init+0x5c>)
 8000de4:	f006 fd3a 	bl	800785c <HAL_DMA2D_ConfigLayer>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000dee:	f000 fd37 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000194 	.word	0x20000194
 8000dfc:	4002b000 	.word	0x4002b000

08000e00 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_I2C3_Init+0x74>)
 8000e06:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <MX_I2C3_Init+0x78>)
 8000e08:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_I2C3_Init+0x74>)
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <MX_I2C3_Init+0x7c>)
 8000e0e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_I2C3_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_I2C3_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_I2C3_Init+0x74>)
 8000e1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e22:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_I2C3_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_I2C3_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_I2C3_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_I2C3_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_I2C3_Init+0x74>)
 8000e3e:	f007 fab5 	bl	80083ac <HAL_I2C_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e48:	f000 fd0a 	bl	8001860 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	4809      	ldr	r0, [pc, #36]	; (8000e74 <MX_I2C3_Init+0x74>)
 8000e50:	f008 fa6b 	bl	800932a <HAL_I2CEx_ConfigAnalogFilter>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000e5a:	f000 fd01 	bl	8001860 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <MX_I2C3_Init+0x74>)
 8000e62:	f008 fa9e 	bl	80093a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000e6c:	f000 fcf8 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200001d4 	.word	0x200001d4
 8000e78:	40005c00 	.word	0x40005c00
 8000e7c:	000186a0 	.word	0x000186a0

08000e80 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08e      	sub	sp, #56	; 0x38
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2234      	movs	r2, #52	; 0x34
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f025 ffd4 	bl	8026e3a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e92:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000e94:	4a3e      	ldr	r2, [pc, #248]	; (8000f90 <MX_LTDC_Init+0x110>)
 8000e96:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e98:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e9e:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ea4:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000eaa:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000eb0:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000eb2:	2209      	movs	r2, #9
 8000eb4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000eb6:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000ebc:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000ebe:	221d      	movs	r2, #29
 8000ec0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000ec2:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000ec8:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000eca:	f240 120d 	movw	r2, #269	; 0x10d
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000ed2:	f240 1243 	movw	r2, #323	; 0x143
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000eda:	f240 1217 	movw	r2, #279	; 0x117
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000ee2:	f240 1247 	movw	r2, #327	; 0x147
 8000ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ef0:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f00:	4822      	ldr	r0, [pc, #136]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000f02:	f008 fa8d 	bl	8009420 <HAL_LTDC_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000f0c:	f000 fca8 	bl	8001860 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000f14:	23f0      	movs	r3, #240	; 0xf0
 8000f16:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000f1c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f20:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f22:	2302      	movs	r3, #2
 8000f24:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000f26:	23ff      	movs	r3, #255	; 0xff
 8000f28:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f32:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000f34:	2305      	movs	r3, #5
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000f3c:	23f0      	movs	r3, #240	; 0xf0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000f40:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	; (8000f8c <MX_LTDC_Init+0x10c>)
 8000f60:	f008 fbe6 	bl	8009730 <HAL_LTDC_ConfigLayer>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000f6a:	f000 fc79 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
    /*Select the device */
  LcdDrv = &ili9341_drv;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_LTDC_Init+0x114>)
 8000f70:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <MX_LTDC_Init+0x118>)
 8000f72:	601a      	str	r2, [r3, #0]
  /* LCD Init */
  LcdDrv->Init();
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <MX_LTDC_Init+0x114>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4798      	blx	r3

  LcdDrv->DisplayOff();
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <MX_LTDC_Init+0x114>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	4798      	blx	r3
  /* USER CODE END LTDC_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3738      	adds	r7, #56	; 0x38
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000228 	.word	0x20000228
 8000f90:	40016800 	.word	0x40016800
 8000f94:	200003cc 	.word	0x200003cc
 8000f98:	20000020 	.word	0x20000020

08000f9c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_RNG_Init+0x20>)
 8000fa2:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <MX_RNG_Init+0x24>)
 8000fa4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_RNG_Init+0x20>)
 8000fa8:	f009 fc46 	bl	800a838 <HAL_RNG_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000fb2:	f000 fc55 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200002d0 	.word	0x200002d0
 8000fc0:	50060800 	.word	0x50060800

08000fc4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_SPI5_Init+0x64>)
 8000fca:	4a18      	ldr	r2, [pc, #96]	; (800102c <MX_SPI5_Init+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_SPI5_Init+0x64>)
 8000fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_SPI5_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_SPI5_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_SPI5_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_SPI5_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_SPI5_Init+0x64>)
 8000ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_SPI5_Init+0x64>)
 8000ff8:	2218      	movs	r2, #24
 8000ffa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_SPI5_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_SPI5_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_SPI5_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_SPI5_Init+0x64>)
 8001010:	220a      	movs	r2, #10
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_SPI5_Init+0x64>)
 8001016:	f009 fd8b 	bl	800ab30 <HAL_SPI_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001020:	f000 fc1e 	bl	8001860 <Error_Handler>
  /* USER CODE BEGIN SPI5_Init 2 */


  /* USER CODE END SPI5_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200002e0 	.word	0x200002e0
 800102c:	40015000 	.word	0x40015000

08001030 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <MX_TIM2_Init+0x98>)
 800104e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001052:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001056:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800105a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_TIM2_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000;
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001064:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8001068:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_TIM2_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001076:	4814      	ldr	r0, [pc, #80]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001078:	f00a fb02 	bl	800b680 <HAL_TIM_Base_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001082:	f000 fbed 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	4619      	mov	r1, r3
 8001092:	480d      	ldr	r0, [pc, #52]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001094:	f00a fceb 	bl	800ba6e <HAL_TIM_ConfigClockSource>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800109e:	f000 fbdf 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <MX_TIM2_Init+0x98>)
 80010b0:	f00a ff06 	bl	800bec0 <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010ba:	f000 fbd1 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000338 	.word	0x20000338

080010cc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
 80010e2:	615a      	str	r2, [r3, #20]
 80010e4:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <MX_FMC_Init+0xa8>)
 80010e8:	4a23      	ldr	r2, [pc, #140]	; (8001178 <MX_FMC_Init+0xac>)
 80010ea:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <MX_FMC_Init+0xa8>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <MX_FMC_Init+0xa8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <MX_FMC_Init+0xa8>)
 80010fa:	2204      	movs	r2, #4
 80010fc:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_FMC_Init+0xa8>)
 8001100:	2210      	movs	r2, #16
 8001102:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <MX_FMC_Init+0xa8>)
 8001106:	2240      	movs	r2, #64	; 0x40
 8001108:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_FMC_Init+0xa8>)
 800110c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001110:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_FMC_Init+0xa8>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_FMC_Init+0xa8>)
 800111a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800111e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_FMC_Init+0xa8>)
 8001122:	2200      	movs	r2, #0
 8001124:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_FMC_Init+0xa8>)
 8001128:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800112e:	2302      	movs	r3, #2
 8001130:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001132:	2307      	movs	r3, #7
 8001134:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 8001136:	2304      	movs	r3, #4
 8001138:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 800113a:	2307      	movs	r3, #7
 800113c:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 800113e:	2303      	movs	r3, #3
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8001146:	2302      	movs	r3, #2
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4808      	ldr	r0, [pc, #32]	; (8001174 <MX_FMC_Init+0xa8>)
 8001152:	f009 fc5c 	bl	800aa0e <HAL_SDRAM_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 800115c:	f000 fb80 	bl	8001860 <Error_Handler>
  /* USER CODE BEGIN FMC_Init 2 */

  FMC_SDRAM_CommandTypeDef command;

  /* Program the SDRAM external device */
  BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4619      	mov	r1, r3
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <MX_FMC_Init+0xa8>)
 8001166:	f000 f951 	bl	800140c <BSP_SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 800116a:	bf00      	nop
 800116c:	3730      	adds	r7, #48	; 0x30
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000380 	.word	0x20000380
 8001178:	a0000140 	.word	0xa0000140

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08e      	sub	sp, #56	; 0x38
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
 8001196:	4b61      	ldr	r3, [pc, #388]	; (800131c <MX_GPIO_Init+0x1a0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a60      	ldr	r2, [pc, #384]	; (800131c <MX_GPIO_Init+0x1a0>)
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b5e      	ldr	r3, [pc, #376]	; (800131c <MX_GPIO_Init+0x1a0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	623b      	str	r3, [r7, #32]
 80011ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	4b5a      	ldr	r3, [pc, #360]	; (800131c <MX_GPIO_Init+0x1a0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a59      	ldr	r2, [pc, #356]	; (800131c <MX_GPIO_Init+0x1a0>)
 80011b8:	f043 0320 	orr.w	r3, r3, #32
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b57      	ldr	r3, [pc, #348]	; (800131c <MX_GPIO_Init+0x1a0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0320 	and.w	r3, r3, #32
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	4b53      	ldr	r3, [pc, #332]	; (800131c <MX_GPIO_Init+0x1a0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a52      	ldr	r2, [pc, #328]	; (800131c <MX_GPIO_Init+0x1a0>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b50      	ldr	r3, [pc, #320]	; (800131c <MX_GPIO_Init+0x1a0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	4b4c      	ldr	r3, [pc, #304]	; (800131c <MX_GPIO_Init+0x1a0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a4b      	ldr	r2, [pc, #300]	; (800131c <MX_GPIO_Init+0x1a0>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b49      	ldr	r3, [pc, #292]	; (800131c <MX_GPIO_Init+0x1a0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b45      	ldr	r3, [pc, #276]	; (800131c <MX_GPIO_Init+0x1a0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a44      	ldr	r2, [pc, #272]	; (800131c <MX_GPIO_Init+0x1a0>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b42      	ldr	r3, [pc, #264]	; (800131c <MX_GPIO_Init+0x1a0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b3e      	ldr	r3, [pc, #248]	; (800131c <MX_GPIO_Init+0x1a0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a3d      	ldr	r2, [pc, #244]	; (800131c <MX_GPIO_Init+0x1a0>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b3b      	ldr	r3, [pc, #236]	; (800131c <MX_GPIO_Init+0x1a0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b37      	ldr	r3, [pc, #220]	; (800131c <MX_GPIO_Init+0x1a0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a36      	ldr	r2, [pc, #216]	; (800131c <MX_GPIO_Init+0x1a0>)
 8001244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b34      	ldr	r3, [pc, #208]	; (800131c <MX_GPIO_Init+0x1a0>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <MX_GPIO_Init+0x1a0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a2f      	ldr	r2, [pc, #188]	; (800131c <MX_GPIO_Init+0x1a0>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <MX_GPIO_Init+0x1a0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	213c      	movs	r1, #60	; 0x3c
 8001276:	482a      	ldr	r0, [pc, #168]	; (8001320 <MX_GPIO_Init+0x1a4>)
 8001278:	f007 f84c 	bl	8008314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	2104      	movs	r1, #4
 8001280:	4828      	ldr	r0, [pc, #160]	; (8001324 <MX_GPIO_Init+0x1a8>)
 8001282:	f007 f847 	bl	8008314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800128c:	4826      	ldr	r0, [pc, #152]	; (8001328 <MX_GPIO_Init+0x1ac>)
 800128e:	f007 f841 	bl	8008314 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin FRAME_RATE_Pin MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin;
 8001292:	233c      	movs	r3, #60	; 0x3c
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a6:	4619      	mov	r1, r3
 80012a8:	481d      	ldr	r0, [pc, #116]	; (8001320 <MX_GPIO_Init+0x1a4>)
 80012aa:	f006 fe6f 	bl	8007f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ae:	2304      	movs	r3, #4
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ba:	2302      	movs	r3, #2
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	4817      	ldr	r0, [pc, #92]	; (8001324 <MX_GPIO_Init+0x1a8>)
 80012c6:	f006 fe61 	bl	8007f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ca:	2301      	movs	r3, #1
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012ce:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <MX_GPIO_Init+0x1b0>)
 80012e0:	f006 fe54 	bl	8007f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012e4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f2:	2302      	movs	r3, #2
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	480a      	ldr	r0, [pc, #40]	; (8001328 <MX_GPIO_Init+0x1ac>)
 80012fe:	f006 fe45 	bl	8007f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2105      	movs	r1, #5
 8001306:	2006      	movs	r0, #6
 8001308:	f006 f908 	bl	800751c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800130c:	2006      	movs	r0, #6
 800130e:	f006 f921 	bl	8007554 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001312:	bf00      	nop
 8001314:	3738      	adds	r7, #56	; 0x38
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40021000 	.word	0x40021000
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40020000 	.word	0x40020000

08001330 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
	currentmillis = HAL_GetTick();
 800133a:	f006 f807 	bl	800734c <HAL_GetTick>
 800133e:	4603      	mov	r3, r0
 8001340:	4a2b      	ldr	r2, [pc, #172]	; (80013f0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001342:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_0 && currentmillis - previousMillis > 50){
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d14d      	bne.n	80013e6 <HAL_GPIO_EXTI_Callback+0xb6>
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <HAL_GPIO_EXTI_Callback+0xc0>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b32      	cmp	r3, #50	; 0x32
 8001356:	d946      	bls.n	80013e6 <HAL_GPIO_EXTI_Callback+0xb6>
		if(screenNumber == 1 || screenNumber == 2){ // FLAPPY BIRD GAME SCREEN
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_EXTI_Callback+0x38>
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d11c      	bne.n	80013a2 <HAL_GPIO_EXTI_Callback+0x72>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8001368:	2101      	movs	r1, #1
 800136a:	4824      	ldr	r0, [pc, #144]	; (80013fc <HAL_GPIO_EXTI_Callback+0xcc>)
 800136c:	f006 ffba 	bl	80082e4 <HAL_GPIO_ReadPin>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00e      	beq.n	8001394 <HAL_GPIO_EXTI_Callback+0x64>
				User_ButtonState = 0x01;
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
				previousMillis = currentmillis;
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_GPIO_EXTI_Callback+0xc0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001382:	6013      	str	r3, [r2, #0]
				if(timeCounter == 0){
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d12b      	bne.n	80013e4 <HAL_GPIO_EXTI_Callback+0xb4>
					HAL_TIM_Base_Start_IT(&htim2);
 800138c:	481e      	ldr	r0, [pc, #120]	; (8001408 <HAL_GPIO_EXTI_Callback+0xd8>)
 800138e:	f00a f9c7 	bl	800b720 <HAL_TIM_Base_Start_IT>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8001392:	e027      	b.n	80013e4 <HAL_GPIO_EXTI_Callback+0xb4>
				}
			}
			else{
				HAL_TIM_Base_Stop_IT(&htim2);
 8001394:	481c      	ldr	r0, [pc, #112]	; (8001408 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001396:	f00a fa33 	bl	800b800 <HAL_TIM_Base_Stop_IT>
				timeCounter = 0;
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_GPIO_EXTI_Callback+0xd4>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 80013a0:	e020      	b.n	80013e4 <HAL_GPIO_EXTI_Callback+0xb4>
			}
		}
		else if(screenNumber == 3){ // MAIN SCREEN
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_GPIO_EXTI_Callback+0xc8>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d11d      	bne.n	80013e6 <HAL_GPIO_EXTI_Callback+0xb6>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 80013aa:	2101      	movs	r1, #1
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <HAL_GPIO_EXTI_Callback+0xcc>)
 80013ae:	f006 ff99 	bl	80082e4 <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d007      	beq.n	80013c8 <HAL_GPIO_EXTI_Callback+0x98>
				if(timeCounter == 0){
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_GPIO_EXTI_Callback+0xd4>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d112      	bne.n	80013e6 <HAL_GPIO_EXTI_Callback+0xb6>
					HAL_TIM_Base_Start_IT(&htim2);
 80013c0:	4811      	ldr	r0, [pc, #68]	; (8001408 <HAL_GPIO_EXTI_Callback+0xd8>)
 80013c2:	f00a f9ad 	bl	800b720 <HAL_TIM_Base_Start_IT>
				User_ButtonState = 0x01;
				timeCounter = 0;
			}
		}
	}
}
 80013c6:	e00e      	b.n	80013e6 <HAL_GPIO_EXTI_Callback+0xb6>
				previousMillis = currentmillis;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_GPIO_EXTI_Callback+0xc0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <HAL_GPIO_EXTI_Callback+0xc4>)
 80013ce:	6013      	str	r3, [r2, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <HAL_GPIO_EXTI_Callback+0xd8>)
 80013d2:	f00a fa15 	bl	800b800 <HAL_TIM_Base_Stop_IT>
				User_ButtonState = 0x01;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_GPIO_EXTI_Callback+0xd0>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
				timeCounter = 0;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_GPIO_EXTI_Callback+0xd4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
}
 80013e2:	e000      	b.n	80013e6 <HAL_GPIO_EXTI_Callback+0xb6>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 80013e4:	bf00      	nop
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200003c0 	.word	0x200003c0
 80013f4:	200003c4 	.word	0x200003c4
 80013f8:	20000008 	.word	0x20000008
 80013fc:	40020000 	.word	0x40020000
 8001400:	200003bc 	.word	0x200003bc
 8001404:	200003ca 	.word	0x200003ca
 8001408:	20000338 	.word	0x20000338

0800140c <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
 __IO uint32_t tmpmrd =0;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2208      	movs	r2, #8
 8001424:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2201      	movs	r2, #1
 800142a:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f009 fb1c 	bl	800aa76 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800143e:	2001      	movs	r0, #1
 8001440:	f005 ff90 	bl	8007364 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode             = FMC_SDRAM_CMD_PALL;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2202      	movs	r2, #2
 8001448:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2208      	movs	r2, #8
 800144e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2201      	movs	r2, #1
 8001454:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800145c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001460:	6839      	ldr	r1, [r7, #0]
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f009 fb07 	bl	800aa76 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command->CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	2203      	movs	r2, #3
 800146c:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2208      	movs	r2, #8
 8001472:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 4;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2204      	movs	r2, #4
 8001478:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001484:	6839      	ldr	r1, [r7, #0]
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f009 faf5 	bl	800aa76 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800148c:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001490:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2204      	movs	r2, #4
 8001496:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2208      	movs	r2, #8
 800149c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2201      	movs	r2, #1
 80014a2:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = tmpmrd;
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80014aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ae:	6839      	ldr	r1, [r7, #0]
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f009 fae0 	bl	800aa76 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 80014b6:	f240 516a 	movw	r1, #1386	; 0x56a
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f009 fb10 	bl	800aae0 <HAL_SDRAM_ProgramRefreshRate>
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  //Dummy function called when initializing to stmpe811 to setup the i2c.
  //This is done with cubmx and is therfore not done here.
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  //Dummy function called when initializing to stmpe811 to setup interupt for the i2c.
  //The interupt is not used in our case, therefore nothing is done here.
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	460b      	mov	r3, r1
 80014f0:	71bb      	strb	r3, [r7, #6]
 80014f2:	4613      	mov	r3, r2
 80014f4:	717b      	strb	r3, [r7, #5]
  I2C3_WriteData(Addr, Reg, Value);
 80014f6:	797a      	ldrb	r2, [r7, #5]
 80014f8:	79b9      	ldrb	r1, [r7, #6]
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f839 	bl	8001574 <I2C3_WriteData>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	460a      	mov	r2, r1
 8001514:	71fb      	strb	r3, [r7, #7]
 8001516:	4613      	mov	r3, r2
 8001518:	71bb      	strb	r3, [r7, #6]
  return I2C3_ReadData(Addr, Reg);
 800151a:	79ba      	ldrb	r2, [r7, #6]
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f000 f84b 	bl	80015bc <I2C3_ReadData>
 8001526:	4603      	mov	r3, r0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	603a      	str	r2, [r7, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
 800153e:	460b      	mov	r3, r1
 8001540:	71bb      	strb	r3, [r7, #6]
 8001542:	4613      	mov	r3, r2
 8001544:	80bb      	strh	r3, [r7, #4]
 return I2C3_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001546:	88bb      	ldrh	r3, [r7, #4]
 8001548:	79b9      	ldrb	r1, [r7, #6]
 800154a:	79f8      	ldrb	r0, [r7, #7]
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	f000 f85d 	bl	800160c <I2C3_ReadBuffer>
 8001552:	4603      	mov	r3, r0
 8001554:	b29b      	uxth	r3, r3
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f005 fefc 	bl	8007364 <HAL_Delay>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <I2C3_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2C3_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af04      	add	r7, sp, #16
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	460b      	mov	r3, r1
 8001580:	71bb      	strb	r3, [r7, #6]
 8001582:	4613      	mov	r3, r2
 8001584:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	b299      	uxth	r1, r3
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <I2C3_WriteData+0x40>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	2301      	movs	r3, #1
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	1d7b      	adds	r3, r7, #5
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2301      	movs	r3, #1
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <I2C3_WriteData+0x44>)
 80015a4:	f007 f846 	bl	8008634 <HAL_I2C_Mem_Write>
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();
  }
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000000c 	.word	0x2000000c
 80015b8:	200001d4 	.word	0x200001d4

080015bc <I2C3_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2C3_ReadData(uint8_t Addr, uint8_t Reg)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af04      	add	r7, sp, #16
 80015c2:	4603      	mov	r3, r0
 80015c4:	460a      	mov	r2, r1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	b299      	uxth	r1, r3
 80015d8:	79bb      	ldrb	r3, [r7, #6]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <I2C3_ReadData+0x48>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	2301      	movs	r3, #1
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	f107 030e 	add.w	r3, r7, #14
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2301      	movs	r3, #1
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <I2C3_ReadData+0x4c>)
 80015f0:	f007 f91a 	bl	8008828 <HAL_I2C_Mem_Read>
 80015f4:	4603      	mov	r3, r0
 80015f6:	73fb      	strb	r3, [r7, #15]
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();

  }
  return value;
 80015f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000000c 	.word	0x2000000c
 8001608:	200001d4 	.word	0x200001d4

0800160c <I2C3_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2C3_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af04      	add	r7, sp, #16
 8001612:	603a      	str	r2, [r7, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
 800161a:	460b      	mov	r3, r1
 800161c:	71bb      	strb	r3, [r7, #6]
 800161e:	4613      	mov	r3, r2
 8001620:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	b299      	uxth	r1, r3
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	b29a      	uxth	r2, r3
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <I2C3_ReadBuffer+0x50>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	88bb      	ldrh	r3, [r7, #4]
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	4808      	ldr	r0, [pc, #32]	; (8001660 <I2C3_ReadBuffer+0x54>)
 8001640:	f007 f8f2 	bl	8008828 <HAL_I2C_Mem_Read>
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status == HAL_OK)
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <I2C3_ReadBuffer+0x46>
  {
    return 0;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <I2C3_ReadBuffer+0x48>
  else
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();

    return 1;
 8001652:	2301      	movs	r3, #1
  }
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000000c 	.word	0x2000000c
 8001660:	200001d4 	.word	0x200001d4

08001664 <SPI5_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPI5_Read(uint8_t ReadSize)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	b29a      	uxth	r2, r3
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <SPI5_Read+0x38>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f107 0108 	add.w	r1, r7, #8
 800167e:	4808      	ldr	r0, [pc, #32]	; (80016a0 <SPI5_Read+0x3c>)
 8001680:	f009 fc1b 	bl	800aeba <HAL_SPI_Receive>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SPI5_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
 800168e:	f000 f827 	bl	80016e0 <SPI5_Error>
  }

  return readvalue;
 8001692:	68bb      	ldr	r3, [r7, #8]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000010 	.word	0x20000010
 80016a0:	200002e0 	.word	0x200002e0

080016a4 <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <SPI5_Write+0x34>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	1db9      	adds	r1, r7, #6
 80016b8:	2201      	movs	r2, #1
 80016ba:	4808      	ldr	r0, [pc, #32]	; (80016dc <SPI5_Write+0x38>)
 80016bc:	f009 fac1 	bl	800ac42 <HAL_SPI_Transmit>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SPI5_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
 80016ca:	f000 f809 	bl	80016e0 <SPI5_Error>
  }
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000010 	.word	0x20000010
 80016dc:	200002e0 	.word	0x200002e0

080016e0 <SPI5_Error>:

/**
  * @brief  SPI5 error treatment function.
  */
static void SPI5_Error(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  //HAL_SPI_DeInit(&SpiHandle);

  /* Re- Initialize the SPI communication BUS */
  //SPIx_Init();
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <LCD_IO_Init>:

void LCD_IO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Set or Reset the control line */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2104      	movs	r1, #4
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <LCD_IO_Init+0x1c>)
 80016fa:	f006 fe0b 	bl	8008314 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80016fe:	2201      	movs	r2, #1
 8001700:	2104      	movs	r1, #4
 8001702:	4802      	ldr	r0, [pc, #8]	; (800170c <LCD_IO_Init+0x1c>)
 8001704:	f006 fe06 	bl	8008314 <HAL_GPIO_WritePin>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40020800 	.word	0x40020800

08001710 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800171a:	2201      	movs	r2, #1
 800171c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001720:	480a      	ldr	r0, [pc, #40]	; (800174c <LCD_IO_WriteData+0x3c>)
 8001722:	f006 fdf7 	bl	8008314 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	2104      	movs	r1, #4
 800172a:	4809      	ldr	r0, [pc, #36]	; (8001750 <LCD_IO_WriteData+0x40>)
 800172c:	f006 fdf2 	bl	8008314 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ffb6 	bl	80016a4 <SPI5_Write>

  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001738:	2201      	movs	r2, #1
 800173a:	2104      	movs	r1, #4
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <LCD_IO_WriteData+0x40>)
 800173e:	f006 fde9 	bl	8008314 <HAL_GPIO_WritePin>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40020c00 	.word	0x40020c00
 8001750:	40020800 	.word	0x40020800

08001754 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001764:	480a      	ldr	r0, [pc, #40]	; (8001790 <LCD_IO_WriteReg+0x3c>)
 8001766:	f006 fdd5 	bl	8008314 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2104      	movs	r1, #4
 800176e:	4809      	ldr	r0, [pc, #36]	; (8001794 <LCD_IO_WriteReg+0x40>)
 8001770:	f006 fdd0 	bl	8008314 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	b29b      	uxth	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff93 	bl	80016a4 <SPI5_Write>

  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	2104      	movs	r1, #4
 8001782:	4804      	ldr	r0, [pc, #16]	; (8001794 <LCD_IO_WriteReg+0x40>)
 8001784:	f006 fdc6 	bl	8008314 <HAL_GPIO_WritePin>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40020c00 	.word	0x40020c00
 8001794:	40020800 	.word	0x40020800

08001798 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2104      	movs	r1, #4
 80017b0:	4810      	ldr	r0, [pc, #64]	; (80017f4 <LCD_IO_ReadData+0x5c>)
 80017b2:	f006 fdaf 	bl	8008314 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017bc:	480e      	ldr	r0, [pc, #56]	; (80017f8 <LCD_IO_ReadData+0x60>)
 80017be:	f006 fda9 	bl	8008314 <HAL_GPIO_WritePin>

  SPI5_Write(RegValue);
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff6d 	bl	80016a4 <SPI5_Write>

  readvalue = SPI5_Read(ReadSize);
 80017ca:	797b      	ldrb	r3, [r7, #5]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff49 	bl	8001664 <SPI5_Read>
 80017d2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017da:	4807      	ldr	r0, [pc, #28]	; (80017f8 <LCD_IO_ReadData+0x60>)
 80017dc:	f006 fd9a 	bl	8008314 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	2104      	movs	r1, #4
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <LCD_IO_ReadData+0x5c>)
 80017e6:	f006 fd95 	bl	8008314 <HAL_GPIO_WritePin>

  return readvalue;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020c00 	.word	0x40020c00

080017fc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f005 fdad 	bl	8007364 <HAL_Delay>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800181a:	2064      	movs	r0, #100	; 0x64
 800181c:	f00a fe1a 	bl	800c454 <osDelay>
 8001820:	e7fb      	b.n	800181a <StartDefaultTask+0x8>
	...

08001824 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001834:	d105      	bne.n	8001842 <HAL_TIM_PeriodElapsedCallback+0x1e>
		timeCounter++;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001840:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_TIM_PeriodElapsedCallback+0x2c>
    HAL_IncTick();
 800184c:	f005 fd6a 	bl	8007324 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200003ca 	.word	0x200003ca
 800185c:	40001000 	.word	0x40001000

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_MspInit+0x54>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a11      	ldr	r2, [pc, #68]	; (80018c4 <HAL_MspInit+0x54>)
 8001880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_MspInit+0x54>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_MspInit+0x54>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_MspInit+0x54>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_MspInit+0x54>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	210f      	movs	r1, #15
 80018b2:	f06f 0001 	mvn.w	r0, #1
 80018b6:	f005 fe31 	bl	800751c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <HAL_CRC_MspInit+0x3c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10d      	bne.n	80018f6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_CRC_MspInit+0x40>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_CRC_MspInit+0x40>)
 80018e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_CRC_MspInit+0x40>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023000 	.word	0x40023000
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_DMA2D_MspInit+0x48>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d115      	bne.n	800194a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_DMA2D_MspInit+0x4c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <HAL_DMA2D_MspInit+0x4c>)
 8001928:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_DMA2D_MspInit+0x4c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2105      	movs	r1, #5
 800193e:	205a      	movs	r0, #90	; 0x5a
 8001940:	f005 fdec 	bl	800751c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001944:	205a      	movs	r0, #90	; 0x5a
 8001946:	f005 fe05 	bl	8007554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	4002b000 	.word	0x4002b000
 8001958:	40023800 	.word	0x40023800

0800195c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a2f      	ldr	r2, [pc, #188]	; (8001a38 <HAL_I2C_MspInit+0xdc>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d157      	bne.n	8001a2e <HAL_I2C_MspInit+0xd2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <HAL_I2C_MspInit+0xe0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a2d      	ldr	r2, [pc, #180]	; (8001a3c <HAL_I2C_MspInit+0xe0>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_I2C_MspInit+0xe0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <HAL_I2C_MspInit+0xe0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a26      	ldr	r2, [pc, #152]	; (8001a3c <HAL_I2C_MspInit+0xe0>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_I2C_MspInit+0xe0>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019bc:	2312      	movs	r3, #18
 80019be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019c8:	2304      	movs	r3, #4
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	481b      	ldr	r0, [pc, #108]	; (8001a40 <HAL_I2C_MspInit+0xe4>)
 80019d4:	f006 fada 	bl	8007f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019de:	2312      	movs	r3, #18
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019ea:	2304      	movs	r3, #4
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4813      	ldr	r0, [pc, #76]	; (8001a44 <HAL_I2C_MspInit+0xe8>)
 80019f6:	f006 fac9 	bl	8007f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_I2C_MspInit+0xe0>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <HAL_I2C_MspInit+0xe0>)
 8001a04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_I2C_MspInit+0xe0>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_I2C_MspInit+0xe0>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_I2C_MspInit+0xe0>)
 8001a1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a20:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_I2C_MspInit+0xe0>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <HAL_I2C_MspInit+0xe0>)
 8001a28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a2c:	6213      	str	r3, [r2, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	; 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40005c00 	.word	0x40005c00
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020800 	.word	0x40020800
 8001a44:	40020000 	.word	0x40020000

08001a48 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b09a      	sub	sp, #104	; 0x68
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	2230      	movs	r2, #48	; 0x30
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f025 f9e6 	bl	8026e3a <memset>
  if(hltdc->Instance==LTDC)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a85      	ldr	r2, [pc, #532]	; (8001c88 <HAL_LTDC_MspInit+0x240>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	f040 8102 	bne.w	8001c7e <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001a7e:	23c0      	movs	r3, #192	; 0xc0
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001a82:	2304      	movs	r3, #4
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a8a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a90:	4618      	mov	r0, r3
 8001a92:	f008 fd11 	bl	800a4b8 <HAL_RCCEx_PeriphCLKConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001a9c:	f7ff fee0 	bl	8001860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
 8001aa4:	4b79      	ldr	r3, [pc, #484]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	4a78      	ldr	r2, [pc, #480]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001aaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001aae:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab0:	4b76      	ldr	r3, [pc, #472]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ab8:	623b      	str	r3, [r7, #32]
 8001aba:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	4b72      	ldr	r3, [pc, #456]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	4a71      	ldr	r2, [pc, #452]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001ac6:	f043 0320 	orr.w	r3, r3, #32
 8001aca:	6313      	str	r3, [r2, #48]	; 0x30
 8001acc:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	4a6a      	ldr	r2, [pc, #424]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae8:	4b68      	ldr	r3, [pc, #416]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	4b64      	ldr	r3, [pc, #400]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4a63      	ldr	r2, [pc, #396]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001afe:	f043 0302 	orr.w	r3, r3, #2
 8001b02:	6313      	str	r3, [r2, #48]	; 0x30
 8001b04:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	4b5d      	ldr	r3, [pc, #372]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4a5c      	ldr	r2, [pc, #368]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b20:	4b5a      	ldr	r3, [pc, #360]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	4b56      	ldr	r3, [pc, #344]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	4a55      	ldr	r2, [pc, #340]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	4b4f      	ldr	r3, [pc, #316]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	4a4e      	ldr	r2, [pc, #312]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	6313      	str	r3, [r2, #48]	; 0x30
 8001b58:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_LTDC_MspInit+0x244>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b68:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b72:	2302      	movs	r3, #2
 8001b74:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b76:	230e      	movs	r3, #14
 8001b78:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4843      	ldr	r0, [pc, #268]	; (8001c90 <HAL_LTDC_MspInit+0x248>)
 8001b82:	f006 fa03 	bl	8007f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8001b86:	f641 0358 	movw	r3, #6232	; 0x1858
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b94:	2302      	movs	r3, #2
 8001b96:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b98:	230e      	movs	r3, #14
 8001b9a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	483c      	ldr	r0, [pc, #240]	; (8001c94 <HAL_LTDC_MspInit+0x24c>)
 8001ba4:	f006 f9f2 	bl	8007f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bb8:	2309      	movs	r3, #9
 8001bba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4835      	ldr	r0, [pc, #212]	; (8001c98 <HAL_LTDC_MspInit+0x250>)
 8001bc4:	f006 f9e2 	bl	8007f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001bc8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001bcc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bda:	230e      	movs	r3, #14
 8001bdc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001be2:	4619      	mov	r1, r3
 8001be4:	482c      	ldr	r0, [pc, #176]	; (8001c98 <HAL_LTDC_MspInit+0x250>)
 8001be6:	f006 f9d1 	bl	8007f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001bea:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001bee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bfc:	230e      	movs	r3, #14
 8001bfe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c04:	4619      	mov	r1, r3
 8001c06:	4825      	ldr	r0, [pc, #148]	; (8001c9c <HAL_LTDC_MspInit+0x254>)
 8001c08:	f006 f9c0 	bl	8007f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c0c:	23c0      	movs	r3, #192	; 0xc0
 8001c0e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c1c:	230e      	movs	r3, #14
 8001c1e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c24:	4619      	mov	r1, r3
 8001c26:	481e      	ldr	r0, [pc, #120]	; (8001ca0 <HAL_LTDC_MspInit+0x258>)
 8001c28:	f006 f9b0 	bl	8007f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c3c:	230e      	movs	r3, #14
 8001c3e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c44:	4619      	mov	r1, r3
 8001c46:	4817      	ldr	r0, [pc, #92]	; (8001ca4 <HAL_LTDC_MspInit+0x25c>)
 8001c48:	f006 f9a0 	bl	8007f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001c4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c50:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c5e:	2309      	movs	r3, #9
 8001c60:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c66:	4619      	mov	r1, r3
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <HAL_LTDC_MspInit+0x254>)
 8001c6a:	f006 f98f 	bl	8007f8c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2105      	movs	r1, #5
 8001c72:	2058      	movs	r0, #88	; 0x58
 8001c74:	f005 fc52 	bl	800751c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001c78:	2058      	movs	r0, #88	; 0x58
 8001c7a:	f005 fc6b 	bl	8007554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001c7e:	bf00      	nop
 8001c80:	3768      	adds	r7, #104	; 0x68
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40016800 	.word	0x40016800
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40021400 	.word	0x40021400
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40021800 	.word	0x40021800
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020c00 	.word	0x40020c00

08001ca8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <HAL_RNG_MspInit+0x48>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d115      	bne.n	8001ce6 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_RNG_MspInit+0x4c>)
 8001cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc2:	4a0c      	ldr	r2, [pc, #48]	; (8001cf4 <HAL_RNG_MspInit+0x4c>)
 8001cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc8:	6353      	str	r3, [r2, #52]	; 0x34
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_RNG_MspInit+0x4c>)
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2105      	movs	r1, #5
 8001cda:	2050      	movs	r0, #80	; 0x50
 8001cdc:	f005 fc1e 	bl	800751c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001ce0:	2050      	movs	r0, #80	; 0x50
 8001ce2:	f005 fc37 	bl	8007554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	50060800 	.word	0x50060800
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_SPI_MspInit+0x84>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12c      	bne.n	8001d74 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_SPI_MspInit+0x88>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <HAL_SPI_MspInit+0x88>)
 8001d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d28:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_SPI_MspInit+0x88>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_SPI_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <HAL_SPI_MspInit+0x88>)
 8001d40:	f043 0320 	orr.w	r3, r3, #32
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_SPI_MspInit+0x88>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d52:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001d64:	2305      	movs	r3, #5
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <HAL_SPI_MspInit+0x8c>)
 8001d70:	f006 f90c 	bl	8007f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	; 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40015000 	.word	0x40015000
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40021400 	.word	0x40021400

08001d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d98:	d115      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_TIM_Base_MspInit+0x48>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <HAL_TIM_Base_MspInit+0x48>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_TIM_Base_MspInit+0x48>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2105      	movs	r1, #5
 8001dba:	201c      	movs	r0, #28
 8001dbc:	f005 fbae 	bl	800751c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dc0:	201c      	movs	r0, #28
 8001dc2:	f005 fbc7 	bl	8007554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001de8:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <HAL_FMC_MspInit+0x104>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d16f      	bne.n	8001ed0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001df0:	4b39      	ldr	r3, [pc, #228]	; (8001ed8 <HAL_FMC_MspInit+0x104>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4b38      	ldr	r3, [pc, #224]	; (8001edc <HAL_FMC_MspInit+0x108>)
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfe:	4a37      	ldr	r2, [pc, #220]	; (8001edc <HAL_FMC_MspInit+0x108>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6393      	str	r3, [r2, #56]	; 0x38
 8001e06:	4b35      	ldr	r3, [pc, #212]	; (8001edc <HAL_FMC_MspInit+0x108>)
 8001e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e12:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001e16:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e20:	2303      	movs	r3, #3
 8001e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e24:	230c      	movs	r3, #12
 8001e26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	482c      	ldr	r0, [pc, #176]	; (8001ee0 <HAL_FMC_MspInit+0x10c>)
 8001e2e:	f006 f8ad 	bl	8007f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e32:	2301      	movs	r3, #1
 8001e34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e42:	230c      	movs	r3, #12
 8001e44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4826      	ldr	r0, [pc, #152]	; (8001ee4 <HAL_FMC_MspInit+0x110>)
 8001e4c:	f006 f89e 	bl	8007f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001e50:	f248 1333 	movw	r3, #33075	; 0x8133
 8001e54:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e62:	230c      	movs	r3, #12
 8001e64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	481f      	ldr	r0, [pc, #124]	; (8001ee8 <HAL_FMC_MspInit+0x114>)
 8001e6c:	f006 f88e 	bl	8007f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e70:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001e74:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e82:	230c      	movs	r3, #12
 8001e84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4818      	ldr	r0, [pc, #96]	; (8001eec <HAL_FMC_MspInit+0x118>)
 8001e8c:	f006 f87e 	bl	8007f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001e90:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001e94:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <HAL_FMC_MspInit+0x11c>)
 8001eac:	f006 f86e 	bl	8007f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001eb0:	2360      	movs	r3, #96	; 0x60
 8001eb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ec0:	230c      	movs	r3, #12
 8001ec2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480a      	ldr	r0, [pc, #40]	; (8001ef4 <HAL_FMC_MspInit+0x120>)
 8001eca:	f006 f85f 	bl	8007f8c <HAL_GPIO_Init>
 8001ece:	e000      	b.n	8001ed2 <HAL_FMC_MspInit+0xfe>
    return;
 8001ed0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200003d0 	.word	0x200003d0
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40021400 	.word	0x40021400
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40021800 	.word	0x40021800
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40020c00 	.word	0x40020c00
 8001ef4:	40020400 	.word	0x40020400

08001ef8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f00:	f7ff ff68 	bl	8001dd4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08e      	sub	sp, #56	; 0x38
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4b33      	ldr	r3, [pc, #204]	; (8001ff0 <HAL_InitTick+0xe4>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	4a32      	ldr	r2, [pc, #200]	; (8001ff0 <HAL_InitTick+0xe4>)
 8001f26:	f043 0310 	orr.w	r3, r3, #16
 8001f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2c:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <HAL_InitTick+0xe4>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f003 0310 	and.w	r3, r3, #16
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f38:	f107 0210 	add.w	r2, r7, #16
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f008 fa86 	bl	800a454 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d103      	bne.n	8001f5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f52:	f008 fa6b 	bl	800a42c <HAL_RCC_GetPCLK1Freq>
 8001f56:	6378      	str	r0, [r7, #52]	; 0x34
 8001f58:	e004      	b.n	8001f64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f5a:	f008 fa67 	bl	800a42c <HAL_RCC_GetPCLK1Freq>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f66:	4a23      	ldr	r2, [pc, #140]	; (8001ff4 <HAL_InitTick+0xe8>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	0c9b      	lsrs	r3, r3, #18
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_InitTick+0xec>)
 8001f74:	4a21      	ldr	r2, [pc, #132]	; (8001ffc <HAL_InitTick+0xf0>)
 8001f76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <HAL_InitTick+0xec>)
 8001f7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f80:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <HAL_InitTick+0xec>)
 8001f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <HAL_InitTick+0xec>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <HAL_InitTick+0xec>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_InitTick+0xec>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001f98:	4817      	ldr	r0, [pc, #92]	; (8001ff8 <HAL_InitTick+0xec>)
 8001f9a:	f009 fb71 	bl	800b680 <HAL_TIM_Base_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001fa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d11b      	bne.n	8001fe4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001fac:	4812      	ldr	r0, [pc, #72]	; (8001ff8 <HAL_InitTick+0xec>)
 8001fae:	f009 fbb7 	bl	800b720 <HAL_TIM_Base_Start_IT>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001fb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d111      	bne.n	8001fe4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fc0:	2036      	movs	r0, #54	; 0x36
 8001fc2:	f005 fac7 	bl	8007554 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b0f      	cmp	r3, #15
 8001fca:	d808      	bhi.n	8001fde <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	2036      	movs	r0, #54	; 0x36
 8001fd2:	f005 faa3 	bl	800751c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <HAL_InitTick+0xf4>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	e002      	b.n	8001fe4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fe4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3738      	adds	r7, #56	; 0x38
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	431bde83 	.word	0x431bde83
 8001ff8:	200003d4 	.word	0x200003d4
 8001ffc:	40001000 	.word	0x40001000
 8002000:	20000084 	.word	0x20000084

08002004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	e7fe      	b.n	800201c <MemManage_Handler+0x4>

0800201e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002022:	e7fe      	b.n	8002022 <BusFault_Handler+0x4>

08002024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <UsageFault_Handler+0x4>

0800202a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800203c:	2001      	movs	r0, #1
 800203e:	f006 f99d 	bl	800837c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <TIM2_IRQHandler+0x10>)
 800204e:	f009 fc06 	bl	800b85e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000338 	.word	0x20000338

0800205c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <TIM6_DAC_IRQHandler+0x10>)
 8002062:	f009 fbfc 	bl	800b85e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200003d4 	.word	0x200003d4

08002070 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <HASH_RNG_IRQHandler+0x10>)
 8002076:	f008 fc5f 	bl	800a938 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200002d0 	.word	0x200002d0

08002084 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <LTDC_IRQHandler+0x10>)
 800208a:	f007 fa99 	bl	80095c0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000228 	.word	0x20000228

08002098 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <DMA2D_IRQHandler+0x10>)
 800209e:	f005 facc 	bl	800763a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000194 	.word	0x20000194

080020ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
	return 1;
 80020b0:	2301      	movs	r3, #1
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_kill>:

int _kill(int pid, int sig)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020c6:	f024 ffb1 	bl	802702c <__errno>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2216      	movs	r2, #22
 80020ce:	601a      	str	r2, [r3, #0]
	return -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_exit>:

void _exit (int status)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ffe7 	bl	80020bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80020ee:	e7fe      	b.n	80020ee <_exit+0x12>

080020f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	e00a      	b.n	8002118 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002102:	f3af 8000 	nop.w
 8002106:	4601      	mov	r1, r0
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	b2ca      	uxtb	r2, r1
 8002110:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3301      	adds	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	dbf0      	blt.n	8002102 <_read+0x12>
	}

return len;
 8002120:	687b      	ldr	r3, [r7, #4]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e009      	b.n	8002150 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	60ba      	str	r2, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	dbf1      	blt.n	800213c <_write+0x12>
	}
	return len;
 8002158:	687b      	ldr	r3, [r7, #4]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_close>:

int _close(int file)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
	return -1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218a:	605a      	str	r2, [r3, #4]
	return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_isatty>:

int _isatty(int file)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	return 1;
 80021a2:	2301      	movs	r3, #1
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
	return 0;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <_sbrk+0x50>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <_sbrk+0x16>
		heap_end = &end;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <_sbrk+0x50>)
 80021de:	4a10      	ldr	r2, [pc, #64]	; (8002220 <_sbrk+0x54>)
 80021e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <_sbrk+0x50>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <_sbrk+0x50>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	466a      	mov	r2, sp
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d907      	bls.n	8002206 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80021f6:	f024 ff19 	bl	802702c <__errno>
 80021fa:	4603      	mov	r3, r0
 80021fc:	220c      	movs	r2, #12
 80021fe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
 8002204:	e006      	b.n	8002214 <_sbrk+0x48>
	}

	heap_end += incr;
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <_sbrk+0x50>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	4a03      	ldr	r2, [pc, #12]	; (800221c <_sbrk+0x50>)
 8002210:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002212:	68fb      	ldr	r3, [r7, #12]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	2000041c 	.word	0x2000041c
 8002220:	20015248 	.word	0x20015248

08002224 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8002236:	f000 fd6b 	bl	8002d10 <touchgfx_components_init>
  touchgfx_init();
 800223a:	f000 fcf5 	bl	8002c28 <touchgfx_init>
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}

08002242 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800224a:	f000 fd63 	bl	8002d14 <touchgfx_taskEntry>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8002256:	4770      	bx	lr

08002258 <_ZN20STM32TouchControllerD0Ev>:
 8002258:	b510      	push	{r4, lr}
 800225a:	2104      	movs	r1, #4
 800225c:	4604      	mov	r4, r0
 800225e:	f024 fbca 	bl	80269f6 <_ZdlPvj>
 8002262:	4620      	mov	r0, r4
 8002264:	bd10      	pop	{r4, pc}
	...

08002268 <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8002268:	b538      	push	{r3, r4, r5, lr}
    uint8_t ret = TS_ERROR;

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <_Z11BSP_TS_Inittt+0x34>)
    TsYBoundary = YSize;

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800226c:	4c0c      	ldr	r4, [pc, #48]	; (80022a0 <_Z11BSP_TS_Inittt+0x38>)
    TsXBoundary = XSize;
 800226e:	8018      	strh	r0, [r3, #0]
    TsYBoundary = YSize;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <_Z11BSP_TS_Inittt+0x3c>)
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002272:	2082      	movs	r0, #130	; 0x82
    TsYBoundary = YSize;
 8002274:	8019      	strh	r1, [r3, #0]
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002276:	6863      	ldr	r3, [r4, #4]
 8002278:	4798      	blx	r3
 800227a:	f640 0311 	movw	r3, #2065	; 0x811
 800227e:	4298      	cmp	r0, r3
 8002280:	d10a      	bne.n	8002298 <_Z11BSP_TS_Inittt+0x30>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 8002282:	4d09      	ldr	r5, [pc, #36]	; (80022a8 <_Z11BSP_TS_Inittt+0x40>)
    }

    if (ret == TS_OK)
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 8002284:	6823      	ldr	r3, [r4, #0]
        TsDrv = &stmpe811_ts_drv;
 8002286:	602c      	str	r4, [r5, #0]
        TsDrv->Init(TS_I2C_ADDRESS);
 8002288:	2082      	movs	r0, #130	; 0x82
 800228a:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	2082      	movs	r0, #130	; 0x82
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4798      	blx	r3
 8002294:	2000      	movs	r0, #0
    }

    return ret;
}
 8002296:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t ret = TS_ERROR;
 8002298:	2001      	movs	r0, #1
 800229a:	e7fc      	b.n	8002296 <_Z11BSP_TS_Inittt+0x2e>
 800229c:	20000420 	.word	0x20000420
 80022a0:	20000058 	.word	0x20000058
 80022a4:	20000422 	.word	0x20000422
 80022a8:	20000424 	.word	0x20000424

080022ac <_ZN20STM32TouchController4initEv>:
    BSP_TS_Init(240, 320);
 80022ac:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80022b0:	20f0      	movs	r0, #240	; 0xf0
 80022b2:	f7ff bfd9 	b.w	8002268 <_Z11BSP_TS_Inittt>
	...

080022b8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80022b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80022ba:	4d2d      	ldr	r5, [pc, #180]	; (8002370 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xb8>)
 80022bc:	682b      	ldr	r3, [r5, #0]
{
 80022be:	4604      	mov	r4, r0
    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2082      	movs	r0, #130	; 0x82
 80022c4:	4798      	blx	r3
 80022c6:	b280      	uxth	r0, r0
 80022c8:	8020      	strh	r0, [r4, #0]

    if (TsState->TouchDetected)
 80022ca:	2800      	cmp	r0, #0
 80022cc:	d043      	beq.n	8002356 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x9e>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80022ce:	682b      	ldr	r3, [r5, #0]
 80022d0:	f10d 0206 	add.w	r2, sp, #6
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	a901      	add	r1, sp, #4
 80022d8:	2082      	movs	r0, #130	; 0x82
 80022da:	4798      	blx	r3

        /* Y value first correction */
        y -= 360;
 80022dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80022e0:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 80022e4:	b292      	uxth	r2, r2

        /* Y value second correction */
        yr = y / 11;

        /* Return y position value */
        if (yr <= 0)
 80022e6:	2a0a      	cmp	r2, #10
 80022e8:	d937      	bls.n	800235a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xa2>
        yr = y / 11;
 80022ea:	230b      	movs	r3, #11
 80022ec:	fbb2 f2f3 	udiv	r2, r2, r3
        {
            yr = 0;
        }
        else if (yr > TsYBoundary)
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d901      	bls.n	80022fc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x44>
        {
            yr = TsYBoundary - 1;
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
        else
        {}
        y = yr;

        /* X value first correction */
        if (x <= 3000)
 80022fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002300:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002304:	428b      	cmp	r3, r1
 8002306:	d82a      	bhi.n	800235e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xa6>
        {
            x = 3870 - x;
 8002308:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800230c:	330e      	adds	r3, #14
 800230e:	b29b      	uxth	r3, r3
        {
            x = 3800 - x;
        }

        /* X value second correction */
        xr = x / 15;
 8002310:	210f      	movs	r1, #15
 8002312:	fbb3 f3f1 	udiv	r3, r3, r1
        /* Return X position value */
        if (xr <= 0)
        {
            xr = 0;
        }
        else if (xr > TsXBoundary)
 8002316:	4918      	ldr	r1, [pc, #96]	; (8002378 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xc0>)
 8002318:	8809      	ldrh	r1, [r1, #0]
 800231a:	428b      	cmp	r3, r1
 800231c:	d901      	bls.n	8002322 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x6a>
        {
            xr = TsXBoundary - 1;
 800231e:	3901      	subs	r1, #1
 8002320:	b28b      	uxth	r3, r1
        }
        else
        {}

        x = xr;
        xDiff = x > _x ? (x - _x) : (_x - x);
 8002322:	4e16      	ldr	r6, [pc, #88]	; (800237c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xc4>)
        yDiff = y > _y ? (y - _y) : (_y - y);
 8002324:	4d16      	ldr	r5, [pc, #88]	; (8002380 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xc8>)
        xDiff = x > _x ? (x - _x) : (_x - x);
 8002326:	6830      	ldr	r0, [r6, #0]
        yDiff = y > _y ? (y - _y) : (_y - y);
 8002328:	682f      	ldr	r7, [r5, #0]
        xDiff = x > _x ? (x - _x) : (_x - x);
 800232a:	4283      	cmp	r3, r0
 800232c:	b281      	uxth	r1, r0
 800232e:	bf8c      	ite	hi
 8002330:	1a59      	subhi	r1, r3, r1
 8002332:	1ac9      	subls	r1, r1, r3
        yDiff = y > _y ? (y - _y) : (_y - y);
 8002334:	b2b8      	uxth	r0, r7
 8002336:	42ba      	cmp	r2, r7
 8002338:	bf8c      	ite	hi
 800233a:	1a10      	subhi	r0, r2, r0
 800233c:	1a80      	subls	r0, r0, r2
        xDiff = x > _x ? (x - _x) : (_x - x);
 800233e:	b289      	uxth	r1, r1
        yDiff = y > _y ? (y - _y) : (_y - y);
 8002340:	b280      	uxth	r0, r0

        if (xDiff + yDiff > 5)
 8002342:	4401      	add	r1, r0
 8002344:	2905      	cmp	r1, #5
        {
            _x = x;
 8002346:	bfc8      	it	gt
 8002348:	6033      	strgt	r3, [r6, #0]
            _y = y;
        }

        /* Update the X position */
        TsState->X = _x;
 800234a:	6833      	ldr	r3, [r6, #0]
            _y = y;
 800234c:	bfc8      	it	gt
 800234e:	602a      	strgt	r2, [r5, #0]
        TsState->X = _x;
 8002350:	8063      	strh	r3, [r4, #2]

        /* Update the Y position */
        TsState->Y = _y;
 8002352:	682b      	ldr	r3, [r5, #0]
 8002354:	80a3      	strh	r3, [r4, #4]
    }
}
 8002356:	b003      	add	sp, #12
 8002358:	bdf0      	pop	{r4, r5, r6, r7, pc}
            yr = 0;
 800235a:	2200      	movs	r2, #0
 800235c:	e7ce      	b.n	80022fc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x44>
            x = 3800 - x;
 800235e:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8002362:	3308      	adds	r3, #8
 8002364:	b29b      	uxth	r3, r3
        if (xr <= 0)
 8002366:	2b0e      	cmp	r3, #14
 8002368:	d8d2      	bhi.n	8002310 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x58>
            xr = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	e7d9      	b.n	8002322 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x6a>
 800236e:	bf00      	nop
 8002370:	20000424 	.word	0x20000424
 8002374:	20000422 	.word	0x20000422
 8002378:	20000420 	.word	0x20000420
 800237c:	20000428 	.word	0x20000428
 8002380:	2000042c 	.word	0x2000042c

08002384 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8002384:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BSP_TS_GetState(&state);
 8002386:	4668      	mov	r0, sp
{
 8002388:	460d      	mov	r5, r1
 800238a:	4614      	mov	r4, r2
    BSP_TS_GetState(&state);
 800238c:	f7ff ff94 	bl	80022b8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 8002390:	f8bd 0000 	ldrh.w	r0, [sp]
 8002394:	b130      	cbz	r0, 80023a4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>
        x = state.X;
 8002396:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800239a:	602b      	str	r3, [r5, #0]
        y = state.Y;
 800239c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80023a0:	6023      	str	r3, [r4, #0]
        return true;
 80023a2:	2001      	movs	r0, #1
}
 80023a4:	b003      	add	sp, #12
 80023a6:	bd30      	pop	{r4, r5, pc}

080023a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80023a8:	2803      	cmp	r0, #3
 80023aa:	d821      	bhi.n	80023f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 80023ac:	e8df f000 	tbb	[pc, r0]
 80023b0:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	fab2 f282 	clz	r2, r2
 80023bc:	0952      	lsrs	r2, r2, #5
 80023be:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80023c0:	480d      	ldr	r0, [pc, #52]	; (80023f8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 80023c2:	f005 bfa7 	b.w	8008314 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	fab2 f282 	clz	r2, r2
 80023ce:	0952      	lsrs	r2, r2, #5
 80023d0:	2108      	movs	r1, #8
 80023d2:	e7f5      	b.n	80023c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	fab2 f282 	clz	r2, r2
 80023dc:	0952      	lsrs	r2, r2, #5
 80023de:	2110      	movs	r1, #16
 80023e0:	e7ee      	b.n	80023c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80023e2:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	fab2 f282 	clz	r2, r2
 80023ea:	0952      	lsrs	r2, r2, #5
 80023ec:	2120      	movs	r1, #32
 80023ee:	e7e7      	b.n	80023c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000430 	.word	0x20000430
 80023f8:	40021000 	.word	0x40021000

080023fc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80023fc:	2803      	cmp	r0, #3
 80023fe:	d821      	bhi.n	8002444 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 8002400:	e8df f000 	tbb	[pc, r0]
 8002404:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	3a00      	subs	r2, #0
 800240e:	bf18      	it	ne
 8002410:	2201      	movne	r2, #1
 8002412:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8002414:	480d      	ldr	r0, [pc, #52]	; (800244c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8002416:	f005 bf7d 	b.w	8008314 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	3a00      	subs	r2, #0
 8002420:	bf18      	it	ne
 8002422:	2201      	movne	r2, #1
 8002424:	2108      	movs	r1, #8
 8002426:	e7f5      	b.n	8002414 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	3a00      	subs	r2, #0
 800242e:	bf18      	it	ne
 8002430:	2201      	movne	r2, #1
 8002432:	2110      	movs	r1, #16
 8002434:	e7ee      	b.n	8002414 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	3a00      	subs	r2, #0
 800243c:	bf18      	it	ne
 800243e:	2201      	movne	r2, #1
 8002440:	2120      	movs	r1, #32
 8002442:	e7e7      	b.n	8002414 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000430 	.word	0x20000430
 800244c:	40021000 	.word	0x40021000

08002450 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8002450:	2803      	cmp	r0, #3
 8002452:	d80d      	bhi.n	8002470 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 8002454:	e8df f000 	tbb	[pc, r0]
 8002458:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800245c:	2104      	movs	r1, #4
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800245e:	4805      	ldr	r0, [pc, #20]	; (8002474 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 8002460:	f005 bf71 	b.w	8008346 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8002464:	2108      	movs	r1, #8
 8002466:	e7fa      	b.n	800245e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8002468:	2110      	movs	r1, #16
 800246a:	e7f8      	b.n	800245e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800246c:	2120      	movs	r1, #32
 800246e:	e7f6      	b.n	800245e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000

08002478 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8002478:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 800247a:	2803      	cmp	r0, #3
 800247c:	d811      	bhi.n	80024a2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 800247e:	e8df f000 	tbb	[pc, r0]
 8002482:	0a02      	.short	0x0a02
 8002484:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8002486:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8002488:	4807      	ldr	r0, [pc, #28]	; (80024a8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 800248a:	f005 ff2b 	bl	80082e4 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800248e:	1e43      	subs	r3, r0, #1
 8002490:	4258      	negs	r0, r3
 8002492:	4158      	adcs	r0, r3
 8002494:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8002496:	2108      	movs	r1, #8
 8002498:	e7f6      	b.n	8002488 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800249a:	2110      	movs	r1, #16
 800249c:	e7f4      	b.n	8002488 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800249e:	2120      	movs	r1, #32
 80024a0:	e7f2      	b.n	8002488 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 80024a2:	2000      	movs	r0, #0
 80024a4:	e7f3      	b.n	800248e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000

080024ac <_ZN8touchgfx4GPIO4initEv>:
{
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	4d08      	ldr	r5, [pc, #32]	; (80024d0 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 80024b0:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 80024b2:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 80024b4:	b2e0      	uxtb	r0, r4
 80024b6:	f7ff ffdf 	bl	8002478 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 80024ba:	b118      	cbz	r0, 80024c4 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 80024c0:	bf18      	it	ne
 80024c2:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 80024c4:	3401      	adds	r4, #1
 80024c6:	2c05      	cmp	r4, #5
 80024c8:	f105 0504 	add.w	r5, r5, #4
 80024cc:	d1f2      	bne.n	80024b4 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 80024ce:	bd70      	pop	{r4, r5, r6, pc}
 80024d0:	20000430 	.word	0x20000430

080024d4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80024d4:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80024d6:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
        displayOrientationChangeRequested = true;
 80024da:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    }
 80024de:	4770      	bx	lr

080024e0 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80024e0:	2000      	movs	r0, #0
 80024e2:	4770      	bx	lr

080024e4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80024e6:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80024e8:	3900      	subs	r1, #0
 80024ea:	bf18      	it	ne
 80024ec:	2101      	movne	r1, #1
 80024ee:	7019      	strb	r1, [r3, #0]
    }
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	2001460f 	.word	0x2001460f

080024f8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80024f8:	2000      	movs	r0, #0
 80024fa:	4770      	bx	lr

080024fc <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80024fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80024fe:	b10b      	cbz	r3, 8002504 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8002500:	4608      	mov	r0, r1
 8002502:	4718      	bx	r3
        }
    }
 8002504:	4770      	bx	lr

08002506 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8002506:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800250a:	4770      	bx	lr

0800250c <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 800250c:	6840      	ldr	r0, [r0, #4]
 800250e:	6803      	ldr	r3, [r0, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	4718      	bx	r3

08002514 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 8002514:	4770      	bx	lr

08002516 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 8002516:	4770      	bx	lr

08002518 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8002518:	4770      	bx	lr
	...

0800251c <_ZN11TouchGFXHAL10initializeEv>:
LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");
}

void TouchGFXHAL::initialize()
{
 800251c:	b510      	push	{r4, lr}
 800251e:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8002520:	f000 fce4 	bl	8002eec <_ZN20TouchGFXGeneratedHAL10initializeEv>
        buttonController = btnCtrl;
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <_ZN11TouchGFXHAL10initializeEv+0x1c>)
 8002526:	6163      	str	r3, [r4, #20]
    setButtonController(&bc);
    // Add animation storage
    setAnimationStorage((void*)animationStorage);
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	4904      	ldr	r1, [pc, #16]	; (800253c <_ZN11TouchGFXHAL10initializeEv+0x20>)
 800252c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002530:	4620      	mov	r0, r4
}
 8002532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setAnimationStorage((void*)animationStorage);
 8002536:	4718      	bx	r3
 8002538:	20000440 	.word	0x20000440
 800253c:	d0000000 	.word	0xd0000000

08002540 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8002540:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8002542:	6803      	ldr	r3, [r0, #0]
{
 8002544:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8002546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800254a:	4798      	blx	r3
    enableInterrupts();
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	4620      	mov	r0, r4
 8002550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002552:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8002554:	f000 f8f4 	bl	8002740 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	4620      	mov	r0, r4
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 8002560:	2029      	movs	r0, #41	; 0x29
 8002562:	f7ff f8f7 	bl	8001754 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8002566:	f000 f8eb 	bl	8002740 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	4620      	mov	r0, r4
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4798      	blx	r3
    for (;;)
 8002572:	e7f8      	b.n	8002566 <_ZN11TouchGFXHAL9taskEntryEv+0x26>

08002574 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8002574:	b510      	push	{r4, lr}
 8002576:	4604      	mov	r4, r0
        swapFrameBuffers();
 8002578:	f00e fade 	bl	8010b38 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	4620      	mov	r0, r4
 8002580:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8002584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8002588:	4718      	bx	r3

0800258a <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800258a:	f000 bca1 	b.w	8002ed0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

0800258e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800258e:	f000 bca5 	b.w	8002edc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08002592 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8002592:	f000 bcc9 	b.w	8002f28 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08002596 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8002596:	f000 bc77 	b.w	8002e88 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

0800259a <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800259a:	f000 bcd1 	b.w	8002f40 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

0800259e <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800259e:	f000 bcd9 	b.w	8002f54 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

080025a2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80025a2:	f000 bc7b 	b.w	8002e9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

080025a6 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80025a6:	f00d bd33 	b.w	8010010 <_ZN8touchgfx3HAL16flushFrameBufferEv>

080025aa <_ZN11TouchGFXHALD0Ev>:
 80025aa:	b510      	push	{r4, lr}
 80025ac:	217c      	movs	r1, #124	; 0x7c
 80025ae:	4604      	mov	r4, r0
 80025b0:	f024 fa21 	bl	80269f6 <_ZdlPvj>
 80025b4:	4620      	mov	r0, r4
 80025b6:	bd10      	pop	{r4, pc}

080025b8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 80025b8:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 80025bc:	b11b      	cbz	r3, 80025c6 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 80025be:	6840      	ldr	r0, [r0, #4]
 80025c0:	6803      	ldr	r3, [r0, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4718      	bx	r3
    }
 80025c6:	4618      	mov	r0, r3
 80025c8:	4770      	bx	lr
	...

080025cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 80025cc:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80025ce:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 80025d2:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
            if (DISPLAY_ROTATION == rotate0)
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 80025d8:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 80025da:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80025dc:	d009      	beq.n	80025f2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80025de:	b93a      	cbnz	r2, 80025f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80025e2:	490b      	ldr	r1, [pc, #44]	; (8002610 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80025e4:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 80025e6:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 80025e8:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80025ea:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 80025ec:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 80025ee:	701a      	strb	r2, [r3, #0]
    }
 80025f0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80025f2:	2a00      	cmp	r2, #0
 80025f4:	d0fc      	beq.n	80025f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80025f8:	4905      	ldr	r1, [pc, #20]	; (8002610 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80025fa:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80025fc:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80025fe:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002600:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8002602:	2200      	movs	r2, #0
 8002604:	e7f3      	b.n	80025ee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8002606:	bf00      	nop
 8002608:	20014608 	.word	0x20014608
 800260c:	20014604 	.word	0x20014604
 8002610:	20014606 	.word	0x20014606

08002614 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	460d      	mov	r5, r1
 8002618:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800261a:	b935      	cbnz	r5, 800262a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8002620:	480a      	ldr	r0, [pc, #40]	; (800264c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8002622:	f240 21d2 	movw	r1, #722	; 0x2d2
 8002626:	f024 fa15 	bl	8026a54 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800262a:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8002630:	3a00      	subs	r2, #0
 8002632:	bf18      	it	ne
 8002634:	2201      	movne	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002638:	6803      	ldr	r3, [r0, #0]
    }
 800263a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 800263e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002642:	4718      	bx	r3
 8002644:	08027c50 	.word	0x08027c50
 8002648:	08027c88 	.word	0x08027c88
 800264c:	08027cd6 	.word	0x08027cd6
 8002650:	2001460e 	.word	0x2001460e

08002654 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002654:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	428b      	cmp	r3, r1
 800265c:	d803      	bhi.n	8002666 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	4293      	cmp	r3, r2
 8002664:	d905      	bls.n	8002672 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 800266a:	4808      	ldr	r0, [pc, #32]	; (800268c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800266c:	219e      	movs	r1, #158	; 0x9e
 800266e:	f024 f9f1 	bl	8026a54 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002674:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002678:	801a      	strh	r2, [r3, #0]
    }
 800267a:	bd08      	pop	{r3, pc}
 800267c:	20014604 	.word	0x20014604
 8002680:	20014606 	.word	0x20014606
 8002684:	08027d1b 	.word	0x08027d1b
 8002688:	08027d7e 	.word	0x08027d7e
 800268c:	08027cd6 	.word	0x08027cd6
 8002690:	2001460a 	.word	0x2001460a
 8002694:	2001460c 	.word	0x2001460c

08002698 <_GLOBAL__sub_I_bc>:
 8002698:	4b01      	ldr	r3, [pc, #4]	; (80026a0 <_GLOBAL__sub_I_bc+0x8>)
 800269a:	4a02      	ldr	r2, [pc, #8]	; (80026a4 <_GLOBAL__sub_I_bc+0xc>)
 800269c:	601a      	str	r2, [r3, #0]
}
 800269e:	4770      	bx	lr
 80026a0:	20000440 	.word	0x20000440
 80026a4:	08027bdc 	.word	0x08027bdc

080026a8 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80026a8:	2101      	movs	r1, #1
{
 80026aa:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80026ac:	2200      	movs	r2, #0
 80026ae:	4608      	mov	r0, r1
 80026b0:	f009 feeb 	bl	800c48a <osSemaphoreNew>
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 80026b6:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80026b8:	b928      	cbnz	r0, 80026c6 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 80026bc:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80026be:	2128      	movs	r1, #40	; 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80026c0:	480a      	ldr	r0, [pc, #40]	; (80026ec <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80026c2:	f024 f9c7 	bl	8026a54 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2104      	movs	r1, #4
 80026ca:	2001      	movs	r0, #1
 80026cc:	f009 fffc 	bl	800c6c8 <osMessageQueueNew>
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80026d2:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80026d4:	b918      	cbnz	r0, 80026de <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80026d8:	4a03      	ldr	r2, [pc, #12]	; (80026e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	e7f0      	b.n	80026c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80026de:	bd08      	pop	{r3, pc}
 80026e0:	2000044c 	.word	0x2000044c
 80026e4:	08027e9c 	.word	0x08027e9c
 80026e8:	08027ee5 	.word	0x08027ee5
 80026ec:	08027f14 	.word	0x08027f14
 80026f0:	20000448 	.word	0x20000448
 80026f4:	08027f61 	.word	0x08027f61

080026f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80026f8:	4b02      	ldr	r3, [pc, #8]	; (8002704 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80026fa:	f04f 31ff 	mov.w	r1, #4294967295
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	f009 bf4c 	b.w	800c59c <osSemaphoreAcquire>
 8002704:	2000044c 	.word	0x2000044c

08002708 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002708:	4b01      	ldr	r3, [pc, #4]	; (8002710 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	f009 bf98 	b.w	800c640 <osSemaphoreRelease>
 8002710:	2000044c 	.word	0x2000044c

08002714 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002714:	4b02      	ldr	r3, [pc, #8]	; (8002720 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002716:	2100      	movs	r1, #0
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	f009 bf3f 	b.w	800c59c <osSemaphoreAcquire>
 800271e:	bf00      	nop
 8002720:	2000044c 	.word	0x2000044c

08002724 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8002724:	f7ff bff0 	b.w	8002708 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002728 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002728:	4803      	ldr	r0, [pc, #12]	; (8002738 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 800272a:	4904      	ldr	r1, [pc, #16]	; (800273c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800272c:	6800      	ldr	r0, [r0, #0]
 800272e:	2300      	movs	r3, #0
 8002730:	461a      	mov	r2, r3
 8002732:	f00a b83d 	b.w	800c7b0 <osMessageQueuePut>
 8002736:	bf00      	nop
 8002738:	20000448 	.word	0x20000448
 800273c:	20000014 	.word	0x20000014

08002740 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002740:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002742:	4c08      	ldr	r4, [pc, #32]	; (8002764 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002744:	2300      	movs	r3, #0
 8002746:	461a      	mov	r2, r3
 8002748:	a901      	add	r1, sp, #4
 800274a:	6820      	ldr	r0, [r4, #0]
 800274c:	f00a f890 	bl	800c870 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002750:	6820      	ldr	r0, [r4, #0]
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	2200      	movs	r2, #0
 8002758:	a901      	add	r1, sp, #4
 800275a:	f00a f889 	bl	800c870 <osMessageQueueGet>
}
 800275e:	b002      	add	sp, #8
 8002760:	bd10      	pop	{r4, pc}
 8002762:	bf00      	nop
 8002764:	20000448 	.word	0x20000448

08002768 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8002768:	6803      	ldr	r3, [r0, #0]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	4718      	bx	r3

0800276e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 800276e:	2001      	movs	r0, #1
 8002770:	4770      	bx	lr

08002772 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8002772:	6803      	ldr	r3, [r0, #0]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	4718      	bx	r3

08002778 <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8002778:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <_ZN8STM32DMA10initializeEv+0x3c>)
 8002780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002782:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
 8002788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800278e:	9201      	str	r2, [sp, #4]
 8002790:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002798:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80027a0:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <_ZN8STM32DMA10initializeEv+0x40>)
 80027a4:	4a05      	ldr	r2, [pc, #20]	; (80027bc <_ZN8STM32DMA10initializeEv+0x44>)
 80027a6:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <_ZN8STM32DMA10initializeEv+0x48>)
 80027aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027ae:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80027b0:	b002      	add	sp, #8
 80027b2:	4770      	bx	lr
 80027b4:	40023800 	.word	0x40023800
 80027b8:	20000194 	.word	0x20000194
 80027bc:	08002805 	.word	0x08002805
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 80027c4:	f240 30ef 	movw	r0, #1007	; 0x3ef
 80027c8:	4770      	bx	lr
	...

080027cc <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <_ZN8STM32DMAD1Ev+0x18>)
 80027ce:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <_ZN8STM32DMAD1Ev+0x1c>)
 80027d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80027de:	f3bf 8f6f 	isb	sy
}
 80027e2:	4770      	bx	lr
 80027e4:	08028100 	.word	0x08028100
 80027e8:	e000e100 	.word	0xe000e100

080027ec <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80027ec:	b510      	push	{r4, lr}
 80027ee:	4604      	mov	r4, r0
}
 80027f0:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80027f4:	f7ff ffea 	bl	80027cc <_ZN8STM32DMAD1Ev>
 80027f8:	4620      	mov	r0, r4
 80027fa:	f024 f8fc 	bl	80269f6 <_ZdlPvj>
 80027fe:	4620      	mov	r0, r4
 8002800:	bd10      	pop	{r4, pc}
	...

08002804 <DMA2D_XferCpltCallback>:
        return instance;
 8002804:	4b02      	ldr	r3, [pc, #8]	; (8002810 <DMA2D_XferCpltCallback+0xc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800280a:	6803      	ldr	r3, [r0, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	4718      	bx	r3
 8002810:	20014610 	.word	0x20014610

08002814 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002818:	4625      	mov	r5, r4
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <_ZN8STM32DMAC1Ev+0x30>)
 800281c:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800281e:	2600      	movs	r6, #0
 8002820:	6060      	str	r0, [r4, #4]
 8002822:	7226      	strb	r6, [r4, #8]
 8002824:	7266      	strb	r6, [r4, #9]
 8002826:	f845 3b20 	str.w	r3, [r5], #32
 800282a:	2260      	movs	r2, #96	; 0x60
 800282c:	4629      	mov	r1, r5
 800282e:	f00e fadb 	bl	8010de8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002832:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8002836:	60ee      	str	r6, [r5, #12]
 8002838:	3524      	adds	r5, #36	; 0x24
 800283a:	42ab      	cmp	r3, r5
 800283c:	d1fb      	bne.n	8002836 <_ZN8STM32DMAC1Ev+0x22>
}
 800283e:	4620      	mov	r0, r4
 8002840:	bd70      	pop	{r4, r5, r6, pc}
 8002842:	bf00      	nop
 8002844:	08028100 	.word	0x08028100

08002848 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002848:	b508      	push	{r3, lr}
    switch (format)
 800284a:	290b      	cmp	r1, #11
 800284c:	d80b      	bhi.n	8002866 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 800284e:	e8df f001 	tbb	[pc, r1]
 8002852:	0612      	.short	0x0612
 8002854:	0a0a0a10 	.word	0x0a0a0a10
 8002858:	0808080a 	.word	0x0808080a
 800285c:	0808      	.short	0x0808
 800285e:	2001      	movs	r0, #1
}
 8002860:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002862:	2005      	movs	r0, #5
        break;
 8002864:	e7fc      	b.n	8002860 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002868:	4a05      	ldr	r2, [pc, #20]	; (8002880 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800286a:	4806      	ldr	r0, [pc, #24]	; (8002884 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 800286c:	2165      	movs	r1, #101	; 0x65
 800286e:	f024 f8f1 	bl	8026a54 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002872:	2000      	movs	r0, #0
 8002874:	e7f4      	b.n	8002860 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002876:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002878:	e7f2      	b.n	8002860 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800287a:	bf00      	nop
 800287c:	08027fa3 	.word	0x08027fa3
 8002880:	08027fbe 	.word	0x08027fbe
 8002884:	08028008 	.word	0x08028008

08002888 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002888:	b508      	push	{r3, lr}
    switch (format)
 800288a:	290a      	cmp	r1, #10
 800288c:	d809      	bhi.n	80028a2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 800288e:	e8df f001 	tbb	[pc, r1]
 8002892:	0610      	.short	0x0610
 8002894:	0808080e 	.word	0x0808080e
 8002898:	06060608 	.word	0x06060608
 800289c:	06          	.byte	0x06
 800289d:	00          	.byte	0x00
 800289e:	2001      	movs	r0, #1
}
 80028a0:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 80028a4:	4a05      	ldr	r2, [pc, #20]	; (80028bc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 80028a6:	4806      	ldr	r0, [pc, #24]	; (80028c0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 80028a8:	2186      	movs	r1, #134	; 0x86
 80028aa:	f024 f8d3 	bl	8026a54 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80028ae:	2000      	movs	r0, #0
 80028b0:	e7f6      	b.n	80028a0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80028b2:	2002      	movs	r0, #2
    return dma2dColorMode;
 80028b4:	e7f4      	b.n	80028a0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 80028b6:	bf00      	nop
 80028b8:	08027fa3 	.word	0x08027fa3
 80028bc:	08028053 	.word	0x08028053
 80028c0:	08028008 	.word	0x08028008

080028c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80028c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80028c8:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 80028cc:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80028ce:	4641      	mov	r1, r8
{
 80028d0:	4607      	mov	r7, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80028d2:	f7ff ffb9 	bl	8002848 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80028d6:	f894 901e 	ldrb.w	r9, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80028da:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80028dc:	4649      	mov	r1, r9
 80028de:	4638      	mov	r0, r7
 80028e0:	f7ff ffb2 	bl	8002848 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80028e4:	4649      	mov	r1, r9
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80028e6:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80028e8:	4638      	mov	r0, r7
 80028ea:	f7ff ffcd 	bl	8002888 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80028ee:	8aa1      	ldrh	r1, [r4, #20]
 80028f0:	8b62      	ldrh	r2, [r4, #26]
 80028f2:	4b43      	ldr	r3, [pc, #268]	; (8002a00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80028f4:	1a52      	subs	r2, r2, r1
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80028f8:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80028fa:	8b22      	ldrh	r2, [r4, #24]
 80028fc:	1a52      	subs	r2, r2, r1
 80028fe:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002900:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002902:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002904:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002908:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800290a:	6920      	ldr	r0, [r4, #16]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800290c:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800290e:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002910:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002912:	6827      	ldr	r7, [r4, #0]
 8002914:	2f80      	cmp	r7, #128	; 0x80
 8002916:	d028      	beq.n	800296a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8002918:	7f22      	ldrb	r2, [r4, #28]
 800291a:	d80f      	bhi.n	800293c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 800291c:	2f20      	cmp	r7, #32
 800291e:	d065      	beq.n	80029ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002920:	2f40      	cmp	r7, #64	; 0x40
 8002922:	d063      	beq.n	80029ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002924:	2f04      	cmp	r7, #4
 8002926:	d01a      	beq.n	800295e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002928:	4b35      	ldr	r3, [pc, #212]	; (8002a00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 800292a:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 800292e:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002932:	45c8      	cmp	r8, r9
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002934:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002936:	d05f      	beq.n	80029f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002938:	4a32      	ldr	r2, [pc, #200]	; (8002a04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 800293a:	e044      	b.n	80029c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
    switch (blitOp.operation)
 800293c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8002940:	d004      	beq.n	800294c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x88>
 8002942:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8002946:	d1ef      	bne.n	8002928 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x64>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002948:	492f      	ldr	r1, [pc, #188]	; (8002a08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 800294a:	e000      	b.n	800294e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800294c:	492f      	ldr	r1, [pc, #188]	; (8002a0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800294e:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 8002952:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8002954:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002956:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002958:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800295a:	6158      	str	r0, [r3, #20]
 800295c:	e032      	b.n	80029c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800295e:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8002962:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002966:	61da      	str	r2, [r3, #28]
 8002968:	e7f6      	b.n	8002958 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800296a:	68a7      	ldr	r7, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800296c:	1d3a      	adds	r2, r7, #4
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002970:	7f21      	ldrb	r1, [r4, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 8002972:	783a      	ldrb	r2, [r7, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002974:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
 8002978:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 800297c:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800297e:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002980:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8002982:	b142      	cbz	r2, 8002996 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8002984:	2a01      	cmp	r2, #1
 8002986:	d021      	beq.n	80029cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x108>
                assert(0 && "Unsupported format");
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 800298a:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 800298c:	4822      	ldr	r0, [pc, #136]	; (8002a18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 800298e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002992:	f024 f85f 	bl	8026a54 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002996:	69da      	ldr	r2, [r3, #28]
 8002998:	8879      	ldrh	r1, [r7, #2]
 800299a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800299e:	3901      	subs	r1, #1
 80029a0:	f022 0210 	bic.w	r2, r2, #16
 80029a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029a8:	61da      	str	r2, [r3, #28]
            bool blend = true;
 80029aa:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80029ac:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	f042 0220 	orr.w	r2, r2, #32
 80029b4:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	0692      	lsls	r2, r2, #26
 80029ba:	d4fc      	bmi.n	80029b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80029bc:	2210      	movs	r2, #16
 80029be:	609a      	str	r2, [r3, #8]
            if (blend)
 80029c0:	2900      	cmp	r1, #0
 80029c2:	d0b9      	beq.n	8002938 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x74>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80029c4:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80029c6:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 80029c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	8878      	ldrh	r0, [r7, #2]
 80029d0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80029d4:	3801      	subs	r0, #1
 80029d6:	f022 0210 	bic.w	r2, r2, #16
 80029da:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
                if (blitOp.alpha == 255)
 80029de:	39ff      	subs	r1, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80029e0:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 80029e4:	bf18      	it	ne
 80029e6:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80029e8:	61da      	str	r2, [r3, #28]
                break;
 80029ea:	e7df      	b.n	80029ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80029ec:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80029f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80029f6:	e7b6      	b.n	8002966 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80029f8:	f240 2201 	movw	r2, #513	; 0x201
 80029fc:	e7e3      	b.n	80029c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
 80029fe:	bf00      	nop
 8002a00:	4002b000 	.word	0x4002b000
 8002a04:	00010201 	.word	0x00010201
 8002a08:	00020009 	.word	0x00020009
 8002a0c:	0002000a 	.word	0x0002000a
 8002a10:	0802809e 	.word	0x0802809e
 8002a14:	080280b8 	.word	0x080280b8
 8002a18:	08028008 	.word	0x08028008
 8002a1c:	00020201 	.word	0x00020201

08002a20 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002a20:	b538      	push	{r3, r4, r5, lr}
 8002a22:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002a24:	7f89      	ldrb	r1, [r1, #30]
 8002a26:	f7ff ff2f 	bl	8002888 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002a2a:	8aa5      	ldrh	r5, [r4, #20]
 8002a2c:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a30:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002a32:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002a34:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002a3a:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a3c:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002a3e:	1b52      	subs	r2, r2, r5
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002a42:	6825      	ldr	r5, [r4, #0]
 8002a44:	2d08      	cmp	r5, #8
 8002a46:	d10e      	bne.n	8002a66 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002a48:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002a4a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002a4c:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002a4e:	7f20      	ldrb	r0, [r4, #28]
 8002a50:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8002a52:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002a56:	61da      	str	r2, [r3, #28]
 8002a58:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002a5a:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002a5c:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a5e:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a60:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002a62:	601a      	str	r2, [r3, #0]
    }
}
 8002a64:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002a66:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002a68:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002a6a:	611a      	str	r2, [r3, #16]
 8002a6c:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002a6e:	0a0a      	lsrs	r2, r1, #8
 8002a70:	0948      	lsrs	r0, r1, #5
 8002a72:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8002a76:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8002a7a:	4302      	orrs	r2, r0
 8002a7c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8002a80:	430a      	orrs	r2, r1
 8002a82:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002a84:	4a03      	ldr	r2, [pc, #12]	; (8002a94 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8002a86:	e7ec      	b.n	8002a62 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002a88:	4002b000 	.word	0x4002b000
 8002a8c:	00010009 	.word	0x00010009
 8002a90:	00020201 	.word	0x00020201
 8002a94:	00030201 	.word	0x00030201

08002a98 <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	07d2      	lsls	r2, r2, #31
 8002a9e:	d4fc      	bmi.n	8002a9a <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002aa0:	2223      	movs	r2, #35	; 0x23
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	4002b000 	.word	0x4002b000

08002aac <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 8002aac:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002aae:	4c0f      	ldr	r4, [pc, #60]	; (8002aec <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x40>)
 8002ab0:	6825      	ldr	r5, [r4, #0]
 8002ab2:	07ed      	lsls	r5, r5, #31
 8002ab4:	d4fc      	bmi.n	8002ab0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ab6:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ab8:	0409      	lsls	r1, r1, #16
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002aba:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002abc:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8002ac0:	2502      	movs	r5, #2

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002ac2:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8002ac4:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ac6:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002ac8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 8002aca:	d00a      	beq.n	8002ae2 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x36>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002acc:	4908      	ldr	r1, [pc, #32]	; (8002af0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ace:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002ad0:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002ad4:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
        WRITE_REG(DMA2D->FGCOLR, color);
 8002ad8:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002ada:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002adc:	60e0      	str	r0, [r4, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002ade:	6023      	str	r3, [r4, #0]
    }
}
 8002ae0:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002ae2:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 8002ae4:	9b03      	ldr	r3, [sp, #12]
 8002ae6:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
 8002aea:	e7f8      	b.n	8002ade <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x32>
 8002aec:	4002b000 	.word	0x4002b000
 8002af0:	00010009 	.word	0x00010009
 8002af4:	00020001 	.word	0x00020001
 8002af8:	00030001 	.word	0x00030001

08002afc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002afc:	2001      	movs	r0, #1
 8002afe:	4770      	bx	lr

08002b00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002b00:	200c      	movs	r0, #12
 8002b02:	4770      	bx	lr

08002b04 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002b04:	230c      	movs	r3, #12
 8002b06:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002b0a:	3008      	adds	r0, #8
 8002b0c:	4770      	bx	lr

08002b0e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002b0e:	230c      	movs	r3, #12
 8002b10:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002b14:	3008      	adds	r0, #8
 8002b16:	4770      	bx	lr

08002b18 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen4ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002b18:	2001      	movs	r0, #1
 8002b1a:	4770      	bx	lr

08002b1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen4ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002b1c:	f242 1070 	movw	r0, #8560	; 0x2170
 8002b20:	4770      	bx	lr

08002b22 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen4ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002b22:	f242 1370 	movw	r3, #8560	; 0x2170
 8002b26:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002b2a:	3008      	adds	r0, #8
 8002b2c:	4770      	bx	lr

08002b2e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen4ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002b2e:	f242 1370 	movw	r3, #8560	; 0x2170
 8002b32:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002b36:	3008      	adds	r0, #8
 8002b38:	4770      	bx	lr

08002b3a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	4770      	bx	lr

08002b3e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002b3e:	2010      	movs	r0, #16
 8002b40:	4770      	bx	lr

08002b42 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002b42:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002b46:	3008      	adds	r0, #8
 8002b48:	4770      	bx	lr

08002b4a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002b4a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002b4e:	3008      	adds	r0, #8
 8002b50:	4770      	bx	lr

08002b52 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen3ScreenNoTransition();
 8002b52:	4608      	mov	r0, r1
 8002b54:	f001 ba1e 	b.w	8003f94 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>

08002b58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002b5c:	6003      	str	r3, [r0, #0]
 8002b5e:	4604      	mov	r4, r0
 8002b60:	f00c ffab 	bl	800faba <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002b64:	4620      	mov	r0, r4
 8002b66:	bd10      	pop	{r4, pc}
 8002b68:	080281b8 	.word	0x080281b8

08002b6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002b6c:	b510      	push	{r4, lr}
 8002b6e:	4604      	mov	r4, r0
 8002b70:	f7ff fff2 	bl	8002b58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002b74:	4620      	mov	r0, r4
 8002b76:	2114      	movs	r1, #20
 8002b78:	f023 ff3d 	bl	80269f6 <_ZdlPvj>
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	bd10      	pop	{r4, pc}

08002b80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen4ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002b80:	b510      	push	{r4, lr}
 8002b82:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen4ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002b84:	6003      	str	r3, [r0, #0]
 8002b86:	4604      	mov	r4, r0
 8002b88:	f00c ff97 	bl	800faba <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	bd10      	pop	{r4, pc}
 8002b90:	08028184 	.word	0x08028184

08002b94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen4ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002b94:	b510      	push	{r4, lr}
 8002b96:	4604      	mov	r4, r0
 8002b98:	f7ff fff2 	bl	8002b80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen4ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f242 1178 	movw	r1, #8568	; 0x2178
 8002ba2:	f023 ff28 	bl	80269f6 <_ZdlPvj>
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	bd10      	pop	{r4, pc}
	...

08002bac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002bac:	b510      	push	{r4, lr}
 8002bae:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002bb0:	6003      	str	r3, [r0, #0]
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	f00c ff81 	bl	800faba <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002bb8:	4620      	mov	r0, r4
 8002bba:	bd10      	pop	{r4, pc}
 8002bbc:	08028150 	.word	0x08028150

08002bc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002bc0:	b510      	push	{r4, lr}
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	f7ff fff2 	bl	8002bac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002bc8:	4620      	mov	r0, r4
 8002bca:	2118      	movs	r1, #24
 8002bcc:	f023 ff13 	bl	80269f6 <_ZdlPvj>
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	bd10      	pop	{r4, pc}

08002bd4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002bd4:	b510      	push	{r4, lr}
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <_ZN12FrontendHeapD1Ev+0x28>)
 8002bd8:	6003      	str	r3, [r0, #0]
 8002bda:	4604      	mov	r4, r0
 8002bdc:	f500 5006 	add.w	r0, r0, #8576	; 0x2180
 8002be0:	3024      	adds	r0, #36	; 0x24
 8002be2:	f7ff ffb9 	bl	8002b58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002be6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002bea:	f7ff ffc9 	bl	8002b80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen4ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002bee:	f104 0014 	add.w	r0, r4, #20
 8002bf2:	f7ff ffdb 	bl	8002bac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen4PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	bd10      	pop	{r4, pc}
 8002bfa:	bf00      	nop
 8002bfc:	080281ec 	.word	0x080281ec

08002c00 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002c00:	b508      	push	{r3, lr}
 8002c02:	4802      	ldr	r0, [pc, #8]	; (8002c0c <__tcf_0+0xc>)
 8002c04:	f7ff ffe6 	bl	8002bd4 <_ZN12FrontendHeapD1Ev>
 8002c08:	bd08      	pop	{r3, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000454 	.word	0x20000454

08002c10 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002c10:	b510      	push	{r4, lr}
 8002c12:	4604      	mov	r4, r0
 8002c14:	f7ff ffde 	bl	8002bd4 <_ZN12FrontendHeapD1Ev>
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f242 3118 	movw	r1, #8984	; 0x2318
 8002c1e:	f023 feea 	bl	80269f6 <_ZdlPvj>
 8002c22:	4620      	mov	r0, r4
 8002c24:	bd10      	pop	{r4, pc}
	...

08002c28 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8002c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002c2c:	f000 fa3e 	bl	80030ac <_ZN14BitmapDatabase11getInstanceEv>
 8002c30:	4605      	mov	r5, r0
 8002c32:	f000 fa3f 	bl	80030b4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002c36:	2400      	movs	r4, #0
 8002c38:	4601      	mov	r1, r0
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	4622      	mov	r2, r4
 8002c40:	9400      	str	r4, [sp, #0]
 8002c42:	f015 ff61 	bl	8018b08 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <touchgfx_init+0xb8>)
 8002c48:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <touchgfx_init+0xbc>)
        static FrontendHeap instance;
 8002c4a:	4d27      	ldr	r5, [pc, #156]	; (8002ce8 <touchgfx_init+0xc0>)
 8002c4c:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f003 fd7a 	bl	8006748 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002c54:	4825      	ldr	r0, [pc, #148]	; (8002cec <touchgfx_init+0xc4>)
 8002c56:	f015 febf 	bl	80189d8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002c5a:	682b      	ldr	r3, [r5, #0]
 8002c5c:	f3bf 8f5b 	dmb	ish
 8002c60:	07db      	lsls	r3, r3, #31
 8002c62:	d436      	bmi.n	8002cd2 <touchgfx_init+0xaa>
 8002c64:	4628      	mov	r0, r5
 8002c66:	f023 fec8 	bl	80269fa <__cxa_guard_acquire>
 8002c6a:	b390      	cbz	r0, 8002cd2 <touchgfx_init+0xaa>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8002c6c:	4c20      	ldr	r4, [pc, #128]	; (8002cf0 <touchgfx_init+0xc8>)
          screenStorage(scr),
          transitionStorage(tra),
 8002c6e:	4f21      	ldr	r7, [pc, #132]	; (8002cf4 <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002c70:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <touchgfx_init+0xd0>)
 8002c72:	6023      	str	r3, [r4, #0]
          frontendApplication(app)
 8002c74:	f107 0618 	add.w	r6, r7, #24
        : presenterStorage(pres),
 8002c78:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8002c7c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
        : presenterStorage(pres),
 8002c80:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8002c82:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8002c86:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8002c88:	6126      	str	r6, [r4, #16]
 8002c8a:	f00c ff17 	bl	800fabc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <touchgfx_init+0xd4>)
 8002c90:	6163      	str	r3, [r4, #20]
 8002c92:	4640      	mov	r0, r8
 8002c94:	f00c ff12 	bl	800fabc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <touchgfx_init+0xd8>)
 8002c9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c9c:	4638      	mov	r0, r7
 8002c9e:	f00c ff0d 	bl	800fabc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002ca2:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <touchgfx_init+0xdc>)
 8002ca8:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8002cac:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 8002cb0:	f003 fe16 	bl	80068e0 <_ZN5ModelC1Ev>
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	f107 0114 	add.w	r1, r7, #20
 8002cba:	4630      	mov	r0, r6
 8002cbc:	f003 fe06 	bl	80068cc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002cc0:	4630      	mov	r0, r6
 8002cc2:	f001 f967 	bl	8003f94 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002cc6:	4810      	ldr	r0, [pc, #64]	; (8002d08 <touchgfx_init+0xe0>)
 8002cc8:	f023 fee2 	bl	8026a90 <atexit>
 8002ccc:	4628      	mov	r0, r5
 8002cce:	f023 fea0 	bl	8026a12 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002cd2:	480e      	ldr	r0, [pc, #56]	; (8002d0c <touchgfx_init+0xe4>)
}
 8002cd4:	b002      	add	sp, #8
 8002cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002cda:	f7ff bc1f 	b.w	800251c <_ZN11TouchGFXHAL10initializeEv>
 8002cde:	bf00      	nop
 8002ce0:	20014674 	.word	0x20014674
 8002ce4:	2000358c 	.word	0x2000358c
 8002ce8:	20000450 	.word	0x20000450
 8002cec:	20000018 	.word	0x20000018
 8002cf0:	20000454 	.word	0x20000454
 8002cf4:	200025f8 	.word	0x200025f8
 8002cf8:	080281ec 	.word	0x080281ec
 8002cfc:	08028150 	.word	0x08028150
 8002d00:	08028184 	.word	0x08028184
 8002d04:	080281b8 	.word	0x080281b8
 8002d08:	08002c01 	.word	0x08002c01
 8002d0c:	20003510 	.word	0x20003510

08002d10 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8002d10:	4770      	bx	lr
	...

08002d14 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002d14:	4801      	ldr	r0, [pc, #4]	; (8002d1c <touchgfx_taskEntry+0x8>)
 8002d16:	f7ff bc13 	b.w	8002540 <_ZN11TouchGFXHAL9taskEntryEv>
 8002d1a:	bf00      	nop
 8002d1c:	20003510 	.word	0x20003510

08002d20 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002d20:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002d22:	4e22      	ldr	r6, [pc, #136]	; (8002dac <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 8002d24:	4c22      	ldr	r4, [pc, #136]	; (8002db0 <_GLOBAL__sub_I_touchgfx_init+0x90>)
static LCD16bpp display;
 8002d26:	4d23      	ldr	r5, [pc, #140]	; (8002db4 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002d2a:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002d2c:	4630      	mov	r0, r6
 8002d2e:	f7ff fd71 	bl	8002814 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002d32:	4628      	mov	r0, r5
 8002d34:	f01a f9b4 	bl	801d0a0 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 8002d38:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <_GLOBAL__sub_I_touchgfx_init+0x9c>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002d3a:	4821      	ldr	r0, [pc, #132]	; (8002dc0 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
          touchController(touchCtrl),
 8002d3c:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 8002d3e:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002d40:	f44f 7180 	mov.w	r1, #256	; 0x100
          auxiliaryLCD(0),
 8002d44:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
          touchSampleRate(1),
 8002d48:	491e      	ldr	r1, [pc, #120]	; (8002dc4 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002d4a:	861a      	strh	r2, [r3, #48]	; 0x30
          vSyncCompensationEnabled(false),
 8002d4c:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002d50:	491d      	ldr	r1, [pc, #116]	; (8002dc8 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002d52:	6799      	str	r1, [r3, #120]	; 0x78
        instance = this;
 8002d54:	491d      	ldr	r1, [pc, #116]	; (8002dcc <_GLOBAL__sub_I_touchgfx_init+0xac>)
          useAuxiliaryLCD(false),
 8002d56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        instance = this;
 8002d5a:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002d5c:	21f0      	movs	r1, #240	; 0xf0
 8002d5e:	8001      	strh	r1, [r0, #0]
 8002d60:	481b      	ldr	r0, [pc, #108]	; (8002dd0 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          lastY(0),
 8002d62:	665a      	str	r2, [r3, #100]	; 0x64
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002d64:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002d66:	481b      	ldr	r0, [pc, #108]	; (8002dd4 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          updateMCULoad(0),
 8002d68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002d6c:	f44f 71a0 	mov.w	r1, #320	; 0x140
          buttonController(0),
 8002d70:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002d74:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002d78:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002d7c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
          frameBuffer0(0),
 8002d80:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
 8002d84:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8002d88:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
          lastX(0),
 8002d8c:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
          cc_begin(0),
 8002d90:	675a      	str	r2, [r3, #116]	; 0x74
          lcdRef(display),
 8002d92:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002d96:	8001      	strh	r1, [r0, #0]
 8002d98:	480f      	ldr	r0, [pc, #60]	; (8002dd8 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 8002d9a:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002d9c:	490f      	ldr	r1, [pc, #60]	; (8002ddc <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002d9e:	700a      	strb	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002da6:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	bd70      	pop	{r4, r5, r6, pc}
 8002dac:	20002770 	.word	0x20002770
 8002db0:	2000276c 	.word	0x2000276c
 8002db4:	20003590 	.word	0x20003590
 8002db8:	08027c40 	.word	0x08027c40
 8002dbc:	20003510 	.word	0x20003510
 8002dc0:	20014604 	.word	0x20014604
 8002dc4:	01000001 	.word	0x01000001
 8002dc8:	01010000 	.word	0x01010000
 8002dcc:	20014610 	.word	0x20014610
 8002dd0:	2001460a 	.word	0x2001460a
 8002dd4:	20014606 	.word	0x20014606
 8002dd8:	2001460c 	.word	0x2001460c
 8002ddc:	20014608 	.word	0x20014608
 8002de0:	08027dcc 	.word	0x08027dcc

08002de4 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002de4:	4801      	ldr	r0, [pc, #4]	; (8002dec <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002de6:	f7ff bcf1 	b.w	80027cc <_ZN8STM32DMAD1Ev>
 8002dea:	bf00      	nop
 8002dec:	20002770 	.word	0x20002770

08002df0 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002df0:	2000      	movs	r0, #0
 8002df2:	4770      	bx	lr

08002df4 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002df4:	8081      	strh	r1, [r0, #4]
    }
 8002df6:	4770      	bx	lr

08002df8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002df8:	80c1      	strh	r1, [r0, #6]
    }
 8002dfa:	4770      	bx	lr

08002dfc <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002dfc:	8101      	strh	r1, [r0, #8]
    }
 8002dfe:	4770      	bx	lr

08002e00 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002e00:	8141      	strh	r1, [r0, #10]
    }
 8002e02:	4770      	bx	lr

08002e04 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002e04:	4770      	bx	lr

08002e06 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002e06:	4770      	bx	lr

08002e08 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002e08:	4770      	bx	lr

08002e0a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002e0a:	4770      	bx	lr

08002e0c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002e0c:	4770      	bx	lr

08002e0e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002e0e:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002e10:	88c4      	ldrh	r4, [r0, #6]
 8002e12:	6803      	ldr	r3, [r0, #0]
 8002e14:	1b12      	subs	r2, r2, r4
 8002e16:	8884      	ldrh	r4, [r0, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1a:	1b09      	subs	r1, r1, r4
 8002e1c:	b212      	sxth	r2, r2
    }
 8002e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002e22:	b209      	sxth	r1, r1
 8002e24:	4718      	bx	r3

08002e26 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e2a:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e30:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002e32:	6813      	ldr	r3, [r2, #0]
 8002e34:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002e36:	6010      	str	r0, [r2, #0]
    }
 8002e38:	4770      	bx	lr

08002e3a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002e3a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002e3e:	b11a      	cbz	r2, 8002e48 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002e40:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002e44:	b102      	cbz	r2, 8002e48 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002e46:	6018      	str	r0, [r3, #0]
        }
    }
 8002e48:	4770      	bx	lr

08002e4a <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	4770      	bx	lr

08002e4e <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8002e4e:	888b      	ldrh	r3, [r1, #4]
 8002e50:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8002e52:	2001      	movs	r0, #1
 8002e54:	4770      	bx	lr

08002e56 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8002e56:	4770      	bx	lr

08002e58 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002e58:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 8002e5c:	4770      	bx	lr

08002e5e <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8002e5e:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8002e62:	4770      	bx	lr

08002e64 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8002e64:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002e66:	2200      	movs	r2, #0
        return rect.width;
 8002e68:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002e6c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002e70:	8002      	strh	r2, [r0, #0]
 8002e72:	8042      	strh	r2, [r0, #2]
 8002e74:	8084      	strh	r4, [r0, #4]
 8002e76:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8002e78:	bd10      	pop	{r4, pc}

08002e7a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	8002      	strh	r2, [r0, #0]
 8002e7e:	8042      	strh	r2, [r0, #2]
 8002e80:	8082      	strh	r2, [r0, #4]
 8002e82:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8002e84:	4770      	bx	lr
	...

08002e88 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002e8a:	2290      	movs	r2, #144	; 0x90
 8002e8c:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002e90:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000e100 	.word	0xe000e100

08002e9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002e9c:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002e9e:	490a      	ldr	r1, [pc, #40]	; (8002ec8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002ea0:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002ea2:	480a      	ldr	r0, [pc, #40]	; (8002ecc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002eae:	6911      	ldr	r1, [r2, #16]
 8002eb0:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002eb4:	3901      	subs	r1, #1
 8002eb6:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002eba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002ec2:	4770      	bx	lr
 8002ec4:	40016800 	.word	0x40016800
 8002ec8:	20003616 	.word	0x20003616
 8002ecc:	20003614 	.word	0x20003614

08002ed0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002ed0:	4b01      	ldr	r3, [pc, #4]	; (8002ed8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002ed2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002ed6:	4770      	bx	lr
 8002ed8:	40016800 	.word	0x40016800

08002edc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002edc:	4b02      	ldr	r3, [pc, #8]	; (8002ee8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002ede:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002ee0:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ee6:	4770      	bx	lr
 8002ee8:	40016800 	.word	0x40016800

08002eec <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	4604      	mov	r4, r0
    HAL::initialize();
 8002ef0:	f00d f8e3 	bl	80100ba <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002ef8:	f012 fcce 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
 8002efc:	4601      	mov	r1, r0
 8002efe:	4620      	mov	r0, r4
 8002f00:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	4a05      	ldr	r2, [pc, #20]	; (8002f1c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8002f06:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	46ac      	mov	ip, r5
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002f14:	f5a2 3116 	sub.w	r1, r2, #153600	; 0x25800
 8002f18:	4760      	bx	ip
 8002f1a:	bf00      	nop
 8002f1c:	d004b000 	.word	0xd004b000

08002f20 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002f20:	f00d b8b2 	b.w	8010088 <_ZN8touchgfx3HAL10beginFrameEv>

08002f24 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 8002f24:	f00d b8bc 	b.w	80100a0 <_ZN8touchgfx3HAL8endFrameEv>

08002f28 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8002f28:	f00d b878 	b.w	801001c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002f2c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8002f2c:	f00d b9d9 	b.w	80102e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002f30 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002f30:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002f34:	b112      	cbz	r2, 8002f3c <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002f36:	6803      	ldr	r3, [r0, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	4718      	bx	r3
    }
 8002f3c:	4770      	bx	lr
	...

08002f40 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002f42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f4c:	609a      	str	r2, [r3, #8]
}
 8002f4e:	4770      	bx	lr
 8002f50:	e000e100 	.word	0xe000e100

08002f54 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8002f56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002f5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002f6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f72:	f3bf 8f6f 	isb	sy
}
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100

08002f7c <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8002f7c:	b570      	push	{r4, r5, r6, lr}
        : widgetWidth(0)
 8002f7e:	2300      	movs	r3, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002f80:	4e12      	ldr	r6, [pc, #72]	; (8002fcc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x50>)
 8002f82:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x54>)
 8002f86:	6003      	str	r3, [r0, #0]
 8002f88:	6833      	ldr	r3, [r6, #0]
 8002f8a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    AbstractPainterRGB565()
 8002f8e:	4605      	mov	r5, r0
 8002f90:	b10a      	cbz	r2, 8002f96 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1a>
 8002f92:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002f94:	b900      	cbnz	r0, 8002f98 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1c>
        return instance->lcdRef;
 8002f96:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002f98:	6803      	ldr	r3, [r0, #0]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	4798      	blx	r3
        return auxiliaryLCD;
 8002f9e:	6833      	ldr	r3, [r6, #0]
 8002fa0:	fab0 f480 	clz	r4, r0
 8002fa4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002fa6:	0964      	lsrs	r4, r4, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
 8002fa8:	b130      	cbz	r0, 8002fb8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8002faa:	6803      	ldr	r3, [r0, #0]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	4798      	blx	r3
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	bf08      	it	eq
 8002fb4:	f044 0401 	orreq.w	r4, r4, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8002fb8:	b92c      	cbnz	r4, 8002fc6 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x4a>
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x58>)
 8002fbc:	4a06      	ldr	r2, [pc, #24]	; (8002fd8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x5c>)
 8002fbe:	4807      	ldr	r0, [pc, #28]	; (8002fdc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x60>)
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	f023 fd47 	bl	8026a54 <__assert_func>
    }
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
 8002fca:	bf00      	nop
 8002fcc:	20014610 	.word	0x20014610
 8002fd0:	080282fc 	.word	0x080282fc
 8002fd4:	080281f8 	.word	0x080281f8
 8002fd8:	08028256 	.word	0x08028256
 8002fdc:	0802828f 	.word	0x0802828f

08002fe0 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8002fe0:	b510      	push	{r4, lr}
        return instance;
 8002fe2:	4c14      	ldr	r4, [pc, #80]	; (8003034 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	b323      	cbz	r3, 8003032 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_LTDC_LineEventCallback+0x58>)
 8002fea:	4a14      	ldr	r2, [pc, #80]	; (800303c <HAL_LTDC_LineEventCallback+0x5c>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	8811      	ldrh	r1, [r2, #0]
 8002ff0:	428b      	cmp	r3, r1
 8002ff2:	d113      	bne.n	800301c <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_LTDC_LineEventCallback+0x60>)
 8002ff6:	8819      	ldrh	r1, [r3, #0]
 8002ff8:	f006 fbd8 	bl	80097ac <HAL_LTDC_ProgramLineEvent>
 8002ffc:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002ffe:	f892 306a 	ldrb.w	r3, [r2, #106]	; 0x6a
 8003002:	3301      	adds	r3, #1
 8003004:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8003008:	f7ff fb8e 	bl	8002728 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800300c:	6820      	ldr	r0, [r4, #0]
 800300e:	f00d fd93 	bl	8010b38 <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8003012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8003016:	2000      	movs	r0, #0
 8003018:	f7ff b9c6 	b.w	80023a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800301c:	f006 fbc6 	bl	80097ac <HAL_LTDC_ProgramLineEvent>
        return instance;
 8003020:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8003022:	6803      	ldr	r3, [r0, #0]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	4798      	blx	r3
    }
 8003028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800302c:	2000      	movs	r0, #0
 800302e:	f7ff b9e5 	b.w	80023fc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8003032:	bd10      	pop	{r4, pc}
 8003034:	20014610 	.word	0x20014610
 8003038:	40016800 	.word	0x40016800
 800303c:	20003616 	.word	0x20003616
 8003040:	20003614 	.word	0x20003614

08003044 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_00 = 6; // verdanab_7_4bpp
    static const touchgfx::FontId SS = 7;            // verdana_7_4bpp
    static const uint16_t NUMBER_OF_FONTS = 8;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003044:	4770      	bx	lr

08003046 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003046:	b508      	push	{r3, lr}
    switch (typography)
 8003048:	2907      	cmp	r1, #7
 800304a:	d825      	bhi.n	8003098 <_ZN23ApplicationFontProvider7getFontEt+0x52>
 800304c:	e8df f001 	tbb	[pc, r1]
 8003050:	100c0804 	.word	0x100c0804
 8003054:	201c1814 	.word	0x201c1814
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003058:	f003 fbc2 	bl	80067e0 <_ZN17TypedTextDatabase8getFontsEv>
 800305c:	6800      	ldr	r0, [r0, #0]
        // verdana_7_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
    default:
        return 0;
    }
}
 800305e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003060:	f003 fbbe 	bl	80067e0 <_ZN17TypedTextDatabase8getFontsEv>
 8003064:	6840      	ldr	r0, [r0, #4]
 8003066:	e7fa      	b.n	800305e <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003068:	f003 fbba 	bl	80067e0 <_ZN17TypedTextDatabase8getFontsEv>
 800306c:	6880      	ldr	r0, [r0, #8]
 800306e:	e7f6      	b.n	800305e <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003070:	f003 fbb6 	bl	80067e0 <_ZN17TypedTextDatabase8getFontsEv>
 8003074:	68c0      	ldr	r0, [r0, #12]
 8003076:	e7f2      	b.n	800305e <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8003078:	f003 fbb2 	bl	80067e0 <_ZN17TypedTextDatabase8getFontsEv>
 800307c:	6900      	ldr	r0, [r0, #16]
 800307e:	e7ee      	b.n	800305e <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8003080:	f003 fbae 	bl	80067e0 <_ZN17TypedTextDatabase8getFontsEv>
 8003084:	6940      	ldr	r0, [r0, #20]
 8003086:	e7ea      	b.n	800305e <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 8003088:	f003 fbaa 	bl	80067e0 <_ZN17TypedTextDatabase8getFontsEv>
 800308c:	6980      	ldr	r0, [r0, #24]
 800308e:	e7e6      	b.n	800305e <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 8003090:	f003 fba6 	bl	80067e0 <_ZN17TypedTextDatabase8getFontsEv>
 8003094:	69c0      	ldr	r0, [r0, #28]
 8003096:	e7e2      	b.n	800305e <_ZN23ApplicationFontProvider7getFontEt+0x18>
    switch (typography)
 8003098:	2000      	movs	r0, #0
 800309a:	e7e0      	b.n	800305e <_ZN23ApplicationFontProvider7getFontEt+0x18>

0800309c <_ZN23ApplicationFontProviderD0Ev>:
 800309c:	b510      	push	{r4, lr}
 800309e:	2104      	movs	r1, #4
 80030a0:	4604      	mov	r4, r0
 80030a2:	f023 fca8 	bl	80269f6 <_ZdlPvj>
 80030a6:	4620      	mov	r0, r4
 80030a8:	bd10      	pop	{r4, pc}
	...

080030ac <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80030ac:	4800      	ldr	r0, [pc, #0]	; (80030b0 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80030ae:	4770      	bx	lr
 80030b0:	08028328 	.word	0x08028328

080030b4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80030b4:	2005      	movs	r0, #5
 80030b6:	4770      	bx	lr

080030b8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80030b8:	b513      	push	{r0, r1, r4, lr}
 80030ba:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80030bc:	b151      	cbz	r1, 80030d4 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80030be:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 80030c0:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80030c2:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80030c6:	aa01      	add	r2, sp, #4
 80030c8:	689c      	ldr	r4, [r3, #8]
 80030ca:	f10d 0303 	add.w	r3, sp, #3
 80030ce:	47a0      	blx	r4
        return glyph;
    }
 80030d0:	b002      	add	sp, #8
 80030d2:	bd10      	pop	{r4, pc}
            return 0;
 80030d4:	4608      	mov	r0, r1
 80030d6:	e7fb      	b.n	80030d0 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080030d8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80030d8:	89c0      	ldrh	r0, [r0, #14]
 80030da:	4770      	bx	lr

080030dc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80030dc:	8a00      	ldrh	r0, [r0, #16]
 80030de:	4770      	bx	lr

080030e0 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80030e0:	88c0      	ldrh	r0, [r0, #6]
 80030e2:	4770      	bx	lr

080030e4 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80030e4:	8880      	ldrh	r0, [r0, #4]
 80030e6:	4770      	bx	lr

080030e8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80030e8:	7a80      	ldrb	r0, [r0, #10]
    }
 80030ea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80030ee:	4770      	bx	lr

080030f0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80030f0:	7a80      	ldrb	r0, [r0, #10]
    }
 80030f2:	09c0      	lsrs	r0, r0, #7
 80030f4:	4770      	bx	lr

080030f6 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80030f6:	4770      	bx	lr

080030f8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80030f8:	4770      	bx	lr

080030fa <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80030fa:	4770      	bx	lr

080030fc <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80030fc:	4770      	bx	lr

080030fe <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80030fe:	4770      	bx	lr

08003100 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003100:	4770      	bx	lr

08003102 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8003102:	b530      	push	{r4, r5, lr}
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8003104:	6803      	ldr	r3, [r0, #0]
        rect.width = width;
 8003106:	8101      	strh	r1, [r0, #8]
    virtual void setWidth(int16_t width)
 8003108:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 800310a:	466d      	mov	r5, sp
 800310c:	4601      	mov	r1, r0
 800310e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    virtual void setWidth(int16_t width)
 8003112:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8003114:	4628      	mov	r0, r5
 8003116:	4798      	blx	r3
 8003118:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800311c:	343c      	adds	r4, #60	; 0x3c
 800311e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003122:	b005      	add	sp, #20
 8003124:	bd30      	pop	{r4, r5, pc}

08003126 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8003126:	b530      	push	{r4, r5, lr}
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8003128:	6803      	ldr	r3, [r0, #0]
        rect.height = height;
 800312a:	8141      	strh	r1, [r0, #10]
    virtual void setHeight(int16_t height)
 800312c:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 800312e:	466d      	mov	r5, sp
 8003130:	4601      	mov	r1, r0
 8003132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    virtual void setHeight(int16_t height)
 8003136:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8003138:	4628      	mov	r0, r5
 800313a:	4798      	blx	r3
 800313c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003140:	343c      	adds	r4, #60	; 0x3c
 8003142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003146:	b005      	add	sp, #20
 8003148:	bd30      	pop	{r4, r5, pc}

0800314a <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800314a:	2200      	movs	r2, #0
 800314c:	8002      	strh	r2, [r0, #0]
 800314e:	8042      	strh	r2, [r0, #2]
 8003150:	8082      	strh	r2, [r0, #4]
 8003152:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003154:	4770      	bx	lr

08003156 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003156:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 800315a:	4770      	bx	lr

0800315c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800315c:	b570      	push	{r4, r5, r6, lr}
    {
        setX(x);
 800315e:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003160:	4604      	mov	r4, r0
        setX(x);
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003164:	4615      	mov	r5, r2
        setX(x);
 8003166:	4798      	blx	r3
        setBaselineY(baselineY);
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	4629      	mov	r1, r5
 800316c:	4620      	mov	r0, r4
 800316e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 8003170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8003174:	4718      	bx	r3

08003176 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8003176:	2000      	movs	r0, #0
 8003178:	4770      	bx	lr

0800317a <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 800317a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800317c:	4770      	bx	lr

0800317e <_ZN20FlappyScreenViewBaseD1Ev>:
}

FlappyScreenViewBase::~FlappyScreenViewBase()
{

}
 800317e:	4770      	bx	lr

08003180 <_ZN20FlappyScreenViewBase11setupScreenEv>:

void FlappyScreenViewBase::setupScreen()
{

}
 8003180:	4770      	bx	lr

08003182 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8003182:	4770      	bx	lr

08003184 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003184:	b510      	push	{r4, lr}
    }
 8003186:	2108      	movs	r1, #8
    virtual ~TypedText()
 8003188:	4604      	mov	r4, r0
    }
 800318a:	f023 fc34 	bl	80269f6 <_ZdlPvj>
 800318e:	4620      	mov	r0, r4
 8003190:	bd10      	pop	{r4, pc}

08003192 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8003192:	b510      	push	{r4, lr}
 8003194:	214c      	movs	r1, #76	; 0x4c
 8003196:	4604      	mov	r4, r0
 8003198:	f023 fc2d 	bl	80269f6 <_ZdlPvj>
 800319c:	4620      	mov	r0, r4
 800319e:	bd10      	pop	{r4, pc}

080031a0 <_ZN20FlappyScreenViewBaseD0Ev>:
FlappyScreenViewBase::~FlappyScreenViewBase()
 80031a0:	b510      	push	{r4, lr}
}
 80031a2:	f44f 712c 	mov.w	r1, #688	; 0x2b0
FlappyScreenViewBase::~FlappyScreenViewBase()
 80031a6:	4604      	mov	r4, r0
}
 80031a8:	f023 fc25 	bl	80269f6 <_ZdlPvj>
 80031ac:	4620      	mov	r0, r4
 80031ae:	bd10      	pop	{r4, pc}

080031b0 <_ZN20FlappyScreenViewBase15handleTickEventEv>:

	}
}

void FlappyScreenViewBase::handleTickEvent()
{
 80031b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b4:	ed2d 8b06 	vpush	{d8-d10}

	if(timeCounter >= 3){
 80031b8:	4ac1      	ldr	r2, [pc, #772]	; (80034c0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x310>)
 80031ba:	7813      	ldrb	r3, [r2, #0]
 80031bc:	2b02      	cmp	r3, #2
{
 80031be:	b083      	sub	sp, #12
 80031c0:	4604      	mov	r4, r0
	if(timeCounter >= 3){
 80031c2:	d907      	bls.n	80031d4 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x24>
		autoMode = !autoMode;
 80031c4:	49bf      	ldr	r1, [pc, #764]	; (80034c4 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x314>)
 80031c6:	780b      	ldrb	r3, [r1, #0]
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	700b      	strb	r3, [r1, #0]
		timeCounter = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	7013      	strb	r3, [r2, #0]
	//uint16_t newAreaX = birdx + (0.075 * bird.getWidth());
	//uint16_t newAreaY = birdy + (0.075 * bird.getHeight());
	//uint16_t newAreaXLast = birdx + (0.925 * bird.getWidth());
	//uint16_t newAreaYLast = birdy + (0.925 * bird.getHeight());

	uint16_t newAreaX = birdx + (0.165 * bird.getWidth());
 80031d4:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
	uint16_t birdy = bird.getY();
 80031d8:	f8b4 5276 	ldrh.w	r5, [r4, #630]	; 0x276
        return rect.x;
 80031dc:	f9b4 a274 	ldrsh.w	sl, [r4, #628]	; 0x274
	uint16_t newAreaX = birdx + (0.165 * bird.getWidth());
 80031e0:	f7fd fad2 	bl	8000788 <__aeabi_i2d>
 80031e4:	4680      	mov	r8, r0
 80031e6:	f9b4 0278 	ldrsh.w	r0, [r4, #632]	; 0x278
 80031ea:	4689      	mov	r9, r1
 80031ec:	f7fd facc 	bl	8000788 <__aeabi_i2d>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	ec43 2b18 	vmov	d8, r2, r3
 80031f8:	a3ad      	add	r3, pc, #692	; (adr r3, 80034b0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x300>)
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	f7fd f847 	bl	8000290 <__aeabi_dmul>
 8003202:	4642      	mov	r2, r8
 8003204:	464b      	mov	r3, r9
 8003206:	f7fd f973 	bl	80004f0 <__adddf3>
 800320a:	f7fd fb27 	bl	800085c <__aeabi_d2uiz>
 800320e:	fa1f fb80 	uxth.w	fp, r0
	uint16_t newAreaY = birdy + (0.125 * bird.getHeight());
 8003212:	4628      	mov	r0, r5
 8003214:	f7fd fab8 	bl	8000788 <__aeabi_i2d>
 8003218:	4606      	mov	r6, r0
 800321a:	f9b4 027a 	ldrsh.w	r0, [r4, #634]	; 0x27a
 800321e:	460f      	mov	r7, r1
 8003220:	f7fd fab2 	bl	8000788 <__aeabi_i2d>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	ec43 2b19 	vmov	d9, r2, r3
 800322c:	2200      	movs	r2, #0
 800322e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003232:	f7fd f82d 	bl	8000290 <__aeabi_dmul>
 8003236:	4632      	mov	r2, r6
 8003238:	463b      	mov	r3, r7
 800323a:	f7fd f959 	bl	80004f0 <__adddf3>
 800323e:	f7fd fb0d 	bl	800085c <__aeabi_d2uiz>
 8003242:	b283      	uxth	r3, r0
 8003244:	9300      	str	r3, [sp, #0]
	uint16_t newAreaXLast = birdx + (0.835 * bird.getWidth());
 8003246:	ec51 0b18 	vmov	r0, r1, d8
 800324a:	a39b      	add	r3, pc, #620	; (adr r3, 80034b8 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x308>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f7fd f81e 	bl	8000290 <__aeabi_dmul>
 8003254:	4642      	mov	r2, r8
 8003256:	464b      	mov	r3, r9
 8003258:	f7fd f94a 	bl	80004f0 <__adddf3>
 800325c:	f7fd fafe 	bl	800085c <__aeabi_d2uiz>
	uint16_t newAreaYLast = birdy + (0.875 * bird.getHeight());
 8003260:	4b99      	ldr	r3, [pc, #612]	; (80034c8 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x318>)
 8003262:	2200      	movs	r2, #0
	uint16_t newAreaXLast = birdx + (0.835 * bird.getWidth());
 8003264:	fa1f f880 	uxth.w	r8, r0
	uint16_t newAreaYLast = birdy + (0.875 * bird.getHeight());
 8003268:	ec51 0b19 	vmov	r0, r1, d9
 800326c:	f7fd f810 	bl	8000290 <__aeabi_dmul>
 8003270:	463b      	mov	r3, r7
 8003272:	4632      	mov	r2, r6
 8003274:	f7fd f93c 	bl	80004f0 <__adddf3>
 8003278:	f7fd faf0 	bl	800085c <__aeabi_d2uiz>

	bird.moveTo(birdx,birdy+1);
 800327c:	f504 771c 	add.w	r7, r4, #624	; 0x270
 8003280:	1c6a      	adds	r2, r5, #1
	uint16_t newAreaYLast = birdy + (0.875 * bird.getHeight());
 8003282:	b286      	uxth	r6, r0
	bird.moveTo(birdx,birdy+1);
 8003284:	b212      	sxth	r2, r2
 8003286:	4651      	mov	r1, sl
 8003288:	4638      	mov	r0, r7
 800328a:	f7ff fdc0 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>

	if(birdy > 320 and birdy < 520){
 800328e:	f46f 73a0 	mvn.w	r3, #320	; 0x140
 8003292:	18eb      	adds	r3, r5, r3
 8003294:	2bc6      	cmp	r3, #198	; 0xc6
 8003296:	d803      	bhi.n	80032a0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0xf0>
    virtual void handleKeyEvent(uint8_t key);
    virtual void handleTickEvent();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003298:	f012 fafe 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
		application().gotoScreen2ScreenNoTransition();
 800329c:	f000 fe6a 	bl	8003f74 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
	}

	if(autoMode){
 80032a0:	4b88      	ldr	r3, [pc, #544]	; (80034c4 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x314>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	b373      	cbz	r3, 8003304 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x154>
		if(wallNum == 0 || wallNum == 4){
 80032a6:	4b89      	ldr	r3, [pc, #548]	; (80034cc <_ZN20FlappyScreenViewBase15handleTickEventEv+0x31c>)
 80032a8:	f993 3000 	ldrsb.w	r3, [r3]
 80032ac:	b133      	cbz	r3, 80032bc <_ZN20FlappyScreenViewBase15handleTickEventEv+0x10c>
 80032ae:	3b01      	subs	r3, #1
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d827      	bhi.n	8003304 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x154>
 80032b4:	e8df f003 	tbb	[pc, r3]
 80032b8:	02bcaf0e 	.word	0x02bcaf0e
			if(newAreaXLast >= wallUp4.getX() && newAreaX <= wallUp4.getX() + wallUp4.getWidth()){
 80032bc:	f9b4 20f4 	ldrsh.w	r2, [r4, #244]	; 0xf4
 80032c0:	4542      	cmp	r2, r8
 80032c2:	dc13      	bgt.n	80032ec <_ZN20FlappyScreenViewBase15handleTickEventEv+0x13c>
 80032c4:	f9b4 30f8 	ldrsh.w	r3, [r4, #248]	; 0xf8
 80032c8:	4413      	add	r3, r2
 80032ca:	459b      	cmp	fp, r3
 80032cc:	dc0e      	bgt.n	80032ec <_ZN20FlappyScreenViewBase15handleTickEventEv+0x13c>
			if(newAreaXLast >= wallUp3.getX() && newAreaX <= wallUp3.getX() + wallUp3.getWidth()){
				if(newAreaYLast >= wallDown3.getY() - 3){
					bird.moveTo(birdx,birdy - 25);
				}
			}
			else if(newAreaYLast >= wallDown4.getY() - 3){
 80032ce:	f9b4 31a6 	ldrsh.w	r3, [r4, #422]	; 0x1a6
 80032d2:	e00d      	b.n	80032f0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x140>
			if(newAreaXLast >= wallUp1.getX() && newAreaX <= wallUp1.getX() + wallUp1.getWidth()){
 80032d4:	f9b4 20c8 	ldrsh.w	r2, [r4, #200]	; 0xc8
 80032d8:	4542      	cmp	r2, r8
 80032da:	dc04      	bgt.n	80032e6 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x136>
 80032dc:	f9b4 30cc 	ldrsh.w	r3, [r4, #204]	; 0xcc
 80032e0:	4413      	add	r3, r2
 80032e2:	459b      	cmp	fp, r3
 80032e4:	dd02      	ble.n	80032ec <_ZN20FlappyScreenViewBase15handleTickEventEv+0x13c>
				if(newAreaYLast >= wallDown2.getY() - 3){
 80032e6:	f9b4 31fe 	ldrsh.w	r3, [r4, #510]	; 0x1fe
 80032ea:	e001      	b.n	80032f0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x140>
				if(newAreaYLast >= wallDown1.getY() - 3){
 80032ec:	f9b4 317a 	ldrsh.w	r3, [r4, #378]	; 0x17a
				if(newAreaYLast >= wallDown3.getY() - 3){
 80032f0:	3b03      	subs	r3, #3
 80032f2:	42b3      	cmp	r3, r6
 80032f4:	dc06      	bgt.n	8003304 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x154>
				bird.moveTo(birdx,birdy - 25);
 80032f6:	f1a5 0219 	sub.w	r2, r5, #25
 80032fa:	b212      	sxth	r2, r2
 80032fc:	4651      	mov	r1, sl
 80032fe:	4638      	mov	r0, r7
 8003300:	f7ff fd85 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
			}
		}
	}

	uint16_t wallWidth = wallUp1.getWidth();
 8003304:	f8b4 50cc 	ldrh.w	r5, [r4, #204]	; 0xcc
	uint16_t wallRestartX = 277 - wallWidth;

	wallUp1.moveTo(wallUp1.getX() - 1, 0);
 8003308:	f8b4 10c8 	ldrh.w	r1, [r4, #200]	; 0xc8
	uint16_t wallRestartX = 277 - wallWidth;
 800330c:	f5c5 738a 	rsb	r3, r5, #276	; 0x114
 8003310:	3301      	adds	r3, #1
 8003312:	b29f      	uxth	r7, r3
	wallUp1.moveTo(wallUp1.getX() - 1, 0);
 8003314:	3901      	subs	r1, #1
 8003316:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
 800331a:	4618      	mov	r0, r3
 800331c:	2200      	movs	r2, #0
 800331e:	b209      	sxth	r1, r1
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	f7ff fd74 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
	wallUp2.moveTo(wallUp2.getX() - 1, 0);
 8003326:	f8b4 114c 	ldrh.w	r1, [r4, #332]	; 0x14c
 800332a:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 800332e:	3901      	subs	r1, #1
 8003330:	4618      	mov	r0, r3
 8003332:	2200      	movs	r2, #0
 8003334:	b209      	sxth	r1, r1
 8003336:	ee08 3a10 	vmov	s16, r3
 800333a:	f7ff fd68 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
	wallUp3.moveTo(wallUp3.getX() - 1, 0);
 800333e:	f8b4 1120 	ldrh.w	r1, [r4, #288]	; 0x120
 8003342:	f504 7a8e 	add.w	sl, r4, #284	; 0x11c
 8003346:	3901      	subs	r1, #1
 8003348:	2200      	movs	r2, #0
 800334a:	b209      	sxth	r1, r1
 800334c:	4650      	mov	r0, sl
 800334e:	f7ff fd5e 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
	wallUp4.moveTo(wallUp4.getX() - 1, 0);
 8003352:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
 8003356:	f104 09f0 	add.w	r9, r4, #240	; 0xf0
 800335a:	3901      	subs	r1, #1
 800335c:	2200      	movs	r2, #0
 800335e:	b209      	sxth	r1, r1
 8003360:	4648      	mov	r0, r9
 8003362:	f7ff fd54 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>

	wallDown1.moveTo(wallDown1.getX() - 1, wallDown1.getY());
 8003366:	f8b4 1178 	ldrh.w	r1, [r4, #376]	; 0x178
 800336a:	f9b4 217a 	ldrsh.w	r2, [r4, #378]	; 0x17a
 800336e:	f504 73ba 	add.w	r3, r4, #372	; 0x174
 8003372:	3901      	subs	r1, #1
 8003374:	4618      	mov	r0, r3
 8003376:	b209      	sxth	r1, r1
 8003378:	ee08 3a90 	vmov	s17, r3
 800337c:	f7ff fd47 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
	wallDown2.moveTo(wallDown2.getX() - 1, wallDown2.getY());
 8003380:	f8b4 11fc 	ldrh.w	r1, [r4, #508]	; 0x1fc
 8003384:	f9b4 21fe 	ldrsh.w	r2, [r4, #510]	; 0x1fe
 8003388:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800338c:	3901      	subs	r1, #1
 800338e:	4618      	mov	r0, r3
 8003390:	b209      	sxth	r1, r1
 8003392:	ee09 3a10 	vmov	s18, r3
 8003396:	f7ff fd3a 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
	wallDown3.moveTo(wallDown3.getX() - 1, wallDown3.getY());
 800339a:	f8b4 11d0 	ldrh.w	r1, [r4, #464]	; 0x1d0
 800339e:	f9b4 21d2 	ldrsh.w	r2, [r4, #466]	; 0x1d2
 80033a2:	f504 73e6 	add.w	r3, r4, #460	; 0x1cc
 80033a6:	3901      	subs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	b209      	sxth	r1, r1
 80033ac:	ee09 3a90 	vmov	s19, r3
 80033b0:	f7ff fd2d 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
	wallDown4.moveTo(wallDown4.getX() - 1, wallDown4.getY());
 80033b4:	f8b4 11a4 	ldrh.w	r1, [r4, #420]	; 0x1a4
 80033b8:	f9b4 21a6 	ldrsh.w	r2, [r4, #422]	; 0x1a6
 80033bc:	f504 73d0 	add.w	r3, r4, #416	; 0x1a0
 80033c0:	3901      	subs	r1, #1
 80033c2:	4618      	mov	r0, r3
 80033c4:	b209      	sxth	r1, r1
 80033c6:	ee0a 3a10 	vmov	s20, r3
 80033ca:	f7ff fd20 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>

	if(wallUp1.getX() + wallWidth < 0){
 80033ce:	f9b4 20c8 	ldrsh.w	r2, [r4, #200]	; 0xc8
 80033d2:	9b01      	ldr	r3, [sp, #4]
 80033d4:	42ea      	cmn	r2, r5
 80033d6:	d547      	bpl.n	8003468 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x2b8>
		wallUp1.moveTo(wallRestartX, 0);
 80033d8:	4618      	mov	r0, r3
 80033da:	2200      	movs	r2, #0
 80033dc:	b239      	sxth	r1, r7
 80033de:	f7ff fd16 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
		HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 80033e2:	493b      	ldr	r1, [pc, #236]	; (80034d0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x320>)
 80033e4:	483b      	ldr	r0, [pc, #236]	; (80034d4 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x324>)
 80033e6:	f007 fa51 	bl	800a88c <HAL_RNG_GenerateRandomNumber>
		randomNumberReal = randomNumber % (randomNumberMAX * 2);
 80033ea:	4939      	ldr	r1, [pc, #228]	; (80034d0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x320>)
 80033ec:	680b      	ldr	r3, [r1, #0]
 80033ee:	2230      	movs	r2, #48	; 0x30
 80033f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80033f4:	fb02 3311 	mls	r3, r2, r1, r3
		if(randomNumberReal > randomNumberMAX){
 80033f8:	2b18      	cmp	r3, #24
 80033fa:	4a37      	ldr	r2, [pc, #220]	; (80034d8 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x328>)
 80033fc:	d904      	bls.n	8003408 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x258>
			randomNumberReal = (randomNumberReal - randomNumberMAX) * (-1);
 80033fe:	f1c3 0318 	rsb	r3, r3, #24
			if (randomNumberReal > -20){
 8003402:	f113 0f13 	cmn.w	r3, #19
 8003406:	da1e      	bge.n	8003446 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x296>
		randomNumberReal = randomNumber % (randomNumberMAX * 2);
 8003408:	6013      	str	r3, [r2, #0]
				randomNumberReal = -20;
			}
		}
		if(randomNumberReal > 0 && randomNumberReal < 20){
 800340a:	6813      	ldr	r3, [r2, #0]
 800340c:	3b01      	subs	r3, #1
 800340e:	2b12      	cmp	r3, #18
 8003410:	d81c      	bhi.n	800344c <_ZN20FlappyScreenViewBase15handleTickEventEv+0x29c>
			randomNumberReal = 20;
 8003412:	2314      	movs	r3, #20
 8003414:	e019      	b.n	800344a <_ZN20FlappyScreenViewBase15handleTickEventEv+0x29a>
			if(newAreaXLast >= wallUp2.getX() && newAreaX <= wallUp2.getX() + wallUp2.getWidth()){
 8003416:	f9b4 214c 	ldrsh.w	r2, [r4, #332]	; 0x14c
 800341a:	4542      	cmp	r2, r8
 800341c:	dc05      	bgt.n	800342a <_ZN20FlappyScreenViewBase15handleTickEventEv+0x27a>
 800341e:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
 8003422:	4413      	add	r3, r2
 8003424:	459b      	cmp	fp, r3
 8003426:	f77f af5e 	ble.w	80032e6 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x136>
				if(newAreaYLast >= wallDown3.getY() - 3){
 800342a:	f9b4 31d2 	ldrsh.w	r3, [r4, #466]	; 0x1d2
 800342e:	e75f      	b.n	80032f0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x140>
			if(newAreaXLast >= wallUp3.getX() && newAreaX <= wallUp3.getX() + wallUp3.getWidth()){
 8003430:	f9b4 2120 	ldrsh.w	r2, [r4, #288]	; 0x120
 8003434:	4542      	cmp	r2, r8
 8003436:	f73f af4a 	bgt.w	80032ce <_ZN20FlappyScreenViewBase15handleTickEventEv+0x11e>
 800343a:	f9b4 3124 	ldrsh.w	r3, [r4, #292]	; 0x124
 800343e:	4413      	add	r3, r2
 8003440:	459b      	cmp	fp, r3
 8003442:	ddf2      	ble.n	800342a <_ZN20FlappyScreenViewBase15handleTickEventEv+0x27a>
 8003444:	e743      	b.n	80032ce <_ZN20FlappyScreenViewBase15handleTickEventEv+0x11e>
				randomNumberReal = -20;
 8003446:	f06f 0313 	mvn.w	r3, #19
			randomNumberReal = 20;
 800344a:	6013      	str	r3, [r2, #0]
		}
		uint16_t newHeight = wallUp4.getHeight() + randomNumberReal;
 800344c:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x328>)
 800344e:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4413      	add	r3, r2
 8003456:	b29b      	uxth	r3, r3
		if(newHeight > 10 && (320 - (newHeight + 110)) > 10){
 8003458:	2b0a      	cmp	r3, #10
 800345a:	d905      	bls.n	8003468 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x2b8>
 800345c:	f1c3 02d2 	rsb	r2, r3, #210	; 0xd2
 8003460:	2a0a      	cmp	r2, #10
        rect.height = height;
 8003462:	bfc8      	it	gt
 8003464:	f8a4 30ce 	strhgt.w	r3, [r4, #206]	; 0xce
			wallUp1.setHeight(wallUp4.getHeight() + randomNumberReal);
		}
	}
	if(wallUp2.getX() + wallWidth < 0){
 8003468:	f9b4 314c 	ldrsh.w	r3, [r4, #332]	; 0x14c
 800346c:	42eb      	cmn	r3, r5
 800346e:	d546      	bpl.n	80034fe <_ZN20FlappyScreenViewBase15handleTickEventEv+0x34e>
		wallUp2.moveTo(wallRestartX, 0);
 8003470:	2200      	movs	r2, #0
 8003472:	ee18 0a10 	vmov	r0, s16
 8003476:	b239      	sxth	r1, r7
 8003478:	f7ff fcc9 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
		HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 800347c:	4914      	ldr	r1, [pc, #80]	; (80034d0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x320>)
 800347e:	4815      	ldr	r0, [pc, #84]	; (80034d4 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x324>)
 8003480:	f007 fa04 	bl	800a88c <HAL_RNG_GenerateRandomNumber>
		randomNumberReal = randomNumber % (randomNumberMAX * 2);
 8003484:	4912      	ldr	r1, [pc, #72]	; (80034d0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x320>)
 8003486:	680b      	ldr	r3, [r1, #0]
 8003488:	2230      	movs	r2, #48	; 0x30
 800348a:	fbb3 f1f2 	udiv	r1, r3, r2
 800348e:	fb02 3311 	mls	r3, r2, r1, r3
		if(randomNumberReal > randomNumberMAX){
 8003492:	2b18      	cmp	r3, #24
 8003494:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x328>)
 8003496:	d904      	bls.n	80034a2 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x2f2>
			randomNumberReal = (randomNumberReal - randomNumberMAX) * (-1);
 8003498:	f1c3 0318 	rsb	r3, r3, #24
			if (randomNumberReal > -20){
 800349c:	f113 0f13 	cmn.w	r3, #19
 80034a0:	da1c      	bge.n	80034dc <_ZN20FlappyScreenViewBase15handleTickEventEv+0x32c>
		randomNumberReal = randomNumber % (randomNumberMAX * 2);
 80034a2:	6013      	str	r3, [r2, #0]
				randomNumberReal = -20;
			}
		}
		if(randomNumberReal > 0 && randomNumberReal < 20){
 80034a4:	6813      	ldr	r3, [r2, #0]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	2b12      	cmp	r3, #18
 80034aa:	d81a      	bhi.n	80034e2 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x332>
			randomNumberReal = 20;
 80034ac:	2314      	movs	r3, #20
 80034ae:	e017      	b.n	80034e0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x330>
 80034b0:	51eb851f 	.word	0x51eb851f
 80034b4:	3fc51eb8 	.word	0x3fc51eb8
 80034b8:	eb851eb8 	.word	0xeb851eb8
 80034bc:	3feab851 	.word	0x3feab851
 80034c0:	200003ca 	.word	0x200003ca
 80034c4:	200003cb 	.word	0x200003cb
 80034c8:	3fec0000 	.word	0x3fec0000
 80034cc:	20003620 	.word	0x20003620
 80034d0:	20003618 	.word	0x20003618
 80034d4:	200002d0 	.word	0x200002d0
 80034d8:	2000361c 	.word	0x2000361c
				randomNumberReal = -20;
 80034dc:	f06f 0313 	mvn.w	r3, #19
			randomNumberReal = 20;
 80034e0:	6013      	str	r3, [r2, #0]
		}
		uint16_t newHeight = wallUp1.getHeight() + randomNumberReal;
 80034e2:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x404>)
 80034e4:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	b29b      	uxth	r3, r3
		if(newHeight > 10 && (320 - (newHeight + 110)) > 10){
 80034ee:	2b0a      	cmp	r3, #10
 80034f0:	d905      	bls.n	80034fe <_ZN20FlappyScreenViewBase15handleTickEventEv+0x34e>
 80034f2:	f1c3 02d2 	rsb	r2, r3, #210	; 0xd2
 80034f6:	2a0a      	cmp	r2, #10
 80034f8:	bfc8      	it	gt
 80034fa:	f8a4 3152 	strhgt.w	r3, [r4, #338]	; 0x152
			wallUp2.setHeight(wallUp1.getHeight() + randomNumberReal);
		}
	}
	if(wallUp3.getX() + wallWidth < 0){
 80034fe:	f9b4 3120 	ldrsh.w	r3, [r4, #288]	; 0x120
 8003502:	42eb      	cmn	r3, r5
 8003504:	d530      	bpl.n	8003568 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x3b8>
		wallUp3.moveTo(wallRestartX, 0);
 8003506:	4650      	mov	r0, sl
		HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 8003508:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80035bc <_ZN20FlappyScreenViewBase15handleTickEventEv+0x40c>
		wallUp3.moveTo(wallRestartX, 0);
 800350c:	2200      	movs	r2, #0
 800350e:	b239      	sxth	r1, r7
 8003510:	f7ff fc7d 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
		HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 8003514:	4651      	mov	r1, sl
 8003516:	4828      	ldr	r0, [pc, #160]	; (80035b8 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x408>)
 8003518:	f007 f9b8 	bl	800a88c <HAL_RNG_GenerateRandomNumber>
		randomNumberReal = randomNumber % (randomNumberMAX * 2);
 800351c:	f8da 3000 	ldr.w	r3, [sl]
 8003520:	2230      	movs	r2, #48	; 0x30
 8003522:	fbb3 f1f2 	udiv	r1, r3, r2
 8003526:	fb02 3311 	mls	r3, r2, r1, r3
		if(randomNumberReal > randomNumberMAX){
 800352a:	2b18      	cmp	r3, #24
 800352c:	4a21      	ldr	r2, [pc, #132]	; (80035b4 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x404>)
 800352e:	d904      	bls.n	800353a <_ZN20FlappyScreenViewBase15handleTickEventEv+0x38a>
			randomNumberReal = (randomNumberReal - randomNumberMAX) * (-1);
 8003530:	f1c3 0318 	rsb	r3, r3, #24
			if (randomNumberReal > -20){
 8003534:	f113 0f13 	cmn.w	r3, #19
 8003538:	da06      	bge.n	8003548 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x398>
		randomNumberReal = randomNumber % (randomNumberMAX * 2);
 800353a:	6013      	str	r3, [r2, #0]
				randomNumberReal = -20;
			}
		}
		if(randomNumberReal > 0 && randomNumberReal < 20){
 800353c:	6813      	ldr	r3, [r2, #0]
 800353e:	3b01      	subs	r3, #1
 8003540:	2b12      	cmp	r3, #18
 8003542:	d804      	bhi.n	800354e <_ZN20FlappyScreenViewBase15handleTickEventEv+0x39e>
			randomNumberReal = 20;
 8003544:	2314      	movs	r3, #20
 8003546:	e001      	b.n	800354c <_ZN20FlappyScreenViewBase15handleTickEventEv+0x39c>
				randomNumberReal = -20;
 8003548:	f06f 0313 	mvn.w	r3, #19
			randomNumberReal = 20;
 800354c:	6013      	str	r3, [r2, #0]
		}
		uint16_t newHeight = wallUp2.getHeight() + randomNumberReal;
 800354e:	6813      	ldr	r3, [r2, #0]
 8003550:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
 8003554:	4413      	add	r3, r2
 8003556:	b29b      	uxth	r3, r3
		if(newHeight > 10 && (320 - (newHeight + 110)) > 10){
 8003558:	2b0a      	cmp	r3, #10
 800355a:	d905      	bls.n	8003568 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x3b8>
 800355c:	f1c3 02d2 	rsb	r2, r3, #210	; 0xd2
 8003560:	2a0a      	cmp	r2, #10
 8003562:	bfc8      	it	gt
 8003564:	f8a4 3126 	strhgt.w	r3, [r4, #294]	; 0x126
			wallUp3.setHeight(wallUp2.getHeight() + randomNumberReal);
		}
	}
	if(wallUp4.getX() + wallWidth < 0){
 8003568:	f9b4 30f4 	ldrsh.w	r3, [r4, #244]	; 0xf4
 800356c:	42eb      	cmn	r3, r5
 800356e:	d537      	bpl.n	80035e0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x430>
		wallUp4.moveTo(wallRestartX, 0);
 8003570:	4648      	mov	r0, r9
		HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 8003572:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80035bc <_ZN20FlappyScreenViewBase15handleTickEventEv+0x40c>
		wallUp4.moveTo(wallRestartX, 0);
 8003576:	2200      	movs	r2, #0
 8003578:	b239      	sxth	r1, r7
 800357a:	f7ff fc48 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
		HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 800357e:	4649      	mov	r1, r9
 8003580:	480d      	ldr	r0, [pc, #52]	; (80035b8 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x408>)
 8003582:	f007 f983 	bl	800a88c <HAL_RNG_GenerateRandomNumber>
		randomNumberReal = randomNumber % (randomNumberMAX * 2);
 8003586:	f8d9 3000 	ldr.w	r3, [r9]
 800358a:	2230      	movs	r2, #48	; 0x30
 800358c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003590:	fb02 3311 	mls	r3, r2, r1, r3
		if(randomNumberReal > randomNumberMAX){
 8003594:	2b18      	cmp	r3, #24
 8003596:	4a07      	ldr	r2, [pc, #28]	; (80035b4 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x404>)
 8003598:	d904      	bls.n	80035a4 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x3f4>
			randomNumberReal = (randomNumberReal - randomNumberMAX) * (-1);
 800359a:	f1c3 0318 	rsb	r3, r3, #24
			if (randomNumberReal > -20){
 800359e:	f113 0f13 	cmn.w	r3, #19
 80035a2:	da0d      	bge.n	80035c0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x410>
		randomNumberReal = randomNumber % (randomNumberMAX * 2);
 80035a4:	6013      	str	r3, [r2, #0]
				randomNumberReal = -20;
			}
		}
		if(randomNumberReal > 0 && randomNumberReal < 20){
 80035a6:	6813      	ldr	r3, [r2, #0]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	2b12      	cmp	r3, #18
 80035ac:	d80b      	bhi.n	80035c6 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x416>
			randomNumberReal = 20;
 80035ae:	2314      	movs	r3, #20
 80035b0:	e008      	b.n	80035c4 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x414>
 80035b2:	bf00      	nop
 80035b4:	2000361c 	.word	0x2000361c
 80035b8:	200002d0 	.word	0x200002d0
 80035bc:	20003618 	.word	0x20003618
				randomNumberReal = -20;
 80035c0:	f06f 0313 	mvn.w	r3, #19
			randomNumberReal = 20;
 80035c4:	6013      	str	r3, [r2, #0]
		}
		uint16_t newHeight = wallUp3.getHeight() + randomNumberReal;
 80035c6:	6813      	ldr	r3, [r2, #0]
 80035c8:	f8b4 2126 	ldrh.w	r2, [r4, #294]	; 0x126
 80035cc:	4413      	add	r3, r2
 80035ce:	b29b      	uxth	r3, r3
		if(newHeight > 10 && (320 - (newHeight + 110)) > 10){
 80035d0:	2b0a      	cmp	r3, #10
 80035d2:	d905      	bls.n	80035e0 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x430>
 80035d4:	f1c3 02d2 	rsb	r2, r3, #210	; 0xd2
 80035d8:	2a0a      	cmp	r2, #10
 80035da:	bfc8      	it	gt
 80035dc:	f8a4 30fa 	strhgt.w	r3, [r4, #250]	; 0xfa
			wallUp4.setHeight(wallUp3.getHeight() + randomNumberReal);
		}
	}

	if(wallDown1.getX() + wallWidth < 0){
 80035e0:	f9b4 3178 	ldrsh.w	r3, [r4, #376]	; 0x178
 80035e4:	42eb      	cmn	r3, r5
 80035e6:	d50e      	bpl.n	8003606 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x456>
		wallDown1.moveTo(wallRestartX, wallUp1.getHeight() + 110);
 80035e8:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 80035ec:	326e      	adds	r2, #110	; 0x6e
 80035ee:	ee18 0a90 	vmov	r0, s17
 80035f2:	b212      	sxth	r2, r2
 80035f4:	b239      	sxth	r1, r7
 80035f6:	f7ff fc0a 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
		wallDown1.setHeight(320 - wallDown1.getY());
 80035fa:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
 80035fe:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003602:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
	}
	if(wallDown2.getX() + wallWidth < 0){
 8003606:	f9b4 31fc 	ldrsh.w	r3, [r4, #508]	; 0x1fc
 800360a:	42eb      	cmn	r3, r5
 800360c:	d50e      	bpl.n	800362c <_ZN20FlappyScreenViewBase15handleTickEventEv+0x47c>
		wallDown2.moveTo(wallRestartX, wallUp2.getHeight() + 110);
 800360e:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
 8003612:	326e      	adds	r2, #110	; 0x6e
 8003614:	ee19 0a10 	vmov	r0, s18
 8003618:	b212      	sxth	r2, r2
 800361a:	b239      	sxth	r1, r7
 800361c:	f7ff fbf7 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
		wallDown2.setHeight(320 - wallDown2.getY());
 8003620:	f8b4 31fe 	ldrh.w	r3, [r4, #510]	; 0x1fe
 8003624:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003628:	f8a4 3202 	strh.w	r3, [r4, #514]	; 0x202
	}
	if(wallDown3.getX() + wallWidth < 0){
 800362c:	f9b4 31d0 	ldrsh.w	r3, [r4, #464]	; 0x1d0
 8003630:	42eb      	cmn	r3, r5
 8003632:	d50e      	bpl.n	8003652 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x4a2>
		wallDown3.moveTo(wallRestartX, wallUp3.getHeight() + 110);
 8003634:	f8b4 2126 	ldrh.w	r2, [r4, #294]	; 0x126
 8003638:	326e      	adds	r2, #110	; 0x6e
 800363a:	ee19 0a90 	vmov	r0, s19
 800363e:	b212      	sxth	r2, r2
 8003640:	b239      	sxth	r1, r7
 8003642:	f7ff fbe4 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
		wallDown3.setHeight(320 - wallDown3.getY());
 8003646:	f8b4 31d2 	ldrh.w	r3, [r4, #466]	; 0x1d2
 800364a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800364e:	f8a4 31d6 	strh.w	r3, [r4, #470]	; 0x1d6
	}
	if(wallDown4.getX() + wallWidth < 0){
 8003652:	f9b4 31a4 	ldrsh.w	r3, [r4, #420]	; 0x1a4
 8003656:	42eb      	cmn	r3, r5
 8003658:	d50e      	bpl.n	8003678 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x4c8>
		wallDown4.moveTo(wallRestartX, wallUp4.getHeight() + 110);
 800365a:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
 800365e:	326e      	adds	r2, #110	; 0x6e
 8003660:	ee1a 0a10 	vmov	r0, s20
 8003664:	b212      	sxth	r2, r2
 8003666:	b239      	sxth	r1, r7
 8003668:	f7ff fbd1 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
		wallDown4.setHeight(320 - wallDown4.getY());
 800366c:	f8b4 31a6 	ldrh.w	r3, [r4, #422]	; 0x1a6
 8003670:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003674:	f8a4 31aa 	strh.w	r3, [r4, #426]	; 0x1aa
	}


	if(newAreaXLast >= wallUp1.getX() && newAreaX <= wallUp1.getX() + wallUp1.getWidth()){
 8003678:	f9b4 20c8 	ldrsh.w	r2, [r4, #200]	; 0xc8
 800367c:	4542      	cmp	r2, r8
 800367e:	dc34      	bgt.n	80036ea <_ZN20FlappyScreenViewBase15handleTickEventEv+0x53a>
 8003680:	f9b4 30cc 	ldrsh.w	r3, [r4, #204]	; 0xcc
 8003684:	4413      	add	r3, r2
 8003686:	459b      	cmp	fp, r3
 8003688:	dc2f      	bgt.n	80036ea <_ZN20FlappyScreenViewBase15handleTickEventEv+0x53a>
		if(newAreaY <= wallUp1.getHeight() || newAreaYLast >= wallDown1.getY()){
 800368a:	f9b4 30ce 	ldrsh.w	r3, [r4, #206]	; 0xce
 800368e:	9a00      	ldr	r2, [sp, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	dd03      	ble.n	800369c <_ZN20FlappyScreenViewBase15handleTickEventEv+0x4ec>
 8003694:	f9b4 317a 	ldrsh.w	r3, [r4, #378]	; 0x17a
 8003698:	429e      	cmp	r6, r3
 800369a:	db0c      	blt.n	80036b6 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x506>
			screenNumber = 2;
 800369c:	4b6d      	ldr	r3, [pc, #436]	; (8003854 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6a4>)
			HAL_TIM_Base_Stop_IT(&htim2);
 800369e:	486e      	ldr	r0, [pc, #440]	; (8003858 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6a8>)
			screenNumber = 2;
 80036a0:	2202      	movs	r2, #2
 80036a2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 80036a4:	f008 f8ac 	bl	800b800 <HAL_TIM_Base_Stop_IT>
			timeCounter = 0;
 80036a8:	4b6c      	ldr	r3, [pc, #432]	; (800385c <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6ac>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	f012 f8f3 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
			application().gotoScreen2ScreenNoTransition();
 80036b2:	f000 fc5f 	bl	8003f74 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
		}
		if(wallNum != 1){
 80036b6:	4b6a      	ldr	r3, [pc, #424]	; (8003860 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6b0>)
 80036b8:	f993 2000 	ldrsb.w	r2, [r3]
 80036bc:	2a01      	cmp	r2, #1
 80036be:	d014      	beq.n	80036ea <_ZN20FlappyScreenViewBase15handleTickEventEv+0x53a>
			wallNum = 1;
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
			score += 1;
 80036c4:	4a67      	ldr	r2, [pc, #412]	; (8003864 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6b4>)
 80036c6:	8813      	ldrh	r3, [r2, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	8013      	strh	r3, [r2, #0]
			Unicode::snprintf(scoreTextBuffer, 10, "%u" , score);
 80036ce:	210a      	movs	r1, #10
 80036d0:	4a65      	ldr	r2, [pc, #404]	; (8003868 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6b8>)
 80036d2:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 80036d6:	f015 f971 	bl	80189bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			scoreText.resizeToCurrentText();
 80036da:	f504 7009 	add.w	r0, r4, #548	; 0x224
 80036de:	9001      	str	r0, [sp, #4]
 80036e0:	f00f fb50 	bl	8012d84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
			scoreText.invalidate();
 80036e4:	9801      	ldr	r0, [sp, #4]
 80036e6:	f013 f94d 	bl	8016984 <_ZNK8touchgfx8Drawable10invalidateEv>
		}
	}
	if(newAreaXLast >= wallUp2.getX() && newAreaX <= wallUp2.getX() + wallUp2.getWidth()){
 80036ea:	f9b4 214c 	ldrsh.w	r2, [r4, #332]	; 0x14c
 80036ee:	4542      	cmp	r2, r8
 80036f0:	dc34      	bgt.n	800375c <_ZN20FlappyScreenViewBase15handleTickEventEv+0x5ac>
 80036f2:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
 80036f6:	4413      	add	r3, r2
 80036f8:	459b      	cmp	fp, r3
 80036fa:	dc2f      	bgt.n	800375c <_ZN20FlappyScreenViewBase15handleTickEventEv+0x5ac>
		if(newAreaY <= wallUp2.getHeight() || newAreaYLast >= wallDown2.getY()){
 80036fc:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 8003700:	9a00      	ldr	r2, [sp, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	dd03      	ble.n	800370e <_ZN20FlappyScreenViewBase15handleTickEventEv+0x55e>
 8003706:	f9b4 31fe 	ldrsh.w	r3, [r4, #510]	; 0x1fe
 800370a:	429e      	cmp	r6, r3
 800370c:	db0c      	blt.n	8003728 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x578>
			screenNumber = 2;
 800370e:	4b51      	ldr	r3, [pc, #324]	; (8003854 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6a4>)
			HAL_TIM_Base_Stop_IT(&htim2);
 8003710:	4851      	ldr	r0, [pc, #324]	; (8003858 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6a8>)
			screenNumber = 2;
 8003712:	2202      	movs	r2, #2
 8003714:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 8003716:	f008 f873 	bl	800b800 <HAL_TIM_Base_Stop_IT>
			timeCounter = 0;
 800371a:	4b50      	ldr	r3, [pc, #320]	; (800385c <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6ac>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	f012 f8ba 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
			application().gotoScreen2ScreenNoTransition();
 8003724:	f000 fc26 	bl	8003f74 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
		}
		if(wallNum != 2){
 8003728:	4b4d      	ldr	r3, [pc, #308]	; (8003860 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6b0>)
 800372a:	f993 2000 	ldrsb.w	r2, [r3]
 800372e:	2a02      	cmp	r2, #2
 8003730:	d014      	beq.n	800375c <_ZN20FlappyScreenViewBase15handleTickEventEv+0x5ac>
			wallNum = 2;
 8003732:	2202      	movs	r2, #2
 8003734:	701a      	strb	r2, [r3, #0]
			score += 1;
 8003736:	4a4b      	ldr	r2, [pc, #300]	; (8003864 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6b4>)
 8003738:	8813      	ldrh	r3, [r2, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	b29b      	uxth	r3, r3
 800373e:	8013      	strh	r3, [r2, #0]
			Unicode::snprintf(scoreTextBuffer, 10, "%u" , score);
 8003740:	210a      	movs	r1, #10
 8003742:	4a49      	ldr	r2, [pc, #292]	; (8003868 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6b8>)
 8003744:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 8003748:	f015 f938 	bl	80189bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			scoreText.resizeToCurrentText();
 800374c:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8003750:	9001      	str	r0, [sp, #4]
 8003752:	f00f fb17 	bl	8012d84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
			scoreText.invalidate();
 8003756:	9801      	ldr	r0, [sp, #4]
 8003758:	f013 f914 	bl	8016984 <_ZNK8touchgfx8Drawable10invalidateEv>
		}
	}
	if(newAreaXLast >= wallUp3.getX() && newAreaX <= wallUp3.getX() + wallUp3.getWidth()){
 800375c:	f9b4 2120 	ldrsh.w	r2, [r4, #288]	; 0x120
 8003760:	4542      	cmp	r2, r8
 8003762:	dc34      	bgt.n	80037ce <_ZN20FlappyScreenViewBase15handleTickEventEv+0x61e>
 8003764:	f9b4 3124 	ldrsh.w	r3, [r4, #292]	; 0x124
 8003768:	4413      	add	r3, r2
 800376a:	459b      	cmp	fp, r3
 800376c:	dc2f      	bgt.n	80037ce <_ZN20FlappyScreenViewBase15handleTickEventEv+0x61e>
		if(newAreaY <= wallUp3.getHeight() || newAreaYLast >= wallDown3.getY()){
 800376e:	f9b4 3126 	ldrsh.w	r3, [r4, #294]	; 0x126
 8003772:	9a00      	ldr	r2, [sp, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	dd03      	ble.n	8003780 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x5d0>
 8003778:	f9b4 31d2 	ldrsh.w	r3, [r4, #466]	; 0x1d2
 800377c:	429e      	cmp	r6, r3
 800377e:	db0c      	blt.n	800379a <_ZN20FlappyScreenViewBase15handleTickEventEv+0x5ea>
			screenNumber = 2;
 8003780:	4b34      	ldr	r3, [pc, #208]	; (8003854 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6a4>)
			HAL_TIM_Base_Stop_IT(&htim2);
 8003782:	4835      	ldr	r0, [pc, #212]	; (8003858 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6a8>)
			screenNumber = 2;
 8003784:	2202      	movs	r2, #2
 8003786:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 8003788:	f008 f83a 	bl	800b800 <HAL_TIM_Base_Stop_IT>
			timeCounter = 0;
 800378c:	4b33      	ldr	r3, [pc, #204]	; (800385c <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6ac>)
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	f012 f881 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
			application().gotoScreen2ScreenNoTransition();
 8003796:	f000 fbed 	bl	8003f74 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
		}
		if(wallNum != 3){
 800379a:	4b31      	ldr	r3, [pc, #196]	; (8003860 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6b0>)
 800379c:	f993 2000 	ldrsb.w	r2, [r3]
 80037a0:	2a03      	cmp	r2, #3
 80037a2:	d014      	beq.n	80037ce <_ZN20FlappyScreenViewBase15handleTickEventEv+0x61e>
			wallNum = 3;
 80037a4:	2203      	movs	r2, #3
 80037a6:	701a      	strb	r2, [r3, #0]
			score += 1;
 80037a8:	4a2e      	ldr	r2, [pc, #184]	; (8003864 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6b4>)
 80037aa:	8813      	ldrh	r3, [r2, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	8013      	strh	r3, [r2, #0]
			Unicode::snprintf(scoreTextBuffer, 10, "%u" , score);
 80037b2:	210a      	movs	r1, #10
 80037b4:	4a2c      	ldr	r2, [pc, #176]	; (8003868 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6b8>)
 80037b6:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 80037ba:	f015 f8ff 	bl	80189bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			scoreText.resizeToCurrentText();
 80037be:	f504 7009 	add.w	r0, r4, #548	; 0x224
 80037c2:	9001      	str	r0, [sp, #4]
 80037c4:	f00f fade 	bl	8012d84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
			scoreText.invalidate();
 80037c8:	9801      	ldr	r0, [sp, #4]
 80037ca:	f013 f8db 	bl	8016984 <_ZNK8touchgfx8Drawable10invalidateEv>
		}
	}
	if(newAreaXLast >= wallUp4.getX() && newAreaX <= wallUp4.getX() + wallUp4.getWidth()){
 80037ce:	f9b4 20f4 	ldrsh.w	r2, [r4, #244]	; 0xf4
 80037d2:	4542      	cmp	r2, r8
 80037d4:	dc39      	bgt.n	800384a <_ZN20FlappyScreenViewBase15handleTickEventEv+0x69a>
 80037d6:	f9b4 30f8 	ldrsh.w	r3, [r4, #248]	; 0xf8
 80037da:	4413      	add	r3, r2
 80037dc:	459b      	cmp	fp, r3
 80037de:	dc34      	bgt.n	800384a <_ZN20FlappyScreenViewBase15handleTickEventEv+0x69a>
		if(newAreaY <= wallUp4.getHeight() || newAreaYLast >= wallDown4.getY()){
 80037e0:	f9b4 30fa 	ldrsh.w	r3, [r4, #250]	; 0xfa
 80037e4:	9a00      	ldr	r2, [sp, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	dd03      	ble.n	80037f2 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x642>
 80037ea:	f9b4 31a6 	ldrsh.w	r3, [r4, #422]	; 0x1a6
 80037ee:	429e      	cmp	r6, r3
 80037f0:	db0c      	blt.n	800380c <_ZN20FlappyScreenViewBase15handleTickEventEv+0x65c>
			screenNumber = 2;
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6a4>)
			HAL_TIM_Base_Stop_IT(&htim2);
 80037f4:	4818      	ldr	r0, [pc, #96]	; (8003858 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6a8>)
			screenNumber = 2;
 80037f6:	2202      	movs	r2, #2
 80037f8:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 80037fa:	f008 f801 	bl	800b800 <HAL_TIM_Base_Stop_IT>
			timeCounter = 0;
 80037fe:	4b17      	ldr	r3, [pc, #92]	; (800385c <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6ac>)
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	f012 f848 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
			application().gotoScreen2ScreenNoTransition();
 8003808:	f000 fbb4 	bl	8003f74 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
		}
		if(wallNum != 4){
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6b0>)
 800380e:	f993 2000 	ldrsb.w	r2, [r3]
 8003812:	2a04      	cmp	r2, #4
 8003814:	d019      	beq.n	800384a <_ZN20FlappyScreenViewBase15handleTickEventEv+0x69a>
			wallNum = 4;
 8003816:	2204      	movs	r2, #4
 8003818:	701a      	strb	r2, [r3, #0]
			score += 1;
 800381a:	4a12      	ldr	r2, [pc, #72]	; (8003864 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6b4>)
 800381c:	8813      	ldrh	r3, [r2, #0]
 800381e:	3301      	adds	r3, #1
 8003820:	b29b      	uxth	r3, r3
 8003822:	8013      	strh	r3, [r2, #0]
			Unicode::snprintf(scoreTextBuffer, 10, "%u" , score);
 8003824:	210a      	movs	r1, #10
 8003826:	4a10      	ldr	r2, [pc, #64]	; (8003868 <_ZN20FlappyScreenViewBase15handleTickEventEv+0x6b8>)
 8003828:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 800382c:	f015 f8c6 	bl	80189bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			scoreText.resizeToCurrentText();
 8003830:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8003834:	9000      	str	r0, [sp, #0]
 8003836:	f00f faa5 	bl	8012d84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
			scoreText.invalidate();
 800383a:	9800      	ldr	r0, [sp, #0]
		}
	}

}
 800383c:	b003      	add	sp, #12
 800383e:	ecbd 8b06 	vpop	{d8-d10}
 8003842:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			scoreText.invalidate();
 8003846:	f013 b89d 	b.w	8016984 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800384a:	b003      	add	sp, #12
 800384c:	ecbd 8b06 	vpop	{d8-d10}
 8003850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003854:	20000008 	.word	0x20000008
 8003858:	20000338 	.word	0x20000338
 800385c:	200003ca 	.word	0x200003ca
 8003860:	20003620 	.word	0x20003620
 8003864:	200003be 	.word	0x200003be
 8003868:	0802838c 	.word	0x0802838c

0800386c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 800386c:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 800386e:	f7ff fb5f 	bl	8002f30 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003872:	bd08      	pop	{r3, pc}

08003874 <_ZN20FlappyScreenViewBase14handleKeyEventEh>:
{
 8003874:	b508      	push	{r3, lr}
	if(0 == key)
 8003876:	b949      	cbnz	r1, 800388c <_ZN20FlappyScreenViewBase14handleKeyEventEh+0x18>
		bird.moveTo(x,y-25);;
 8003878:	f8b0 2276 	ldrh.w	r2, [r0, #630]	; 0x276
 800387c:	f9b0 1274 	ldrsh.w	r1, [r0, #628]	; 0x274
 8003880:	3a19      	subs	r2, #25
 8003882:	b212      	sxth	r2, r2
 8003884:	f500 701c 	add.w	r0, r0, #624	; 0x270
 8003888:	f7ff fac1 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
}
 800388c:	bd08      	pop	{r3, pc}
	...

08003890 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003890:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8003892:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003894:	6b5e      	ldr	r6, [r3, #52]	; 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8003898:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
 800389a:	4604      	mov	r4, r0
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800389c:	b28d      	uxth	r5, r1
 800389e:	b92b      	cbnz	r3, 80038ac <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80038a0:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80038a2:	4a11      	ldr	r2, [pc, #68]	; (80038e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80038a4:	216c      	movs	r1, #108	; 0x6c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80038a6:	4811      	ldr	r0, [pc, #68]	; (80038ec <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80038a8:	f023 f8d4 	bl	8026a54 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80038ac:	4910      	ldr	r1, [pc, #64]	; (80038f0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80038ae:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80038b0:	8809      	ldrh	r1, [r1, #0]
 80038b2:	4291      	cmp	r1, r2
 80038b4:	d803      	bhi.n	80038be <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80038b6:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80038b8:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80038ba:	216d      	movs	r1, #109	; 0x6d
 80038bc:	e7f3      	b.n	80038a6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 80038be:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80038c2:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80038ca:	6803      	ldr	r3, [r0, #0]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4798      	blx	r3
 80038d0:	1a28      	subs	r0, r5, r0
 80038d2:	b201      	sxth	r1, r0
 80038d4:	4633      	mov	r3, r6
 80038d6:	4620      	mov	r0, r4
    }
 80038d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80038dc:	4718      	bx	r3
 80038de:	bf00      	nop
 80038e0:	20014668 	.word	0x20014668
 80038e4:	0802838f 	.word	0x0802838f
 80038e8:	080283d1 	.word	0x080283d1
 80038ec:	0802840c 	.word	0x0802840c
 80038f0:	2001466c 	.word	0x2001466c
 80038f4:	08028453 	.word	0x08028453
 80038f8:	20014670 	.word	0x20014670

080038fc <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80038fc:	2200      	movs	r2, #0
 80038fe:	f04f 31ff 	mov.w	r1, #4294967295
 8003902:	e9c0 2100 	strd	r2, r1, [r0]
              text(0)
 8003906:	6082      	str	r2, [r0, #8]
    }
 8003908:	4770      	bx	lr

0800390a <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 800390a:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 800390c:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 800390e:	4604      	mov	r4, r0
        setX(x);
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8003912:	4615      	mov	r5, r2
        setX(x);
 8003914:	4798      	blx	r3
        setY(y);
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	4629      	mov	r1, r5
 800391a:	4620      	mov	r0, r4
 800391c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 800391e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003922:	4718      	bx	r3

08003924 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	4604      	mov	r4, r0
 8003928:	461d      	mov	r5, r3
 800392a:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 800392e:	f7ff ffec 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	4629      	mov	r1, r5
 8003936:	4620      	mov	r0, r4
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	4798      	blx	r3
        setHeight(height);
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	4631      	mov	r1, r6
 8003940:	4620      	mov	r0, r4
 8003942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8003944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003948:	4718      	bx	r3
	...

0800394c <_ZN8touchgfx3BoxC1Ev>:
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 800394c:	4a09      	ldr	r2, [pc, #36]	; (8003974 <_ZN8touchgfx3BoxC1Ev+0x28>)
 800394e:	6002      	str	r2, [r0, #0]
          touchable(false),
 8003950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003954:	2200      	movs	r2, #0
 8003956:	8481      	strh	r1, [r0, #36]	; 0x24
 8003958:	21ff      	movs	r1, #255	; 0xff
 800395a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800395e:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003962:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003966:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800396a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
        : color(col)
 800396e:	6282      	str	r2, [r0, #40]	; 0x28
    {
    }
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	080296fc 	.word	0x080296fc

08003978 <_ZN20FlappyScreenViewBaseC1Ev>:
FlappyScreenViewBase::FlappyScreenViewBase()
 8003978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397c:	ed2d 8b08 	vpush	{d8-d11}
 8003980:	4604      	mov	r4, r0
 8003982:	b089      	sub	sp, #36	; 0x24
 8003984:	46a1      	mov	r9, r4
template <class T>
class View : public Screen
{
public:
    View()
        : presenter(0)
 8003986:	2500      	movs	r5, #0
 8003988:	f013 fb94 	bl	80170b4 <_ZN8touchgfx6ScreenC1Ev>
 800398c:	4be5      	ldr	r3, [pc, #916]	; (8003d24 <_ZN20FlappyScreenViewBaseC1Ev+0x3ac>)
 800398e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003990:	f849 3b40 	str.w	r3, [r9], #64
 8003994:	4648      	mov	r0, r9
 8003996:	f7ff ffd9 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 800399a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800399e:	f104 0898 	add.w	r8, r4, #152	; 0x98
 80039a2:	4618      	mov	r0, r3
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80039a4:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80039a8:	ee0b 3a90 	vmov	s23, r3
 80039ac:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
 80039b0:	f7ff ffcc 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 80039b4:	a906      	add	r1, sp, #24
 80039b6:	4640      	mov	r0, r8
 80039b8:	f8ad 6018 	strh.w	r6, [sp, #24]
 80039bc:	f00e fcb0 	bl	8012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80039c0:	a906      	add	r1, sp, #24
 80039c2:	4638      	mov	r0, r7
 80039c4:	f8ad 6018 	strh.w	r6, [sp, #24]
 80039c8:	f00e fcaa 	bl	8012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80039cc:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
 80039d0:	a906      	add	r1, sp, #24
 80039d2:	4618      	mov	r0, r3
 80039d4:	ee08 3a10 	vmov	s16, r3
 80039d8:	f8ad 6018 	strh.w	r6, [sp, #24]
 80039dc:	f00e fca0 	bl	8012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80039e0:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 80039e4:	a906      	add	r1, sp, #24
 80039e6:	4618      	mov	r0, r3
 80039e8:	ee08 3a90 	vmov	s17, r3
 80039ec:	f8ad 6018 	strh.w	r6, [sp, #24]
 80039f0:	f00e fc96 	bl	8012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80039f4:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 80039f8:	a906      	add	r1, sp, #24
 80039fa:	4618      	mov	r0, r3
 80039fc:	ee09 3a10 	vmov	s18, r3
 8003a00:	f8ad 6018 	strh.w	r6, [sp, #24]
 8003a04:	f00e fc8c 	bl	8012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003a08:	f504 73ba 	add.w	r3, r4, #372	; 0x174
 8003a0c:	a906      	add	r1, sp, #24
 8003a0e:	4618      	mov	r0, r3
 8003a10:	ee09 3a90 	vmov	s19, r3
 8003a14:	f8ad 6018 	strh.w	r6, [sp, #24]
 8003a18:	f00e fc82 	bl	8012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003a1c:	f504 73d0 	add.w	r3, r4, #416	; 0x1a0
 8003a20:	a906      	add	r1, sp, #24
 8003a22:	4618      	mov	r0, r3
 8003a24:	ee0a 3a10 	vmov	s20, r3
 8003a28:	f8ad 6018 	strh.w	r6, [sp, #24]
 8003a2c:	f00e fc78 	bl	8012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003a30:	f504 73e6 	add.w	r3, r4, #460	; 0x1cc
 8003a34:	a906      	add	r1, sp, #24
 8003a36:	4618      	mov	r0, r3
 8003a38:	ee0a 3a90 	vmov	s21, r3
 8003a3c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8003a40:	f00e fc6e 	bl	8012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003a44:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 8003a48:	a906      	add	r1, sp, #24
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	ee0b 3a10 	vmov	s22, r3
 8003a50:	f8ad 6018 	strh.w	r6, [sp, #24]
 8003a54:	f00e fc64 	bl	8012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
          touchable(false),
 8003a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a5c:	f8a4 3248 	strh.w	r3, [r4, #584]	; 0x248
        : typedTextId(id)
 8003a60:	4bb1      	ldr	r3, [pc, #708]	; (8003d28 <_ZN20FlappyScreenViewBaseC1Ev+0x3b0>)
 8003a62:	f8c4 324c 	str.w	r3, [r4, #588]	; 0x24c
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003a66:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8003a6a:	f8c4 3258 	str.w	r3, [r4, #600]	; 0x258
        : TextAreaWithWildcardBase(), wc1(0)
 8003a6e:	4baf      	ldr	r3, [pc, #700]	; (8003d2c <_ZN20FlappyScreenViewBaseC1Ev+0x3b4>)
 8003a70:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 8003a74:	f504 7b1c 	add.w	fp, r4, #624	; 0x270
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003a78:	f04f 33ff 	mov.w	r3, #4294967295
              text(0)
 8003a7c:	e9c4 3599 	strd	r3, r5, [r4, #612]	; 0x264
 8003a80:	f8a4 6250 	strh.w	r6, [r4, #592]	; 0x250
 8003a84:	a906      	add	r1, sp, #24
        : x(0), y(0), width(0), height(0)
 8003a86:	e9c4 558a 	strd	r5, r5, [r4, #552]	; 0x228
 8003a8a:	e9c4 558c 	strd	r5, r5, [r4, #560]	; 0x230
          nextSibling(0),
 8003a8e:	e9c4 558e 	strd	r5, r5, [r4, #568]	; 0x238
          cachedAbsX(0),
 8003a92:	e9c4 5590 	strd	r5, r5, [r4, #576]	; 0x240
        : color(col)
 8003a96:	f8c4 5254 	str.w	r5, [r4, #596]	; 0x254
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003a9a:	f8a4 525c 	strh.w	r5, [r4, #604]	; 0x25c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003a9e:	f8c4 5260 	str.w	r5, [r4, #608]	; 0x260
 8003aa2:	f8c4 526c 	str.w	r5, [r4, #620]	; 0x26c
 8003aa6:	4658      	mov	r0, fp
 8003aa8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8003aac:	f00e fc38 	bl	8012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
    __background.setPosition(0, 0, 240, 320);
 8003ab0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003ab4:	462a      	mov	r2, r5
 8003ab6:	4648      	mov	r0, r9
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	4629      	mov	r1, r5
 8003abc:	23f0      	movs	r3, #240	; 0xf0
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003abe:	1d26      	adds	r6, r4, #4
 8003ac0:	f7ff ff30 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003ac4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003ac8:	4649      	mov	r1, r9
 8003aca:	66a3      	str	r3, [r4, #104]	; 0x68
 8003acc:	4630      	mov	r0, r6
 8003ace:	f00c f809 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box1.setPosition(0, 0, 240, 320);
 8003ad2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003ad6:	462a      	mov	r2, r5
 8003ad8:	ee1b 0a90 	vmov	r0, s23
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	4629      	mov	r1, r5
 8003ae0:	23f0      	movs	r3, #240	; 0xf0
 8003ae2:	f7ff ff1f 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aea:	ee1b 1a90 	vmov	r1, s23
 8003aee:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8003af2:	4630      	mov	r0, r6
 8003af4:	f00b fff6 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003af8:	2301      	movs	r3, #1
    background.setBitmap(touchgfx::Bitmap(BITMAP_FLAPPYBACKGROUND_MIN_ID));
 8003afa:	4640      	mov	r0, r8
 8003afc:	a906      	add	r1, sp, #24
 8003afe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8003b02:	f00f fabb 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    background.setPosition(0, 0, 240, 320);
 8003b06:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003b0a:	462a      	mov	r2, r5
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4629      	mov	r1, r5
 8003b12:	23f0      	movs	r3, #240	; 0xf0
 8003b14:	f7ff ff06 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003b18:	4640      	mov	r0, r8
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	f00e fbbb 	bl	8012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8003b20:	4641      	mov	r1, r8
 8003b22:	4630      	mov	r0, r6
 8003b24:	f00b ffde 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b28:	f04f 0804 	mov.w	r8, #4
    wallUp1.setPosition(207, 0, 23, 105);
 8003b2c:	f04f 0969 	mov.w	r9, #105	; 0x69
    wallUp1.setBitmap(touchgfx::Bitmap(BITMAP_FLAPPYWALLUP_ID));
 8003b30:	4638      	mov	r0, r7
 8003b32:	a906      	add	r1, sp, #24
 8003b34:	f8ad 8018 	strh.w	r8, [sp, #24]
 8003b38:	f00f faa0 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    wallUp1.setPosition(207, 0, 23, 105);
 8003b3c:	2317      	movs	r3, #23
 8003b3e:	462a      	mov	r2, r5
 8003b40:	4638      	mov	r0, r7
 8003b42:	21cf      	movs	r1, #207	; 0xcf
 8003b44:	f8cd 9000 	str.w	r9, [sp]
 8003b48:	f7ff feec 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    wallUp1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	4629      	mov	r1, r5
 8003b50:	f00e fba1 	bl	8012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8003b54:	4639      	mov	r1, r7
 8003b56:	4630      	mov	r0, r6
 8003b58:	f00b ffc4 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    wallUp4.setBitmap(touchgfx::Bitmap(BITMAP_FLAPPYWALLUP_ID));
 8003b5c:	ee18 0a10 	vmov	r0, s16
 8003b60:	a906      	add	r1, sp, #24
 8003b62:	f8ad 8018 	strh.w	r8, [sp, #24]
 8003b66:	f00f fa89 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    wallUp4.setPosition(417, 0, 23, 78);
 8003b6a:	234e      	movs	r3, #78	; 0x4e
 8003b6c:	462a      	mov	r2, r5
 8003b6e:	ee18 0a10 	vmov	r0, s16
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003b78:	2317      	movs	r3, #23
 8003b7a:	f7ff fed3 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    wallUp4.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003b7e:	ee18 0a10 	vmov	r0, s16
 8003b82:	4629      	mov	r1, r5
 8003b84:	f00e fb87 	bl	8012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8003b88:	ee18 1a10 	vmov	r1, s16
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	f00b ffa9 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    wallUp3.setBitmap(touchgfx::Bitmap(BITMAP_FLAPPYWALLUP_ID));
 8003b92:	ee18 0a90 	vmov	r0, s17
 8003b96:	a906      	add	r1, sp, #24
 8003b98:	f8ad 8018 	strh.w	r8, [sp, #24]
 8003b9c:	f00f fa6e 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    wallUp3.setPosition(347, 0, 23, 105);
 8003ba0:	2317      	movs	r3, #23
 8003ba2:	462a      	mov	r2, r5
 8003ba4:	ee18 0a90 	vmov	r0, s17
 8003ba8:	f240 115b 	movw	r1, #347	; 0x15b
 8003bac:	f8cd 9000 	str.w	r9, [sp]
 8003bb0:	f7ff feb8 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    wallUp3.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003bb4:	ee18 0a90 	vmov	r0, s17
 8003bb8:	4629      	mov	r1, r5
 8003bba:	f00e fb6c 	bl	8012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8003bbe:	ee18 1a90 	vmov	r1, s17
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f00b ff8e 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    wallUp2.setPosition(277, 0, 23, 132);
 8003bc8:	2784      	movs	r7, #132	; 0x84
    wallUp2.setBitmap(touchgfx::Bitmap(BITMAP_FLAPPYWALLUP_ID));
 8003bca:	ee19 0a10 	vmov	r0, s18
 8003bce:	a906      	add	r1, sp, #24
 8003bd0:	f8ad 8018 	strh.w	r8, [sp, #24]
 8003bd4:	f00f fa52 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    wallUp2.setPosition(277, 0, 23, 132);
 8003bd8:	2317      	movs	r3, #23
 8003bda:	462a      	mov	r2, r5
 8003bdc:	ee19 0a10 	vmov	r0, s18
 8003be0:	9700      	str	r7, [sp, #0]
 8003be2:	f240 1115 	movw	r1, #277	; 0x115
 8003be6:	f7ff fe9d 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    wallUp2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003bea:	ee19 0a10 	vmov	r0, s18
 8003bee:	4629      	mov	r1, r5
 8003bf0:	f00e fb51 	bl	8012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8003bf4:	ee19 1a10 	vmov	r1, s18
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	f00b ff73 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bfe:	f04f 0803 	mov.w	r8, #3
    wallDown1.setBitmap(touchgfx::Bitmap(BITMAP_FLAPPYWALLDOWN_ID));
 8003c02:	ee19 0a90 	vmov	r0, s19
 8003c06:	a906      	add	r1, sp, #24
 8003c08:	f8ad 8018 	strh.w	r8, [sp, #24]
 8003c0c:	f00f fa36 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    wallDown1.setPosition(207, 215, 23, 105);
 8003c10:	2317      	movs	r3, #23
 8003c12:	22d7      	movs	r2, #215	; 0xd7
 8003c14:	ee19 0a90 	vmov	r0, s19
 8003c18:	21cf      	movs	r1, #207	; 0xcf
 8003c1a:	f8cd 9000 	str.w	r9, [sp]
 8003c1e:	f7ff fe81 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    wallDown1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003c22:	ee19 0a90 	vmov	r0, s19
 8003c26:	4629      	mov	r1, r5
 8003c28:	f00e fb35 	bl	8012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8003c2c:	ee19 1a90 	vmov	r1, s19
 8003c30:	4630      	mov	r0, r6
 8003c32:	f00b ff57 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    wallDown4.setBitmap(touchgfx::Bitmap(BITMAP_FLAPPYWALLDOWN_ID));
 8003c36:	ee1a 0a10 	vmov	r0, s20
 8003c3a:	a906      	add	r1, sp, #24
 8003c3c:	f8ad 8018 	strh.w	r8, [sp, #24]
 8003c40:	f00f fa1c 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    wallDown4.setPosition(417, 188, 23, 132);
 8003c44:	2317      	movs	r3, #23
 8003c46:	22bc      	movs	r2, #188	; 0xbc
 8003c48:	ee1a 0a10 	vmov	r0, s20
 8003c4c:	9700      	str	r7, [sp, #0]
 8003c4e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003c52:	f7ff fe67 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    wallDown4.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003c56:	ee1a 0a10 	vmov	r0, s20
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	f00e fb1b 	bl	8012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8003c60:	ee1a 1a10 	vmov	r1, s20
 8003c64:	4630      	mov	r0, r6
 8003c66:	f00b ff3d 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    wallDown3.setBitmap(touchgfx::Bitmap(BITMAP_FLAPPYWALLDOWN_ID));
 8003c6a:	ee1a 0a90 	vmov	r0, s21
 8003c6e:	a906      	add	r1, sp, #24
 8003c70:	f8ad 8018 	strh.w	r8, [sp, #24]
 8003c74:	f00f fa02 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    wallDown3.setPosition(347, 215, 23, 105);
 8003c78:	2317      	movs	r3, #23
 8003c7a:	22d7      	movs	r2, #215	; 0xd7
 8003c7c:	ee1a 0a90 	vmov	r0, s21
 8003c80:	f240 115b 	movw	r1, #347	; 0x15b
 8003c84:	f8cd 9000 	str.w	r9, [sp]
 8003c88:	f7ff fe4c 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    wallDown3.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003c8c:	ee1a 0a90 	vmov	r0, s21
 8003c90:	4629      	mov	r1, r5
 8003c92:	f00e fb00 	bl	8012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8003c96:	ee1a 1a90 	vmov	r1, s21
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f00b ff22 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    wallDown2.setBitmap(touchgfx::Bitmap(BITMAP_FLAPPYWALLDOWN_ID));
 8003ca0:	ee1b 0a10 	vmov	r0, s22
 8003ca4:	a906      	add	r1, sp, #24
 8003ca6:	f8ad 8018 	strh.w	r8, [sp, #24]
 8003caa:	f00f f9e7 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    wallDown2.setPosition(277, 242, 23, 78);
 8003cae:	234e      	movs	r3, #78	; 0x4e
 8003cb0:	22f2      	movs	r2, #242	; 0xf2
 8003cb2:	ee1b 0a10 	vmov	r0, s22
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	f240 1115 	movw	r1, #277	; 0x115
 8003cbc:	2317      	movs	r3, #23
 8003cbe:	f7ff fe31 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    wallDown2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003cc2:	ee1b 0a10 	vmov	r0, s22
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	f00e fae5 	bl	8012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
FlappyScreenViewBase::FlappyScreenViewBase()
 8003ccc:	f504 7a09 	add.w	sl, r4, #548	; 0x224
 8003cd0:	ee1b 1a10 	vmov	r1, s22
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f00b ff05 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    scoreText.setXY(0, 0);
 8003cda:	462a      	mov	r2, r5
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4650      	mov	r0, sl
 8003ce0:	f7ff fe13 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003ce4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003ce8:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
        boundingArea = calculateBoundingArea();
 8003cec:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
        linespace = space;
 8003cf0:	f8a4 5258 	strh.w	r5, [r4, #600]	; 0x258
        boundingArea = calculateBoundingArea();
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfc:	4651      	mov	r1, sl
 8003cfe:	4798      	blx	r3
 8003d00:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003d04:	f504 7318 	add.w	r3, r4, #608	; 0x260
 8003d08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003d0c:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <_ZN20FlappyScreenViewBaseC1Ev+0x3b8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(scoreTextBuffer, SCORETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_UD29).getText());
 8003d10:	f504 7727 	add.w	r7, r4, #668	; 0x29c
 8003d14:	b9a3      	cbnz	r3, 8003d40 <_ZN20FlappyScreenViewBaseC1Ev+0x3c8>
 8003d16:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <_ZN20FlappyScreenViewBaseC1Ev+0x3bc>)
 8003d18:	4a07      	ldr	r2, [pc, #28]	; (8003d38 <_ZN20FlappyScreenViewBaseC1Ev+0x3c0>)
 8003d1a:	2160      	movs	r1, #96	; 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003d1c:	4807      	ldr	r0, [pc, #28]	; (8003d3c <_ZN20FlappyScreenViewBaseC1Ev+0x3c4>)
 8003d1e:	f022 fe99 	bl	8026a54 <__assert_func>
 8003d22:	bf00      	nop
 8003d24:	08028574 	.word	0x08028574
 8003d28:	080284d4 	.word	0x080284d4
 8003d2c:	080284e4 	.word	0x080284e4
 8003d30:	20014668 	.word	0x20014668
 8003d34:	0802838f 	.word	0x0802838f
 8003d38:	08028491 	.word	0x08028491
 8003d3c:	0802840c 	.word	0x0802840c
        return typedTextId < numberOfTypedTexts;
 8003d40:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <_ZN20FlappyScreenViewBaseC1Ev+0x45c>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	2b22      	cmp	r3, #34	; 0x22
 8003d46:	d803      	bhi.n	8003d50 <_ZN20FlappyScreenViewBaseC1Ev+0x3d8>
 8003d48:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <_ZN20FlappyScreenViewBaseC1Ev+0x460>)
 8003d4a:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <_ZN20FlappyScreenViewBaseC1Ev+0x464>)
 8003d4c:	2161      	movs	r1, #97	; 0x61
 8003d4e:	e7e5      	b.n	8003d1c <_ZN20FlappyScreenViewBaseC1Ev+0x3a4>
        return texts->getText(typedTextId);
 8003d50:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <_ZN20FlappyScreenViewBaseC1Ev+0x468>)
 8003d52:	2122      	movs	r1, #34	; 0x22
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	f002 fd33 	bl	80067c0 <_ZNK8touchgfx5Texts7getTextEt>
 8003d5a:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <_ZN20FlappyScreenViewBaseC1Ev+0x46c>)
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	210a      	movs	r1, #10
 8003d60:	4638      	mov	r0, r7
 8003d62:	f014 fe2b 	bl	80189bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    scoreText.resizeToCurrentText();
 8003d66:	4650      	mov	r0, sl
        wc1 = value;
 8003d68:	f8c4 726c 	str.w	r7, [r4, #620]	; 0x26c
 8003d6c:	f00f f80a 	bl	8012d84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <_ZN20FlappyScreenViewBaseC1Ev+0x470>)
 8003d72:	9306      	str	r3, [sp, #24]
    scoreText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KDY8));
 8003d74:	a906      	add	r1, sp, #24
 8003d76:	2323      	movs	r3, #35	; 0x23
 8003d78:	4650      	mov	r0, sl
 8003d7a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003d7e:	f00f f821 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003d82:	4651      	mov	r1, sl
 8003d84:	4630      	mov	r0, r6
 8003d86:	f00b fead 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    bird.setBitmap(touchgfx::Bitmap(BITMAP_BIRD_REMOVEBG_PREVIEW_ID));
 8003d8a:	a906      	add	r1, sp, #24
 8003d8c:	4658      	mov	r0, fp
 8003d8e:	f8ad 5018 	strh.w	r5, [sp, #24]
 8003d92:	f00f f973 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    bird.setPosition(30, 136, 46, 48);
 8003d96:	2330      	movs	r3, #48	; 0x30
 8003d98:	2288      	movs	r2, #136	; 0x88
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	4658      	mov	r0, fp
 8003d9e:	232e      	movs	r3, #46	; 0x2e
 8003da0:	211e      	movs	r1, #30
 8003da2:	f7ff fdbf 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    bird.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8003da6:	4629      	mov	r1, r5
 8003da8:	4658      	mov	r0, fp
 8003daa:	f00e fa74 	bl	8012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8003dae:	4630      	mov	r0, r6
 8003db0:	4659      	mov	r1, fp
 8003db2:	f00b fe97 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    wallNum = 0;
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <_ZN20FlappyScreenViewBaseC1Ev+0x474>)
 8003db8:	701d      	strb	r5, [r3, #0]
    randomNumber = 0;
 8003dba:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <_ZN20FlappyScreenViewBaseC1Ev+0x478>)
 8003dbc:	601d      	str	r5, [r3, #0]
    randomNumberReal = 0;
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <_ZN20FlappyScreenViewBaseC1Ev+0x47c>)
 8003dc0:	601d      	str	r5, [r3, #0]
    autoMode = 0;
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <_ZN20FlappyScreenViewBaseC1Ev+0x480>)
}
 8003dc4:	4620      	mov	r0, r4
    autoMode = 0;
 8003dc6:	701d      	strb	r5, [r3, #0]
}
 8003dc8:	b009      	add	sp, #36	; 0x24
 8003dca:	ecbd 8b08 	vpop	{d8-d11}
 8003dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dd2:	bf00      	nop
 8003dd4:	2001466c 	.word	0x2001466c
 8003dd8:	08028453 	.word	0x08028453
 8003ddc:	08028491 	.word	0x08028491
 8003de0:	20014674 	.word	0x20014674
 8003de4:	080284c9 	.word	0x080284c9
 8003de8:	080284d4 	.word	0x080284d4
 8003dec:	20003620 	.word	0x20003620
 8003df0:	20003618 	.word	0x20003618
 8003df4:	2000361c 	.word	0x2000361c
 8003df8:	200003cb 	.word	0x200003cb

08003dfc <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003dfc:	4770      	bx	lr

08003dfe <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003dfe:	4770      	bx	lr

08003e00 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003e00:	f500 7398 	add.w	r3, r0, #304	; 0x130
 8003e04:	6808      	ldr	r0, [r1, #0]
 8003e06:	6849      	ldr	r1, [r1, #4]
 8003e08:	c303      	stmia	r3!, {r0, r1}
    }
 8003e0a:	4770      	bx	lr

08003e0c <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003e0c:	4770      	bx	lr

08003e0e <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003e0e:	4770      	bx	lr

08003e10 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003e10:	6041      	str	r1, [r0, #4]
    }
 8003e12:	4770      	bx	lr

08003e14 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003e14:	4770      	bx	lr
	...

08003e18 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003e18:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003e1a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen3

void FrontendApplicationBase::gotoScreen3ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen3ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003e24:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003e28:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8003e2c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen3ScreenNoTransition();
    }
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	0800412d 	.word	0x0800412d

08003e38 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	7203      	strb	r3, [r0, #8]
    }
 8003e3c:	4770      	bx	lr

08003e3e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003e3e:	4770      	bx	lr

08003e40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003e40:	4770      	bx	lr

08003e42 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003e42:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003e44:	68c2      	ldr	r2, [r0, #12]
 8003e46:	6841      	ldr	r1, [r0, #4]
 8003e48:	1054      	asrs	r4, r2, #1
    virtual void execute()
 8003e4a:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003e4c:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003e50:	07d2      	lsls	r2, r2, #31
 8003e52:	bf48      	it	mi
 8003e54:	590a      	ldrmi	r2, [r1, r4]
 8003e56:	689b      	ldr	r3, [r3, #8]
    }
 8003e58:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003e5c:	bf48      	it	mi
 8003e5e:	58d3      	ldrmi	r3, [r2, r3]
 8003e60:	4718      	bx	r3

08003e62 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8003e62:	6843      	ldr	r3, [r0, #4]
 8003e64:	b12b      	cbz	r3, 8003e72 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8003e66:	6883      	ldr	r3, [r0, #8]
 8003e68:	b92b      	cbnz	r3, 8003e76 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003e6a:	68c0      	ldr	r0, [r0, #12]
 8003e6c:	f000 0001 	and.w	r0, r0, #1
 8003e70:	4770      	bx	lr
 8003e72:	4618      	mov	r0, r3
 8003e74:	4770      	bx	lr
 8003e76:	2001      	movs	r0, #1
    }
 8003e78:	4770      	bx	lr

08003e7a <_ZN8touchgfx12NoTransitionD0Ev>:
 8003e7a:	b510      	push	{r4, lr}
 8003e7c:	210c      	movs	r1, #12
 8003e7e:	4604      	mov	r4, r0
 8003e80:	f022 fdb9 	bl	80269f6 <_ZdlPvj>
 8003e84:	4620      	mov	r0, r4
 8003e86:	bd10      	pop	{r4, pc}

08003e88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	2110      	movs	r1, #16
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	f022 fdb2 	bl	80269f6 <_ZdlPvj>
 8003e92:	4620      	mov	r0, r4
 8003e94:	bd10      	pop	{r4, pc}

08003e96 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003e96:	b510      	push	{r4, lr}
 8003e98:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	f022 fdaa 	bl	80269f6 <_ZdlPvj>
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	bd10      	pop	{r4, pc}

08003ea6 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003ea6:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003ea8:	f011 fcf6 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
 8003eac:	6803      	ldr	r3, [r0, #0]
    }
 8003eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb4:	4718      	bx	r3

08003eb6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003eb6:	b510      	push	{r4, lr}
 8003eb8:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003eba:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8003ebe:	b158      	cbz	r0, 8003ed8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003ec0:	6803      	ldr	r3, [r0, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4798      	blx	r3
 8003ec6:	b138      	cbz	r0, 8003ed8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003ec8:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8003ecc:	6803      	ldr	r3, [r0, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 8003ed8:	bd10      	pop	{r4, pc}
	...

08003edc <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003ee4:	b10a      	cbz	r2, 8003eea <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003ee6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003ee8:	b900      	cbnz	r0, 8003eec <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8003eea:	6898      	ldr	r0, [r3, #8]
    }
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20014610 	.word	0x20014610

08003ef4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4617      	mov	r7, r2
 8003efa:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003efc:	f011 fd8e 	bl	8015a1c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003f00:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
 8003f02:	601c      	str	r4, [r3, #0]
      model(m)
 8003f04:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8003f06:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8003f08:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 8003f0a:	2500      	movs	r5, #0
 8003f0c:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
        return instance;
 8003f10:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003f12:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
 8003f16:	6818      	ldr	r0, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8003f18:	6803      	ldr	r3, [r0, #0]
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	689b      	ldr	r3, [r3, #8]
          pendingScreenTransitionCallback(0)
 8003f1e:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
      model(m)
 8003f22:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8003f26:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f002 fc0d 	bl	8006748 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003f2e:	f7ff ffd5 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 8003f32:	f01a fee4 	bl	801ecfe <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003f36:	f7ff ffd1 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 8003f3a:	f01a ff5b 	bl	801edf4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
 8003f3e:	4620      	mov	r0, r4
 8003f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20014664 	.word	0x20014664
 8003f48:	08028bf8 	.word	0x08028bf8
 8003f4c:	08028be0 	.word	0x08028be0
 8003f50:	20014610 	.word	0x20014610

08003f54 <_ZN23FrontendApplicationBase34gotoFlappyScreenScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003f54:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <_ZN23FrontendApplicationBase34gotoFlappyScreenScreenNoTransitionEv+0x1c>)
 8003f56:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003f60:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003f64:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8003f68:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	080043cd 	.word	0x080043cd

08003f74 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8003f76:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003f80:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003f84:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8003f88:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	0800427d 	.word	0x0800427d

08003f94 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>:
 8003f94:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv+0x1c>)
 8003f96:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003fa0:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003fa4:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8003fa8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	0800412d 	.word	0x0800412d

08003fb4 <_ZN23FrontendApplicationBase29gotoScreen4ScreenNoTransitionEv>:
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <_ZN23FrontendApplicationBase29gotoScreen4ScreenNoTransitionEv+0x1c>)
 8003fb6:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen4

void FrontendApplicationBase::gotoScreen4ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen4ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003fc0:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003fc4:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8003fc8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	08003fdd 	.word	0x08003fdd

08003fd4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003fd4:	6803      	ldr	r3, [r0, #0]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	4718      	bx	r3
	...

08003fdc <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen4ScreenNoTransitionImpl()
{
 8003fdc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen4View, Screen4Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003fe0:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8003fe4:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003fe6:	68a8      	ldr	r0, [r5, #8]
 8003fe8:	6803      	ldr	r3, [r0, #0]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	4798      	blx	r3
 8003fee:	f242 136f 	movw	r3, #8559	; 0x216f
 8003ff2:	4298      	cmp	r0, r3
 8003ff4:	d805      	bhi.n	8004002 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x26>
 8003ff6:	4b45      	ldr	r3, [pc, #276]	; (800410c <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x130>)
 8003ff8:	4a45      	ldr	r2, [pc, #276]	; (8004110 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x134>)
 8003ffa:	21a3      	movs	r1, #163	; 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003ffc:	4845      	ldr	r0, [pc, #276]	; (8004114 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x138>)
 8003ffe:	f022 fd29 	bl	8026a54 <__assert_func>
 8004002:	6868      	ldr	r0, [r5, #4]
 8004004:	6803      	ldr	r3, [r0, #0]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	4798      	blx	r3
 800400a:	280f      	cmp	r0, #15
 800400c:	d803      	bhi.n	8004016 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x3a>
 800400e:	4b42      	ldr	r3, [pc, #264]	; (8004118 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x13c>)
 8004010:	4a3f      	ldr	r2, [pc, #252]	; (8004110 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x134>)
 8004012:	21a4      	movs	r1, #164	; 0xa4
 8004014:	e7f2      	b.n	8003ffc <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004016:	68e8      	ldr	r0, [r5, #12]
 8004018:	6803      	ldr	r3, [r0, #0]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	4798      	blx	r3
 800401e:	280b      	cmp	r0, #11
 8004020:	d803      	bhi.n	800402a <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x4e>
 8004022:	4b3e      	ldr	r3, [pc, #248]	; (800411c <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x140>)
 8004024:	4a3a      	ldr	r2, [pc, #232]	; (8004110 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x134>)
 8004026:	21a5      	movs	r1, #165	; 0xa5
 8004028:	e7e8      	b.n	8003ffc <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 800402a:	f011 fc35 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 800402e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8004124 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x148>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8004032:	3004      	adds	r0, #4
 8004034:	f011 fc55 	bl	80158e2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8004038:	f8d9 0000 	ldr.w	r0, [r9]
 800403c:	b110      	cbz	r0, 8004044 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 800403e:	6803      	ldr	r3, [r0, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	4798      	blx	r3
    if (*currentTrans)
 8004044:	f8d9 0000 	ldr.w	r0, [r9]
 8004048:	b110      	cbz	r0, 8004050 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 800404a:	6803      	ldr	r3, [r0, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4798      	blx	r3
    if (*currentScreen)
 8004050:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8004128 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x14c>
 8004054:	f8d8 0000 	ldr.w	r0, [r8]
 8004058:	b110      	cbz	r0, 8004060 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 800405a:	6803      	ldr	r3, [r0, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	4798      	blx	r3
    if (*currentPresenter)
 8004060:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8004064:	b110      	cbz	r0, 800406c <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8004066:	6803      	ldr	r3, [r0, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4798      	blx	r3
    if (*currentScreen)
 800406c:	f8d8 0000 	ldr.w	r0, [r8]
 8004070:	b110      	cbz	r0, 8004078 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8004072:	6803      	ldr	r3, [r0, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4798      	blx	r3
    if (*currentPresenter)
 8004078:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800407c:	b110      	cbz	r0, 8004084 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 800407e:	6803      	ldr	r3, [r0, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004084:	68e8      	ldr	r0, [r5, #12]
 8004086:	2100      	movs	r1, #0
 8004088:	f7ff ffa4 	bl	8003fd4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
        : screenContainer(0), done(false)
 800408c:	f04f 0b00 	mov.w	fp, #0
 8004090:	4b23      	ldr	r3, [pc, #140]	; (8004120 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x144>)
 8004092:	6003      	str	r3, [r0, #0]
 8004094:	4604      	mov	r4, r0
 8004096:	f8c0 b004 	str.w	fp, [r0, #4]
 800409a:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800409e:	68a8      	ldr	r0, [r5, #8]
 80040a0:	6803      	ldr	r3, [r0, #0]
 80040a2:	4659      	mov	r1, fp
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	4798      	blx	r3
 80040a8:	4606      	mov	r6, r0
 80040aa:	f002 fcd1 	bl	8006a50 <_ZN11Screen4ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80040ae:	6868      	ldr	r0, [r5, #4]
 80040b0:	6803      	ldr	r3, [r0, #0]
 80040b2:	4659      	mov	r1, fp
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	4798      	blx	r3
 80040b8:	4631      	mov	r1, r6
 80040ba:	4605      	mov	r5, r0
 80040bc:	f002 fca2 	bl	8006a04 <_ZN16Screen4PresenterC1ER11Screen4View>
    *currentTrans = newTransition;
 80040c0:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80040c4:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 80040c8:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80040cc:	b1e5      	cbz	r5, 8004108 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0x12c>
 80040ce:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80040d0:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80040d4:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80040d6:	f8c5 a008 	str.w	sl, [r5, #8]
 80040da:	4630      	mov	r0, r6
 80040dc:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80040de:	63f5      	str	r5, [r6, #60]	; 0x3c
 80040e0:	4798      	blx	r3
    newPresenter->activate();
 80040e2:	682b      	ldr	r3, [r5, #0]
 80040e4:	4628      	mov	r0, r5
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80040ea:	4621      	mov	r1, r4
 80040ec:	4630      	mov	r0, r6
 80040ee:	f013 f98d 	bl	801740c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	4620      	mov	r0, r4
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	4798      	blx	r3
    newTransition->invalidate();
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	4620      	mov	r0, r4
}
 8004100:	b001      	add	sp, #4
 8004102:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004106:	4718      	bx	r3
    model->bind(newPresenter);
 8004108:	462b      	mov	r3, r5
 800410a:	e7e1      	b.n	80040d0 <_ZN23FrontendApplicationBase33gotoScreen4ScreenNoTransitionImplEv+0xf4>
 800410c:	080285a0 	.word	0x080285a0
 8004110:	0802862e 	.word	0x0802862e
 8004114:	08028732 	.word	0x08028732
 8004118:	08028779 	.word	0x08028779
 800411c:	0802881c 	.word	0x0802881c
 8004120:	08028c4c 	.word	0x08028c4c
 8004124:	20014658 	.word	0x20014658
 8004128:	20014654 	.word	0x20014654

0800412c <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv>:
{
 800412c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen3View, Screen3Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004130:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8004134:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004136:	68a8      	ldr	r0, [r5, #8]
 8004138:	6803      	ldr	r3, [r0, #0]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	4798      	blx	r3
 800413e:	f5b0 7fd6 	cmp.w	r0, #428	; 0x1ac
 8004142:	d205      	bcs.n	8004150 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x24>
 8004144:	4b45      	ldr	r3, [pc, #276]	; (800425c <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x130>)
 8004146:	4a46      	ldr	r2, [pc, #280]	; (8004260 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x134>)
 8004148:	21a3      	movs	r1, #163	; 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800414a:	4846      	ldr	r0, [pc, #280]	; (8004264 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x138>)
 800414c:	f022 fc82 	bl	8026a54 <__assert_func>
 8004150:	6868      	ldr	r0, [r5, #4]
 8004152:	6803      	ldr	r3, [r0, #0]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	4798      	blx	r3
 8004158:	280f      	cmp	r0, #15
 800415a:	d803      	bhi.n	8004164 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x38>
 800415c:	4b42      	ldr	r3, [pc, #264]	; (8004268 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x13c>)
 800415e:	4a40      	ldr	r2, [pc, #256]	; (8004260 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x134>)
 8004160:	21a4      	movs	r1, #164	; 0xa4
 8004162:	e7f2      	b.n	800414a <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004164:	68e8      	ldr	r0, [r5, #12]
 8004166:	6803      	ldr	r3, [r0, #0]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	4798      	blx	r3
 800416c:	280b      	cmp	r0, #11
 800416e:	d803      	bhi.n	8004178 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x4c>
 8004170:	4b3e      	ldr	r3, [pc, #248]	; (800426c <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x140>)
 8004172:	4a3b      	ldr	r2, [pc, #236]	; (8004260 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x134>)
 8004174:	21a5      	movs	r1, #165	; 0xa5
 8004176:	e7e8      	b.n	800414a <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 8004178:	f011 fb8e 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 800417c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8004274 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x148>
 8004180:	3004      	adds	r0, #4
 8004182:	f011 fbae 	bl	80158e2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8004186:	f8d9 0000 	ldr.w	r0, [r9]
 800418a:	b110      	cbz	r0, 8004192 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 800418c:	6803      	ldr	r3, [r0, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4798      	blx	r3
    if (*currentTrans)
 8004192:	f8d9 0000 	ldr.w	r0, [r9]
 8004196:	b110      	cbz	r0, 800419e <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8004198:	6803      	ldr	r3, [r0, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4798      	blx	r3
    if (*currentScreen)
 800419e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8004278 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x14c>
 80041a2:	f8d8 0000 	ldr.w	r0, [r8]
 80041a6:	b110      	cbz	r0, 80041ae <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80041a8:	6803      	ldr	r3, [r0, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	4798      	blx	r3
    if (*currentPresenter)
 80041ae:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80041b2:	b110      	cbz	r0, 80041ba <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80041b4:	6803      	ldr	r3, [r0, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	4798      	blx	r3
    if (*currentScreen)
 80041ba:	f8d8 0000 	ldr.w	r0, [r8]
 80041be:	b110      	cbz	r0, 80041c6 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80041c0:	6803      	ldr	r3, [r0, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4798      	blx	r3
    if (*currentPresenter)
 80041c6:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80041ca:	b110      	cbz	r0, 80041d2 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80041cc:	6803      	ldr	r3, [r0, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80041d2:	68e8      	ldr	r0, [r5, #12]
 80041d4:	2100      	movs	r1, #0
 80041d6:	f7ff fefd 	bl	8003fd4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80041da:	f04f 0b00 	mov.w	fp, #0
 80041de:	4b24      	ldr	r3, [pc, #144]	; (8004270 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x144>)
 80041e0:	6003      	str	r3, [r0, #0]
 80041e2:	4604      	mov	r4, r0
 80041e4:	f8c0 b004 	str.w	fp, [r0, #4]
 80041e8:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80041ec:	68a8      	ldr	r0, [r5, #8]
 80041ee:	6803      	ldr	r3, [r0, #0]
 80041f0:	4659      	mov	r1, fp
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	4798      	blx	r3
 80041f6:	4606      	mov	r6, r0
 80041f8:	f002 fbea 	bl	80069d0 <_ZN11Screen3ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80041fc:	6868      	ldr	r0, [r5, #4]
 80041fe:	6803      	ldr	r3, [r0, #0]
 8004200:	4659      	mov	r1, fp
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	4798      	blx	r3
 8004206:	4631      	mov	r1, r6
 8004208:	4605      	mov	r5, r0
 800420a:	f002 fbbb 	bl	8006984 <_ZN16Screen3PresenterC1ER11Screen3View>
    *currentTrans = newTransition;
 800420e:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8004212:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8004216:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800421a:	b1e5      	cbz	r5, 8004256 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x12a>
 800421c:	1d2b      	adds	r3, r5, #4
 800421e:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004222:	6833      	ldr	r3, [r6, #0]
 8004224:	f8c5 a008 	str.w	sl, [r5, #8]
 8004228:	4630      	mov	r0, r6
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	63f5      	str	r5, [r6, #60]	; 0x3c
 800422e:	4798      	blx	r3
    newPresenter->activate();
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	4628      	mov	r0, r5
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004238:	4621      	mov	r1, r4
 800423a:	4630      	mov	r0, r6
 800423c:	f013 f8e6 	bl	801740c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	4620      	mov	r0, r4
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	4798      	blx	r3
    newTransition->invalidate();
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	4620      	mov	r0, r4
}
 800424e:	b001      	add	sp, #4
 8004250:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004254:	4718      	bx	r3
    model->bind(newPresenter);
 8004256:	462b      	mov	r3, r5
 8004258:	e7e1      	b.n	800421e <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0xf2>
 800425a:	bf00      	nop
 800425c:	080285a0 	.word	0x080285a0
 8004260:	080288bf 	.word	0x080288bf
 8004264:	08028732 	.word	0x08028732
 8004268:	08028779 	.word	0x08028779
 800426c:	0802881c 	.word	0x0802881c
 8004270:	08028c4c 	.word	0x08028c4c
 8004274:	20014658 	.word	0x20014658
 8004278:	20014654 	.word	0x20014654

0800427c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:
{
 800427c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004280:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8004284:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004286:	68a8      	ldr	r0, [r5, #8]
 8004288:	6803      	ldr	r3, [r0, #0]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	4798      	blx	r3
 800428e:	f5b0 7fc2 	cmp.w	r0, #388	; 0x184
 8004292:	d205      	bcs.n	80042a0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>
 8004294:	4b45      	ldr	r3, [pc, #276]	; (80043ac <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 8004296:	4a46      	ldr	r2, [pc, #280]	; (80043b0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 8004298:	21a3      	movs	r1, #163	; 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800429a:	4846      	ldr	r0, [pc, #280]	; (80043b4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 800429c:	f022 fbda 	bl	8026a54 <__assert_func>
 80042a0:	6868      	ldr	r0, [r5, #4]
 80042a2:	6803      	ldr	r3, [r0, #0]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	4798      	blx	r3
 80042a8:	280f      	cmp	r0, #15
 80042aa:	d803      	bhi.n	80042b4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x38>
 80042ac:	4b42      	ldr	r3, [pc, #264]	; (80043b8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x13c>)
 80042ae:	4a40      	ldr	r2, [pc, #256]	; (80043b0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 80042b0:	21a4      	movs	r1, #164	; 0xa4
 80042b2:	e7f2      	b.n	800429a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80042b4:	68e8      	ldr	r0, [r5, #12]
 80042b6:	6803      	ldr	r3, [r0, #0]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4798      	blx	r3
 80042bc:	280b      	cmp	r0, #11
 80042be:	d803      	bhi.n	80042c8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x4c>
 80042c0:	4b3e      	ldr	r3, [pc, #248]	; (80043bc <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x140>)
 80042c2:	4a3b      	ldr	r2, [pc, #236]	; (80043b0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 80042c4:	21a5      	movs	r1, #165	; 0xa5
 80042c6:	e7e8      	b.n	800429a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 80042c8:	f011 fae6 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 80042cc:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80043c4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x148>
 80042d0:	3004      	adds	r0, #4
 80042d2:	f011 fb06 	bl	80158e2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80042d6:	f8d9 0000 	ldr.w	r0, [r9]
 80042da:	b110      	cbz	r0, 80042e2 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80042dc:	6803      	ldr	r3, [r0, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4798      	blx	r3
    if (*currentTrans)
 80042e2:	f8d9 0000 	ldr.w	r0, [r9]
 80042e6:	b110      	cbz	r0, 80042ee <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80042e8:	6803      	ldr	r3, [r0, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4798      	blx	r3
    if (*currentScreen)
 80042ee:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80043c8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x14c>
 80042f2:	f8d8 0000 	ldr.w	r0, [r8]
 80042f6:	b110      	cbz	r0, 80042fe <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80042f8:	6803      	ldr	r3, [r0, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	4798      	blx	r3
    if (*currentPresenter)
 80042fe:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8004302:	b110      	cbz	r0, 800430a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8004304:	6803      	ldr	r3, [r0, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4798      	blx	r3
    if (*currentScreen)
 800430a:	f8d8 0000 	ldr.w	r0, [r8]
 800430e:	b110      	cbz	r0, 8004316 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8004310:	6803      	ldr	r3, [r0, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4798      	blx	r3
    if (*currentPresenter)
 8004316:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800431a:	b110      	cbz	r0, 8004322 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 800431c:	6803      	ldr	r3, [r0, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004322:	68e8      	ldr	r0, [r5, #12]
 8004324:	2100      	movs	r1, #0
 8004326:	f7ff fe55 	bl	8003fd4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800432a:	f04f 0b00 	mov.w	fp, #0
 800432e:	4b24      	ldr	r3, [pc, #144]	; (80043c0 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x144>)
 8004330:	6003      	str	r3, [r0, #0]
 8004332:	4604      	mov	r4, r0
 8004334:	f8c0 b004 	str.w	fp, [r0, #4]
 8004338:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800433c:	68a8      	ldr	r0, [r5, #8]
 800433e:	6803      	ldr	r3, [r0, #0]
 8004340:	4659      	mov	r1, fp
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	4798      	blx	r3
 8004346:	4606      	mov	r6, r0
 8004348:	f002 fb02 	bl	8006950 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800434c:	6868      	ldr	r0, [r5, #4]
 800434e:	6803      	ldr	r3, [r0, #0]
 8004350:	4659      	mov	r1, fp
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	4798      	blx	r3
 8004356:	4631      	mov	r1, r6
 8004358:	4605      	mov	r5, r0
 800435a:	f002 fad3 	bl	8006904 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
 800435e:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8004362:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8004366:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800436a:	b1e5      	cbz	r5, 80043a6 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12a>
 800436c:	1d2b      	adds	r3, r5, #4
 800436e:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004372:	6833      	ldr	r3, [r6, #0]
 8004374:	f8c5 a008 	str.w	sl, [r5, #8]
 8004378:	4630      	mov	r0, r6
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	63f5      	str	r5, [r6, #60]	; 0x3c
 800437e:	4798      	blx	r3
    newPresenter->activate();
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	4628      	mov	r0, r5
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004388:	4621      	mov	r1, r4
 800438a:	4630      	mov	r0, r6
 800438c:	f013 f83e 	bl	801740c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	4620      	mov	r0, r4
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	4798      	blx	r3
    newTransition->invalidate();
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	4620      	mov	r0, r4
}
 800439e:	b001      	add	sp, #4
 80043a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a4:	4718      	bx	r3
    model->bind(newPresenter);
 80043a6:	462b      	mov	r3, r5
 80043a8:	e7e1      	b.n	800436e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xf2>
 80043aa:	bf00      	nop
 80043ac:	080285a0 	.word	0x080285a0
 80043b0:	080289c3 	.word	0x080289c3
 80043b4:	08028732 	.word	0x08028732
 80043b8:	08028779 	.word	0x08028779
 80043bc:	0802881c 	.word	0x0802881c
 80043c0:	08028c4c 	.word	0x08028c4c
 80043c4:	20014658 	.word	0x20014658
 80043c8:	20014654 	.word	0x20014654

080043cc <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv>:
{
 80043cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<FlappyScreenView, FlappyScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80043d0:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 80043d4:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80043d6:	68a8      	ldr	r0, [r5, #8]
 80043d8:	6803      	ldr	r3, [r0, #0]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	4798      	blx	r3
 80043de:	f5b0 7f2c 	cmp.w	r0, #688	; 0x2b0
 80043e2:	d205      	bcs.n	80043f0 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x24>
 80043e4:	4b45      	ldr	r3, [pc, #276]	; (80044fc <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x130>)
 80043e6:	4a46      	ldr	r2, [pc, #280]	; (8004500 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x134>)
 80043e8:	21a3      	movs	r1, #163	; 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80043ea:	4846      	ldr	r0, [pc, #280]	; (8004504 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x138>)
 80043ec:	f022 fb32 	bl	8026a54 <__assert_func>
 80043f0:	6868      	ldr	r0, [r5, #4]
 80043f2:	6803      	ldr	r3, [r0, #0]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	4798      	blx	r3
 80043f8:	280f      	cmp	r0, #15
 80043fa:	d803      	bhi.n	8004404 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x38>
 80043fc:	4b42      	ldr	r3, [pc, #264]	; (8004508 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x13c>)
 80043fe:	4a40      	ldr	r2, [pc, #256]	; (8004500 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x134>)
 8004400:	21a4      	movs	r1, #164	; 0xa4
 8004402:	e7f2      	b.n	80043ea <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004404:	68e8      	ldr	r0, [r5, #12]
 8004406:	6803      	ldr	r3, [r0, #0]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	4798      	blx	r3
 800440c:	280b      	cmp	r0, #11
 800440e:	d803      	bhi.n	8004418 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x4c>
 8004410:	4b3e      	ldr	r3, [pc, #248]	; (800450c <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x140>)
 8004412:	4a3b      	ldr	r2, [pc, #236]	; (8004500 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x134>)
 8004414:	21a5      	movs	r1, #165	; 0xa5
 8004416:	e7e8      	b.n	80043ea <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 8004418:	f011 fa3e 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 800441c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8004514 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x148>
 8004420:	3004      	adds	r0, #4
 8004422:	f011 fa5e 	bl	80158e2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8004426:	f8d9 0000 	ldr.w	r0, [r9]
 800442a:	b110      	cbz	r0, 8004432 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 800442c:	6803      	ldr	r3, [r0, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4798      	blx	r3
    if (*currentTrans)
 8004432:	f8d9 0000 	ldr.w	r0, [r9]
 8004436:	b110      	cbz	r0, 800443e <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8004438:	6803      	ldr	r3, [r0, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4798      	blx	r3
    if (*currentScreen)
 800443e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8004518 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x14c>
 8004442:	f8d8 0000 	ldr.w	r0, [r8]
 8004446:	b110      	cbz	r0, 800444e <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8004448:	6803      	ldr	r3, [r0, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	4798      	blx	r3
    if (*currentPresenter)
 800444e:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8004452:	b110      	cbz	r0, 800445a <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8004454:	6803      	ldr	r3, [r0, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4798      	blx	r3
    if (*currentScreen)
 800445a:	f8d8 0000 	ldr.w	r0, [r8]
 800445e:	b110      	cbz	r0, 8004466 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8004460:	6803      	ldr	r3, [r0, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4798      	blx	r3
    if (*currentPresenter)
 8004466:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800446a:	b110      	cbz	r0, 8004472 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 800446c:	6803      	ldr	r3, [r0, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004472:	68e8      	ldr	r0, [r5, #12]
 8004474:	2100      	movs	r1, #0
 8004476:	f7ff fdad 	bl	8003fd4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800447a:	f04f 0b00 	mov.w	fp, #0
 800447e:	4b24      	ldr	r3, [pc, #144]	; (8004510 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x144>)
 8004480:	6003      	str	r3, [r0, #0]
 8004482:	4604      	mov	r4, r0
 8004484:	f8c0 b004 	str.w	fp, [r0, #4]
 8004488:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800448c:	68a8      	ldr	r0, [r5, #8]
 800448e:	6803      	ldr	r3, [r0, #0]
 8004490:	4659      	mov	r1, fp
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	4798      	blx	r3
 8004496:	4606      	mov	r6, r0
 8004498:	f002 f9f8 	bl	800688c <_ZN16FlappyScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800449c:	6868      	ldr	r0, [r5, #4]
 800449e:	6803      	ldr	r3, [r0, #0]
 80044a0:	4659      	mov	r1, fp
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	4798      	blx	r3
 80044a6:	4631      	mov	r1, r6
 80044a8:	4605      	mov	r5, r0
 80044aa:	f002 f9c9 	bl	8006840 <_ZN21FlappyScreenPresenterC1ER16FlappyScreenView>
    *currentTrans = newTransition;
 80044ae:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80044b2:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 80044b6:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80044ba:	b1e5      	cbz	r5, 80044f6 <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0x12a>
 80044bc:	1d2b      	adds	r3, r5, #4
 80044be:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80044c2:	6833      	ldr	r3, [r6, #0]
 80044c4:	f8c5 a008 	str.w	sl, [r5, #8]
 80044c8:	4630      	mov	r0, r6
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	63f5      	str	r5, [r6, #60]	; 0x3c
 80044ce:	4798      	blx	r3
    newPresenter->activate();
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	4628      	mov	r0, r5
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80044d8:	4621      	mov	r1, r4
 80044da:	4630      	mov	r0, r6
 80044dc:	f012 ff96 	bl	801740c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	4620      	mov	r0, r4
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	4798      	blx	r3
    newTransition->invalidate();
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	4620      	mov	r0, r4
}
 80044ee:	b001      	add	sp, #4
 80044f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f4:	4718      	bx	r3
    model->bind(newPresenter);
 80044f6:	462b      	mov	r3, r5
 80044f8:	e7e1      	b.n	80044be <_ZN23FrontendApplicationBase38gotoFlappyScreenScreenNoTransitionImplEv+0xf2>
 80044fa:	bf00      	nop
 80044fc:	080285a0 	.word	0x080285a0
 8004500:	08028ac7 	.word	0x08028ac7
 8004504:	08028732 	.word	0x08028732
 8004508:	08028779 	.word	0x08028779
 800450c:	0802881c 	.word	0x0802881c
 8004510:	08028c4c 	.word	0x08028c4c
 8004514:	20014658 	.word	0x20014658
 8004518:	20014654 	.word	0x20014654

0800451c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800451c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800451e:	4770      	bx	lr

08004520 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8004520:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004522:	4770      	bx	lr

08004524 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8004524:	4770      	bx	lr

08004526 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004526:	888b      	ldrh	r3, [r1, #4]
 8004528:	69c0      	ldr	r0, [r0, #28]
 800452a:	680a      	ldr	r2, [r1, #0]
 800452c:	0adb      	lsrs	r3, r3, #11
 800452e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8004532:	4410      	add	r0, r2
 8004534:	4770      	bx	lr

08004536 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004536:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8004538:	b1c2      	cbz	r2, 800456c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800453a:	7b13      	ldrb	r3, [r2, #12]
 800453c:	b1b3      	cbz	r3, 800456c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800453e:	7b54      	ldrb	r4, [r2, #13]
 8004540:	7ad2      	ldrb	r2, [r2, #11]
 8004542:	0224      	lsls	r4, r4, #8
 8004544:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004548:	4314      	orrs	r4, r2
 800454a:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800454c:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800454e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004552:	8813      	ldrh	r3, [r2, #0]
 8004554:	428b      	cmp	r3, r1
 8004556:	d102      	bne.n	800455e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8004558:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 800455c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800455e:	d805      	bhi.n	800456c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004560:	3801      	subs	r0, #1
 8004562:	b280      	uxth	r0, r0
 8004564:	3204      	adds	r2, #4
 8004566:	2800      	cmp	r0, #0
 8004568:	d1f3      	bne.n	8004552 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800456a:	e7f7      	b.n	800455c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 800456c:	2000      	movs	r0, #0
 800456e:	e7f5      	b.n	800455c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08004570 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004570:	b510      	push	{r4, lr}
 8004572:	212c      	movs	r1, #44	; 0x2c
 8004574:	4604      	mov	r4, r0
 8004576:	f022 fa3e 	bl	80269f6 <_ZdlPvj>
 800457a:	4620      	mov	r0, r4
 800457c:	bd10      	pop	{r4, pc}
	...

08004580 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004580:	b530      	push	{r4, r5, lr}
 8004582:	b08b      	sub	sp, #44	; 0x2c
 8004584:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8004586:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 800458a:	9508      	str	r5, [sp, #32]
 800458c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8004590:	9507      	str	r5, [sp, #28]
 8004592:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8004596:	9506      	str	r5, [sp, #24]
 8004598:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 800459c:	9505      	str	r5, [sp, #20]
 800459e:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80045a2:	9504      	str	r5, [sp, #16]
 80045a4:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80045a8:	9503      	str	r5, [sp, #12]
 80045aa:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80045ae:	9502      	str	r5, [sp, #8]
 80045b0:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80045b4:	9501      	str	r5, [sp, #4]
 80045b6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80045ba:	9500      	str	r5, [sp, #0]
 80045bc:	f012 fa90 	bl	8016ae0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 80045c2:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 80045c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80045c6:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 80045c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80045ca:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 80045cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045ce:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
 80045d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80045d2:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80045d4:	4620      	mov	r0, r4
 80045d6:	b00b      	add	sp, #44	; 0x2c
 80045d8:	bd30      	pop	{r4, r5, pc}
 80045da:	bf00      	nop
 80045dc:	08028c70 	.word	0x08028c70

080045e0 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 80045e0:	4770      	bx	lr

080045e2 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 80045e2:	4770      	bx	lr

080045e4 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 80045e4:	b510      	push	{r4, lr}
}
 80045e6:	f44f 71c2 	mov.w	r1, #388	; 0x184
Screen2ViewBase::~Screen2ViewBase()
 80045ea:	4604      	mov	r4, r0
}
 80045ec:	f022 fa03 	bl	80269f6 <_ZdlPvj>
 80045f0:	4620      	mov	r0, r4
 80045f2:	bd10      	pop	{r4, pc}

080045f4 <_ZN15Screen2ViewBase15handleTickEventEv>:

void Screen2ViewBase::handleTickEvent()
{
 80045f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if(timeCounter >= 5){
 80045f8:	4d3c      	ldr	r5, [pc, #240]	; (80046ec <_ZN15Screen2ViewBase15handleTickEventEv+0xf8>)
 80045fa:	4e3d      	ldr	r6, [pc, #244]	; (80046f0 <_ZN15Screen2ViewBase15handleTickEventEv+0xfc>)
 80045fc:	782b      	ldrb	r3, [r5, #0]
 80045fe:	2b04      	cmp	r3, #4
{
 8004600:	4604      	mov	r4, r0
	if(timeCounter >= 5){
 8004602:	d90c      	bls.n	800461e <_ZN15Screen2ViewBase15handleTickEventEv+0x2a>
		screenNumber = 1;
 8004604:	4b3b      	ldr	r3, [pc, #236]	; (80046f4 <_ZN15Screen2ViewBase15handleTickEventEv+0x100>)
		score = 0;
		HAL_TIM_Base_Stop_IT(&htim2);
 8004606:	483c      	ldr	r0, [pc, #240]	; (80046f8 <_ZN15Screen2ViewBase15handleTickEventEv+0x104>)
		screenNumber = 1;
 8004608:	2201      	movs	r2, #1
		score = 0;
 800460a:	2700      	movs	r7, #0
		screenNumber = 1;
 800460c:	701a      	strb	r2, [r3, #0]
		score = 0;
 800460e:	8037      	strh	r7, [r6, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8004610:	f007 f8f6 	bl	800b800 <HAL_TIM_Base_Stop_IT>
		timeCounter = 0;
 8004614:	702f      	strb	r7, [r5, #0]
    virtual void setupScreen();
    virtual void handleTickEvent();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8004616:	f011 f93f 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
		application().gotoFlappyScreenScreenNoTransition();
 800461a:	f7ff fc9b 	bl	8003f54 <_ZN23FrontendApplicationBase34gotoFlappyScreenScreenNoTransitionEv>
	}
    //Interaction1
    //When every N tick set wildcard endScoreText
    //Set endScoreText wildcard to __SingleUse_JXFO
	if (!isScoreShowed){
 800461e:	4d37      	ldr	r5, [pc, #220]	; (80046fc <_ZN15Screen2ViewBase15handleTickEventEv+0x108>)
 8004620:	782b      	ldrb	r3, [r5, #0]
 8004622:	b983      	cbnz	r3, 8004646 <_ZN15Screen2ViewBase15handleTickEventEv+0x52>
		Unicode::snprintf(endScoreTextBuffer, 10, "%u" , score);
 8004624:	8833      	ldrh	r3, [r6, #0]
 8004626:	4a36      	ldr	r2, [pc, #216]	; (8004700 <_ZN15Screen2ViewBase15handleTickEventEv+0x10c>)
 8004628:	210a      	movs	r1, #10
 800462a:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 800462e:	f014 f9c5 	bl	80189bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		endScoreText.resizeToCurrentText();
 8004632:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8004636:	9001      	str	r0, [sp, #4]
 8004638:	f00e fba4 	bl	8012d84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
		endScoreText.invalidate();
 800463c:	9801      	ldr	r0, [sp, #4]
 800463e:	f012 f9a1 	bl	8016984 <_ZNK8touchgfx8Drawable10invalidateEv>
		isScoreShowed = 1;
 8004642:	2301      	movs	r3, #1
 8004644:	702b      	strb	r3, [r5, #0]
	}

	if(score > topScore && !isTopScoreChanged){
 8004646:	4f2f      	ldr	r7, [pc, #188]	; (8004704 <_ZN15Screen2ViewBase15handleTickEventEv+0x110>)
 8004648:	8832      	ldrh	r2, [r6, #0]
 800464a:	883b      	ldrh	r3, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d935      	bls.n	80046bc <_ZN15Screen2ViewBase15handleTickEventEv+0xc8>
 8004650:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8004714 <_ZN15Screen2ViewBase15handleTickEventEv+0x120>
 8004654:	f899 a000 	ldrb.w	sl, [r9]
 8004658:	f1ba 0f00 	cmp.w	sl, #0
 800465c:	d12e      	bne.n	80046bc <_ZN15Screen2ViewBase15handleTickEventEv+0xc8>

		flashAddress = 0x08100000;
 800465e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8004718 <_ZN15Screen2ViewBase15handleTickEventEv+0x124>
		static FLASH_EraseInitTypeDef erase;
		uint32_t sector;
		FLASH->SR = FLASH_FLAG_PGPERR;
 8004662:	4a29      	ldr	r2, [pc, #164]	; (8004708 <_ZN15Screen2ViewBase15handleTickEventEv+0x114>)
		flashAddress = 0x08100000;
 8004664:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8004668:	f8c8 3000 	str.w	r3, [r8]
		FLASH->SR = FLASH_FLAG_PGPERR;
 800466c:	2340      	movs	r3, #64	; 0x40
 800466e:	60d3      	str	r3, [r2, #12]
		FLASH->SR = FLASH_FLAG_PGSERR;
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	60d3      	str	r3, [r2, #12]
		FLASH->SR = FLASH_FLAG_EOP;
 8004674:	2501      	movs	r5, #1
		FLASH->SR = FLASH_FLAG_OPERR;
 8004676:	2302      	movs	r3, #2
		FLASH->SR = FLASH_FLAG_EOP;
 8004678:	60d5      	str	r5, [r2, #12]
		FLASH->SR = FLASH_FLAG_OPERR;
 800467a:	60d3      	str	r3, [r2, #12]
		FLASH->SR = FLASH_FLAG_WRPERR;
 800467c:	2310      	movs	r3, #16
 800467e:	60d3      	str	r3, [r2, #12]
		FLASH->SR = FLASH_FLAG_PGAERR;
 8004680:	2320      	movs	r3, #32
 8004682:	60d3      	str	r3, [r2, #12]
		HAL_FLASH_Unlock();
 8004684:	f003 f9d0 	bl	8007a28 <HAL_FLASH_Unlock>
		erase.TypeErase=FLASH_TYPEERASE_SECTORS;
 8004688:	4820      	ldr	r0, [pc, #128]	; (800470c <_ZN15Screen2ViewBase15handleTickEventEv+0x118>)
		erase.VoltageRange=FLASH_VOLTAGE_RANGE_2;
		erase.Sector=(uint32_t)12;
 800468a:	230c      	movs	r3, #12
		erase.NbSectors=(uint32_t)1;
		HAL_FLASHEx_Erase(&erase,&sector);
 800468c:	eb0d 0103 	add.w	r1, sp, r3
		erase.NbSectors=(uint32_t)1;
 8004690:	e9c0 3502 	strd	r3, r5, [r0, #8]
		erase.TypeErase=FLASH_TYPEERASE_SECTORS;
 8004694:	f8c0 a000 	str.w	sl, [r0]
		erase.VoltageRange=FLASH_VOLTAGE_RANGE_2;
 8004698:	6105      	str	r5, [r0, #16]
		HAL_FLASHEx_Erase(&erase,&sector);
 800469a:	f003 fb37 	bl	8007d0c <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress, score);
 800469e:	4653      	mov	r3, sl
 80046a0:	8832      	ldrh	r2, [r6, #0]
 80046a2:	f8d8 1000 	ldr.w	r1, [r8]
 80046a6:	4628      	mov	r0, r5
 80046a8:	f003 f96a 	bl	8007980 <HAL_FLASH_Program>
		topScore = *(__IO uint16_t *)flashAddress;
 80046ac:	f8d8 3000 	ldr.w	r3, [r8]
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	803b      	strh	r3, [r7, #0]
		isTopScoreChanged = 1;
 80046b4:	f889 5000 	strb.w	r5, [r9]
		HAL_FLASH_Lock();
 80046b8:	f003 f9d8 	bl	8007a6c <HAL_FLASH_Lock>
	}

	if(!isTopScoreShowed){
 80046bc:	4d14      	ldr	r5, [pc, #80]	; (8004710 <_ZN15Screen2ViewBase15handleTickEventEv+0x11c>)
 80046be:	782b      	ldrb	r3, [r5, #0]
 80046c0:	b983      	cbnz	r3, 80046e4 <_ZN15Screen2ViewBase15handleTickEventEv+0xf0>
		Unicode::snprintf(topScoreTextBuffer, 10, "%u" , topScore);
 80046c2:	883b      	ldrh	r3, [r7, #0]
 80046c4:	4a0e      	ldr	r2, [pc, #56]	; (8004700 <_ZN15Screen2ViewBase15handleTickEventEv+0x10c>)
 80046c6:	210a      	movs	r1, #10
 80046c8:	f504 70b8 	add.w	r0, r4, #368	; 0x170
 80046cc:	f014 f976 	bl	80189bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		topScoreText.resizeToCurrentText();
 80046d0:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 80046d4:	9001      	str	r0, [sp, #4]
 80046d6:	f00e fb55 	bl	8012d84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
		topScoreText.invalidate();
 80046da:	9801      	ldr	r0, [sp, #4]
 80046dc:	f012 f952 	bl	8016984 <_ZNK8touchgfx8Drawable10invalidateEv>
		isTopScoreShowed = 1;
 80046e0:	2301      	movs	r3, #1
 80046e2:	702b      	strb	r3, [r5, #0]
	}
}
 80046e4:	b004      	add	sp, #16
 80046e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ea:	bf00      	nop
 80046ec:	200003ca 	.word	0x200003ca
 80046f0:	200003be 	.word	0x200003be
 80046f4:	20000008 	.word	0x20000008
 80046f8:	20000338 	.word	0x20000338
 80046fc:	20003638 	.word	0x20003638
 8004700:	0802838c 	.word	0x0802838c
 8004704:	200003c8 	.word	0x200003c8
 8004708:	40023c00 	.word	0x40023c00
 800470c:	20003624 	.word	0x20003624
 8004710:	2000363a 	.word	0x2000363a
 8004714:	20003639 	.word	0x20003639
 8004718:	20000004 	.word	0x20000004

0800471c <_ZN8touchgfx8TextAreaC1Ev>:
          touchable(false),
 800471c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004720:	8481      	strh	r1, [r0, #36]	; 0x24
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004722:	490d      	ldr	r1, [pc, #52]	; (8004758 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8004724:	6001      	str	r1, [r0, #0]
 8004726:	490d      	ldr	r1, [pc, #52]	; (800475c <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8004728:	6281      	str	r1, [r0, #40]	; 0x28
 800472a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800472e:	8581      	strh	r1, [r0, #44]	; 0x2c
 8004730:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
        : x(0), y(0), width(0), height(0)
 8004734:	2200      	movs	r2, #0
 8004736:	6341      	str	r1, [r0, #52]	; 0x34
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004738:	f04f 31ff 	mov.w	r1, #4294967295
        : x(0), y(0), width(0), height(0)
 800473c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004740:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8004744:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8004748:	e9c0 2207 	strd	r2, r2, [r0, #28]
              text(0)
 800474c:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
        : color(col)
 8004750:	6302      	str	r2, [r0, #48]	; 0x30
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004752:	8702      	strh	r2, [r0, #56]	; 0x38
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004754:	63c2      	str	r2, [r0, #60]	; 0x3c
    }
 8004756:	4770      	bx	lr
 8004758:	0802966c 	.word	0x0802966c
 800475c:	080284d4 	.word	0x080284d4

08004760 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase()
 8004760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	4604      	mov	r4, r0
 8004766:	b089      	sub	sp, #36	; 0x24
 8004768:	46a1      	mov	r9, r4
        : presenter(0)
 800476a:	2500      	movs	r5, #0
 800476c:	f012 fca2 	bl	80170b4 <_ZN8touchgfx6ScreenC1Ev>
 8004770:	4b81      	ldr	r3, [pc, #516]	; (8004978 <_ZN15Screen2ViewBaseC1Ev+0x218>)
 8004772:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004774:	f849 3b40 	str.w	r3, [r9], #64
 8004778:	f104 0a6c 	add.w	sl, r4, #108	; 0x6c
 800477c:	4648      	mov	r0, r9
 800477e:	f7ff f8e5 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004782:	f104 0798 	add.w	r7, r4, #152	; 0x98
 8004786:	4650      	mov	r0, sl
 8004788:	f7ff f8e0 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 800478c:	f8df 8224 	ldr.w	r8, [pc, #548]	; 80049b4 <_ZN15Screen2ViewBaseC1Ev+0x254>
        : TextArea()
 8004790:	4638      	mov	r0, r7
 8004792:	f104 06e4 	add.w	r6, r4, #228	; 0xe4
 8004796:	f7ff ffc1 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 800479a:	f504 7b98 	add.w	fp, r4, #304	; 0x130
        : TextAreaWithWildcardBase(), wc1(0)
 800479e:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
 80047a2:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
        : TextArea()
 80047a6:	4630      	mov	r0, r6
 80047a8:	f7ff ffb8 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 80047ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
        : TextAreaWithWildcardBase(), wc1(0)
 80047b0:	f8c4 80e4 	str.w	r8, [r4, #228]	; 0xe4
 80047b4:	a906      	add	r1, sp, #24
 80047b6:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80047ba:	4658      	mov	r0, fp
 80047bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80047c0:	f00d fdae 	bl	8012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
    __background.setPosition(0, 0, 240, 320);
 80047c4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80047c8:	462a      	mov	r2, r5
 80047ca:	4648      	mov	r0, r9
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	4629      	mov	r1, r5
 80047d0:	23f0      	movs	r3, #240	; 0xf0
 80047d2:	f7ff f8a7 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80047d6:	f104 0804 	add.w	r8, r4, #4
 80047da:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80047de:	4649      	mov	r1, r9
 80047e0:	66a3      	str	r3, [r4, #104]	; 0x68
 80047e2:	4640      	mov	r0, r8
 80047e4:	f00b f97e 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    backgroundGameOver.setPosition(0, 0, 240, 320);
 80047e8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80047ec:	462a      	mov	r2, r5
 80047ee:	4650      	mov	r0, sl
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	4629      	mov	r1, r5
 80047f4:	23f0      	movs	r3, #240	; 0xf0
 80047f6:	f7ff f895 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80047fa:	4b60      	ldr	r3, [pc, #384]	; (800497c <_ZN15Screen2ViewBaseC1Ev+0x21c>)
 80047fc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8004800:	4651      	mov	r1, sl
 8004802:	4640      	mov	r0, r8
 8004804:	f00b f96e 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    endScoreText.setXY(77, 168);
 8004808:	22a8      	movs	r2, #168	; 0xa8
 800480a:	214d      	movs	r1, #77	; 0x4d
 800480c:	4638      	mov	r0, r7
 800480e:	f7ff f87c 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004812:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8004816:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
        boundingArea = calculateBoundingArea();
 800481a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        linespace = space;
 800481e:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
        boundingArea = calculateBoundingArea();
 8004822:	f10d 0908 	add.w	r9, sp, #8
 8004826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482a:	4639      	mov	r1, r7
 800482c:	4648      	mov	r0, r9
 800482e:	4798      	blx	r3
 8004830:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8004834:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 8004838:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800483c:	4b50      	ldr	r3, [pc, #320]	; (8004980 <_ZN15Screen2ViewBaseC1Ev+0x220>)
 800483e:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(endScoreTextBuffer, ENDSCORETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_5NP2).getText());
 8004840:	f504 7aae 	add.w	sl, r4, #348	; 0x15c
 8004844:	b92b      	cbnz	r3, 8004852 <_ZN15Screen2ViewBaseC1Ev+0xf2>
 8004846:	4b4f      	ldr	r3, [pc, #316]	; (8004984 <_ZN15Screen2ViewBaseC1Ev+0x224>)
 8004848:	4a4f      	ldr	r2, [pc, #316]	; (8004988 <_ZN15Screen2ViewBaseC1Ev+0x228>)
 800484a:	2160      	movs	r1, #96	; 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800484c:	484f      	ldr	r0, [pc, #316]	; (800498c <_ZN15Screen2ViewBaseC1Ev+0x22c>)
 800484e:	f022 f901 	bl	8026a54 <__assert_func>
 8004852:	4b4f      	ldr	r3, [pc, #316]	; (8004990 <_ZN15Screen2ViewBaseC1Ev+0x230>)
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	2b20      	cmp	r3, #32
 8004858:	d803      	bhi.n	8004862 <_ZN15Screen2ViewBaseC1Ev+0x102>
 800485a:	4b4e      	ldr	r3, [pc, #312]	; (8004994 <_ZN15Screen2ViewBaseC1Ev+0x234>)
 800485c:	4a4a      	ldr	r2, [pc, #296]	; (8004988 <_ZN15Screen2ViewBaseC1Ev+0x228>)
 800485e:	2161      	movs	r1, #97	; 0x61
 8004860:	e7f4      	b.n	800484c <_ZN15Screen2ViewBaseC1Ev+0xec>
        return texts->getText(typedTextId);
 8004862:	4b4d      	ldr	r3, [pc, #308]	; (8004998 <_ZN15Screen2ViewBaseC1Ev+0x238>)
 8004864:	2120      	movs	r1, #32
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	f001 ffaa 	bl	80067c0 <_ZNK8touchgfx5Texts7getTextEt>
 800486c:	4a4b      	ldr	r2, [pc, #300]	; (800499c <_ZN15Screen2ViewBaseC1Ev+0x23c>)
 800486e:	4603      	mov	r3, r0
 8004870:	210a      	movs	r1, #10
 8004872:	4650      	mov	r0, sl
 8004874:	f014 f8a2 	bl	80189bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    endScoreText.resizeToCurrentText();
 8004878:	4638      	mov	r0, r7
        wc1 = value;
 800487a:	f8c4 a0e0 	str.w	sl, [r4, #224]	; 0xe0
 800487e:	f00e fa81 	bl	8012d84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004882:	f8df a134 	ldr.w	sl, [pc, #308]	; 80049b8 <_ZN15Screen2ViewBaseC1Ev+0x258>
 8004886:	f8cd a018 	str.w	sl, [sp, #24]
 800488a:	2321      	movs	r3, #33	; 0x21
    endScoreText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IPTN));
 800488c:	4638      	mov	r0, r7
 800488e:	a906      	add	r1, sp, #24
 8004890:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004894:	f00e fa96 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004898:	4639      	mov	r1, r7
 800489a:	4640      	mov	r0, r8
 800489c:	f00b f922 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    topScoreText.setXY(57, 207);
 80048a0:	22cf      	movs	r2, #207	; 0xcf
 80048a2:	2139      	movs	r1, #57	; 0x39
 80048a4:	4630      	mov	r0, r6
 80048a6:	f7ff f830 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 80048aa:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
        linespace = space;
 80048ae:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
        color = newColor;
 80048b2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 80048b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        color = newColor;
 80048ba:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
        boundingArea = calculateBoundingArea();
 80048be:	4631      	mov	r1, r6
 80048c0:	4648      	mov	r0, r9
 80048c2:	4798      	blx	r3
 80048c4:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80048c8:	f504 7390 	add.w	r3, r4, #288	; 0x120
 80048cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80048d0:	4a2b      	ldr	r2, [pc, #172]	; (8004980 <_ZN15Screen2ViewBaseC1Ev+0x220>)
 80048d2:	6813      	ldr	r3, [r2, #0]
    Unicode::snprintf(topScoreTextBuffer, TOPSCORETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_E3RK).getText());
 80048d4:	f504 77b8 	add.w	r7, r4, #368	; 0x170
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0b4      	beq.n	8004846 <_ZN15Screen2ViewBaseC1Ev+0xe6>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80048dc:	4a2c      	ldr	r2, [pc, #176]	; (8004990 <_ZN15Screen2ViewBaseC1Ev+0x230>)
 80048de:	8813      	ldrh	r3, [r2, #0]
 80048e0:	2b1d      	cmp	r3, #29
 80048e2:	d9ba      	bls.n	800485a <_ZN15Screen2ViewBaseC1Ev+0xfa>
        return texts->getText(typedTextId);
 80048e4:	4b2c      	ldr	r3, [pc, #176]	; (8004998 <_ZN15Screen2ViewBaseC1Ev+0x238>)
 80048e6:	211d      	movs	r1, #29
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	f001 ff69 	bl	80067c0 <_ZNK8touchgfx5Texts7getTextEt>
 80048ee:	4a2b      	ldr	r2, [pc, #172]	; (800499c <_ZN15Screen2ViewBaseC1Ev+0x23c>)
 80048f0:	4603      	mov	r3, r0
 80048f2:	210a      	movs	r1, #10
 80048f4:	4638      	mov	r0, r7
 80048f6:	f014 f861 	bl	80189bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    topScoreText.resizeToCurrentText();
 80048fa:	4630      	mov	r0, r6
 80048fc:	f8c4 712c 	str.w	r7, [r4, #300]	; 0x12c
 8004900:	f00e fa40 	bl	8012d84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004904:	231e      	movs	r3, #30
    topScoreText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YE2B));
 8004906:	a906      	add	r1, sp, #24
 8004908:	4630      	mov	r0, r6
 800490a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800490e:	f8cd a018 	str.w	sl, [sp, #24]
 8004912:	f00e fa57 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004916:	4631      	mov	r1, r6
 8004918:	4640      	mov	r0, r8
 800491a:	f00b f8e3 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800491e:	2302      	movs	r3, #2
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_FLAPPYGAMEOVER_ID));
 8004920:	a906      	add	r1, sp, #24
 8004922:	4658      	mov	r0, fp
 8004924:	f8ad 3018 	strh.w	r3, [sp, #24]
 8004928:	f00e fba8 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(35, 80, 170, 80);
 800492c:	2250      	movs	r2, #80	; 0x50
 800492e:	9200      	str	r2, [sp, #0]
 8004930:	23aa      	movs	r3, #170	; 0xaa
 8004932:	4658      	mov	r0, fp
 8004934:	2123      	movs	r1, #35	; 0x23
 8004936:	f7fe fff5 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 800493a:	4629      	mov	r1, r5
 800493c:	4658      	mov	r0, fp
 800493e:	f00d fcaa 	bl	8012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8004942:	4640      	mov	r0, r8
 8004944:	4659      	mov	r1, fp
 8004946:	f00b f8cd 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    flashAddress = 0x08100000;
 800494a:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <_ZN15Screen2ViewBaseC1Ev+0x240>)
 800494c:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 8004950:	6013      	str	r3, [r2, #0]
    topScore = *(__IO uint16_t *)flashAddress;
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	4a13      	ldr	r2, [pc, #76]	; (80049a4 <_ZN15Screen2ViewBaseC1Ev+0x244>)
 8004956:	b29b      	uxth	r3, r3
	if (topScore == 65535 || topScore > 1000){
 8004958:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    topScore = *(__IO uint16_t *)flashAddress;
 800495c:	bf94      	ite	ls
 800495e:	8013      	strhls	r3, [r2, #0]
		topScore = 0;
 8004960:	8015      	strhhi	r5, [r2, #0]
	isScoreShowed = 0;
 8004962:	4a11      	ldr	r2, [pc, #68]	; (80049a8 <_ZN15Screen2ViewBaseC1Ev+0x248>)
 8004964:	2300      	movs	r3, #0
 8004966:	7013      	strb	r3, [r2, #0]
	isTopScoreChanged = 0;
 8004968:	4a10      	ldr	r2, [pc, #64]	; (80049ac <_ZN15Screen2ViewBaseC1Ev+0x24c>)
 800496a:	7013      	strb	r3, [r2, #0]
	isTopScoreShowed = 0;
 800496c:	4a10      	ldr	r2, [pc, #64]	; (80049b0 <_ZN15Screen2ViewBaseC1Ev+0x250>)
}
 800496e:	4620      	mov	r0, r4
	isTopScoreShowed = 0;
 8004970:	7013      	strb	r3, [r2, #0]
}
 8004972:	b009      	add	sp, #36	; 0x24
 8004974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004978:	08028cd0 	.word	0x08028cd0
 800497c:	ff52bed1 	.word	0xff52bed1
 8004980:	20014668 	.word	0x20014668
 8004984:	0802838f 	.word	0x0802838f
 8004988:	08028491 	.word	0x08028491
 800498c:	0802840c 	.word	0x0802840c
 8004990:	2001466c 	.word	0x2001466c
 8004994:	08028453 	.word	0x08028453
 8004998:	20014674 	.word	0x20014674
 800499c:	080284c9 	.word	0x080284c9
 80049a0:	20000004 	.word	0x20000004
 80049a4:	200003c8 	.word	0x200003c8
 80049a8:	20003638 	.word	0x20003638
 80049ac:	20003639 	.word	0x20003639
 80049b0:	2000363a 	.word	0x2000363a
 80049b4:	080284e4 	.word	0x080284e4
 80049b8:	080284d4 	.word	0x080284d4

080049bc <_ZN15Screen3ViewBaseD1Ev>:
}

Screen3ViewBase::~Screen3ViewBase()
{

}
 80049bc:	4770      	bx	lr

080049be <_ZN15Screen3ViewBase11setupScreenEv>:

void Screen3ViewBase::setupScreen()
{

}
 80049be:	4770      	bx	lr

080049c0 <_ZN15Screen3ViewBaseD0Ev>:
Screen3ViewBase::~Screen3ViewBase()
 80049c0:	b510      	push	{r4, lr}
}
 80049c2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
Screen3ViewBase::~Screen3ViewBase()
 80049c6:	4604      	mov	r4, r0
}
 80049c8:	f022 f815 	bl	80269f6 <_ZdlPvj>
 80049cc:	4620      	mov	r0, r4
 80049ce:	bd10      	pop	{r4, pc}

080049d0 <_ZN15Screen3ViewBase14handleKeyEventEh>:

void Screen3ViewBase::handleKeyEvent(uint8_t key)
{
 80049d0:	b510      	push	{r4, lr}
    if(0 == key)
 80049d2:	b961      	cbnz	r1, 80049ee <_ZN15Screen3ViewBase14handleKeyEventEh+0x1e>
        //When hardware button 0 clicked move selectedProgramBox
        //Set position x:22 and y:22 on selectedProgramBox
    	uint16_t moveToX = 1;
    	uint16_t moveToY = 1;

    	switch(programNumber){
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <_ZN15Screen3ViewBase14handleKeyEventEh+0x4c>)
 80049d6:	781a      	ldrb	r2, [r3, #0]
 80049d8:	2a01      	cmp	r2, #1
 80049da:	d009      	beq.n	80049f0 <_ZN15Screen3ViewBase14handleKeyEventEh+0x20>
 80049dc:	2a02      	cmp	r2, #2
 80049de:	d012      	beq.n	8004a06 <_ZN15Screen3ViewBase14handleKeyEventEh+0x36>
 80049e0:	2201      	movs	r2, #1
 80049e2:	4611      	mov	r1, r2
    		break;
    	default:
    		break;
    	}

        selectedProgramBox.moveTo(moveToX,moveToY);
 80049e4:	b212      	sxth	r2, r2
 80049e6:	b209      	sxth	r1, r1
 80049e8:	3098      	adds	r0, #152	; 0x98
 80049ea:	f7fe fa10 	bl	8002e0e <_ZN8touchgfx8Drawable6moveToEss>
    
    }
}
 80049ee:	bd10      	pop	{r4, pc}
    		moveToX = cvIcon.getX() - 15;
 80049f0:	f8b0 1184 	ldrh.w	r1, [r0, #388]	; 0x184
    		moveToY = cvIcon.getY() - 9;
 80049f4:	f8b0 2186 	ldrh.w	r2, [r0, #390]	; 0x186
    		moveToX = cvIcon.getX() - 15;
 80049f8:	390f      	subs	r1, #15
    		moveToY = cvIcon.getY() - 9;
 80049fa:	3a09      	subs	r2, #9
    		moveToX = cvIcon.getX() - 15;
 80049fc:	b289      	uxth	r1, r1
    		moveToY = cvIcon.getY() - 9;
 80049fe:	b292      	uxth	r2, r2
    		programNumber = 2;
 8004a00:	2402      	movs	r4, #2
    		programNumber = 1;
 8004a02:	701c      	strb	r4, [r3, #0]
    		break;
 8004a04:	e7ee      	b.n	80049e4 <_ZN15Screen3ViewBase14handleKeyEventEh+0x14>
    		moveToX = flappyBirdIcon.getX() - 15;
 8004a06:	f8b0 10c8 	ldrh.w	r1, [r0, #200]	; 0xc8
			moveToY = flappyBirdIcon.getY() - 9;
 8004a0a:	f8b0 20ca 	ldrh.w	r2, [r0, #202]	; 0xca
    		moveToX = flappyBirdIcon.getX() - 15;
 8004a0e:	390f      	subs	r1, #15
			moveToY = flappyBirdIcon.getY() - 9;
 8004a10:	3a09      	subs	r2, #9
    		moveToX = flappyBirdIcon.getX() - 15;
 8004a12:	b289      	uxth	r1, r1
			moveToY = flappyBirdIcon.getY() - 9;
 8004a14:	b292      	uxth	r2, r2
    		programNumber = 1;
 8004a16:	2401      	movs	r4, #1
 8004a18:	e7f3      	b.n	8004a02 <_ZN15Screen3ViewBase14handleKeyEventEh+0x32>
 8004a1a:	bf00      	nop
 8004a1c:	2000001c 	.word	0x2000001c

08004a20 <_ZN15Screen3ViewBase15handleTickEventEv>:

void Screen3ViewBase::handleTickEvent()
{
 8004a20:	b510      	push	{r4, lr}
	if(timeCounter >= 5){
 8004a22:	4c10      	ldr	r4, [pc, #64]	; (8004a64 <_ZN15Screen3ViewBase15handleTickEventEv+0x44>)
 8004a24:	7823      	ldrb	r3, [r4, #0]
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d91b      	bls.n	8004a62 <_ZN15Screen3ViewBase15handleTickEventEv+0x42>
		HAL_TIM_Base_Stop_IT(&htim2);
 8004a2a:	480f      	ldr	r0, [pc, #60]	; (8004a68 <_ZN15Screen3ViewBase15handleTickEventEv+0x48>)
 8004a2c:	f006 fee8 	bl	800b800 <HAL_TIM_Base_Stop_IT>
		timeCounter = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	7023      	strb	r3, [r4, #0]
		if(programNumber == 1){
 8004a34:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <_ZN15Screen3ViewBase15handleTickEventEv+0x4c>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d107      	bne.n	8004a4c <_ZN15Screen3ViewBase15handleTickEventEv+0x2c>
			screenNumber = 1;
 8004a3c:	4a0c      	ldr	r2, [pc, #48]	; (8004a70 <_ZN15Screen3ViewBase15handleTickEventEv+0x50>)
 8004a3e:	7013      	strb	r3, [r2, #0]
    virtual void handleKeyEvent(uint8_t key);
    virtual void handleTickEvent();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8004a40:	f010 ff2a 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
		else if(programNumber == 2){
			screenNumber = 4;
			application().gotoScreen4ScreenNoTransition();
		}
	}
}
 8004a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			application().gotoFlappyScreenScreenNoTransition();
 8004a48:	f7ff ba84 	b.w	8003f54 <_ZN23FrontendApplicationBase34gotoFlappyScreenScreenNoTransitionEv>
		else if(programNumber == 2){
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d108      	bne.n	8004a62 <_ZN15Screen3ViewBase15handleTickEventEv+0x42>
			screenNumber = 4;
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <_ZN15Screen3ViewBase15handleTickEventEv+0x50>)
 8004a52:	2204      	movs	r2, #4
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	f010 ff1f 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
}
 8004a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			application().gotoScreen4ScreenNoTransition();
 8004a5e:	f7ff baa9 	b.w	8003fb4 <_ZN23FrontendApplicationBase29gotoScreen4ScreenNoTransitionEv>
}
 8004a62:	bd10      	pop	{r4, pc}
 8004a64:	200003ca 	.word	0x200003ca
 8004a68:	20000338 	.word	0x20000338
 8004a6c:	2000001c 	.word	0x2000001c
 8004a70:	20000008 	.word	0x20000008

08004a74 <_ZN15Screen3ViewBaseC1Ev>:
Screen3ViewBase::Screen3ViewBase()
 8004a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a78:	ed2d 8b02 	vpush	{d8}
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	b089      	sub	sp, #36	; 0x24
 8004a80:	46a1      	mov	r9, r4
 8004a82:	2500      	movs	r5, #0
 8004a84:	f012 fb16 	bl	80170b4 <_ZN8touchgfx6ScreenC1Ev>
 8004a88:	4b6f      	ldr	r3, [pc, #444]	; (8004c48 <_ZN15Screen3ViewBaseC1Ev+0x1d4>)
 8004a8a:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004a8c:	f849 3b40 	str.w	r3, [r9], #64
 8004a90:	4648      	mov	r0, r9
 8004a92:	f7fe ff5b 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004a96:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	ee08 3a10 	vmov	s16, r3
 8004aa0:	f7fe ff54 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004aa4:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8004aa8:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
 8004aac:	4618      	mov	r0, r3
 8004aae:	ee08 3a90 	vmov	s17, r3
 8004ab2:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
 8004ab6:	f7fe ff49 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004aba:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8004abe:	a906      	add	r1, sp, #24
 8004ac0:	4640      	mov	r0, r8
 8004ac2:	f504 7a9c 	add.w	sl, r4, #312	; 0x138
 8004ac6:	f8ad 6018 	strh.w	r6, [sp, #24]
 8004aca:	f00d fc29 	bl	8012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8004ace:	4638      	mov	r0, r7
 8004ad0:	f7ff fe24 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004ad4:	f504 7bc0 	add.w	fp, r4, #384	; 0x180
 8004ad8:	4650      	mov	r0, sl
 8004ada:	f7ff fe1f 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004ade:	a906      	add	r1, sp, #24
 8004ae0:	4658      	mov	r0, fp
 8004ae2:	f8ad 6018 	strh.w	r6, [sp, #24]
 8004ae6:	f00d fc1b 	bl	8012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
    __background.setPosition(0, 0, 240, 320);
 8004aea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004aee:	462a      	mov	r2, r5
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	4629      	mov	r1, r5
 8004af4:	4648      	mov	r0, r9
 8004af6:	23f0      	movs	r3, #240	; 0xf0
 8004af8:	1d26      	adds	r6, r4, #4
 8004afa:	f7fe ff13 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004afe:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8004b02:	66a3      	str	r3, [r4, #104]	; 0x68
 8004b04:	4649      	mov	r1, r9
 8004b06:	4630      	mov	r0, r6
 8004b08:	f00a ffec 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box3.setPosition(0, 0, 240, 320);
 8004b0c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004b10:	462a      	mov	r2, r5
 8004b12:	ee18 0a10 	vmov	r0, s16
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	4629      	mov	r1, r5
 8004b1a:	23f0      	movs	r3, #240	; 0xf0
 8004b1c:	f7fe ff02 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004b20:	4b4a      	ldr	r3, [pc, #296]	; (8004c4c <_ZN15Screen3ViewBaseC1Ev+0x1d8>)
 8004b22:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8004b26:	ee18 1a10 	vmov	r1, s16
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f00a ffda 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    selectedProgramBox.setPosition(17, 19, 79, 75);
 8004b30:	234b      	movs	r3, #75	; 0x4b
 8004b32:	2213      	movs	r2, #19
 8004b34:	ee18 0a90 	vmov	r0, s17
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	2111      	movs	r1, #17
 8004b3c:	234f      	movs	r3, #79	; 0x4f
 8004b3e:	f7fe fef1 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004b42:	4b43      	ldr	r3, [pc, #268]	; (8004c50 <_ZN15Screen3ViewBaseC1Ev+0x1dc>)
 8004b44:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8004b48:	ee18 1a90 	vmov	r1, s17
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f00a ffc9 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    flappyBirdIcon.setBitmap(touchgfx::Bitmap(BITMAP_BIRD_REMOVEBG_PREVIEW_ID));
 8004b52:	a906      	add	r1, sp, #24
 8004b54:	4640      	mov	r0, r8
 8004b56:	f8ad 5018 	strh.w	r5, [sp, #24]
 8004b5a:	f00e fa8f 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    flappyBirdIcon.setPosition(32, 28, 48, 41);
 8004b5e:	2329      	movs	r3, #41	; 0x29
 8004b60:	221c      	movs	r2, #28
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	4640      	mov	r0, r8
 8004b66:	2330      	movs	r3, #48	; 0x30
 8004b68:	2120      	movs	r1, #32
 8004b6a:	f7fe fedb 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    flappyBirdIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8004b6e:	4629      	mov	r1, r5
 8004b70:	4640      	mov	r0, r8
 8004b72:	f00d fb90 	bl	8012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8004b76:	4641      	mov	r1, r8
 8004b78:	4630      	mov	r0, r6
 8004b7a:	f00a ffb3 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(28, 74);
 8004b7e:	224a      	movs	r2, #74	; 0x4a
 8004b80:	4638      	mov	r0, r7
 8004b82:	211c      	movs	r1, #28
 8004b84:	f7fe fec1 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8004b88:	f10d 0808 	add.w	r8, sp, #8
        color = newColor;
 8004b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b90:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
        boundingArea = calculateBoundingArea();
 8004b94:	4639      	mov	r1, r7
 8004b96:	4640      	mov	r0, r8
        linespace = space;
 8004b98:	f8a4 5124 	strh.w	r5, [r4, #292]	; 0x124
        boundingArea = calculateBoundingArea();
 8004b9c:	f00d fe6a 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004ba0:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004ba4:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 8004ba8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004bac:	f04f 091c 	mov.w	r9, #28
 8004bb0:	4b28      	ldr	r3, [pc, #160]	; (8004c54 <_ZN15Screen3ViewBaseC1Ev+0x1e0>)
 8004bb2:	9306      	str	r3, [sp, #24]
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5GHL));
 8004bb4:	a906      	add	r1, sp, #24
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	f8ad 901c 	strh.w	r9, [sp, #28]
 8004bbc:	f00e f902 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f00a ff8e 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(139, 74);
 8004bc8:	4650      	mov	r0, sl
 8004bca:	224a      	movs	r2, #74	; 0x4a
 8004bcc:	218b      	movs	r1, #139	; 0x8b
 8004bce:	f7fe fe9c 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd6:	f8c4 2168 	str.w	r2, [r4, #360]	; 0x168
        boundingArea = calculateBoundingArea();
 8004bda:	4651      	mov	r1, sl
 8004bdc:	4640      	mov	r0, r8
        linespace = space;
 8004bde:	f8a4 516c 	strh.w	r5, [r4, #364]	; 0x16c
        boundingArea = calculateBoundingArea();
 8004be2:	f00d fe47 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004be6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004bea:	f504 73ba 	add.w	r3, r4, #372	; 0x174
 8004bee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004bf2:	4b18      	ldr	r3, [pc, #96]	; (8004c54 <_ZN15Screen3ViewBaseC1Ev+0x1e0>)
 8004bf4:	9306      	str	r3, [sp, #24]
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_O2DM));
 8004bf6:	a906      	add	r1, sp, #24
 8004bf8:	231b      	movs	r3, #27
 8004bfa:	4650      	mov	r0, sl
 8004bfc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004c00:	f00e f8e0 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004c04:	4651      	mov	r1, sl
 8004c06:	4630      	mov	r0, r6
 8004c08:	f00a ff6c 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004c0c:	2301      	movs	r3, #1
    cvIcon.setBitmap(touchgfx::Bitmap(BITMAP_FLAPPYBACKGROUND_MIN_ID));
 8004c0e:	a906      	add	r1, sp, #24
 8004c10:	4658      	mov	r0, fp
 8004c12:	f8ad 3018 	strh.w	r3, [sp, #24]
 8004c16:	f00e fa31 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    cvIcon.setPosition(144, 28, 48, 41);
 8004c1a:	2329      	movs	r3, #41	; 0x29
 8004c1c:	464a      	mov	r2, r9
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	4658      	mov	r0, fp
 8004c22:	2330      	movs	r3, #48	; 0x30
 8004c24:	2190      	movs	r1, #144	; 0x90
 8004c26:	f7fe fe7d 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    cvIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	4658      	mov	r0, fp
 8004c2e:	f00d fb32 	bl	8012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8004c32:	4630      	mov	r0, r6
 8004c34:	4659      	mov	r1, fp
 8004c36:	f00a ff55 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	b009      	add	sp, #36	; 0x24
 8004c3e:	ecbd 8b02 	vpop	{d8}
 8004c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c46:	bf00      	nop
 8004c48:	08028d04 	.word	0x08028d04
 8004c4c:	ff383636 	.word	0xff383636
 8004c50:	ff696a70 	.word	0xff696a70
 8004c54:	080284d4 	.word	0x080284d4

08004c58 <_ZN15Screen4ViewBase11setupScreenEv>:
}

void Screen4ViewBase::setupScreen()
{

}
 8004c58:	4770      	bx	lr

08004c5a <_ZN8touchgfx5ShapeILt4EED1Ev>:
 * scaled, rotated and moved freely. Example uses could be the hands of a clock.
 *
 * @see AbstractShape
 */
template <uint16_t POINTS>
class Shape : public AbstractShape
 8004c5a:	4770      	bx	lr

08004c5c <_ZNK8touchgfx5ShapeILt4EE12getNumPointsEv>:
{
public:
    virtual int getNumPoints() const
    {
        return POINTS;
    }
 8004c5c:	2004      	movs	r0, #4
 8004c5e:	4770      	bx	lr

08004c60 <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_>:

    virtual void setCorner(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
    {
        if (i >= 0 && i < POINTS)
 8004c60:	2903      	cmp	r1, #3
 8004c62:	bf9e      	ittt	ls
 8004c64:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
        {
            xCorner[i] = x, yCorner[i] = y;
 8004c68:	64c2      	strls	r2, [r0, #76]	; 0x4c
 8004c6a:	65c3      	strls	r3, [r0, #92]	; 0x5c
        }
    }
 8004c6c:	4770      	bx	lr

08004c6e <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi>:

    virtual CWRUtil::Q5 getCornerX(int i) const
    {
        if (i >= 0 && i < POINTS)
 8004c6e:	2903      	cmp	r1, #3
        {
            return xCorner[i];
 8004c70:	bf9a      	itte	ls
 8004c72:	eb00 0181 	addls.w	r1, r0, r1, lsl #2
 8004c76:	6cc8      	ldrls	r0, [r1, #76]	; 0x4c
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 8004c78:	2000      	movhi	r0, #0
        }
        return CWRUtil::toQ5<int>(0);
    }
 8004c7a:	4770      	bx	lr

08004c7c <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi>:

    virtual CWRUtil::Q5 getCornerY(int i) const
    {
        if (i >= 0 && i < POINTS)
 8004c7c:	2903      	cmp	r1, #3
        {
            return yCorner[i];
 8004c7e:	bf9a      	itte	ls
 8004c80:	eb00 0181 	addls.w	r1, r0, r1, lsl #2
 8004c84:	6dc8      	ldrls	r0, [r1, #92]	; 0x5c
 8004c86:	2000      	movhi	r0, #0
        }
        return CWRUtil::toQ5<int>(0);
    }
 8004c88:	4770      	bx	lr

08004c8a <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_>:

protected:
    virtual void setCache(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
    {
        if (i >= 0 && i < POINTS)
 8004c8a:	2903      	cmp	r1, #3
 8004c8c:	bf9e      	ittt	ls
 8004c8e:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
        {
            xCache[i] = x, yCache[i] = y;
 8004c92:	66c2      	strls	r2, [r0, #108]	; 0x6c
 8004c94:	67c3      	strls	r3, [r0, #124]	; 0x7c
        }
    }
 8004c96:	4770      	bx	lr

08004c98 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi>:

    virtual CWRUtil::Q5 getCacheX(int i) const
    {
        if (i >= 0 && i < POINTS)
 8004c98:	2903      	cmp	r1, #3
        {
            return xCache[i];
 8004c9a:	bf9a      	itte	ls
 8004c9c:	eb00 0181 	addls.w	r1, r0, r1, lsl #2
 8004ca0:	6ec8      	ldrls	r0, [r1, #108]	; 0x6c
 8004ca2:	2000      	movhi	r0, #0
        }
        return CWRUtil::toQ5<int>(0);
    }
 8004ca4:	4770      	bx	lr

08004ca6 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi>:

    virtual CWRUtil::Q5 getCacheY(int i) const
    {
        if (i >= 0 && i < POINTS)
 8004ca6:	2903      	cmp	r1, #3
        {
            return yCache[i];
 8004ca8:	bf9a      	itte	ls
 8004caa:	eb00 0181 	addls.w	r1, r0, r1, lsl #2
 8004cae:	6fc8      	ldrls	r0, [r1, #124]	; 0x7c
 8004cb0:	2000      	movhi	r0, #0
        }
        return CWRUtil::toQ5<int>(0);
    }
 8004cb2:	4770      	bx	lr

08004cb4 <_ZN8touchgfx5ShapeILt4EED0Ev>:
class Shape : public AbstractShape
 8004cb4:	b510      	push	{r4, lr}
 8004cb6:	218c      	movs	r1, #140	; 0x8c
 8004cb8:	4604      	mov	r4, r0
 8004cba:	f021 fe9c 	bl	80269f6 <_ZdlPvj>
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	bd10      	pop	{r4, pc}
	...

08004cc4 <_ZN15Screen4ViewBaseD1Ev>:
Screen4ViewBase::~Screen4ViewBase()
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <_ZN15Screen4ViewBaseD1Ev+0x10>)
 8004cc8:	6003      	str	r3, [r0, #0]
 8004cca:	4604      	mov	r4, r0
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8004ccc:	f00f f8e2 	bl	8013e94 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	bd10      	pop	{r4, pc}
 8004cd4:	08028dcc 	.word	0x08028dcc

08004cd8 <_ZN15Screen4ViewBaseD0Ev>:
Screen4ViewBase::~Screen4ViewBase()
 8004cd8:	b507      	push	{r0, r1, r2, lr}
 8004cda:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <_ZN15Screen4ViewBaseD0Ev+0x20>)
 8004cdc:	6003      	str	r3, [r0, #0]
 8004cde:	9001      	str	r0, [sp, #4]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8004ce0:	f00f f8d8 	bl	8013e94 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8004ce4:	9801      	ldr	r0, [sp, #4]
 8004ce6:	f242 1170 	movw	r1, #8560	; 0x2170
 8004cea:	f021 fe84 	bl	80269f6 <_ZdlPvj>
 8004cee:	9801      	ldr	r0, [sp, #4]
 8004cf0:	b003      	add	sp, #12
 8004cf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cf6:	bf00      	nop
 8004cf8:	08028dcc 	.word	0x08028dcc

08004cfc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4604      	mov	r4, r0
 8004d00:	460d      	mov	r5, r1
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 8004d02:	f7fe f93b 	bl	8002f7c <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8004d06:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x18>)
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	3324      	adds	r3, #36	; 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8004d0c:	60e5      	str	r5, [r4, #12]
 8004d0e:	60a3      	str	r3, [r4, #8]
    {
    }
 8004d10:	4620      	mov	r0, r4
 8004d12:	bd38      	pop	{r3, r4, r5, pc}
 8004d14:	080292b0 	.word	0x080292b0

08004d18 <_ZN15Screen4ViewBaseC1Ev>:
Screen4ViewBase::Screen4ViewBase()
 8004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	ed2d 8b10 	vpush	{d8-d15}
 8004d20:	4604      	mov	r4, r0
 8004d22:	b0d7      	sub	sp, #348	; 0x15c
 8004d24:	4627      	mov	r7, r4
 8004d26:	2600      	movs	r6, #0
 8004d28:	f012 f9c4 	bl	80170b4 <_ZN8touchgfx6ScreenC1Ev>
 8004d2c:	4be4      	ldr	r3, [pc, #912]	; (80050c0 <_ZN15Screen4ViewBaseC1Ev+0x3a8>)
 8004d2e:	63e6      	str	r6, [r4, #60]	; 0x3c
 8004d30:	f847 3b40 	str.w	r3, [r7], #64
 8004d34:	f104 0b6c 	add.w	fp, r4, #108	; 0x6c
 8004d38:	4638      	mov	r0, r7
 8004d3a:	f104 0998 	add.w	r9, r4, #152	; 0x98
 8004d3e:	f7fe fe05 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004d42:	4658      	mov	r0, fp
 8004d44:	f104 08e0 	add.w	r8, r4, #224	; 0xe0
 8004d48:	f7fe fe00 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004d4c:	4648      	mov	r0, r9
 8004d4e:	f7ff fce5 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004d52:	4640      	mov	r0, r8
 8004d54:	f7ff fce2 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004d58:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	9319      	str	r3, [sp, #100]	; 0x64
 8004d60:	f7fe fdf4 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004d64:	f504 73aa 	add.w	r3, r4, #340	; 0x154
 8004d68:	4618      	mov	r0, r3
 8004d6a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d6c:	f7fe fdee 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004d70:	f504 73c0 	add.w	r3, r4, #384	; 0x180
 8004d74:	4618      	mov	r0, r3
 8004d76:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d78:	f7fe fde8 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004d7c:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 8004d80:	4618      	mov	r0, r3
 8004d82:	931c      	str	r3, [sp, #112]	; 0x70
 8004d84:	f7fe fde2 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004d88:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	931d      	str	r3, [sp, #116]	; 0x74
 8004d90:	f7fe fddc 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004d94:	f504 7301 	add.w	r3, r4, #516	; 0x204
 8004d98:	4618      	mov	r0, r3
 8004d9a:	931e      	str	r3, [sp, #120]	; 0x78
 8004d9c:	f7fe fdd6 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004da0:	f504 730c 	add.w	r3, r4, #560	; 0x230
 8004da4:	4618      	mov	r0, r3
 8004da6:	931f      	str	r3, [sp, #124]	; 0x7c
 8004da8:	f7fe fdd0 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004dac:	f504 7317 	add.w	r3, r4, #604	; 0x25c
 8004db0:	4618      	mov	r0, r3
 8004db2:	9320      	str	r3, [sp, #128]	; 0x80
 8004db4:	f7fe fdca 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004db8:	f504 7322 	add.w	r3, r4, #648	; 0x288
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	9321      	str	r3, [sp, #132]	; 0x84
 8004dc0:	f7fe fdc4 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004dc4:	f504 732d 	add.w	r3, r4, #692	; 0x2b4
 8004dc8:	4618      	mov	r0, r3
 8004dca:	9322      	str	r3, [sp, #136]	; 0x88
 8004dcc:	f7fe fdbe 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004dd0:	f504 7338 	add.w	r3, r4, #736	; 0x2e0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	9323      	str	r3, [sp, #140]	; 0x8c
 8004dd8:	f7fe fdb8 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004ddc:	f504 7343 	add.w	r3, r4, #780	; 0x30c
 8004de0:	4618      	mov	r0, r3
 8004de2:	9324      	str	r3, [sp, #144]	; 0x90
 8004de4:	f7fe fdb2 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004de8:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8004dec:	4618      	mov	r0, r3
 8004dee:	9325      	str	r3, [sp, #148]	; 0x94
 8004df0:	f7fe fdac 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004df4:	f504 7359 	add.w	r3, r4, #868	; 0x364
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 8004df8:	4618      	mov	r0, r3
 8004dfa:	4db2      	ldr	r5, [pc, #712]	; (80050c4 <_ZN15Screen4ViewBaseC1Ev+0x3ac>)
 8004dfc:	9326      	str	r3, [sp, #152]	; 0x98
 8004dfe:	f7fe fda5 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004e02:	f504 7366 	add.w	r3, r4, #920	; 0x398
 8004e06:	f8c4 5364 	str.w	r5, [r4, #868]	; 0x364
 8004e0a:	4618      	mov	r0, r3
        : color(col)
 8004e0c:	f8c4 6390 	str.w	r6, [r4, #912]	; 0x390
 8004e10:	f8a4 6394 	strh.w	r6, [r4, #916]	; 0x394
 8004e14:	9327      	str	r3, [sp, #156]	; 0x9c
 8004e16:	f7fe fd99 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004e1a:	f504 7371 	add.w	r3, r4, #964	; 0x3c4
 8004e1e:	4618      	mov	r0, r3
 8004e20:	9328      	str	r3, [sp, #160]	; 0xa0
 8004e22:	f7fe fd93 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004e26:	f504 737c 	add.w	r3, r4, #1008	; 0x3f0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	9329      	str	r3, [sp, #164]	; 0xa4
 8004e2e:	f7fe fd8d 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004e32:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 8004e36:	4618      	mov	r0, r3
 8004e38:	932a      	str	r3, [sp, #168]	; 0xa8
 8004e3a:	f7fe fd87 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004e3e:	f504 6389 	add.w	r3, r4, #1096	; 0x448
 8004e42:	4618      	mov	r0, r3
 8004e44:	932b      	str	r3, [sp, #172]	; 0xac
 8004e46:	f7fe fd81 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004e4a:	f204 4374 	addw	r3, r4, #1140	; 0x474
 8004e4e:	4618      	mov	r0, r3
 8004e50:	932c      	str	r3, [sp, #176]	; 0xb0
 8004e52:	f7fe fd7b 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004e56:	f504 6394 	add.w	r3, r4, #1184	; 0x4a0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	9308      	str	r3, [sp, #32]
 8004e5e:	f7ff fc5d 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004e62:	f504 639d 	add.w	r3, r4, #1256	; 0x4e8
 8004e66:	4618      	mov	r0, r3
 8004e68:	9309      	str	r3, [sp, #36]	; 0x24
 8004e6a:	f7ff fc57 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004e6e:	f504 63a6 	add.w	r3, r4, #1328	; 0x530
 8004e72:	4618      	mov	r0, r3
 8004e74:	932d      	str	r3, [sp, #180]	; 0xb4
 8004e76:	f7fe fd69 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004e7a:	f204 535c 	addw	r3, r4, #1372	; 0x55c
 8004e7e:	4618      	mov	r0, r3
 8004e80:	932e      	str	r3, [sp, #184]	; 0xb8
 8004e82:	f7fe fd63 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004e86:	f504 63b1 	add.w	r3, r4, #1416	; 0x588
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	932f      	str	r3, [sp, #188]	; 0xbc
 8004e8e:	f7fe fd5d 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004e92:	f204 53b4 	addw	r3, r4, #1460	; 0x5b4
 8004e96:	4618      	mov	r0, r3
 8004e98:	9330      	str	r3, [sp, #192]	; 0xc0
 8004e9a:	f7fe fd57 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004e9e:	f504 63bc 	add.w	r3, r4, #1504	; 0x5e0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	9331      	str	r3, [sp, #196]	; 0xc4
 8004ea6:	f7fe fd51 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8004eaa:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 8004eae:	4618      	mov	r0, r3
 8004eb0:	9332      	str	r3, [sp, #200]	; 0xc8
 8004eb2:	f00c f95d 	bl	8011170 <_ZN8touchgfx6CircleC1Ev>
 8004eb6:	f204 6354 	addw	r3, r4, #1620	; 0x654
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	933d      	str	r3, [sp, #244]	; 0xf4
 8004ec0:	f7ff ff1c 	bl	8004cfc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8004ec4:	f504 63cd 	add.w	r3, r4, #1640	; 0x668
 8004ec8:	4618      	mov	r0, r3
 8004eca:	930a      	str	r3, [sp, #40]	; 0x28
 8004ecc:	f7ff fc26 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004ed0:	f504 63d6 	add.w	r3, r4, #1712	; 0x6b0
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ed8:	f7ff fc20 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004edc:	f504 63df 	add.w	r3, r4, #1784	; 0x6f8
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	930c      	str	r3, [sp, #48]	; 0x30
 8004ee4:	f7ff fc1a 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004ee8:	f504 63e8 	add.w	r3, r4, #1856	; 0x740
 8004eec:	4618      	mov	r0, r3
 8004eee:	ee09 3a90 	vmov	s19, r3
 8004ef2:	f00c ffe9 	bl	8011ec8 <_ZN8touchgfx4LineC1Ev>
 8004ef6:	f504 63f6 	add.w	r3, r4, #1968	; 0x7b0
 8004efa:	4631      	mov	r1, r6
 8004efc:	4618      	mov	r0, r3
 8004efe:	f204 7ac4 	addw	sl, r4, #1988	; 0x7c4
 8004f02:	933e      	str	r3, [sp, #248]	; 0xf8
 8004f04:	f7ff fefa 	bl	8004cfc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8004f08:	4650      	mov	r0, sl
 8004f0a:	f00c ffdd 	bl	8011ec8 <_ZN8touchgfx4LineC1Ev>
 8004f0e:	f604 0334 	addw	r3, r4, #2100	; 0x834
 8004f12:	4631      	mov	r1, r6
 8004f14:	4618      	mov	r0, r3
 8004f16:	933f      	str	r3, [sp, #252]	; 0xfc
 8004f18:	f7ff fef0 	bl	8004cfc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8004f1c:	f604 0348 	addw	r3, r4, #2120	; 0x848
 8004f20:	4618      	mov	r0, r3
 8004f22:	9333      	str	r3, [sp, #204]	; 0xcc
 8004f24:	f00c f924 	bl	8011170 <_ZN8touchgfx6CircleC1Ev>
 8004f28:	f504 6309 	add.w	r3, r4, #2192	; 0x890
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	4618      	mov	r0, r3
 8004f30:	9340      	str	r3, [sp, #256]	; 0x100
 8004f32:	f7ff fee3 	bl	8004cfc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8004f36:	f604 03a4 	addw	r3, r4, #2212	; 0x8a4
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	9334      	str	r3, [sp, #208]	; 0xd0
 8004f3e:	f00c f917 	bl	8011170 <_ZN8touchgfx6CircleC1Ev>
 8004f42:	f604 03ec 	addw	r3, r4, #2284	; 0x8ec
 8004f46:	4631      	mov	r1, r6
 8004f48:	4618      	mov	r0, r3
 8004f4a:	9341      	str	r3, [sp, #260]	; 0x104
 8004f4c:	f7ff fed6 	bl	8004cfc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8004f50:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8004f54:	4618      	mov	r0, r3
 8004f56:	ee0a 3a10 	vmov	s20, r3
 8004f5a:	f7ff fbdf 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004f5e:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8004f62:	4618      	mov	r0, r3
 8004f64:	ee0a 3a90 	vmov	s21, r3
 8004f68:	f7ff fbd8 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004f6c:	f504 6319 	add.w	r3, r4, #2448	; 0x990
 8004f70:	4618      	mov	r0, r3
 8004f72:	ee0b 3a10 	vmov	s22, r3
 8004f76:	f7ff fbd1 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004f7a:	f604 13d8 	addw	r3, r4, #2520	; 0x9d8
 8004f7e:	4618      	mov	r0, r3
 8004f80:	ee0b 3a90 	vmov	s23, r3
 8004f84:	f7ff fbca 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004f88:	f504 6322 	add.w	r3, r4, #2592	; 0xa20
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	ee0c 3a10 	vmov	s24, r3
 8004f92:	f7ff fbc3 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004f96:	f604 2368 	addw	r3, r4, #2664	; 0xa68
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	ee0c 3a90 	vmov	s25, r3
 8004fa0:	f7ff fbbc 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8004fa4:	f504 632b 	add.w	r3, r4, #2736	; 0xab0
 8004fa8:	4618      	mov	r0, r3
 8004faa:	ee08 3a10 	vmov	s16, r3
 8004fae:	f00b ffcb 	bl	8010f48 <_ZN8touchgfx13AbstractShapeC1Ev>
 8004fb2:	4b45      	ldr	r3, [pc, #276]	; (80050c8 <_ZN15Screen4ViewBaseC1Ev+0x3b0>)
 8004fb4:	f8c4 3ab0 	str.w	r3, [r4, #2736]	; 0xab0
 8004fb8:	f604 333c 	addw	r3, r4, #2876	; 0xb3c
 8004fbc:	4631      	mov	r1, r6
 8004fbe:	4618      	mov	r0, r3
            : v(0)
 8004fc0:	f8c4 6afc 	str.w	r6, [r4, #2812]	; 0xafc
 8004fc4:	f8c4 6b00 	str.w	r6, [r4, #2816]	; 0xb00
 8004fc8:	f8c4 6b04 	str.w	r6, [r4, #2820]	; 0xb04
 8004fcc:	f8c4 6b08 	str.w	r6, [r4, #2824]	; 0xb08
 8004fd0:	f8c4 6b0c 	str.w	r6, [r4, #2828]	; 0xb0c
 8004fd4:	f8c4 6b10 	str.w	r6, [r4, #2832]	; 0xb10
 8004fd8:	f8c4 6b14 	str.w	r6, [r4, #2836]	; 0xb14
 8004fdc:	f8c4 6b18 	str.w	r6, [r4, #2840]	; 0xb18
 8004fe0:	f8c4 6b1c 	str.w	r6, [r4, #2844]	; 0xb1c
 8004fe4:	f8c4 6b20 	str.w	r6, [r4, #2848]	; 0xb20
 8004fe8:	f8c4 6b24 	str.w	r6, [r4, #2852]	; 0xb24
 8004fec:	f8c4 6b28 	str.w	r6, [r4, #2856]	; 0xb28
 8004ff0:	f8c4 6b2c 	str.w	r6, [r4, #2860]	; 0xb2c
 8004ff4:	f8c4 6b30 	str.w	r6, [r4, #2864]	; 0xb30
 8004ff8:	f8c4 6b34 	str.w	r6, [r4, #2868]	; 0xb34
 8004ffc:	f8c4 6b38 	str.w	r6, [r4, #2872]	; 0xb38
 8005000:	9342      	str	r3, [sp, #264]	; 0x108
 8005002:	f7ff fe7b 	bl	8004cfc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8005006:	f504 6335 	add.w	r3, r4, #2896	; 0xb50
 800500a:	4618      	mov	r0, r3
 800500c:	ee0d 3a10 	vmov	s26, r3
 8005010:	f7ff fb84 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8005014:	f604 3398 	addw	r3, r4, #2968	; 0xb98
 8005018:	4618      	mov	r0, r3
 800501a:	ee0d 3a90 	vmov	s27, r3
 800501e:	f7ff fb7d 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8005022:	f504 633e 	add.w	r3, r4, #3040	; 0xbe0
 8005026:	4618      	mov	r0, r3
 8005028:	ee0e 3a10 	vmov	s28, r3
 800502c:	f7ff fb76 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8005030:	f604 4328 	addw	r3, r4, #3112	; 0xc28
 8005034:	4618      	mov	r0, r3
 8005036:	9335      	str	r3, [sp, #212]	; 0xd4
 8005038:	f00c f89a 	bl	8011170 <_ZN8touchgfx6CircleC1Ev>
 800503c:	f504 6347 	add.w	r3, r4, #3184	; 0xc70
 8005040:	4631      	mov	r1, r6
 8005042:	4618      	mov	r0, r3
 8005044:	9343      	str	r3, [sp, #268]	; 0x10c
 8005046:	f7ff fe59 	bl	8004cfc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 800504a:	f604 4384 	addw	r3, r4, #3204	; 0xc84
 800504e:	4618      	mov	r0, r3
 8005050:	9336      	str	r3, [sp, #216]	; 0xd8
 8005052:	f00c f88d 	bl	8011170 <_ZN8touchgfx6CircleC1Ev>
 8005056:	f604 43cc 	addw	r3, r4, #3276	; 0xccc
 800505a:	4631      	mov	r1, r6
 800505c:	4618      	mov	r0, r3
 800505e:	9344      	str	r3, [sp, #272]	; 0x110
 8005060:	f7ff fe4c 	bl	8004cfc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8005064:	f504 634e 	add.w	r3, r4, #3296	; 0xce0
 8005068:	4618      	mov	r0, r3
 800506a:	ee0e 3a90 	vmov	s29, r3
 800506e:	f7ff fb55 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8005072:	f604 5328 	addw	r3, r4, #3368	; 0xd28
 8005076:	4618      	mov	r0, r3
 8005078:	ee0f 3a10 	vmov	s30, r3
 800507c:	f7ff fb4e 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8005080:	f504 6357 	add.w	r3, r4, #3440	; 0xd70
 8005084:	4618      	mov	r0, r3
 8005086:	ee0f 3a90 	vmov	s31, r3
 800508a:	f7ff fb47 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 800508e:	f604 53b8 	addw	r3, r4, #3512	; 0xdb8
 8005092:	4618      	mov	r0, r3
 8005094:	9303      	str	r3, [sp, #12]
 8005096:	f7ff fb41 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 800509a:	f504 6360 	add.w	r3, r4, #3584	; 0xe00
 800509e:	4618      	mov	r0, r3
 80050a0:	9304      	str	r3, [sp, #16]
 80050a2:	f7ff fb3b 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 80050a6:	f604 6348 	addw	r3, r4, #3656	; 0xe48
 80050aa:	4618      	mov	r0, r3
 80050ac:	9305      	str	r3, [sp, #20]
 80050ae:	f7ff fb35 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 80050b2:	f504 6369 	add.w	r3, r4, #3728	; 0xe90
 80050b6:	4618      	mov	r0, r3
 80050b8:	9337      	str	r3, [sp, #220]	; 0xdc
 80050ba:	f00c f859 	bl	8011170 <_ZN8touchgfx6CircleC1Ev>
 80050be:	e005      	b.n	80050cc <_ZN15Screen4ViewBaseC1Ev+0x3b4>
 80050c0:	08028dcc 	.word	0x08028dcc
 80050c4:	08029764 	.word	0x08029764
 80050c8:	08028d38 	.word	0x08028d38
 80050cc:	f604 63d8 	addw	r3, r4, #3800	; 0xed8
 80050d0:	4631      	mov	r1, r6
 80050d2:	4618      	mov	r0, r3
 80050d4:	9345      	str	r3, [sp, #276]	; 0x114
 80050d6:	f7ff fe11 	bl	8004cfc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 80050da:	f604 63ec 	addw	r3, r4, #3820	; 0xeec
 80050de:	4618      	mov	r0, r3
 80050e0:	9338      	str	r3, [sp, #224]	; 0xe0
 80050e2:	f00c f845 	bl	8011170 <_ZN8touchgfx6CircleC1Ev>
 80050e6:	f604 7334 	addw	r3, r4, #3892	; 0xf34
 80050ea:	4631      	mov	r1, r6
 80050ec:	4618      	mov	r0, r3
 80050ee:	9346      	str	r3, [sp, #280]	; 0x118
 80050f0:	f7ff fe04 	bl	8004cfc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 80050f4:	f604 7348 	addw	r3, r4, #3912	; 0xf48
 80050f8:	4618      	mov	r0, r3
 80050fa:	9306      	str	r3, [sp, #24]
 80050fc:	f7ff fb0e 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8005100:	f504 6379 	add.w	r3, r4, #3984	; 0xf90
 8005104:	4618      	mov	r0, r3
 8005106:	9307      	str	r3, [sp, #28]
 8005108:	f7ff fb08 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 800510c:	f604 73d8 	addw	r3, r4, #4056	; 0xfd8
 8005110:	4618      	mov	r0, r3
 8005112:	9339      	str	r3, [sp, #228]	; 0xe4
 8005114:	f00c f82c 	bl	8011170 <_ZN8touchgfx6CircleC1Ev>
 8005118:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800511c:	4631      	mov	r1, r6
 800511e:	4618      	mov	r0, r3
 8005120:	9347      	str	r3, [sp, #284]	; 0x11c
 8005122:	f7ff fdeb 	bl	8004cfc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8005126:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800512a:	3314      	adds	r3, #20
 800512c:	4618      	mov	r0, r3
 800512e:	930d      	str	r3, [sp, #52]	; 0x34
 8005130:	f7fe fc0c 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8005134:	f504 5383 	add.w	r3, r4, #4192	; 0x1060
 8005138:	4618      	mov	r0, r3
 800513a:	933a      	str	r3, [sp, #232]	; 0xe8
 800513c:	f7fe fc06 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8005140:	f504 5384 	add.w	r3, r4, #4224	; 0x1080
 8005144:	330c      	adds	r3, #12
 8005146:	4618      	mov	r0, r3
 8005148:	930e      	str	r3, [sp, #56]	; 0x38
 800514a:	f7fe fbff 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 800514e:	f504 5385 	add.w	r3, r4, #4256	; 0x10a0
 8005152:	3318      	adds	r3, #24
 8005154:	4618      	mov	r0, r3
 8005156:	930f      	str	r3, [sp, #60]	; 0x3c
 8005158:	f7fe fbf8 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 800515c:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8005160:	3304      	adds	r3, #4
 8005162:	4618      	mov	r0, r3
 8005164:	9310      	str	r3, [sp, #64]	; 0x40
 8005166:	f7fe fbf1 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 800516a:	f504 5388 	add.w	r3, r4, #4352	; 0x1100
 800516e:	3310      	adds	r3, #16
 8005170:	4618      	mov	r0, r3
 8005172:	9311      	str	r3, [sp, #68]	; 0x44
 8005174:	f7fe fbea 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8005178:	f504 5389 	add.w	r3, r4, #4384	; 0x1120
 800517c:	331c      	adds	r3, #28
 800517e:	4618      	mov	r0, r3
 8005180:	9312      	str	r3, [sp, #72]	; 0x48
 8005182:	f7fe fbe3 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8005186:	f504 538b 	add.w	r3, r4, #4448	; 0x1160
 800518a:	3308      	adds	r3, #8
 800518c:	4618      	mov	r0, r3
 800518e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005190:	f7fe fbdc 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8005194:	f504 538c 	add.w	r3, r4, #4480	; 0x1180
 8005198:	3314      	adds	r3, #20
 800519a:	4618      	mov	r0, r3
 800519c:	9314      	str	r3, [sp, #80]	; 0x50
 800519e:	f7fe fbd5 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 80051a2:	f504 538e 	add.w	r3, r4, #4544	; 0x11c0
 80051a6:	4618      	mov	r0, r3
 80051a8:	933b      	str	r3, [sp, #236]	; 0xec
 80051aa:	f7fe fbcf 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 80051ae:	f504 538f 	add.w	r3, r4, #4576	; 0x11e0
 80051b2:	330c      	adds	r3, #12
 80051b4:	4618      	mov	r0, r3
 80051b6:	ee08 3a90 	vmov	s17, r3
 80051ba:	f7ff faaf 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 80051be:	f504 5391 	add.w	r3, r4, #4640	; 0x1220
 80051c2:	3314      	adds	r3, #20
 80051c4:	4618      	mov	r0, r3
 80051c6:	9315      	str	r3, [sp, #84]	; 0x54
 80051c8:	f7fe fbc0 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 80051cc:	f504 5393 	add.w	r3, r4, #4704	; 0x1260
 80051d0:	4618      	mov	r0, r3
 80051d2:	933c      	str	r3, [sp, #240]	; 0xf0
 80051d4:	f7fe fbba 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 80051d8:	f504 5394 	add.w	r3, r4, #4736	; 0x1280
 80051dc:	330c      	adds	r3, #12
 80051de:	4618      	mov	r0, r3
 80051e0:	9316      	str	r3, [sp, #88]	; 0x58
 80051e2:	f7fe fbb3 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 80051e6:	f504 5395 	add.w	r3, r4, #4768	; 0x12a0
 80051ea:	3318      	adds	r3, #24
 80051ec:	4618      	mov	r0, r3
 80051ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80051f0:	f7fe fbac 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 80051f4:	f504 5397 	add.w	r3, r4, #4832	; 0x12e0
 80051f8:	3304      	adds	r3, #4
 80051fa:	4618      	mov	r0, r3
 80051fc:	ee09 3a10 	vmov	s18, r3
 8005200:	f7ff fa8c 	bl	800471c <_ZN8touchgfx8TextAreaC1Ev>
 8005204:	f504 5399 	add.w	r3, r4, #4896	; 0x1320
 8005208:	330c      	adds	r3, #12
 800520a:	4618      	mov	r0, r3
 800520c:	9318      	str	r3, [sp, #96]	; 0x60
 800520e:	f7fe fb9d 	bl	800394c <_ZN8touchgfx3BoxC1Ev>
 8005212:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8005216:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800521a:	f8c3 532c 	str.w	r5, [r3, #812]	; 0x32c
 800521e:	f8c3 6358 	str.w	r6, [r3, #856]	; 0x358
 8005222:	f8a3 635c 	strh.w	r6, [r3, #860]	; 0x35c
 8005226:	f504 509b 	add.w	r0, r4, #4960	; 0x1360
 800522a:	f00e fe29 	bl	8013e80 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 240, 320);
 800522e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005232:	4632      	mov	r2, r6
 8005234:	4638      	mov	r0, r7
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	4631      	mov	r1, r6
 800523a:	23f0      	movs	r3, #240	; 0xf0
 800523c:	1d25      	adds	r5, r4, #4
 800523e:	f7fe fb71 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005242:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8005246:	4639      	mov	r1, r7
 8005248:	66a3      	str	r3, [r4, #104]	; 0x68
 800524a:	4628      	mov	r0, r5
 800524c:	f00a fc4a 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box1.setPosition(0, 0, 240, 320);
 8005250:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005254:	4632      	mov	r2, r6
 8005256:	4658      	mov	r0, fp
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	4631      	mov	r1, r6
 800525c:	23f0      	movs	r3, #240	; 0xf0
 800525e:	f7fe fb61 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005262:	f04f 33ff 	mov.w	r3, #4294967295
 8005266:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800526a:	4659      	mov	r1, fp
 800526c:	4628      	mov	r0, r5
 800526e:	f00a fc39 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3_2_1_1_1.setXY(128, 256);
 8005272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005276:	4648      	mov	r0, r9
 8005278:	2180      	movs	r1, #128	; 0x80
 800527a:	f7fe fb46 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 800527e:	af48      	add	r7, sp, #288	; 0x120
        color = newColor;
 8005280:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8005284:	4649      	mov	r1, r9
        color = newColor;
 8005286:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
        boundingArea = calculateBoundingArea();
 800528a:	4638      	mov	r0, r7
        linespace = space;
 800528c:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
        boundingArea = calculateBoundingArea();
 8005290:	f00d faf0 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005294:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005298:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 800529c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80052a0:	4bde      	ldr	r3, [pc, #888]	; (800561c <_ZN15Screen4ViewBaseC1Ev+0x904>)
 80052a2:	934e      	str	r3, [sp, #312]	; 0x138
 80052a4:	f04f 0202 	mov.w	r2, #2
    textArea3_2_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WUBU));
 80052a8:	4648      	mov	r0, r9
 80052aa:	a94e      	add	r1, sp, #312	; 0x138
 80052ac:	f8ad 213c 	strh.w	r2, [sp, #316]	; 0x13c
 80052b0:	f00d fd88 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80052b4:	4649      	mov	r1, r9
 80052b6:	4628      	mov	r0, r5
 80052b8:	f00a fc14 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3_2_1_2_2.setXY(129, 269);
 80052bc:	f240 120d 	movw	r2, #269	; 0x10d
 80052c0:	4640      	mov	r0, r8
 80052c2:	2181      	movs	r1, #129	; 0x81
 80052c4:	f7fe fb21 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80052c8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 80052cc:	f8c4 1110 	str.w	r1, [r4, #272]	; 0x110
        boundingArea = calculateBoundingArea();
 80052d0:	4638      	mov	r0, r7
 80052d2:	4641      	mov	r1, r8
        linespace = space;
 80052d4:	f8a4 6114 	strh.w	r6, [r4, #276]	; 0x114
        boundingArea = calculateBoundingArea();
 80052d8:	f00d facc 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80052dc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80052e0:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 80052e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80052e8:	4bcc      	ldr	r3, [pc, #816]	; (800561c <_ZN15Screen4ViewBaseC1Ev+0x904>)
 80052ea:	934e      	str	r3, [sp, #312]	; 0x138
    textArea3_2_1_2_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VHQ4));
 80052ec:	4640      	mov	r0, r8
 80052ee:	2303      	movs	r3, #3
 80052f0:	a94e      	add	r1, sp, #312	; 0x138
 80052f2:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 80052f6:	f00d fd65 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80052fa:	4641      	mov	r1, r8
 80052fc:	4628      	mov	r0, r5
    box2_1_4.setPosition(184, 244, 5, 9);
 80052fe:	f04f 0809 	mov.w	r8, #9
 8005302:	f8df b31c 	ldr.w	fp, [pc, #796]	; 8005620 <_ZN15Screen4ViewBaseC1Ev+0x908>
 8005306:	f00a fbed 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800530a:	2305      	movs	r3, #5
 800530c:	22f4      	movs	r2, #244	; 0xf4
 800530e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005310:	f8cd 8000 	str.w	r8, [sp]
 8005314:	21b8      	movs	r1, #184	; 0xb8
 8005316:	f7fe fb05 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 800531a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800531c:	f8c4 b150 	str.w	fp, [r4, #336]	; 0x150
 8005320:	4628      	mov	r0, r5
 8005322:	f00a fbdf 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_2_1.setPosition(176, 256, 5, 9);
 8005326:	2305      	movs	r3, #5
 8005328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800532c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800532e:	f8cd 8000 	str.w	r8, [sp]
 8005332:	21b0      	movs	r1, #176	; 0xb0
 8005334:	f7fe faf6 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005338:	991a      	ldr	r1, [sp, #104]	; 0x68
 800533a:	f8c4 b17c 	str.w	fp, [r4, #380]	; 0x17c
 800533e:	4628      	mov	r0, r5
 8005340:	f00a fbd0 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_2_1.setPosition(184, 256, 5, 9);
 8005344:	2305      	movs	r3, #5
 8005346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800534a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800534c:	f8cd 8000 	str.w	r8, [sp]
 8005350:	21b8      	movs	r1, #184	; 0xb8
 8005352:	f7fe fae7 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005356:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8005358:	f8c4 b1a8 	str.w	fp, [r4, #424]	; 0x1a8
 800535c:	4628      	mov	r0, r5
 800535e:	f00a fbc1 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_2_1.setPosition(193, 256, 5, 9);
 8005362:	2305      	movs	r3, #5
 8005364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005368:	981c      	ldr	r0, [sp, #112]	; 0x70
 800536a:	f8cd 8000 	str.w	r8, [sp]
 800536e:	21c1      	movs	r1, #193	; 0xc1
 8005370:	f7fe fad8 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005374:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005376:	f8c4 b1d4 	str.w	fp, [r4, #468]	; 0x1d4
 800537a:	4628      	mov	r0, r5
 800537c:	f00a fbb2 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1_2_1.setPosition(201, 256, 5, 9);
 8005380:	2305      	movs	r3, #5
 8005382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005386:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005388:	f8cd 8000 	str.w	r8, [sp]
 800538c:	21c9      	movs	r1, #201	; 0xc9
 800538e:	f7fe fac9 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005392:	991d      	ldr	r1, [sp, #116]	; 0x74
 8005394:	f8c4 b200 	str.w	fp, [r4, #512]	; 0x200
 8005398:	4628      	mov	r0, r5
 800539a:	f00a fba3 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_3_2.setPosition(176, 269, 5, 9);
 800539e:	2305      	movs	r3, #5
 80053a0:	f240 120d 	movw	r2, #269	; 0x10d
 80053a4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80053a6:	f8cd 8000 	str.w	r8, [sp]
 80053aa:	21b0      	movs	r1, #176	; 0xb0
 80053ac:	f7fe faba 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80053b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80053b2:	f8c4 b22c 	str.w	fp, [r4, #556]	; 0x22c
 80053b6:	4628      	mov	r0, r5
 80053b8:	f00a fb94 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_3_2.setPosition(184, 269, 5, 9);
 80053bc:	2305      	movs	r3, #5
 80053be:	f240 120d 	movw	r2, #269	; 0x10d
 80053c2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80053c4:	f8cd 8000 	str.w	r8, [sp]
 80053c8:	21b8      	movs	r1, #184	; 0xb8
 80053ca:	f7fe faab 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80053ce:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80053d0:	f8c4 b258 	str.w	fp, [r4, #600]	; 0x258
 80053d4:	4628      	mov	r0, r5
 80053d6:	f00a fb85 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_3_2.setPosition(193, 269, 5, 9);
 80053da:	2305      	movs	r3, #5
 80053dc:	f240 120d 	movw	r2, #269	; 0x10d
 80053e0:	9820      	ldr	r0, [sp, #128]	; 0x80
 80053e2:	f8cd 8000 	str.w	r8, [sp]
 80053e6:	21c1      	movs	r1, #193	; 0xc1
 80053e8:	f7fe fa9c 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80053ec:	9920      	ldr	r1, [sp, #128]	; 0x80
 80053ee:	f8c4 b284 	str.w	fp, [r4, #644]	; 0x284
 80053f2:	4628      	mov	r0, r5
 80053f4:	f00a fb76 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1_3_2.setPosition(201, 269, 5, 9);
 80053f8:	2305      	movs	r3, #5
 80053fa:	f240 120d 	movw	r2, #269	; 0x10d
 80053fe:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005400:	f8cd 8000 	str.w	r8, [sp]
 8005404:	21c9      	movs	r1, #201	; 0xc9
 8005406:	f7fe fa8d 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 800540a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800540c:	f8c4 b2b0 	str.w	fp, [r4, #688]	; 0x2b0
 8005410:	4628      	mov	r0, r5
 8005412:	f00a fb67 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1_1_1_2.setPosition(209, 269, 5, 9);
 8005416:	2305      	movs	r3, #5
 8005418:	f240 120d 	movw	r2, #269	; 0x10d
 800541c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800541e:	f8cd 8000 	str.w	r8, [sp]
 8005422:	21d1      	movs	r1, #209	; 0xd1
 8005424:	f7fe fa7e 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005428:	9922      	ldr	r1, [sp, #136]	; 0x88
 800542a:	f8c4 b2dc 	str.w	fp, [r4, #732]	; 0x2dc
 800542e:	4628      	mov	r0, r5
 8005430:	f00a fb58 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1_1_2.setPosition(209, 244, 5, 9);
 8005434:	2305      	movs	r3, #5
 8005436:	22f4      	movs	r2, #244	; 0xf4
 8005438:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800543a:	f8cd 8000 	str.w	r8, [sp]
 800543e:	21d1      	movs	r1, #209	; 0xd1
 8005440:	f7fe fa70 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005444:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8005446:	f8c4 b308 	str.w	fp, [r4, #776]	; 0x308
 800544a:	4628      	mov	r0, r5
 800544c:	f00a fb4a 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1_4.setPosition(201, 244, 5, 9);
 8005450:	2305      	movs	r3, #5
 8005452:	22f4      	movs	r2, #244	; 0xf4
 8005454:	9824      	ldr	r0, [sp, #144]	; 0x90
 8005456:	f8cd 8000 	str.w	r8, [sp]
 800545a:	21c9      	movs	r1, #201	; 0xc9
 800545c:	f7fe fa62 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005460:	9924      	ldr	r1, [sp, #144]	; 0x90
 8005462:	f8c4 b334 	str.w	fp, [r4, #820]	; 0x334
 8005466:	4628      	mov	r0, r5
 8005468:	f00a fb3c 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_4.setPosition(193, 244, 5, 9);
 800546c:	2305      	movs	r3, #5
 800546e:	22f4      	movs	r2, #244	; 0xf4
 8005470:	9825      	ldr	r0, [sp, #148]	; 0x94
 8005472:	f8cd 8000 	str.w	r8, [sp]
 8005476:	21c1      	movs	r1, #193	; 0xc1
 8005478:	f7fe fa54 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 800547c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800547e:	f8c4 b360 	str.w	fp, [r4, #864]	; 0x360
 8005482:	4628      	mov	r0, r5
 8005484:	f00a fb2e 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder1_1.setPosition(209, 256, 5, 9);
 8005488:	2305      	movs	r3, #5
 800548a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800548c:	f8cd 8000 	str.w	r8, [sp]
 8005490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005494:	21d1      	movs	r1, #209	; 0xd1
 8005496:	f7fe fa45 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 800549a:	f04f 0202 	mov.w	r2, #2
 800549e:	f04f 31ff 	mov.w	r1, #4294967295
        borderColor = colorBorder;
 80054a2:	e9c4 1be3 	strd	r1, fp, [r4, #908]	; 0x38c
        borderSize = size;
 80054a6:	f8a4 2394 	strh.w	r2, [r4, #916]	; 0x394
 80054aa:	9926      	ldr	r1, [sp, #152]	; 0x98
 80054ac:	4628      	mov	r0, r5
 80054ae:	f00a fb19 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_4.setPosition(176, 244, 5, 9);
 80054b2:	2305      	movs	r3, #5
 80054b4:	22f4      	movs	r2, #244	; 0xf4
 80054b6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80054b8:	f8cd 8000 	str.w	r8, [sp]
 80054bc:	21b0      	movs	r1, #176	; 0xb0
 80054be:	f7fe fa31 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80054c2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80054c4:	f8c4 b3c0 	str.w	fp, [r4, #960]	; 0x3c0
 80054c8:	4628      	mov	r0, r5
 80054ca:	f00a fb0b 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1_3_1_1.setPosition(201, 282, 5, 9);
 80054ce:	2305      	movs	r3, #5
 80054d0:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80054d4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80054d6:	f8cd 8000 	str.w	r8, [sp]
 80054da:	21c9      	movs	r1, #201	; 0xc9
 80054dc:	f7fe fa22 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80054e0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80054e2:	f8c4 b3ec 	str.w	fp, [r4, #1004]	; 0x3ec
 80054e6:	4628      	mov	r0, r5
 80054e8:	f00a fafc 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1_1_1_1_1.setPosition(209, 282, 5, 9);
 80054ec:	2305      	movs	r3, #5
 80054ee:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80054f2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80054f4:	f8cd 8000 	str.w	r8, [sp]
 80054f8:	21d1      	movs	r1, #209	; 0xd1
 80054fa:	f7fe fa13 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80054fe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8005500:	f8c4 b418 	str.w	fp, [r4, #1048]	; 0x418
 8005504:	4628      	mov	r0, r5
 8005506:	f00a faed 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_3_1_1.setPosition(193, 282, 5, 9);
 800550a:	2305      	movs	r3, #5
 800550c:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8005510:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8005512:	f8cd 8000 	str.w	r8, [sp]
 8005516:	21c1      	movs	r1, #193	; 0xc1
 8005518:	f7fe fa04 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 800551c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800551e:	f8c4 b444 	str.w	fp, [r4, #1092]	; 0x444
 8005522:	4628      	mov	r0, r5
 8005524:	f00a fade 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_3_1_1.setPosition(184, 282, 5, 9);
 8005528:	2305      	movs	r3, #5
 800552a:	f44f 728d 	mov.w	r2, #282	; 0x11a
 800552e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8005530:	f8cd 8000 	str.w	r8, [sp]
 8005534:	21b8      	movs	r1, #184	; 0xb8
 8005536:	f7fe f9f5 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 800553a:	992b      	ldr	r1, [sp, #172]	; 0xac
 800553c:	f8c4 b470 	str.w	fp, [r4, #1136]	; 0x470
 8005540:	4628      	mov	r0, r5
 8005542:	f00a facf 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_3_1_1.setPosition(176, 282, 5, 9);
 8005546:	2305      	movs	r3, #5
 8005548:	f44f 728d 	mov.w	r2, #282	; 0x11a
 800554c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800554e:	f8cd 8000 	str.w	r8, [sp]
 8005552:	21b0      	movs	r1, #176	; 0xb0
 8005554:	f7fe f9e6 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005558:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800555a:	f8c4 b49c 	str.w	fp, [r4, #1180]	; 0x49c
 800555e:	4628      	mov	r0, r5
 8005560:	f00a fac0 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3_2_1_2_1_1.setXY(129, 282);
 8005564:	9808      	ldr	r0, [sp, #32]
 8005566:	f44f 728d 	mov.w	r2, #282	; 0x11a
 800556a:	2181      	movs	r1, #129	; 0x81
 800556c:	f7fe f9cd 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8005570:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8005574:	9908      	ldr	r1, [sp, #32]
        color = newColor;
 8005576:	f8c4 24d0 	str.w	r2, [r4, #1232]	; 0x4d0
        boundingArea = calculateBoundingArea();
 800557a:	4638      	mov	r0, r7
        linespace = space;
 800557c:	f8a4 64d4 	strh.w	r6, [r4, #1236]	; 0x4d4
        boundingArea = calculateBoundingArea();
 8005580:	f00d f978 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005584:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005588:	f204 43dc 	addw	r3, r4, #1244	; 0x4dc
 800558c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005590:	4b22      	ldr	r3, [pc, #136]	; (800561c <_ZN15Screen4ViewBaseC1Ev+0x904>)
    textArea3_2_1_2_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZOXT));
 8005592:	9808      	ldr	r0, [sp, #32]
 8005594:	934e      	str	r3, [sp, #312]	; 0x138
 8005596:	a94e      	add	r1, sp, #312	; 0x138
 8005598:	2304      	movs	r3, #4
 800559a:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 800559e:	f00d fc11 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80055a2:	9908      	ldr	r1, [sp, #32]
 80055a4:	4628      	mov	r0, r5
 80055a6:	f00a fa9d 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3_2_1_2_1.setXY(28, 282);
 80055aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ac:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80055b0:	211c      	movs	r1, #28
 80055b2:	f7fe f9aa 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80055b6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 80055ba:	9909      	ldr	r1, [sp, #36]	; 0x24
        color = newColor;
 80055bc:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
        boundingArea = calculateBoundingArea();
 80055c0:	4638      	mov	r0, r7
        linespace = space;
 80055c2:	f8a4 651c 	strh.w	r6, [r4, #1308]	; 0x51c
        boundingArea = calculateBoundingArea();
 80055c6:	f00d f955 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80055ca:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80055ce:	f204 5324 	addw	r3, r4, #1316	; 0x524
 80055d2:	f04f 0905 	mov.w	r9, #5
 80055d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80055da:	4b10      	ldr	r3, [pc, #64]	; (800561c <_ZN15Screen4ViewBaseC1Ev+0x904>)
    textArea3_2_1_2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YHEV));
 80055dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055de:	934e      	str	r3, [sp, #312]	; 0x138
 80055e0:	a94e      	add	r1, sp, #312	; 0x138
 80055e2:	f8ad 913c 	strh.w	r9, [sp, #316]	; 0x13c
 80055e6:	f00d fbed 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80055ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055ec:	4628      	mov	r0, r5
 80055ee:	f00a fa79 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_3_1.setPosition(65, 282, 5, 9);
 80055f2:	464b      	mov	r3, r9
 80055f4:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80055f8:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80055fa:	f8cd 8000 	str.w	r8, [sp]
 80055fe:	2141      	movs	r1, #65	; 0x41
 8005600:	f7fe f990 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005604:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8005606:	f8c4 b558 	str.w	fp, [r4, #1368]	; 0x558
 800560a:	4628      	mov	r0, r5
 800560c:	f00a fa6a 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_3_1.setPosition(73, 282, 5, 9);
 8005610:	464b      	mov	r3, r9
 8005612:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8005616:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8005618:	e004      	b.n	8005624 <_ZN15Screen4ViewBaseC1Ev+0x90c>
 800561a:	bf00      	nop
 800561c:	080284d4 	.word	0x080284d4
 8005620:	ff5e17eb 	.word	0xff5e17eb
 8005624:	f8cd 8000 	str.w	r8, [sp]
 8005628:	2149      	movs	r1, #73	; 0x49
 800562a:	f7fe f97b 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 800562e:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8005630:	f8c4 b584 	str.w	fp, [r4, #1412]	; 0x584
 8005634:	4628      	mov	r0, r5
 8005636:	f00a fa55 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_3_1.setPosition(82, 282, 5, 9);
 800563a:	464b      	mov	r3, r9
 800563c:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8005640:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8005642:	f8cd 8000 	str.w	r8, [sp]
 8005646:	2152      	movs	r1, #82	; 0x52
 8005648:	f7fe f96c 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 800564c:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800564e:	f8c4 b5b0 	str.w	fp, [r4, #1456]	; 0x5b0
 8005652:	4628      	mov	r0, r5
 8005654:	f00a fa46 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1_1_1_1.setPosition(98, 282, 5, 9);
 8005658:	464b      	mov	r3, r9
 800565a:	f44f 728d 	mov.w	r2, #282	; 0x11a
 800565e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8005660:	f8cd 8000 	str.w	r8, [sp]
 8005664:	2162      	movs	r1, #98	; 0x62
 8005666:	f7fe f95d 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 800566a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800566c:	f8c4 b5dc 	str.w	fp, [r4, #1500]	; 0x5dc
 8005670:	4628      	mov	r0, r5
 8005672:	f00a fa37 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1_3_1.setPosition(90, 282, 5, 9);
 8005676:	464b      	mov	r3, r9
 8005678:	f44f 728d 	mov.w	r2, #282	; 0x11a
 800567c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800567e:	f8cd 8000 	str.w	r8, [sp]
 8005682:	215a      	movs	r1, #90	; 0x5a
 8005684:	f7fe f94e 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005688:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800568a:	f8c4 b608 	str.w	fp, [r4, #1544]	; 0x608
 800568e:	4628      	mov	r0, r5
 8005690:	f00a fa28 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    circle2_2.setPosition(-10, 112, 61, 63);
 8005694:	233f      	movs	r3, #63	; 0x3f
 8005696:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	2270      	movs	r2, #112	; 0x70
 800569c:	233d      	movs	r3, #61	; 0x3d
 800569e:	f06f 0109 	mvn.w	r1, #9
 80056a2:	f7fe f93f 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
    {
        this->circleCenterX = CWRUtil::toQ5(x);
 80056a6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80056aa:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
        this->circleCenterY = CWRUtil::toQ5(y);
 80056ae:	f8c4 363c 	str.w	r3, [r4, #1596]	; 0x63c
 80056b2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setRadius(const T r)
    {
        this->circleRadius = CWRUtil::toQ5(r);
 80056b6:	2350      	movs	r3, #80	; 0x50
 80056b8:	f8c4 3640 	str.w	r3, [r4, #1600]	; 0x640
 80056bc:	f8c4 2660 	str.w	r2, [r4, #1632]	; 0x660
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
    {
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 80056c0:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
        canvasPainter = &painter;
 80056c4:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 80056c6:	f8c4 3648 	str.w	r3, [r4, #1608]	; 0x648
 80056ca:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80056cc:	f8c4 2634 	str.w	r2, [r4, #1588]	; 0x634
 80056d0:	4628      	mov	r0, r5
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
    {
        this->circleLineWidth = CWRUtil::toQ5(width);
 80056d2:	f8c4 664c 	str.w	r6, [r4, #1612]	; 0x64c
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 80056d6:	f8c4 6644 	str.w	r6, [r4, #1604]	; 0x644

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
 80056da:	f8a4 6664 	strh.w	r6, [r4, #1636]	; 0x664
 80056de:	f00a fa01 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea5_1_1_2.setXY(35, 148);
 80056e2:	980a      	ldr	r0, [sp, #40]	; 0x28
        color = newColor;
 80056e4:	f8df 93d8 	ldr.w	r9, [pc, #984]	; 8005ac0 <_ZN15Screen4ViewBaseC1Ev+0xda8>
 80056e8:	2294      	movs	r2, #148	; 0x94
 80056ea:	2123      	movs	r1, #35	; 0x23
 80056ec:	f7fe f90d 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 80056f0:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 80056f4:	990a      	ldr	r1, [sp, #40]	; 0x28
        color = newColor;
 80056f6:	f8c4 2698 	str.w	r2, [r4, #1688]	; 0x698
        boundingArea = calculateBoundingArea();
 80056fa:	4638      	mov	r0, r7
        linespace = space;
 80056fc:	f8a4 669c 	strh.w	r6, [r4, #1692]	; 0x69c
        boundingArea = calculateBoundingArea();
 8005700:	f00d f8b8 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005704:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005708:	f204 63a4 	addw	r3, r4, #1700	; 0x6a4
 800570c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005710:	4bea      	ldr	r3, [pc, #936]	; (8005abc <_ZN15Screen4ViewBaseC1Ev+0xda4>)
    textArea5_1_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_69JC));
 8005712:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005714:	934e      	str	r3, [sp, #312]	; 0x138
 8005716:	a94e      	add	r1, sp, #312	; 0x138
 8005718:	2311      	movs	r3, #17
 800571a:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 800571e:	f00d fb51 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005722:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005724:	4628      	mov	r0, r5
 8005726:	f00a f9dd 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(22, 19);
 800572a:	2213      	movs	r2, #19
 800572c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800572e:	2116      	movs	r1, #22
 8005730:	f7fe f8eb 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005734:	990b      	ldr	r1, [sp, #44]	; 0x2c
        color = newColor;
 8005736:	f8c4 96e0 	str.w	r9, [r4, #1760]	; 0x6e0
        boundingArea = calculateBoundingArea();
 800573a:	4638      	mov	r0, r7
        linespace = space;
 800573c:	f8a4 66e4 	strh.w	r6, [r4, #1764]	; 0x6e4
        boundingArea = calculateBoundingArea();
 8005740:	f00d f898 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005744:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005748:	f204 63ec 	addw	r3, r4, #1772	; 0x6ec
 800574c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005750:	4bda      	ldr	r3, [pc, #872]	; (8005abc <_ZN15Screen4ViewBaseC1Ev+0xda4>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DIUU));
 8005752:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005754:	934e      	str	r3, [sp, #312]	; 0x138
 8005756:	a94e      	add	r1, sp, #312	; 0x138
 8005758:	231a      	movs	r3, #26
 800575a:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 800575e:	f00d fb31 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005762:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005764:	4628      	mov	r0, r5
 8005766:	f00a f9bd 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(22, 43);
 800576a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800576c:	222b      	movs	r2, #43	; 0x2b
 800576e:	2116      	movs	r1, #22
 8005770:	f7fe f8cb 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8005774:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8005778:	990c      	ldr	r1, [sp, #48]	; 0x30
        color = newColor;
 800577a:	f8c4 2728 	str.w	r2, [r4, #1832]	; 0x728
        boundingArea = calculateBoundingArea();
 800577e:	4638      	mov	r0, r7
        linespace = space;
 8005780:	f8a4 672c 	strh.w	r6, [r4, #1836]	; 0x72c
        boundingArea = calculateBoundingArea();
 8005784:	f00d f876 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005788:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800578c:	f204 7334 	addw	r3, r4, #1844	; 0x734
 8005790:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005794:	4bc9      	ldr	r3, [pc, #804]	; (8005abc <_ZN15Screen4ViewBaseC1Ev+0xda4>)
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FHLB));
 8005796:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005798:	934e      	str	r3, [sp, #312]	; 0x138
 800579a:	a94e      	add	r1, sp, #312	; 0x138
 800579c:	2319      	movs	r3, #25
 800579e:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 80057a2:	f00d fb0f 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80057a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057a8:	4628      	mov	r0, r5
 80057aa:	f00a f99b 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line1.setPosition(-78, 86, 100, 50);
 80057ae:	2332      	movs	r3, #50	; 0x32
 80057b0:	ee19 0a90 	vmov	r0, s19
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	2256      	movs	r2, #86	; 0x56
 80057b8:	2364      	movs	r3, #100	; 0x64
 80057ba:	f06f 014d 	mvn.w	r1, #77	; 0x4d
 80057be:	f7fe f8b1 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80057c2:	f645 137a 	movw	r3, #22906	; 0x597a
     * @note The area containing the Line is not invalidated.
     */
    template <typename T>
    void setStart(T x, T y)
    {
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80057c6:	22a0      	movs	r2, #160	; 0xa0
 80057c8:	f8a4 37c0 	strh.w	r3, [r4, #1984]	; 0x7c0
 80057cc:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80057ce:	f8c4 3768 	str.w	r3, [r4, #1896]	; 0x768
 80057d2:	4611      	mov	r1, r2
 80057d4:	ee19 0a90 	vmov	r0, s19
 80057d8:	f8c4 97bc 	str.w	r9, [r4, #1980]	; 0x7bc
 80057dc:	f00c fc8a 	bl	80120f4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
     * @note The area containing the Line is not invalidated.
     */
    template <typename T>
    void setEnd(T x, T y)
    {
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80057e0:	ee19 0a90 	vmov	r0, s19
 80057e4:	22a0      	movs	r2, #160	; 0xa0
 80057e6:	f44f 613e 	mov.w	r1, #3040	; 0xbe0
 80057ea:	f00c fc8e 	bl	801210a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
    {
        if (lineWidthQ5 == widthQ5)
 80057ee:	f8d4 377c 	ldr.w	r3, [r4, #1916]	; 0x77c
 80057f2:	2b80      	cmp	r3, #128	; 0x80
 80057f4:	d006      	beq.n	8005804 <_ZN15Screen4ViewBaseC1Ev+0xaec>
        {
            return;
        }

        lineWidthQ5 = widthQ5;
 80057f6:	2380      	movs	r3, #128	; 0x80

        updateCachedShape();
 80057f8:	ee19 0a90 	vmov	r0, s19
        lineWidthQ5 = widthQ5;
 80057fc:	f8c4 377c 	str.w	r3, [r4, #1916]	; 0x77c
        updateCachedShape();
 8005800:	f00c fb82 	bl	8011f08 <_ZN8touchgfx4Line17updateCachedShapeEv>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8005804:	ee19 0a90 	vmov	r0, s19
 8005808:	2101      	movs	r1, #1
 800580a:	f00c fc89 	bl	8012120 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 800580e:	ee19 1a90 	vmov	r1, s19
 8005812:	4628      	mov	r0, r5
 8005814:	f00a f966 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line1_1.setPosition(-78, 223, 100, 50);
 8005818:	2332      	movs	r3, #50	; 0x32
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	22df      	movs	r2, #223	; 0xdf
 800581e:	2364      	movs	r3, #100	; 0x64
 8005820:	f06f 014d 	mvn.w	r1, #77	; 0x4d
 8005824:	4650      	mov	r0, sl
 8005826:	f7fe f87d 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 800582a:	f645 137a 	movw	r3, #22906	; 0x597a
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800582e:	22a0      	movs	r2, #160	; 0xa0
 8005830:	f8a4 3844 	strh.w	r3, [r4, #2116]	; 0x844
 8005834:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8005836:	f8c4 37ec 	str.w	r3, [r4, #2028]	; 0x7ec
 800583a:	4611      	mov	r1, r2
 800583c:	4650      	mov	r0, sl
 800583e:	f8c4 9840 	str.w	r9, [r4, #2112]	; 0x840
 8005842:	f00c fc57 	bl	80120f4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8005846:	22a0      	movs	r2, #160	; 0xa0
 8005848:	f44f 613e 	mov.w	r1, #3040	; 0xbe0
 800584c:	4650      	mov	r0, sl
 800584e:	f00c fc5c 	bl	801210a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
        if (lineWidthQ5 == widthQ5)
 8005852:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8005856:	2b80      	cmp	r3, #128	; 0x80
 8005858:	d005      	beq.n	8005866 <_ZN15Screen4ViewBaseC1Ev+0xb4e>
        lineWidthQ5 = widthQ5;
 800585a:	2380      	movs	r3, #128	; 0x80
 800585c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
        updateCachedShape();
 8005860:	4650      	mov	r0, sl
 8005862:	f00c fb51 	bl	8011f08 <_ZN8touchgfx4Line17updateCachedShapeEv>
    line1_1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8005866:	4650      	mov	r0, sl
 8005868:	2101      	movs	r1, #1
 800586a:	f00c fc59 	bl	8012120 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 800586e:	4651      	mov	r1, sl
 8005870:	4628      	mov	r0, r5
 8005872:	f00a f937 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    circle1.setPosition(9, 81, 26, 22);
 8005876:	2316      	movs	r3, #22
 8005878:	2251      	movs	r2, #81	; 0x51
 800587a:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	2109      	movs	r1, #9
 8005880:	231a      	movs	r3, #26
 8005882:	f7fe f84f 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 8005886:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
        this->circleLineWidth = CWRUtil::toQ5(width);
 800588a:	2600      	movs	r6, #0
        this->circleCenterX = CWRUtil::toQ5(x);
 800588c:	f44f 78a0 	mov.w	r8, #320	; 0x140
        this->circleRadius = CWRUtil::toQ5(r);
 8005890:	2780      	movs	r7, #128	; 0x80
 8005892:	f645 1a7a 	movw	sl, #22906	; 0x597a
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 8005896:	f8c4 3884 	str.w	r3, [r4, #2180]	; 0x884
 800589a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800589c:	9933      	ldr	r1, [sp, #204]	; 0xcc
        this->circleCenterX = CWRUtil::toQ5(x);
 800589e:	f8c4 8874 	str.w	r8, [r4, #2164]	; 0x874
        this->circleCenterY = CWRUtil::toQ5(y);
 80058a2:	f8c4 8878 	str.w	r8, [r4, #2168]	; 0x878
 80058a6:	f8a4 a8a0 	strh.w	sl, [r4, #2208]	; 0x8a0
 80058aa:	f8c4 3870 	str.w	r3, [r4, #2160]	; 0x870
 80058ae:	4628      	mov	r0, r5
        this->circleRadius = CWRUtil::toQ5(r);
 80058b0:	f8c4 787c 	str.w	r7, [r4, #2172]	; 0x87c
        this->circleLineWidth = CWRUtil::toQ5(width);
 80058b4:	f8c4 6888 	str.w	r6, [r4, #2184]	; 0x888
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 80058b8:	f8c4 6880 	str.w	r6, [r4, #2176]	; 0x880
 80058bc:	f8c4 989c 	str.w	r9, [r4, #2204]	; 0x89c
 80058c0:	f00a f910 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    circle1_1.setPosition(9, 218, 26, 22);
 80058c4:	2316      	movs	r3, #22
 80058c6:	22da      	movs	r2, #218	; 0xda
 80058c8:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	2109      	movs	r1, #9
 80058ce:	231a      	movs	r3, #26
 80058d0:	f7fe f828 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 80058d4:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 80058d8:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 80058dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80058de:	f8c4 38cc 	str.w	r3, [r4, #2252]	; 0x8cc
 80058e2:	9934      	ldr	r1, [sp, #208]	; 0xd0
        this->circleCenterX = CWRUtil::toQ5(x);
 80058e4:	f8c4 88d0 	str.w	r8, [r4, #2256]	; 0x8d0
        this->circleCenterY = CWRUtil::toQ5(y);
 80058e8:	f8c4 88d4 	str.w	r8, [r4, #2260]	; 0x8d4
 80058ec:	f8a4 a8fc 	strh.w	sl, [r4, #2300]	; 0x8fc
 80058f0:	4628      	mov	r0, r5
        this->circleRadius = CWRUtil::toQ5(r);
 80058f2:	f8c4 78d8 	str.w	r7, [r4, #2264]	; 0x8d8
        this->circleLineWidth = CWRUtil::toQ5(width);
 80058f6:	f8c4 68e4 	str.w	r6, [r4, #2276]	; 0x8e4
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 80058fa:	f8c4 68dc 	str.w	r6, [r4, #2268]	; 0x8dc
 80058fe:	f8c4 98f8 	str.w	r9, [r4, #2296]	; 0x8f8
 8005902:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 8005906:	f00a f8ed 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3.setXY(28, 84);
 800590a:	2254      	movs	r2, #84	; 0x54
 800590c:	ee1a 0a10 	vmov	r0, s20
 8005910:	211c      	movs	r1, #28
 8005912:	f7fd fffa 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005916:	ee1a 1a10 	vmov	r1, s20
 800591a:	4640      	mov	r0, r8
        color = newColor;
 800591c:	f8c4 9930 	str.w	r9, [r4, #2352]	; 0x930
        linespace = space;
 8005920:	f8a4 6934 	strh.w	r6, [r4, #2356]	; 0x934
        boundingArea = calculateBoundingArea();
 8005924:	f00c ffa6 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005928:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800592c:	ee1a 3a10 	vmov	r3, s20
 8005930:	333c      	adds	r3, #60	; 0x3c
 8005932:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005936:	f8df a184 	ldr.w	sl, [pc, #388]	; 8005abc <_ZN15Screen4ViewBaseC1Ev+0xda4>
 800593a:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
 800593e:	2318      	movs	r3, #24
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LNA0));
 8005940:	ee1a 0a10 	vmov	r0, s20
 8005944:	a94e      	add	r1, sp, #312	; 0x138
 8005946:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 800594a:	f00d fa3b 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800594e:	ee1a 1a10 	vmov	r1, s20
 8005952:	4628      	mov	r0, r5
 8005954:	f00a f8c6 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3_3.setXY(28, 222);
 8005958:	22de      	movs	r2, #222	; 0xde
 800595a:	ee1a 0a90 	vmov	r0, s21
 800595e:	211c      	movs	r1, #28
 8005960:	f7fd ffd3 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005964:	ee1a 1a90 	vmov	r1, s21
 8005968:	4640      	mov	r0, r8
        color = newColor;
 800596a:	f8c4 9978 	str.w	r9, [r4, #2424]	; 0x978
        linespace = space;
 800596e:	f8a4 697c 	strh.w	r6, [r4, #2428]	; 0x97c
        boundingArea = calculateBoundingArea();
 8005972:	f00c ff7f 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005976:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800597a:	ee1a 3a90 	vmov	r3, s21
 800597e:	333c      	adds	r3, #60	; 0x3c
 8005980:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005984:	2309      	movs	r3, #9
    textArea3_3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OV79));
 8005986:	ee1a 0a90 	vmov	r0, s21
 800598a:	a94e      	add	r1, sp, #312	; 0x138
 800598c:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 8005990:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
 8005994:	f00d fa16 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005998:	ee1a 1a90 	vmov	r1, s21
 800599c:	4628      	mov	r0, r5
 800599e:	f00a f8a1 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3_2.setXY(28, 103);
 80059a2:	2267      	movs	r2, #103	; 0x67
 80059a4:	ee1b 0a10 	vmov	r0, s22
 80059a8:	211c      	movs	r1, #28
 80059aa:	f7fd ffae 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 80059ae:	ee1b 1a10 	vmov	r1, s22
 80059b2:	4640      	mov	r0, r8
        color = newColor;
 80059b4:	f8c4 99c0 	str.w	r9, [r4, #2496]	; 0x9c0
        linespace = space;
 80059b8:	f8a4 69c4 	strh.w	r6, [r4, #2500]	; 0x9c4
        boundingArea = calculateBoundingArea();
 80059bc:	f00c ff5a 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80059c0:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80059c4:	ee1b 3a10 	vmov	r3, s22
 80059c8:	333c      	adds	r3, #60	; 0x3c
 80059ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80059ce:	f04f 0316 	mov.w	r3, #22
    textArea3_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IE6I));
 80059d2:	ee1b 0a10 	vmov	r0, s22
 80059d6:	a94e      	add	r1, sp, #312	; 0x138
 80059d8:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 80059dc:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
 80059e0:	f00d f9f0 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80059e4:	ee1b 1a10 	vmov	r1, s22
 80059e8:	4628      	mov	r0, r5
 80059ea:	f00a f87b 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3_2_1.setXY(28, 244);
 80059ee:	22f4      	movs	r2, #244	; 0xf4
 80059f0:	ee1b 0a90 	vmov	r0, s23
 80059f4:	211c      	movs	r1, #28
 80059f6:	f7fd ff88 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80059fa:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 80059fe:	ee1b 1a90 	vmov	r1, s23
        color = newColor;
 8005a02:	f8c4 3a08 	str.w	r3, [r4, #2568]	; 0xa08
        boundingArea = calculateBoundingArea();
 8005a06:	4640      	mov	r0, r8
        linespace = space;
 8005a08:	f8a4 6a0c 	strh.w	r6, [r4, #2572]	; 0xa0c
        boundingArea = calculateBoundingArea();
 8005a0c:	f00c ff32 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005a10:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005a14:	ee1b 3a90 	vmov	r3, s23
 8005a18:	333c      	adds	r3, #60	; 0x3c
 8005a1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005a1e:	2308      	movs	r3, #8
    textArea3_2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_M0P8));
 8005a20:	ee1b 0a90 	vmov	r0, s23
 8005a24:	a94e      	add	r1, sp, #312	; 0x138
 8005a26:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 8005a2a:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
 8005a2e:	f00d f9c9 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005a32:	ee1b 1a90 	vmov	r1, s23
 8005a36:	4628      	mov	r0, r5
 8005a38:	f00a f854 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3_2_1_3.setXY(128, 244);
 8005a3c:	22f4      	movs	r2, #244	; 0xf4
 8005a3e:	ee1c 0a10 	vmov	r0, s24
 8005a42:	4639      	mov	r1, r7
 8005a44:	f7fd ff61 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8005a48:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8005a4c:	ee1c 1a10 	vmov	r1, s24
        color = newColor;
 8005a50:	f8c4 3a50 	str.w	r3, [r4, #2640]	; 0xa50
        boundingArea = calculateBoundingArea();
 8005a54:	4640      	mov	r0, r8
        linespace = space;
 8005a56:	f8a4 6a54 	strh.w	r6, [r4, #2644]	; 0xa54
        boundingArea = calculateBoundingArea();
 8005a5a:	f00c ff0b 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005a5e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005a62:	ee1c 3a10 	vmov	r3, s24
 8005a66:	333c      	adds	r3, #60	; 0x3c
 8005a68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005a6c:	2301      	movs	r3, #1
    textArea3_2_1_3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FZK6));
 8005a6e:	ee1c 0a10 	vmov	r0, s24
 8005a72:	a94e      	add	r1, sp, #312	; 0x138
 8005a74:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 8005a78:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
 8005a7c:	f00d f9a2 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005a80:	ee1c 1a10 	vmov	r1, s24
 8005a84:	4628      	mov	r0, r5
 8005a86:	f00a f82d 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3_1.setXY(128, 84);
 8005a8a:	2254      	movs	r2, #84	; 0x54
 8005a8c:	ee1c 0a90 	vmov	r0, s25
 8005a90:	4639      	mov	r1, r7
 8005a92:	f7fd ff3a 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005a96:	ee1c 1a90 	vmov	r1, s25
 8005a9a:	4640      	mov	r0, r8
        color = newColor;
 8005a9c:	f8c4 9a98 	str.w	r9, [r4, #2712]	; 0xa98
        linespace = space;
 8005aa0:	f8a4 6a9c 	strh.w	r6, [r4, #2716]	; 0xa9c
        boundingArea = calculateBoundingArea();
 8005aa4:	f00c fee6 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005aa8:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005aac:	ee1c 3a90 	vmov	r3, s25
 8005ab0:	333c      	adds	r3, #60	; 0x3c
 8005ab2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005ab6:	2317      	movs	r3, #23
 8005ab8:	e004      	b.n	8005ac4 <_ZN15Screen4ViewBaseC1Ev+0xdac>
 8005aba:	bf00      	nop
 8005abc:	080284d4 	.word	0x080284d4
 8005ac0:	ff5e2ed6 	.word	0xff5e2ed6
    textArea3_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TCU3));
 8005ac4:	ee1c 0a90 	vmov	r0, s25
 8005ac8:	a94e      	add	r1, sp, #312	; 0x138
 8005aca:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 8005ace:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
 8005ad2:	f00d f977 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005ad6:	ee1c 1a90 	vmov	r1, s25
 8005ada:	4628      	mov	r0, r5
 8005adc:	f00a f802 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    shape1.setPosition(13, 104, 15, 15);
 8005ae0:	230f      	movs	r3, #15
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	ee18 0a10 	vmov	r0, s16
 8005ae8:	2268      	movs	r2, #104	; 0x68
 8005aea:	210d      	movs	r1, #13
 8005aec:	f7fd ff1a 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
    void setOrigin(T x, T y)
    {
        CWRUtil::Q5 dxNew = CWRUtil::toQ5<T>(x);
        CWRUtil::Q5 dyNew = CWRUtil::toQ5<T>(y);

        if (dx == dxNew && dy == dyNew)
 8005af0:	f8d4 3ae0 	ldr.w	r3, [r4, #2784]	; 0xae0
 8005af4:	b913      	cbnz	r3, 8005afc <_ZN15Screen4ViewBaseC1Ev+0xde4>
 8005af6:	f8d4 3ae4 	ldr.w	r3, [r4, #2788]	; 0xae4
 8005afa:	b13b      	cbz	r3, 8005b0c <_ZN15Screen4ViewBaseC1Ev+0xdf4>
        }

        dx = dxNew;
        dy = dyNew;

        updateAbstractShapeCache();
 8005afc:	ee18 0a10 	vmov	r0, s16
        dx = dxNew;
 8005b00:	f8c4 6ae0 	str.w	r6, [r4, #2784]	; 0xae0
        dy = dyNew;
 8005b04:	f8c4 6ae4 	str.w	r6, [r4, #2788]	; 0xae4
        updateAbstractShapeCache();
 8005b08:	f00b fa36 	bl	8010f78 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setScale(T newXScale, T newYScale)
    {
        xScale = CWRUtil::toQ10<T>(newXScale);
 8005b0c:	2366      	movs	r3, #102	; 0x66
 8005b0e:	f8c4 3aec 	str.w	r3, [r4, #2796]	; 0xaec
        yScale = CWRUtil::toQ10<T>(newYScale);
 8005b12:	f8c4 3af0 	str.w	r3, [r4, #2800]	; 0xaf0
        updateAbstractShapeCache();
 8005b16:	ee18 0a10 	vmov	r0, s16
 8005b1a:	f00b fa2d 	bl	8010f78 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
        if (shapeAngle != angleQ5)
 8005b1e:	f8d4 3ae8 	ldr.w	r3, [r4, #2792]	; 0xae8
 8005b22:	b133      	cbz	r3, 8005b32 <_ZN15Screen4ViewBaseC1Ev+0xe1a>
            shapeAngle = angleQ5;
 8005b24:	2300      	movs	r3, #0
            updateAbstractShapeCache();
 8005b26:	ee18 0a10 	vmov	r0, s16
            shapeAngle = angleQ5;
 8005b2a:	f8c4 3ae8 	str.w	r3, [r4, #2792]	; 0xae8
            updateAbstractShapeCache();
 8005b2e:	f00b fa23 	bl	8010f78 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 8005b32:	f645 137a 	movw	r3, #22906	; 0x597a
    const touchgfx::AbstractShape::ShapePoint<float> shape1Points[4] = { { 40.0f, 0.0f }, { 76.8f, 40.0f }, { 40.0f, 80.0f }, { 0.0f, 40.0f } };
 8005b36:	4fe1      	ldr	r7, [pc, #900]	; (8005ebc <_ZN15Screen4ViewBaseC1Ev+0x11a4>)
 8005b38:	f8a4 3b4c 	strh.w	r3, [r4, #2892]	; 0xb4c
 8005b3c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8005b3e:	f8c4 3ad8 	str.w	r3, [r4, #2776]	; 0xad8
 8005b42:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005b44:	ae4e      	add	r6, sp, #312	; 0x138
 8005b46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005b48:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8005b4c:	f8c4 9b48 	str.w	r9, [r4, #2888]	; 0xb48
 8005b50:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
        for (int i = 0; i < numPoints; i++)
 8005b54:	2700      	movs	r7, #0
 8005b56:	ae4e      	add	r6, sp, #312	; 0x138
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 8005b58:	ed96 7a01 	vldr	s14, [r6, #4]
 8005b5c:	edd6 7a00 	vldr	s15, [r6]
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 8005b60:	eef0 6a47 	vmov.f32	s13, s14
 8005b64:	eeb0 7a67 	vmov.f32	s14, s15
 8005b68:	eefe 6aed 	vcvt.s32.f32	s13, s13, #5
 8005b6c:	eebe 7aed 	vcvt.s32.f32	s14, s14, #5
 8005b70:	4639      	mov	r1, r7
 8005b72:	ee16 3a90 	vmov	r3, s13
 8005b76:	ee17 2a10 	vmov	r2, s14
 8005b7a:	ee18 0a10 	vmov	r0, s16
        for (int i = 0; i < numPoints; i++)
 8005b7e:	3701      	adds	r7, #1
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 8005b80:	f7ff f86e 	bl	8004c60 <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_>
        for (int i = 0; i < numPoints; i++)
 8005b84:	2f04      	cmp	r7, #4
 8005b86:	f106 0608 	add.w	r6, r6, #8
 8005b8a:	d1e5      	bne.n	8005b58 <_ZN15Screen4ViewBaseC1Ev+0xe40>
        updateAbstractShapeCache();
 8005b8c:	ee18 0a10 	vmov	r0, s16
 8005b90:	f00b f9f2 	bl	8010f78 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 8005b94:	ee18 1a10 	vmov	r1, s16
 8005b98:	4628      	mov	r0, r5
        linespace = space;
 8005b9a:	f04f 0800 	mov.w	r8, #0
        boundingArea = calculateBoundingArea();
 8005b9e:	ae48      	add	r6, sp, #288	; 0x120
        color = newColor;
 8005ba0:	f04f 497f 	mov.w	r9, #4278190080	; 0xff000000
 8005ba4:	f009 ff9e 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea4.setXY(28, 112);
 8005ba8:	ee1d 0a10 	vmov	r0, s26
 8005bac:	2270      	movs	r2, #112	; 0x70
 8005bae:	211c      	movs	r1, #28
 8005bb0:	f7fd feab 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 8005bb4:	ee1d 1a10 	vmov	r1, s26
 8005bb8:	4630      	mov	r0, r6
        color = newColor;
 8005bba:	f8c4 9b80 	str.w	r9, [r4, #2944]	; 0xb80
        linespace = space;
 8005bbe:	f8a4 8b84 	strh.w	r8, [r4, #2948]	; 0xb84
        boundingArea = calculateBoundingArea();
 8005bc2:	f00c fe57 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005bc6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005bca:	ee1d 3a10 	vmov	r3, s26
 8005bce:	333c      	adds	r3, #60	; 0x3c
 8005bd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005bd4:	4fba      	ldr	r7, [pc, #744]	; (8005ec0 <_ZN15Screen4ViewBaseC1Ev+0x11a8>)
 8005bd6:	974c      	str	r7, [sp, #304]	; 0x130
 8005bd8:	2315      	movs	r3, #21
    textArea4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LXI7));
 8005bda:	ee1d 0a10 	vmov	r0, s26
 8005bde:	a94c      	add	r1, sp, #304	; 0x130
 8005be0:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 8005be4:	f00d f8ee 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005be8:	ee1d 1a10 	vmov	r1, s26
 8005bec:	4628      	mov	r0, r5
 8005bee:	f009 ff79 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea5.setXY(61, 112);
 8005bf2:	ee1d 0a90 	vmov	r0, s27
 8005bf6:	2270      	movs	r2, #112	; 0x70
 8005bf8:	213d      	movs	r1, #61	; 0x3d
 8005bfa:	f7fd fe86 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005bfe:	ee1d 1a90 	vmov	r1, s27
 8005c02:	4630      	mov	r0, r6
        color = newColor;
 8005c04:	f8c4 9bc8 	str.w	r9, [r4, #3016]	; 0xbc8
        linespace = space;
 8005c08:	f8a4 8bcc 	strh.w	r8, [r4, #3020]	; 0xbcc
        boundingArea = calculateBoundingArea();
 8005c0c:	f00c fe32 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005c10:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005c14:	ee1d 3a90 	vmov	r3, s27
 8005c18:	333c      	adds	r3, #60	; 0x3c
 8005c1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c1e:	2314      	movs	r3, #20
    textArea5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P9Q4));
 8005c20:	ee1d 0a90 	vmov	r0, s27
 8005c24:	a94c      	add	r1, sp, #304	; 0x130
 8005c26:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 8005c2a:	974c      	str	r7, [sp, #304]	; 0x130
 8005c2c:	f00d f8ca 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005c30:	ee1d 1a90 	vmov	r1, s27
 8005c34:	4628      	mov	r0, r5
 8005c36:	f009 ff55 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea5_1.setXY(28, 120);
 8005c3a:	ee1e 0a10 	vmov	r0, s28
 8005c3e:	2278      	movs	r2, #120	; 0x78
 8005c40:	211c      	movs	r1, #28
 8005c42:	f7fd fe62 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005c46:	ee1e 1a10 	vmov	r1, s28
 8005c4a:	4630      	mov	r0, r6
        color = newColor;
 8005c4c:	f8c4 9c10 	str.w	r9, [r4, #3088]	; 0xc10
        linespace = space;
 8005c50:	f8a4 8c14 	strh.w	r8, [r4, #3092]	; 0xc14
        boundingArea = calculateBoundingArea();
 8005c54:	f00c fe0e 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005c58:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005c5c:	ee1e 3a10 	vmov	r3, s28
 8005c60:	333c      	adds	r3, #60	; 0x3c
 8005c62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c66:	2313      	movs	r3, #19
    textArea5_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2E70));
 8005c68:	ee1e 0a10 	vmov	r0, s28
 8005c6c:	a94c      	add	r1, sp, #304	; 0x130
 8005c6e:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 8005c72:	974c      	str	r7, [sp, #304]	; 0x130
 8005c74:	f00d f8a6 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    circle2.setPosition(-10, 112, 61, 63);
 8005c78:	273f      	movs	r7, #63	; 0x3f
 8005c7a:	ee1e 1a10 	vmov	r1, s28
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f009 ff30 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005c84:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8005c86:	9700      	str	r7, [sp, #0]
 8005c88:	233d      	movs	r3, #61	; 0x3d
 8005c8a:	2270      	movs	r2, #112	; 0x70
 8005c8c:	f06f 0109 	mvn.w	r1, #9
 8005c90:	f7fd fe48 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
        this->circleRadius = CWRUtil::toQ5(r);
 8005c94:	2250      	movs	r2, #80	; 0x50
 8005c96:	f8c4 2c5c 	str.w	r2, [r4, #3164]	; 0xc5c
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 8005c9a:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
        this->circleCenterX = CWRUtil::toQ5(x);
 8005c9e:	f44f 6aa0 	mov.w	sl, #1280	; 0x500
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 8005ca2:	f8c4 2c64 	str.w	r2, [r4, #3172]	; 0xc64
 8005ca6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005ca8:	9935      	ldr	r1, [sp, #212]	; 0xd4
        this->circleCenterX = CWRUtil::toQ5(x);
 8005caa:	f8c4 ac54 	str.w	sl, [r4, #3156]	; 0xc54
        this->circleCenterY = CWRUtil::toQ5(y);
 8005cae:	f8c4 ac58 	str.w	sl, [r4, #3160]	; 0xc58
 8005cb2:	f8c4 2c50 	str.w	r2, [r4, #3152]	; 0xc50
 8005cb6:	4628      	mov	r0, r5
        this->circleLineWidth = CWRUtil::toQ5(width);
 8005cb8:	f8c4 8c68 	str.w	r8, [r4, #3176]	; 0xc68
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 8005cbc:	f8c4 8c60 	str.w	r8, [r4, #3168]	; 0xc60
 8005cc0:	f8c4 9c7c 	str.w	r9, [r4, #3196]	; 0xc7c
 8005cc4:	f8a4 8c80 	strh.w	r8, [r4, #3200]	; 0xc80
 8005cc8:	f009 ff0c 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    circle2_1.setPosition(-10, 125, 61, 63);
 8005ccc:	233d      	movs	r3, #61	; 0x3d
 8005cce:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8005cd0:	9700      	str	r7, [sp, #0]
 8005cd2:	227d      	movs	r2, #125	; 0x7d
 8005cd4:	f06f 0109 	mvn.w	r1, #9
 8005cd8:	f7fd fe24 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
        this->circleRadius = CWRUtil::toQ5(r);
 8005cdc:	2250      	movs	r2, #80	; 0x50
 8005cde:	f8c4 2cb8 	str.w	r2, [r4, #3256]	; 0xcb8
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 8005ce2:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8005ce6:	f8c4 2cc0 	str.w	r2, [r4, #3264]	; 0xcc0
 8005cea:	9a44      	ldr	r2, [sp, #272]	; 0x110
 8005cec:	9936      	ldr	r1, [sp, #216]	; 0xd8
        this->circleCenterX = CWRUtil::toQ5(x);
 8005cee:	f8c4 acb0 	str.w	sl, [r4, #3248]	; 0xcb0
        this->circleCenterY = CWRUtil::toQ5(y);
 8005cf2:	f8c4 acb4 	str.w	sl, [r4, #3252]	; 0xcb4
 8005cf6:	f8c4 2cac 	str.w	r2, [r4, #3244]	; 0xcac
 8005cfa:	4628      	mov	r0, r5
        this->circleLineWidth = CWRUtil::toQ5(width);
 8005cfc:	f8c4 8cc4 	str.w	r8, [r4, #3268]	; 0xcc4
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 8005d00:	f8c4 8cbc 	str.w	r8, [r4, #3260]	; 0xcbc
 8005d04:	f8c4 9cd8 	str.w	r9, [r4, #3288]	; 0xcd8
 8005d08:	f8a4 8cdc 	strh.w	r8, [r4, #3292]	; 0xcdc
 8005d0c:	f009 feea 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea5_1_1_1.setXY(35, 161);
 8005d10:	ee1e 0a90 	vmov	r0, s29
 8005d14:	22a1      	movs	r2, #161	; 0xa1
 8005d16:	2123      	movs	r1, #35	; 0x23
 8005d18:	f7fd fdf7 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005d1c:	ee1e 1a90 	vmov	r1, s29
 8005d20:	4630      	mov	r0, r6
        color = newColor;
 8005d22:	f8c4 9d10 	str.w	r9, [r4, #3344]	; 0xd10
        linespace = space;
 8005d26:	f8a4 8d14 	strh.w	r8, [r4, #3348]	; 0xd14
        boundingArea = calculateBoundingArea();
 8005d2a:	f00c fda3 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005d2e:	ee1e 2a90 	vmov	r2, s29
 8005d32:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8005d36:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005d3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005d3e:	4b60      	ldr	r3, [pc, #384]	; (8005ec0 <_ZN15Screen4ViewBaseC1Ev+0x11a8>)
 8005d40:	934c      	str	r3, [sp, #304]	; 0x130
    textArea5_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ON69));
 8005d42:	ee1e 0a90 	vmov	r0, s29
 8005d46:	2312      	movs	r3, #18
 8005d48:	a94c      	add	r1, sp, #304	; 0x130
 8005d4a:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 8005d4e:	f00d f839 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005d52:	ee1e 1a90 	vmov	r1, s29
 8005d56:	4628      	mov	r0, r5
 8005d58:	f009 fec4 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea5_1_1_1_2.setXY(128, 103);
 8005d5c:	ee1f 0a10 	vmov	r0, s30
 8005d60:	2267      	movs	r2, #103	; 0x67
 8005d62:	2180      	movs	r1, #128	; 0x80
 8005d64:	f7fd fdd1 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005d68:	ee1f 1a10 	vmov	r1, s30
 8005d6c:	4630      	mov	r0, r6
        color = newColor;
 8005d6e:	f8c4 9d58 	str.w	r9, [r4, #3416]	; 0xd58
        linespace = space;
 8005d72:	f8a4 8d5c 	strh.w	r8, [r4, #3420]	; 0xd5c
        boundingArea = calculateBoundingArea();
 8005d76:	f00c fd7d 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005d7a:	ee1f 2a10 	vmov	r2, s30
 8005d7e:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8005d82:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005d86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005d8a:	4b4d      	ldr	r3, [pc, #308]	; (8005ec0 <_ZN15Screen4ViewBaseC1Ev+0x11a8>)
 8005d8c:	934c      	str	r3, [sp, #304]	; 0x130
    textArea5_1_1_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IJTT));
 8005d8e:	ee1f 0a10 	vmov	r0, s30
 8005d92:	230d      	movs	r3, #13
 8005d94:	a94c      	add	r1, sp, #304	; 0x130
 8005d96:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 8005d9a:	f00d f813 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005d9e:	ee1f 1a10 	vmov	r1, s30
 8005da2:	4628      	mov	r0, r5
 8005da4:	f009 fe9e 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea5_1_1_1_2_1.setXY(128, 115);
 8005da8:	ee1f 0a90 	vmov	r0, s31
 8005dac:	2273      	movs	r2, #115	; 0x73
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	f7fd fdab 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005db4:	ee1f 1a90 	vmov	r1, s31
 8005db8:	4630      	mov	r0, r6
        color = newColor;
 8005dba:	f8c4 9da0 	str.w	r9, [r4, #3488]	; 0xda0
        linespace = space;
 8005dbe:	f8a4 8da4 	strh.w	r8, [r4, #3492]	; 0xda4
        boundingArea = calculateBoundingArea();
 8005dc2:	f00c fd57 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005dc6:	ee1f 2a90 	vmov	r2, s31
 8005dca:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8005dce:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005dd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005dd6:	4b3a      	ldr	r3, [pc, #232]	; (8005ec0 <_ZN15Screen4ViewBaseC1Ev+0x11a8>)
 8005dd8:	934c      	str	r3, [sp, #304]	; 0x130
    textArea5_1_1_1_2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W5DL));
 8005dda:	ee1f 0a90 	vmov	r0, s31
 8005dde:	230c      	movs	r3, #12
 8005de0:	a94c      	add	r1, sp, #304	; 0x130
 8005de2:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 8005de6:	f00c ffed 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005dea:	ee1f 1a90 	vmov	r1, s31
 8005dee:	4628      	mov	r0, r5
 8005df0:	f009 fe78 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea5_1_1_1_2_1_1.setXY(128, 125);
 8005df4:	9803      	ldr	r0, [sp, #12]
 8005df6:	227d      	movs	r2, #125	; 0x7d
 8005df8:	2180      	movs	r1, #128	; 0x80
 8005dfa:	f7fd fd86 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005dfe:	9903      	ldr	r1, [sp, #12]
        color = newColor;
 8005e00:	f8c4 9de8 	str.w	r9, [r4, #3560]	; 0xde8
        boundingArea = calculateBoundingArea();
 8005e04:	4630      	mov	r0, r6
        linespace = space;
 8005e06:	f8a4 8dec 	strh.w	r8, [r4, #3564]	; 0xdec
        boundingArea = calculateBoundingArea();
 8005e0a:	f00c fd33 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005e0e:	9a03      	ldr	r2, [sp, #12]
 8005e10:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8005e14:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005e18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005e1c:	4b28      	ldr	r3, [pc, #160]	; (8005ec0 <_ZN15Screen4ViewBaseC1Ev+0x11a8>)
    textArea5_1_1_1_2_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5VIY));
 8005e1e:	9803      	ldr	r0, [sp, #12]
 8005e20:	934c      	str	r3, [sp, #304]	; 0x130
 8005e22:	a94c      	add	r1, sp, #304	; 0x130
 8005e24:	230b      	movs	r3, #11
 8005e26:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 8005e2a:	f00c ffcb 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005e2e:	9903      	ldr	r1, [sp, #12]
 8005e30:	4628      	mov	r0, r5
 8005e32:	f009 fe57 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea5_1_1_1_2_1_1_1.setXY(128, 136);
 8005e36:	9804      	ldr	r0, [sp, #16]
 8005e38:	2288      	movs	r2, #136	; 0x88
 8005e3a:	2180      	movs	r1, #128	; 0x80
 8005e3c:	f7fd fd65 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005e40:	9904      	ldr	r1, [sp, #16]
        color = newColor;
 8005e42:	f8c4 9e30 	str.w	r9, [r4, #3632]	; 0xe30
        boundingArea = calculateBoundingArea();
 8005e46:	4630      	mov	r0, r6
        linespace = space;
 8005e48:	f8a4 8e34 	strh.w	r8, [r4, #3636]	; 0xe34
        boundingArea = calculateBoundingArea();
 8005e4c:	f00c fd12 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005e50:	9a04      	ldr	r2, [sp, #16]
 8005e52:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8005e56:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005e5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005e5e:	4b18      	ldr	r3, [pc, #96]	; (8005ec0 <_ZN15Screen4ViewBaseC1Ev+0x11a8>)
    textArea5_1_1_1_2_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_J8B5));
 8005e60:	9804      	ldr	r0, [sp, #16]
 8005e62:	934c      	str	r3, [sp, #304]	; 0x130
 8005e64:	a94c      	add	r1, sp, #304	; 0x130
 8005e66:	230a      	movs	r3, #10
 8005e68:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 8005e6c:	f00c ffaa 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005e70:	9904      	ldr	r1, [sp, #16]
 8005e72:	4628      	mov	r0, r5
 8005e74:	f009 fe36 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea5_1_1_1_1.setXY(35, 172);
 8005e78:	9805      	ldr	r0, [sp, #20]
 8005e7a:	22ac      	movs	r2, #172	; 0xac
 8005e7c:	2123      	movs	r1, #35	; 0x23
 8005e7e:	f7fd fd44 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005e82:	9905      	ldr	r1, [sp, #20]
        color = newColor;
 8005e84:	f8c4 9e78 	str.w	r9, [r4, #3704]	; 0xe78
        boundingArea = calculateBoundingArea();
 8005e88:	4630      	mov	r0, r6
        linespace = space;
 8005e8a:	f8a4 8e7c 	strh.w	r8, [r4, #3708]	; 0xe7c
        boundingArea = calculateBoundingArea();
 8005e8e:	f00c fcf1 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005e92:	9a05      	ldr	r2, [sp, #20]
 8005e94:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8005e98:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005e9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <_ZN15Screen4ViewBaseC1Ev+0x11a8>)
    textArea5_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T0NZ));
 8005ea2:	9805      	ldr	r0, [sp, #20]
 8005ea4:	934c      	str	r3, [sp, #304]	; 0x130
 8005ea6:	a94c      	add	r1, sp, #304	; 0x130
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 8005eae:	f00c ff89 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005eb2:	9905      	ldr	r1, [sp, #20]
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f009 fe15 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005eba:	e003      	b.n	8005ec4 <_ZN15Screen4ViewBaseC1Ev+0x11ac>
 8005ebc:	08027b5c 	.word	0x08027b5c
 8005ec0:	080284d4 	.word	0x080284d4
    circle2_1_1.setPosition(-10, 136, 61, 63);
 8005ec4:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8005ec6:	9700      	str	r7, [sp, #0]
 8005ec8:	233d      	movs	r3, #61	; 0x3d
 8005eca:	2288      	movs	r2, #136	; 0x88
 8005ecc:	f06f 0109 	mvn.w	r1, #9
 8005ed0:	f7fd fd28 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
        this->circleRadius = CWRUtil::toQ5(r);
 8005ed4:	2250      	movs	r2, #80	; 0x50
 8005ed6:	f8c4 2ec4 	str.w	r2, [r4, #3780]	; 0xec4
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 8005eda:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8005ede:	f8c4 2ecc 	str.w	r2, [r4, #3788]	; 0xecc
 8005ee2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005ee4:	9937      	ldr	r1, [sp, #220]	; 0xdc
        this->circleCenterX = CWRUtil::toQ5(x);
 8005ee6:	f8c4 aebc 	str.w	sl, [r4, #3772]	; 0xebc
        this->circleCenterY = CWRUtil::toQ5(y);
 8005eea:	f8c4 aec0 	str.w	sl, [r4, #3776]	; 0xec0
 8005eee:	f8c4 2eb8 	str.w	r2, [r4, #3768]	; 0xeb8
 8005ef2:	4628      	mov	r0, r5
        this->circleLineWidth = CWRUtil::toQ5(width);
 8005ef4:	f8c4 8ed0 	str.w	r8, [r4, #3792]	; 0xed0
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 8005ef8:	f8c4 8ec8 	str.w	r8, [r4, #3784]	; 0xec8
 8005efc:	f8c4 9ee4 	str.w	r9, [r4, #3812]	; 0xee4
 8005f00:	f8a4 8ee8 	strh.w	r8, [r4, #3816]	; 0xee8
 8005f04:	f009 fdee 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    circle2_1_1_1.setPosition(-10, 148, 61, 63);
 8005f08:	233d      	movs	r3, #61	; 0x3d
 8005f0a:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8005f0c:	9700      	str	r7, [sp, #0]
 8005f0e:	2294      	movs	r2, #148	; 0x94
 8005f10:	f06f 0109 	mvn.w	r1, #9
 8005f14:	f7fd fd06 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
        this->circleRadius = CWRUtil::toQ5(r);
 8005f18:	2250      	movs	r2, #80	; 0x50
 8005f1a:	f8c4 2f20 	str.w	r2, [r4, #3872]	; 0xf20
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 8005f1e:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8005f22:	f8c4 2f28 	str.w	r2, [r4, #3880]	; 0xf28
 8005f26:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8005f28:	9938      	ldr	r1, [sp, #224]	; 0xe0
        this->circleCenterX = CWRUtil::toQ5(x);
 8005f2a:	f8c4 af18 	str.w	sl, [r4, #3864]	; 0xf18
        this->circleCenterY = CWRUtil::toQ5(y);
 8005f2e:	f8c4 af1c 	str.w	sl, [r4, #3868]	; 0xf1c
 8005f32:	f8c4 2f14 	str.w	r2, [r4, #3860]	; 0xf14
 8005f36:	4628      	mov	r0, r5
        this->circleLineWidth = CWRUtil::toQ5(width);
 8005f38:	f8c4 8f2c 	str.w	r8, [r4, #3884]	; 0xf2c
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 8005f3c:	f8c4 8f24 	str.w	r8, [r4, #3876]	; 0xf24
 8005f40:	f8c4 9f40 	str.w	r9, [r4, #3904]	; 0xf40
 8005f44:	f8a4 8f44 	strh.w	r8, [r4, #3908]	; 0xf44
 8005f48:	f009 fdcc 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea5_1_1_1_1_1.setXY(35, 184);
 8005f4c:	9806      	ldr	r0, [sp, #24]
 8005f4e:	22b8      	movs	r2, #184	; 0xb8
 8005f50:	2123      	movs	r1, #35	; 0x23
 8005f52:	f7fd fcda 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005f56:	9906      	ldr	r1, [sp, #24]
        color = newColor;
 8005f58:	f8c4 9f78 	str.w	r9, [r4, #3960]	; 0xf78
        boundingArea = calculateBoundingArea();
 8005f5c:	4630      	mov	r0, r6
        linespace = space;
 8005f5e:	f8a4 8f7c 	strh.w	r8, [r4, #3964]	; 0xf7c
        boundingArea = calculateBoundingArea();
 8005f62:	f00c fc87 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005f66:	9a06      	ldr	r2, [sp, #24]
 8005f68:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8005f6c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005f70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005f74:	4bc1      	ldr	r3, [pc, #772]	; (800627c <_ZN15Screen4ViewBaseC1Ev+0x1564>)
    textArea5_1_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZR1Z));
 8005f76:	9806      	ldr	r0, [sp, #24]
 8005f78:	934c      	str	r3, [sp, #304]	; 0x130
 8005f7a:	a94c      	add	r1, sp, #304	; 0x130
 8005f7c:	230f      	movs	r3, #15
 8005f7e:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 8005f82:	f00c ff1f 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005f86:	9906      	ldr	r1, [sp, #24]
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f009 fdab 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea5_1_1_1_1_1_1.setXY(35, 196);
 8005f8e:	9807      	ldr	r0, [sp, #28]
 8005f90:	22c4      	movs	r2, #196	; 0xc4
 8005f92:	2123      	movs	r1, #35	; 0x23
 8005f94:	f7fd fcb9 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8005f98:	9907      	ldr	r1, [sp, #28]
        color = newColor;
 8005f9a:	f8c4 9fc0 	str.w	r9, [r4, #4032]	; 0xfc0
        boundingArea = calculateBoundingArea();
 8005f9e:	4630      	mov	r0, r6
        linespace = space;
 8005fa0:	f8a4 8fc4 	strh.w	r8, [r4, #4036]	; 0xfc4
        boundingArea = calculateBoundingArea();
 8005fa4:	f00c fc66 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005fa8:	9a07      	ldr	r2, [sp, #28]
 8005faa:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8005fae:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005fb6:	4bb1      	ldr	r3, [pc, #708]	; (800627c <_ZN15Screen4ViewBaseC1Ev+0x1564>)
    textArea5_1_1_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T6A0));
 8005fb8:	9807      	ldr	r0, [sp, #28]
 8005fba:	934c      	str	r3, [sp, #304]	; 0x130
 8005fbc:	a94c      	add	r1, sp, #304	; 0x130
 8005fbe:	230e      	movs	r3, #14
 8005fc0:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 8005fc4:	f00c fefe 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005fc8:	9907      	ldr	r1, [sp, #28]
 8005fca:	4628      	mov	r0, r5
 8005fcc:	f009 fd8a 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    circle2_1_1_1_1.setPosition(-10, 160, 61, 63);
 8005fd0:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8005fd2:	9700      	str	r7, [sp, #0]
 8005fd4:	233d      	movs	r3, #61	; 0x3d
        this->circleCenterX = CWRUtil::toQ5(x);
 8005fd6:	f504 5780 	add.w	r7, r4, #4096	; 0x1000
 8005fda:	22a0      	movs	r2, #160	; 0xa0
 8005fdc:	f06f 0109 	mvn.w	r1, #9
 8005fe0:	f7fd fca0 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
        this->circleRadius = CWRUtil::toQ5(r);
 8005fe4:	2250      	movs	r2, #80	; 0x50
 8005fe6:	60fa      	str	r2, [r7, #12]
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 8005fe8:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8005fec:	617a      	str	r2, [r7, #20]
 8005fee:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005ff0:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8005ff2:	603a      	str	r2, [r7, #0]
        this->circleCenterY = CWRUtil::toQ5(y);
 8005ff4:	e9c7 aa01 	strd	sl, sl, [r7, #4]
 8005ff8:	4628      	mov	r0, r5
    box2.setPosition(65, 244, 5, 9);
 8005ffa:	f04f 0a09 	mov.w	sl, #9
        this->circleLineWidth = CWRUtil::toQ5(width);
 8005ffe:	f8c7 8018 	str.w	r8, [r7, #24]
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 8006002:	f8c7 8010 	str.w	r8, [r7, #16]
 8006006:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
 800600a:	f8a7 8030 	strh.w	r8, [r7, #48]	; 0x30
 800600e:	f009 fd69 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8006012:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006014:	f8cd a000 	str.w	sl, [sp]
 8006018:	2305      	movs	r3, #5
 800601a:	22f4      	movs	r2, #244	; 0xf4
 800601c:	2141      	movs	r1, #65	; 0x41
 800601e:	f7fd fc81 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8006022:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006024:	f8c7 b05c 	str.w	fp, [r7, #92]	; 0x5c
 8006028:	4628      	mov	r0, r5
 800602a:	f009 fd5b 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1.setPosition(73, 244, 5, 9);
 800602e:	983a      	ldr	r0, [sp, #232]	; 0xe8
 8006030:	f8cd a000 	str.w	sl, [sp]
 8006034:	2305      	movs	r3, #5
 8006036:	22f4      	movs	r2, #244	; 0xf4
 8006038:	2149      	movs	r1, #73	; 0x49
 800603a:	f7fd fc73 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 800603e:	993a      	ldr	r1, [sp, #232]	; 0xe8
 8006040:	f8c7 b088 	str.w	fp, [r7, #136]	; 0x88
 8006044:	4628      	mov	r0, r5
 8006046:	f009 fd4d 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1.setPosition(82, 244, 5, 9);
 800604a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800604c:	f8cd a000 	str.w	sl, [sp]
 8006050:	2305      	movs	r3, #5
 8006052:	22f4      	movs	r2, #244	; 0xf4
 8006054:	2152      	movs	r1, #82	; 0x52
 8006056:	f7fd fc65 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 800605a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800605c:	f8c7 b0b4 	str.w	fp, [r7, #180]	; 0xb4
 8006060:	4628      	mov	r0, r5
 8006062:	f009 fd3f 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1.setPosition(90, 244, 5, 9);
 8006066:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006068:	f8cd a000 	str.w	sl, [sp]
 800606c:	2305      	movs	r3, #5
 800606e:	22f4      	movs	r2, #244	; 0xf4
 8006070:	215a      	movs	r1, #90	; 0x5a
 8006072:	f7fd fc57 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8006076:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006078:	f8c7 b0e0 	str.w	fp, [r7, #224]	; 0xe0
 800607c:	4628      	mov	r0, r5
 800607e:	f009 fd31 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1_1.setPosition(98, 244, 5, 9);
 8006082:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006084:	f8cd a000 	str.w	sl, [sp]
 8006088:	2305      	movs	r3, #5
 800608a:	22f4      	movs	r2, #244	; 0xf4
 800608c:	2162      	movs	r1, #98	; 0x62
 800608e:	f7fd fc49 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8006092:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006094:	f8c7 b10c 	str.w	fp, [r7, #268]	; 0x10c
 8006098:	4628      	mov	r0, r5
 800609a:	f009 fd23 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1_1_1.setPosition(98, 269, 5, 9);
 800609e:	9811      	ldr	r0, [sp, #68]	; 0x44
 80060a0:	f8cd a000 	str.w	sl, [sp]
 80060a4:	2305      	movs	r3, #5
 80060a6:	f240 120d 	movw	r2, #269	; 0x10d
 80060aa:	2162      	movs	r1, #98	; 0x62
 80060ac:	f7fd fc3a 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80060b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80060b2:	f8c7 b138 	str.w	fp, [r7, #312]	; 0x138
 80060b6:	4628      	mov	r0, r5
 80060b8:	f009 fd14 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1_3.setPosition(90, 269, 5, 9);
 80060bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80060be:	f8cd a000 	str.w	sl, [sp]
 80060c2:	2305      	movs	r3, #5
 80060c4:	f240 120d 	movw	r2, #269	; 0x10d
 80060c8:	215a      	movs	r1, #90	; 0x5a
 80060ca:	f7fd fc2b 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80060ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 80060d0:	f8c7 b164 	str.w	fp, [r7, #356]	; 0x164
 80060d4:	4628      	mov	r0, r5
 80060d6:	f009 fd05 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_3.setPosition(82, 269, 5, 9);
 80060da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80060dc:	f8cd a000 	str.w	sl, [sp]
 80060e0:	2305      	movs	r3, #5
 80060e2:	f240 120d 	movw	r2, #269	; 0x10d
 80060e6:	2152      	movs	r1, #82	; 0x52
 80060e8:	f7fd fc1c 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80060ec:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80060ee:	f8c7 b190 	str.w	fp, [r7, #400]	; 0x190
 80060f2:	4628      	mov	r0, r5
 80060f4:	f009 fcf6 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_3.setPosition(73, 269, 5, 9);
 80060f8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80060fa:	f8cd a000 	str.w	sl, [sp]
 80060fe:	2305      	movs	r3, #5
 8006100:	f240 120d 	movw	r2, #269	; 0x10d
 8006104:	2149      	movs	r1, #73	; 0x49
 8006106:	f7fd fc0d 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 800610a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800610c:	f8c7 b1bc 	str.w	fp, [r7, #444]	; 0x1bc
 8006110:	4628      	mov	r0, r5
 8006112:	f009 fce7 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_3.setPosition(65, 269, 5, 9);
 8006116:	2305      	movs	r3, #5
 8006118:	983b      	ldr	r0, [sp, #236]	; 0xec
 800611a:	f8cd a000 	str.w	sl, [sp]
 800611e:	f240 120d 	movw	r2, #269	; 0x10d
 8006122:	2141      	movs	r1, #65	; 0x41
 8006124:	f7fd fbfe 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8006128:	993b      	ldr	r1, [sp, #236]	; 0xec
 800612a:	f8c7 b1e8 	str.w	fp, [r7, #488]	; 0x1e8
 800612e:	4628      	mov	r0, r5
 8006130:	f009 fcd8 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3_2_1_2.setXY(28, 269);
 8006134:	ee18 0a90 	vmov	r0, s17
 8006138:	f240 120d 	movw	r2, #269	; 0x10d
 800613c:	211c      	movs	r1, #28
 800613e:	f7fd fbe4 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8006142:	ee18 1a90 	vmov	r1, s17
 8006146:	4630      	mov	r0, r6
        color = newColor;
 8006148:	f8c7 921c 	str.w	r9, [r7, #540]	; 0x21c
        linespace = space;
 800614c:	f8a7 8220 	strh.w	r8, [r7, #544]	; 0x220
        boundingArea = calculateBoundingArea();
 8006150:	f00c fb90 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006154:	ee18 2a90 	vmov	r2, s17
 8006158:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 800615c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006160:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006164:	4b45      	ldr	r3, [pc, #276]	; (800627c <_ZN15Screen4ViewBaseC1Ev+0x1564>)
 8006166:	934c      	str	r3, [sp, #304]	; 0x130
    textArea3_2_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RTNG));
 8006168:	ee18 0a90 	vmov	r0, s17
 800616c:	2306      	movs	r3, #6
 800616e:	a94c      	add	r1, sp, #304	; 0x130
 8006170:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 8006174:	f00c fe26 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006178:	ee18 1a90 	vmov	r1, s17
 800617c:	4628      	mov	r0, r5
 800617e:	f009 fcb1 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_1_2.setPosition(90, 256, 5, 9);
 8006182:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006184:	f8cd a000 	str.w	sl, [sp]
 8006188:	2305      	movs	r3, #5
 800618a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800618e:	215a      	movs	r1, #90	; 0x5a
 8006190:	f7fd fbc8 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 8006194:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006196:	f8c7 b25c 	str.w	fp, [r7, #604]	; 0x25c
 800619a:	4628      	mov	r0, r5
 800619c:	f009 fca2 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_1_2.setPosition(82, 256, 5, 9);
 80061a0:	983c      	ldr	r0, [sp, #240]	; 0xf0
 80061a2:	f8cd a000 	str.w	sl, [sp]
 80061a6:	2305      	movs	r3, #5
 80061a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061ac:	2152      	movs	r1, #82	; 0x52
 80061ae:	f7fd fbb9 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80061b2:	993c      	ldr	r1, [sp, #240]	; 0xf0
 80061b4:	f8c7 b288 	str.w	fp, [r7, #648]	; 0x288
 80061b8:	4628      	mov	r0, r5
 80061ba:	f009 fc93 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_1_2.setPosition(73, 256, 5, 9);
 80061be:	9816      	ldr	r0, [sp, #88]	; 0x58
 80061c0:	f8cd a000 	str.w	sl, [sp]
 80061c4:	2305      	movs	r3, #5
 80061c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061ca:	2149      	movs	r1, #73	; 0x49
 80061cc:	f7fd fbaa 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80061d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80061d2:	f8c7 b2b4 	str.w	fp, [r7, #692]	; 0x2b4
 80061d6:	4628      	mov	r0, r5
 80061d8:	f009 fc84 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box2_2.setPosition(65, 256, 5, 9);
 80061dc:	2305      	movs	r3, #5
 80061de:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80061e0:	f8cd a000 	str.w	sl, [sp]
 80061e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061e8:	2141      	movs	r1, #65	; 0x41
 80061ea:	f7fd fb9b 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 80061ee:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80061f0:	f8c7 b2e0 	str.w	fp, [r7, #736]	; 0x2e0
 80061f4:	4628      	mov	r0, r5
 80061f6:	f009 fc75 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3_2_1_1.setXY(27, 256);
 80061fa:	ee19 0a10 	vmov	r0, s18
 80061fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006202:	211b      	movs	r1, #27
 8006204:	f7fd fb81 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8006208:	ee19 1a10 	vmov	r1, s18
 800620c:	4630      	mov	r0, r6
        color = newColor;
 800620e:	f8c7 9314 	str.w	r9, [r7, #788]	; 0x314
        linespace = space;
 8006212:	f8a7 8318 	strh.w	r8, [r7, #792]	; 0x318
        boundingArea = calculateBoundingArea();
 8006216:	f00c fb2d 	bl	8012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800621a:	ee19 2a10 	vmov	r2, s18
 800621e:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8006222:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800622a:	4b14      	ldr	r3, [pc, #80]	; (800627c <_ZN15Screen4ViewBaseC1Ev+0x1564>)
 800622c:	934c      	str	r3, [sp, #304]	; 0x130
    textArea3_2_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W0SB));
 800622e:	ee19 0a10 	vmov	r0, s18
 8006232:	2307      	movs	r3, #7
 8006234:	a94c      	add	r1, sp, #304	; 0x130
 8006236:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
 800623a:	f00c fdc3 	bl	8012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800623e:	ee19 1a10 	vmov	r1, s18
 8006242:	4628      	mov	r0, r5
 8006244:	f009 fc4e 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder1.setPosition(98, 256, 5, 9);
 8006248:	9818      	ldr	r0, [sp, #96]	; 0x60
 800624a:	f8cd a000 	str.w	sl, [sp]
 800624e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006252:	2305      	movs	r3, #5
 8006254:	2162      	movs	r1, #98	; 0x62
 8006256:	f7fd fb65 	bl	8003924 <_ZN8touchgfx8Drawable11setPositionEssss>
 800625a:	f04f 33ff 	mov.w	r3, #4294967295
        borderColor = colorBorder;
 800625e:	e9c7 3bd5 	strd	r3, fp, [r7, #852]	; 0x354
        borderSize = size;
 8006262:	2302      	movs	r3, #2
 8006264:	4628      	mov	r0, r5
 8006266:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006268:	f8a7 335c 	strh.w	r3, [r7, #860]	; 0x35c
 800626c:	f009 fc3a 	bl	800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006270:	4620      	mov	r0, r4
 8006272:	b057      	add	sp, #348	; 0x15c
 8006274:	ecbd 8b10 	vpop	{d8-d15}
 8006278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627c:	080284d4 	.word	0x080284d4

08006280 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_VIVALDII_TTF_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_VIVALDII_TTF_30_4bpp();

touchgfx::GeneratedFont& getFont_VIVALDII_TTF_30_4bpp()
{
    static touchgfx::GeneratedFont VIVALDII_TTF_30_4bpp(glyphs_VIVALDII_TTF_30_4bpp, 1, 30, 30, 0, 0, 4, 1, 0, 3, unicodes_VIVALDII_TTF_30_4bpp, kerning_VIVALDII_TTF_30_4bpp, 63, 0, 0, 0);
 8006280:	4770      	bx	lr
	...

08006284 <_Z28getFont_VIVALDII_TTF_30_4bppv>:
{
 8006284:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont VIVALDII_TTF_30_4bpp(glyphs_VIVALDII_TTF_30_4bpp, 1, 30, 30, 0, 0, 4, 1, 0, 3, unicodes_VIVALDII_TTF_30_4bpp, kerning_VIVALDII_TTF_30_4bpp, 63, 0, 0, 0);
 8006286:	4d16      	ldr	r5, [pc, #88]	; (80062e0 <_Z28getFont_VIVALDII_TTF_30_4bppv+0x5c>)
 8006288:	682c      	ldr	r4, [r5, #0]
 800628a:	f3bf 8f5b 	dmb	ish
 800628e:	f014 0401 	ands.w	r4, r4, #1
{
 8006292:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont VIVALDII_TTF_30_4bpp(glyphs_VIVALDII_TTF_30_4bpp, 1, 30, 30, 0, 0, 4, 1, 0, 3, unicodes_VIVALDII_TTF_30_4bpp, kerning_VIVALDII_TTF_30_4bpp, 63, 0, 0, 0);
 8006294:	d121      	bne.n	80062da <_Z28getFont_VIVALDII_TTF_30_4bppv+0x56>
 8006296:	4628      	mov	r0, r5
 8006298:	f020 fbaf 	bl	80269fa <__cxa_guard_acquire>
 800629c:	b1e8      	cbz	r0, 80062da <_Z28getFont_VIVALDII_TTF_30_4bppv+0x56>
 800629e:	233f      	movs	r3, #63	; 0x3f
 80062a0:	9309      	str	r3, [sp, #36]	; 0x24
 80062a2:	4b10      	ldr	r3, [pc, #64]	; (80062e4 <_Z28getFont_VIVALDII_TTF_30_4bppv+0x60>)
 80062a4:	9308      	str	r3, [sp, #32]
 80062a6:	4b10      	ldr	r3, [pc, #64]	; (80062e8 <_Z28getFont_VIVALDII_TTF_30_4bppv+0x64>)
 80062a8:	9307      	str	r3, [sp, #28]
 80062aa:	2303      	movs	r3, #3
 80062ac:	2201      	movs	r2, #1
 80062ae:	e9cd 4305 	strd	r4, r3, [sp, #20]
 80062b2:	2304      	movs	r3, #4
 80062b4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80062b8:	231e      	movs	r3, #30
 80062ba:	490c      	ldr	r1, [pc, #48]	; (80062ec <_Z28getFont_VIVALDII_TTF_30_4bppv+0x68>)
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80062c2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80062c6:	480a      	ldr	r0, [pc, #40]	; (80062f0 <_Z28getFont_VIVALDII_TTF_30_4bppv+0x6c>)
 80062c8:	940a      	str	r4, [sp, #40]	; 0x28
 80062ca:	f7fe f959 	bl	8004580 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80062ce:	4809      	ldr	r0, [pc, #36]	; (80062f4 <_Z28getFont_VIVALDII_TTF_30_4bppv+0x70>)
 80062d0:	f020 fbde 	bl	8026a90 <atexit>
 80062d4:	4628      	mov	r0, r5
 80062d6:	f020 fb9c 	bl	8026a12 <__cxa_guard_release>
    return VIVALDII_TTF_30_4bpp;
}
 80062da:	4805      	ldr	r0, [pc, #20]	; (80062f0 <_Z28getFont_VIVALDII_TTF_30_4bppv+0x6c>)
 80062dc:	b00f      	add	sp, #60	; 0x3c
 80062de:	bd30      	pop	{r4, r5, pc}
 80062e0:	2000363c 	.word	0x2000363c
 80062e4:	0802cff0 	.word	0x0802cff0
 80062e8:	0802d1b0 	.word	0x0802d1b0
 80062ec:	0802c2f0 	.word	0x0802c2f0
 80062f0:	20003640 	.word	0x20003640
 80062f4:	08006281 	.word	0x08006281

080062f8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 17, 12, 10, 0, 0, 4, 1, 0, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80062f8:	4770      	bx	lr
	...

080062fc <_Z23getFont_verdana_10_4bppv>:
{
 80062fc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 17, 12, 10, 0, 0, 4, 1, 0, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80062fe:	4d17      	ldr	r5, [pc, #92]	; (800635c <_Z23getFont_verdana_10_4bppv+0x60>)
 8006300:	682c      	ldr	r4, [r5, #0]
 8006302:	f3bf 8f5b 	dmb	ish
 8006306:	f014 0401 	ands.w	r4, r4, #1
{
 800630a:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 17, 12, 10, 0, 0, 4, 1, 0, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800630c:	d122      	bne.n	8006354 <_Z23getFont_verdana_10_4bppv+0x58>
 800630e:	4628      	mov	r0, r5
 8006310:	f020 fb73 	bl	80269fa <__cxa_guard_acquire>
 8006314:	b1f0      	cbz	r0, 8006354 <_Z23getFont_verdana_10_4bppv+0x58>
 8006316:	233f      	movs	r3, #63	; 0x3f
 8006318:	9309      	str	r3, [sp, #36]	; 0x24
 800631a:	4b11      	ldr	r3, [pc, #68]	; (8006360 <_Z23getFont_verdana_10_4bppv+0x64>)
 800631c:	9308      	str	r3, [sp, #32]
 800631e:	4b11      	ldr	r3, [pc, #68]	; (8006364 <_Z23getFont_verdana_10_4bppv+0x68>)
 8006320:	9307      	str	r3, [sp, #28]
 8006322:	2301      	movs	r3, #1
 8006324:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8006328:	9304      	str	r3, [sp, #16]
 800632a:	2304      	movs	r3, #4
 800632c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8006330:	230a      	movs	r3, #10
 8006332:	490d      	ldr	r1, [pc, #52]	; (8006368 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2211      	movs	r2, #17
 8006338:	230c      	movs	r3, #12
 800633a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800633e:	480b      	ldr	r0, [pc, #44]	; (800636c <_Z23getFont_verdana_10_4bppv+0x70>)
 8006340:	940a      	str	r4, [sp, #40]	; 0x28
 8006342:	9401      	str	r4, [sp, #4]
 8006344:	f7fe f91c 	bl	8004580 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006348:	4809      	ldr	r0, [pc, #36]	; (8006370 <_Z23getFont_verdana_10_4bppv+0x74>)
 800634a:	f020 fba1 	bl	8026a90 <atexit>
 800634e:	4628      	mov	r0, r5
 8006350:	f020 fb5f 	bl	8026a12 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8006354:	4805      	ldr	r0, [pc, #20]	; (800636c <_Z23getFont_verdana_10_4bppv+0x70>)
 8006356:	b00f      	add	sp, #60	; 0x3c
 8006358:	bd30      	pop	{r4, r5, pc}
 800635a:	bf00      	nop
 800635c:	2000366c 	.word	0x2000366c
 8006360:	0802cff4 	.word	0x0802cff4
 8006364:	0802d1b4 	.word	0x0802d1b4
 8006368:	0802c300 	.word	0x0802c300
 800636c:	20003670 	.word	0x20003670
 8006370:	080062f9 	.word	0x080062f9

08006374 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8006374:	4770      	bx	lr
	...

08006378 <_Z23getFont_verdana_20_4bppv>:
{
 8006378:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800637a:	4d17      	ldr	r5, [pc, #92]	; (80063d8 <_Z23getFont_verdana_20_4bppv+0x60>)
 800637c:	682c      	ldr	r4, [r5, #0]
 800637e:	f3bf 8f5b 	dmb	ish
 8006382:	f014 0401 	ands.w	r4, r4, #1
{
 8006386:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8006388:	d122      	bne.n	80063d0 <_Z23getFont_verdana_20_4bppv+0x58>
 800638a:	4628      	mov	r0, r5
 800638c:	f020 fb35 	bl	80269fa <__cxa_guard_acquire>
 8006390:	b1f0      	cbz	r0, 80063d0 <_Z23getFont_verdana_20_4bppv+0x58>
 8006392:	233f      	movs	r3, #63	; 0x3f
 8006394:	9309      	str	r3, [sp, #36]	; 0x24
 8006396:	4b11      	ldr	r3, [pc, #68]	; (80063dc <_Z23getFont_verdana_20_4bppv+0x64>)
 8006398:	9308      	str	r3, [sp, #32]
 800639a:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <_Z23getFont_verdana_20_4bppv+0x68>)
 800639c:	9307      	str	r3, [sp, #28]
 800639e:	2301      	movs	r3, #1
 80063a0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80063a4:	9304      	str	r3, [sp, #16]
 80063a6:	2304      	movs	r3, #4
 80063a8:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80063ac:	2314      	movs	r3, #20
 80063ae:	490d      	ldr	r1, [pc, #52]	; (80063e4 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	225f      	movs	r2, #95	; 0x5f
 80063b4:	2318      	movs	r3, #24
 80063b6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80063ba:	480b      	ldr	r0, [pc, #44]	; (80063e8 <_Z23getFont_verdana_20_4bppv+0x70>)
 80063bc:	940a      	str	r4, [sp, #40]	; 0x28
 80063be:	9401      	str	r4, [sp, #4]
 80063c0:	f7fe f8de 	bl	8004580 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80063c4:	4809      	ldr	r0, [pc, #36]	; (80063ec <_Z23getFont_verdana_20_4bppv+0x74>)
 80063c6:	f020 fb63 	bl	8026a90 <atexit>
 80063ca:	4628      	mov	r0, r5
 80063cc:	f020 fb21 	bl	8026a12 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80063d0:	4805      	ldr	r0, [pc, #20]	; (80063e8 <_Z23getFont_verdana_20_4bppv+0x70>)
 80063d2:	b00f      	add	sp, #60	; 0x3c
 80063d4:	bd30      	pop	{r4, r5, pc}
 80063d6:	bf00      	nop
 80063d8:	2000369c 	.word	0x2000369c
 80063dc:	0802cff8 	.word	0x0802cff8
 80063e0:	0802d1b8 	.word	0x0802d1b8
 80063e4:	0802c3f0 	.word	0x0802c3f0
 80063e8:	200036a0 	.word	0x200036a0
 80063ec:	08006375 	.word	0x08006375

080063f0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_7_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_7_4bpp();

touchgfx::GeneratedFont& getFont_verdana_7_4bpp()
{
    static touchgfx::GeneratedFont verdana_7_4bpp(glyphs_verdana_7_4bpp, 56, 9, 7, 0, 0, 4, 1, 0, 1, unicodes_verdana_7_4bpp, kerning_verdana_7_4bpp, 63, 0, 0, 0);
 80063f0:	4770      	bx	lr
	...

080063f4 <_Z22getFont_verdana_7_4bppv>:
{
 80063f4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_7_4bpp(glyphs_verdana_7_4bpp, 56, 9, 7, 0, 0, 4, 1, 0, 1, unicodes_verdana_7_4bpp, kerning_verdana_7_4bpp, 63, 0, 0, 0);
 80063f6:	4d17      	ldr	r5, [pc, #92]	; (8006454 <_Z22getFont_verdana_7_4bppv+0x60>)
 80063f8:	682c      	ldr	r4, [r5, #0]
 80063fa:	f3bf 8f5b 	dmb	ish
 80063fe:	f014 0401 	ands.w	r4, r4, #1
{
 8006402:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_7_4bpp(glyphs_verdana_7_4bpp, 56, 9, 7, 0, 0, 4, 1, 0, 1, unicodes_verdana_7_4bpp, kerning_verdana_7_4bpp, 63, 0, 0, 0);
 8006404:	d122      	bne.n	800644c <_Z22getFont_verdana_7_4bppv+0x58>
 8006406:	4628      	mov	r0, r5
 8006408:	f020 faf7 	bl	80269fa <__cxa_guard_acquire>
 800640c:	b1f0      	cbz	r0, 800644c <_Z22getFont_verdana_7_4bppv+0x58>
 800640e:	233f      	movs	r3, #63	; 0x3f
 8006410:	9309      	str	r3, [sp, #36]	; 0x24
 8006412:	4b11      	ldr	r3, [pc, #68]	; (8006458 <_Z22getFont_verdana_7_4bppv+0x64>)
 8006414:	9308      	str	r3, [sp, #32]
 8006416:	4b11      	ldr	r3, [pc, #68]	; (800645c <_Z22getFont_verdana_7_4bppv+0x68>)
 8006418:	9307      	str	r3, [sp, #28]
 800641a:	2301      	movs	r3, #1
 800641c:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8006420:	9304      	str	r3, [sp, #16]
 8006422:	2304      	movs	r3, #4
 8006424:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8006428:	2307      	movs	r3, #7
 800642a:	490d      	ldr	r1, [pc, #52]	; (8006460 <_Z22getFont_verdana_7_4bppv+0x6c>)
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	2238      	movs	r2, #56	; 0x38
 8006430:	2309      	movs	r3, #9
 8006432:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8006436:	480b      	ldr	r0, [pc, #44]	; (8006464 <_Z22getFont_verdana_7_4bppv+0x70>)
 8006438:	940a      	str	r4, [sp, #40]	; 0x28
 800643a:	9401      	str	r4, [sp, #4]
 800643c:	f7fe f8a0 	bl	8004580 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006440:	4809      	ldr	r0, [pc, #36]	; (8006468 <_Z22getFont_verdana_7_4bppv+0x74>)
 8006442:	f020 fb25 	bl	8026a90 <atexit>
 8006446:	4628      	mov	r0, r5
 8006448:	f020 fae3 	bl	8026a12 <__cxa_guard_release>
    return verdana_7_4bpp;
}
 800644c:	4805      	ldr	r0, [pc, #20]	; (8006464 <_Z22getFont_verdana_7_4bppv+0x70>)
 800644e:	b00f      	add	sp, #60	; 0x3c
 8006450:	bd30      	pop	{r4, r5, pc}
 8006452:	bf00      	nop
 8006454:	200036cc 	.word	0x200036cc
 8006458:	0802d19c 	.word	0x0802d19c
 800645c:	0802d1bc 	.word	0x0802d1bc
 8006460:	0802c924 	.word	0x0802c924
 8006464:	200036d0 	.word	0x200036d0
 8006468:	080063f1 	.word	0x080063f1

0800646c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_13_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_13_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_13_4bpp()
{
    static touchgfx::GeneratedFont verdanab_13_4bpp(glyphs_verdanab_13_4bpp, 14, 15, 13, 0, 0, 4, 1, 0, 1, unicodes_verdanab_13_4bpp, kerning_verdanab_13_4bpp, 63, 0, 0, 0);
 800646c:	4770      	bx	lr
	...

08006470 <_Z24getFont_verdanab_13_4bppv>:
{
 8006470:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdanab_13_4bpp(glyphs_verdanab_13_4bpp, 14, 15, 13, 0, 0, 4, 1, 0, 1, unicodes_verdanab_13_4bpp, kerning_verdanab_13_4bpp, 63, 0, 0, 0);
 8006472:	4d17      	ldr	r5, [pc, #92]	; (80064d0 <_Z24getFont_verdanab_13_4bppv+0x60>)
 8006474:	682c      	ldr	r4, [r5, #0]
 8006476:	f3bf 8f5b 	dmb	ish
 800647a:	f014 0401 	ands.w	r4, r4, #1
{
 800647e:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdanab_13_4bpp(glyphs_verdanab_13_4bpp, 14, 15, 13, 0, 0, 4, 1, 0, 1, unicodes_verdanab_13_4bpp, kerning_verdanab_13_4bpp, 63, 0, 0, 0);
 8006480:	d122      	bne.n	80064c8 <_Z24getFont_verdanab_13_4bppv+0x58>
 8006482:	4628      	mov	r0, r5
 8006484:	f020 fab9 	bl	80269fa <__cxa_guard_acquire>
 8006488:	b1f0      	cbz	r0, 80064c8 <_Z24getFont_verdanab_13_4bppv+0x58>
 800648a:	233f      	movs	r3, #63	; 0x3f
 800648c:	9309      	str	r3, [sp, #36]	; 0x24
 800648e:	4b11      	ldr	r3, [pc, #68]	; (80064d4 <_Z24getFont_verdanab_13_4bppv+0x64>)
 8006490:	9308      	str	r3, [sp, #32]
 8006492:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <_Z24getFont_verdanab_13_4bppv+0x68>)
 8006494:	9307      	str	r3, [sp, #28]
 8006496:	2301      	movs	r3, #1
 8006498:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800649c:	9304      	str	r3, [sp, #16]
 800649e:	2304      	movs	r3, #4
 80064a0:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80064a4:	230d      	movs	r3, #13
 80064a6:	490d      	ldr	r1, [pc, #52]	; (80064dc <_Z24getFont_verdanab_13_4bppv+0x6c>)
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	220e      	movs	r2, #14
 80064ac:	230f      	movs	r3, #15
 80064ae:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80064b2:	480b      	ldr	r0, [pc, #44]	; (80064e0 <_Z24getFont_verdanab_13_4bppv+0x70>)
 80064b4:	940a      	str	r4, [sp, #40]	; 0x28
 80064b6:	9401      	str	r4, [sp, #4]
 80064b8:	f7fe f862 	bl	8004580 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80064bc:	4809      	ldr	r0, [pc, #36]	; (80064e4 <_Z24getFont_verdanab_13_4bppv+0x74>)
 80064be:	f020 fae7 	bl	8026a90 <atexit>
 80064c2:	4628      	mov	r0, r5
 80064c4:	f020 faa5 	bl	8026a12 <__cxa_guard_release>
    return verdanab_13_4bpp;
}
 80064c8:	4805      	ldr	r0, [pc, #20]	; (80064e0 <_Z24getFont_verdanab_13_4bppv+0x70>)
 80064ca:	b00f      	add	sp, #60	; 0x3c
 80064cc:	bd30      	pop	{r4, r5, pc}
 80064ce:	bf00      	nop
 80064d0:	200036fc 	.word	0x200036fc
 80064d4:	0802d1a0 	.word	0x0802d1a0
 80064d8:	0802d1c0 	.word	0x0802d1c0
 80064dc:	0802cc34 	.word	0x0802cc34
 80064e0:	20003700 	.word	0x20003700
 80064e4:	0800646d 	.word	0x0800646d

080064e8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_20_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_20_4bpp()
{
    static touchgfx::GeneratedFont verdanab_20_4bpp(glyphs_verdanab_20_4bpp, 11, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdanab_20_4bpp, kerning_verdanab_20_4bpp, 63, 0, 0, 0);
 80064e8:	4770      	bx	lr
	...

080064ec <_Z24getFont_verdanab_20_4bppv>:
{
 80064ec:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdanab_20_4bpp(glyphs_verdanab_20_4bpp, 11, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdanab_20_4bpp, kerning_verdanab_20_4bpp, 63, 0, 0, 0);
 80064ee:	4d17      	ldr	r5, [pc, #92]	; (800654c <_Z24getFont_verdanab_20_4bppv+0x60>)
 80064f0:	682c      	ldr	r4, [r5, #0]
 80064f2:	f3bf 8f5b 	dmb	ish
 80064f6:	f014 0401 	ands.w	r4, r4, #1
{
 80064fa:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdanab_20_4bpp(glyphs_verdanab_20_4bpp, 11, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdanab_20_4bpp, kerning_verdanab_20_4bpp, 63, 0, 0, 0);
 80064fc:	d122      	bne.n	8006544 <_Z24getFont_verdanab_20_4bppv+0x58>
 80064fe:	4628      	mov	r0, r5
 8006500:	f020 fa7b 	bl	80269fa <__cxa_guard_acquire>
 8006504:	b1f0      	cbz	r0, 8006544 <_Z24getFont_verdanab_20_4bppv+0x58>
 8006506:	233f      	movs	r3, #63	; 0x3f
 8006508:	9309      	str	r3, [sp, #36]	; 0x24
 800650a:	4b11      	ldr	r3, [pc, #68]	; (8006550 <_Z24getFont_verdanab_20_4bppv+0x64>)
 800650c:	9308      	str	r3, [sp, #32]
 800650e:	4b11      	ldr	r3, [pc, #68]	; (8006554 <_Z24getFont_verdanab_20_4bppv+0x68>)
 8006510:	9307      	str	r3, [sp, #28]
 8006512:	2301      	movs	r3, #1
 8006514:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8006518:	9304      	str	r3, [sp, #16]
 800651a:	2304      	movs	r3, #4
 800651c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8006520:	2314      	movs	r3, #20
 8006522:	490d      	ldr	r1, [pc, #52]	; (8006558 <_Z24getFont_verdanab_20_4bppv+0x6c>)
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	220b      	movs	r2, #11
 8006528:	2318      	movs	r3, #24
 800652a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800652e:	480b      	ldr	r0, [pc, #44]	; (800655c <_Z24getFont_verdanab_20_4bppv+0x70>)
 8006530:	940a      	str	r4, [sp, #40]	; 0x28
 8006532:	9401      	str	r4, [sp, #4]
 8006534:	f7fe f824 	bl	8004580 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006538:	4809      	ldr	r0, [pc, #36]	; (8006560 <_Z24getFont_verdanab_20_4bppv+0x74>)
 800653a:	f020 faa9 	bl	8026a90 <atexit>
 800653e:	4628      	mov	r0, r5
 8006540:	f020 fa67 	bl	8026a12 <__cxa_guard_release>
    return verdanab_20_4bpp;
}
 8006544:	4805      	ldr	r0, [pc, #20]	; (800655c <_Z24getFont_verdanab_20_4bppv+0x70>)
 8006546:	b00f      	add	sp, #60	; 0x3c
 8006548:	bd30      	pop	{r4, r5, pc}
 800654a:	bf00      	nop
 800654c:	2000372c 	.word	0x2000372c
 8006550:	0802d1a4 	.word	0x0802d1a4
 8006554:	0802d1c4 	.word	0x0802d1c4
 8006558:	0802ccf8 	.word	0x0802ccf8
 800655c:	20003730 	.word	0x20003730
 8006560:	080064e9 	.word	0x080064e9

08006564 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_7_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_7_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_7_4bpp()
{
    static touchgfx::GeneratedFont verdanab_7_4bpp(glyphs_verdanab_7_4bpp, 19, 8, 7, 0, 0, 4, 1, 0, 1, unicodes_verdanab_7_4bpp, kerning_verdanab_7_4bpp, 63, 0, 0, 0);
 8006564:	4770      	bx	lr
	...

08006568 <_Z23getFont_verdanab_7_4bppv>:
{
 8006568:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdanab_7_4bpp(glyphs_verdanab_7_4bpp, 19, 8, 7, 0, 0, 4, 1, 0, 1, unicodes_verdanab_7_4bpp, kerning_verdanab_7_4bpp, 63, 0, 0, 0);
 800656a:	4d17      	ldr	r5, [pc, #92]	; (80065c8 <_Z23getFont_verdanab_7_4bppv+0x60>)
 800656c:	682c      	ldr	r4, [r5, #0]
 800656e:	f3bf 8f5b 	dmb	ish
 8006572:	f014 0401 	ands.w	r4, r4, #1
{
 8006576:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdanab_7_4bpp(glyphs_verdanab_7_4bpp, 19, 8, 7, 0, 0, 4, 1, 0, 1, unicodes_verdanab_7_4bpp, kerning_verdanab_7_4bpp, 63, 0, 0, 0);
 8006578:	d122      	bne.n	80065c0 <_Z23getFont_verdanab_7_4bppv+0x58>
 800657a:	4628      	mov	r0, r5
 800657c:	f020 fa3d 	bl	80269fa <__cxa_guard_acquire>
 8006580:	b1f0      	cbz	r0, 80065c0 <_Z23getFont_verdanab_7_4bppv+0x58>
 8006582:	233f      	movs	r3, #63	; 0x3f
 8006584:	9309      	str	r3, [sp, #36]	; 0x24
 8006586:	4b11      	ldr	r3, [pc, #68]	; (80065cc <_Z23getFont_verdanab_7_4bppv+0x64>)
 8006588:	9308      	str	r3, [sp, #32]
 800658a:	4b11      	ldr	r3, [pc, #68]	; (80065d0 <_Z23getFont_verdanab_7_4bppv+0x68>)
 800658c:	9307      	str	r3, [sp, #28]
 800658e:	2301      	movs	r3, #1
 8006590:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8006594:	9304      	str	r3, [sp, #16]
 8006596:	2304      	movs	r3, #4
 8006598:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800659c:	2307      	movs	r3, #7
 800659e:	490d      	ldr	r1, [pc, #52]	; (80065d4 <_Z23getFont_verdanab_7_4bppv+0x6c>)
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	2213      	movs	r2, #19
 80065a4:	2308      	movs	r3, #8
 80065a6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80065aa:	480b      	ldr	r0, [pc, #44]	; (80065d8 <_Z23getFont_verdanab_7_4bppv+0x70>)
 80065ac:	940a      	str	r4, [sp, #40]	; 0x28
 80065ae:	9401      	str	r4, [sp, #4]
 80065b0:	f7fd ffe6 	bl	8004580 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80065b4:	4809      	ldr	r0, [pc, #36]	; (80065dc <_Z23getFont_verdanab_7_4bppv+0x74>)
 80065b6:	f020 fa6b 	bl	8026a90 <atexit>
 80065ba:	4628      	mov	r0, r5
 80065bc:	f020 fa29 	bl	8026a12 <__cxa_guard_release>
    return verdanab_7_4bpp;
}
 80065c0:	4805      	ldr	r0, [pc, #20]	; (80065d8 <_Z23getFont_verdanab_7_4bppv+0x70>)
 80065c2:	b00f      	add	sp, #60	; 0x3c
 80065c4:	bd30      	pop	{r4, r5, pc}
 80065c6:	bf00      	nop
 80065c8:	2000375c 	.word	0x2000375c
 80065cc:	0802d1a8 	.word	0x0802d1a8
 80065d0:	0802d1c8 	.word	0x0802d1c8
 80065d4:	0802cd94 	.word	0x0802cd94
 80065d8:	20003760 	.word	0x20003760
 80065dc:	08006565 	.word	0x08006565

080065e0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_9_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_9_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_9_4bpp()
{
    static touchgfx::GeneratedFont verdanab_9_4bpp(glyphs_verdanab_9_4bpp, 24, 11, 9, 0, 0, 4, 1, 0, 1, unicodes_verdanab_9_4bpp, kerning_verdanab_9_4bpp, 63, 0, 0, 0);
 80065e0:	4770      	bx	lr
	...

080065e4 <_Z23getFont_verdanab_9_4bppv>:
{
 80065e4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdanab_9_4bpp(glyphs_verdanab_9_4bpp, 24, 11, 9, 0, 0, 4, 1, 0, 1, unicodes_verdanab_9_4bpp, kerning_verdanab_9_4bpp, 63, 0, 0, 0);
 80065e6:	4d17      	ldr	r5, [pc, #92]	; (8006644 <_Z23getFont_verdanab_9_4bppv+0x60>)
 80065e8:	682c      	ldr	r4, [r5, #0]
 80065ea:	f3bf 8f5b 	dmb	ish
 80065ee:	f014 0401 	ands.w	r4, r4, #1
{
 80065f2:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdanab_9_4bpp(glyphs_verdanab_9_4bpp, 24, 11, 9, 0, 0, 4, 1, 0, 1, unicodes_verdanab_9_4bpp, kerning_verdanab_9_4bpp, 63, 0, 0, 0);
 80065f4:	d122      	bne.n	800663c <_Z23getFont_verdanab_9_4bppv+0x58>
 80065f6:	4628      	mov	r0, r5
 80065f8:	f020 f9ff 	bl	80269fa <__cxa_guard_acquire>
 80065fc:	b1f0      	cbz	r0, 800663c <_Z23getFont_verdanab_9_4bppv+0x58>
 80065fe:	233f      	movs	r3, #63	; 0x3f
 8006600:	9309      	str	r3, [sp, #36]	; 0x24
 8006602:	4b11      	ldr	r3, [pc, #68]	; (8006648 <_Z23getFont_verdanab_9_4bppv+0x64>)
 8006604:	9308      	str	r3, [sp, #32]
 8006606:	4b11      	ldr	r3, [pc, #68]	; (800664c <_Z23getFont_verdanab_9_4bppv+0x68>)
 8006608:	9307      	str	r3, [sp, #28]
 800660a:	2301      	movs	r3, #1
 800660c:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8006610:	9304      	str	r3, [sp, #16]
 8006612:	2304      	movs	r3, #4
 8006614:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8006618:	2309      	movs	r3, #9
 800661a:	490d      	ldr	r1, [pc, #52]	; (8006650 <_Z23getFont_verdanab_9_4bppv+0x6c>)
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	2218      	movs	r2, #24
 8006620:	230b      	movs	r3, #11
 8006622:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8006626:	480b      	ldr	r0, [pc, #44]	; (8006654 <_Z23getFont_verdanab_9_4bppv+0x70>)
 8006628:	940a      	str	r4, [sp, #40]	; 0x28
 800662a:	9401      	str	r4, [sp, #4]
 800662c:	f7fd ffa8 	bl	8004580 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006630:	4809      	ldr	r0, [pc, #36]	; (8006658 <_Z23getFont_verdanab_9_4bppv+0x74>)
 8006632:	f020 fa2d 	bl	8026a90 <atexit>
 8006636:	4628      	mov	r0, r5
 8006638:	f020 f9eb 	bl	8026a12 <__cxa_guard_release>
    return verdanab_9_4bpp;
}
 800663c:	4805      	ldr	r0, [pc, #20]	; (8006654 <_Z23getFont_verdanab_9_4bppv+0x70>)
 800663e:	b00f      	add	sp, #60	; 0x3c
 8006640:	bd30      	pop	{r4, r5, pc}
 8006642:	bf00      	nop
 8006644:	2000378c 	.word	0x2000378c
 8006648:	0802d1ac 	.word	0x0802d1ac
 800664c:	0802d1cc 	.word	0x0802d1cc
 8006650:	0802cea0 	.word	0x0802cea0
 8006654:	20003790 	.word	0x20003790
 8006658:	080065e1 	.word	0x080065e1

0800665c <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 800665c:	2000      	movs	r0, #0
 800665e:	4770      	bx	lr

08006660 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8006660:	2000      	movs	r0, #0
 8006662:	4770      	bx	lr

08006664 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006664:	b40e      	push	{r1, r2, r3}
 8006666:	b503      	push	{r0, r1, lr}
 8006668:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800666a:	2100      	movs	r1, #0
{
 800666c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8006670:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8006672:	f010 f85d 	bl	8016730 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8006676:	b002      	add	sp, #8
 8006678:	f85d eb04 	ldr.w	lr, [sp], #4
 800667c:	b003      	add	sp, #12
 800667e:	4770      	bx	lr

08006680 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006680:	b40c      	push	{r2, r3}
 8006682:	b507      	push	{r0, r1, r2, lr}
 8006684:	ab04      	add	r3, sp, #16
 8006686:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800668a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800668c:	f010 f850 	bl	8016730 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8006690:	b003      	add	sp, #12
 8006692:	f85d eb04 	ldr.w	lr, [sp], #4
 8006696:	b002      	add	sp, #8
 8006698:	4770      	bx	lr
	...

0800669c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 800669c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800669e:	b510      	push	{r4, lr}
 80066a0:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80066a2:	b373      	cbz	r3, 8006702 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80066a4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80066a6:	b92b      	cbnz	r3, 80066b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80066a8:	4b18      	ldr	r3, [pc, #96]	; (800670c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80066aa:	4a19      	ldr	r2, [pc, #100]	; (8006710 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
 80066ac:	21c5      	movs	r1, #197	; 0xc5
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80066ae:	4819      	ldr	r0, [pc, #100]	; (8006714 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80066b0:	f020 f9d0 	bl	8026a54 <__assert_func>
            return buffer[pos];
 80066b4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80066b6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80066ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80066bc:	b30b      	cbz	r3, 8006702 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80066be:	f011 fbd4 	bl	8017e6a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80066c2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d803      	bhi.n	80066d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80066c8:	4b13      	ldr	r3, [pc, #76]	; (8006718 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80066ca:	4a14      	ldr	r2, [pc, #80]	; (800671c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80066cc:	21cb      	movs	r1, #203	; 0xcb
 80066ce:	e7ee      	b.n	80066ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80066d0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80066d2:	1c53      	adds	r3, r2, #1
 80066d4:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80066d6:	2b09      	cmp	r3, #9
 80066d8:	4619      	mov	r1, r3
 80066da:	bf88      	it	hi
 80066dc:	f1a3 010a 	subhi.w	r1, r3, #10
 80066e0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80066e4:	f640 103f 	movw	r0, #2367	; 0x93f
 80066e8:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 80066ea:	4281      	cmp	r1, r0
 80066ec:	d109      	bne.n	8006702 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80066ee:	2b0a      	cmp	r3, #10
 80066f0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80066f4:	bf28      	it	cs
 80066f6:	2300      	movcs	r3, #0

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80066f8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 80066fc:	8c50      	ldrh	r0, [r2, #34]	; 0x22
            buffer[index < size ? index : 0] = newChar;
 80066fe:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8006700:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8006702:	4620      	mov	r0, r4
}
 8006704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8006708:	f011 bab2 	b.w	8017c70 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800670c:	08028df8 	.word	0x08028df8
 8006710:	08028e01 	.word	0x08028e01
 8006714:	08028eac 	.word	0x08028eac
 8006718:	08028ef6 	.word	0x08028ef6
 800671c:	08028f04 	.word	0x08028f04

08006720 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8006720:	f011 ba6d 	b.w	8017bfe <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08006724 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8006724:	b510      	push	{r4, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	ac02      	add	r4, sp, #8
 800672a:	e884 0006 	stmia.w	r4, {r1, r2}
 800672e:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8006730:	ab0a      	add	r3, sp, #40	; 0x28
 8006732:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	4621      	mov	r1, r4
 800673c:	9b08      	ldr	r3, [sp, #32]
 800673e:	f00e fc2d 	bl	8014f9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8006742:	b006      	add	sp, #24
 8006744:	bd10      	pop	{r4, pc}
	...

08006748 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8006748:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800674a:	bb18      	cbnz	r0, 8006794 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800674c:	4b12      	ldr	r3, [pc, #72]	; (8006798 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800674e:	4813      	ldr	r0, [pc, #76]	; (800679c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8006750:	681c      	ldr	r4, [r3, #0]
 8006752:	4913      	ldr	r1, [pc, #76]	; (80067a0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8006754:	b1b4      	cbz	r4, 8006784 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8006756:	6822      	ldr	r2, [r4, #0]
 8006758:	4422      	add	r2, r4
 800675a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800675c:	6862      	ldr	r2, [r4, #4]
 800675e:	4422      	add	r2, r4
 8006760:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8006762:	68a2      	ldr	r2, [r4, #8]
 8006764:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8006766:	4b0f      	ldr	r3, [pc, #60]	; (80067a4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8006768:	2200      	movs	r2, #0
 800676a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800676c:	f000 f838 	bl	80067e0 <_ZN17TypedTextDatabase8getFontsEv>
 8006770:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8006772:	f000 f833 	bl	80067dc <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8006776:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8006778:	601c      	str	r4, [r3, #0]
        fonts = f;
 800677a:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 800677c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800677e:	4b0c      	ldr	r3, [pc, #48]	; (80067b0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8006780:	8018      	strh	r0, [r3, #0]
    }
}
 8006782:	e007      	b.n	8006794 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8006784:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8006786:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8006788:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800678a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800678c:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800678e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8006790:	2c00      	cmp	r4, #0
 8006792:	d1e8      	bne.n	8006766 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8006794:	bd38      	pop	{r3, r4, r5, pc}
 8006796:	bf00      	nop
 8006798:	200037bc 	.word	0x200037bc
 800679c:	200037c0 	.word	0x200037c0
 80067a0:	200037c4 	.word	0x200037c4
 80067a4:	200037c8 	.word	0x200037c8
 80067a8:	20014668 	.word	0x20014668
 80067ac:	20014670 	.word	0x20014670
 80067b0:	2001466c 	.word	0x2001466c
 80067b4:	0802d260 	.word	0x0802d260
 80067b8:	0802d1d0 	.word	0x0802d1d0
 80067bc:	0802d638 	.word	0x0802d638

080067c0 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80067c0:	4b04      	ldr	r3, [pc, #16]	; (80067d4 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80067c8:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 80067ca:	681b      	ldr	r3, [r3, #0]
}
 80067cc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	200037c4 	.word	0x200037c4
 80067d8:	200037c0 	.word	0x200037c0

080067dc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80067dc:	2024      	movs	r0, #36	; 0x24
 80067de:	4770      	bx	lr

080067e0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80067e0:	4800      	ldr	r0, [pc, #0]	; (80067e4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80067e2:	4770      	bx	lr
 80067e4:	200037cc 	.word	0x200037cc

080067e8 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 7:
        touchgfx_fonts[7] = &(getFont_verdana_7_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80067e8:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 80067ea:	f7ff fdc5 	bl	8006378 <_Z23getFont_verdana_20_4bppv>
};
 80067ee:	4c0c      	ldr	r4, [pc, #48]	; (8006820 <_GLOBAL__sub_I_touchgfx_fonts+0x38>)
 80067f0:	6020      	str	r0, [r4, #0]
    &(getFont_VIVALDII_TTF_30_4bpp()),
 80067f2:	f7ff fd47 	bl	8006284 <_Z28getFont_VIVALDII_TTF_30_4bppv>
};
 80067f6:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 80067f8:	f7ff fd80 	bl	80062fc <_Z23getFont_verdana_10_4bppv>
};
 80067fc:	60a0      	str	r0, [r4, #8]
    &(getFont_verdanab_20_4bpp()),
 80067fe:	f7ff fe75 	bl	80064ec <_Z24getFont_verdanab_20_4bppv>
};
 8006802:	60e0      	str	r0, [r4, #12]
    &(getFont_verdanab_13_4bpp()),
 8006804:	f7ff fe34 	bl	8006470 <_Z24getFont_verdanab_13_4bppv>
};
 8006808:	6120      	str	r0, [r4, #16]
    &(getFont_verdanab_9_4bpp()),
 800680a:	f7ff feeb 	bl	80065e4 <_Z23getFont_verdanab_9_4bppv>
};
 800680e:	6160      	str	r0, [r4, #20]
    &(getFont_verdanab_7_4bpp()),
 8006810:	f7ff feaa 	bl	8006568 <_Z23getFont_verdanab_7_4bppv>
};
 8006814:	61a0      	str	r0, [r4, #24]
    &(getFont_verdana_7_4bpp())
 8006816:	f7ff fded 	bl	80063f4 <_Z22getFont_verdana_7_4bppv>
};
 800681a:	61e0      	str	r0, [r4, #28]
} // namespace TypedTextDatabase
 800681c:	bd10      	pop	{r4, pc}
 800681e:	bf00      	nop
 8006820:	200037cc 	.word	0x200037cc

08006824 <_ZN21FlappyScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~FlappyScreenPresenter() {}
 8006824:	4770      	bx	lr

08006826 <_ZThn4_N21FlappyScreenPresenterD1Ev>:
 8006826:	3804      	subs	r0, #4
 8006828:	4770      	bx	lr

0800682a <_ZN21FlappyScreenPresenter10deactivateEv>:
}

void FlappyScreenPresenter::activate()
{

}
 800682a:	4770      	bx	lr

0800682c <_ZN21FlappyScreenPresenterD0Ev>:
 800682c:	b510      	push	{r4, lr}
 800682e:	2110      	movs	r1, #16
 8006830:	4604      	mov	r4, r0
 8006832:	f020 f8e0 	bl	80269f6 <_ZdlPvj>
 8006836:	4620      	mov	r0, r4
 8006838:	bd10      	pop	{r4, pc}

0800683a <_ZThn4_N21FlappyScreenPresenterD0Ev>:
 800683a:	f1a0 0004 	sub.w	r0, r0, #4
 800683e:	e7f5      	b.n	800682c <_ZN21FlappyScreenPresenterD0Ev>

08006840 <_ZN21FlappyScreenPresenterC1ER16FlappyScreenView>:
FlappyScreenPresenter::FlappyScreenPresenter(FlappyScreenView& v)
 8006840:	b510      	push	{r4, lr}
    ModelListener() : model(0) {}
 8006842:	2200      	movs	r2, #0
 8006844:	6082      	str	r2, [r0, #8]
    : view(v)
 8006846:	4a04      	ldr	r2, [pc, #16]	; (8006858 <_ZN21FlappyScreenPresenterC1ER16FlappyScreenView+0x18>)
 8006848:	60c1      	str	r1, [r0, #12]
 800684a:	f102 0408 	add.w	r4, r2, #8
 800684e:	3220      	adds	r2, #32
 8006850:	6004      	str	r4, [r0, #0]
 8006852:	6042      	str	r2, [r0, #4]
}
 8006854:	bd10      	pop	{r4, pc}
 8006856:	bf00      	nop
 8006858:	08028fd8 	.word	0x08028fd8

0800685c <_ZN16FlappyScreenView14tearDownScreenEv>:
}

void FlappyScreenView::tearDownScreen()
{
    FlappyScreenViewBase::tearDownScreen();
}
 800685c:	4770      	bx	lr
	...

08006860 <_ZN16FlappyScreenViewD1Ev>:

class FlappyScreenView : public FlappyScreenViewBase
{
public:
    FlappyScreenView();
    virtual ~FlappyScreenView() {}
 8006860:	b510      	push	{r4, lr}
 8006862:	4b03      	ldr	r3, [pc, #12]	; (8006870 <_ZN16FlappyScreenViewD1Ev+0x10>)
 8006864:	6003      	str	r3, [r0, #0]
 8006866:	4604      	mov	r4, r0
 8006868:	f7fc fc89 	bl	800317e <_ZN20FlappyScreenViewBaseD1Ev>
 800686c:	4620      	mov	r0, r4
 800686e:	bd10      	pop	{r4, pc}
 8006870:	08029008 	.word	0x08029008

08006874 <_ZN16FlappyScreenViewD0Ev>:
 8006874:	b510      	push	{r4, lr}
 8006876:	4604      	mov	r4, r0
 8006878:	f7ff fff2 	bl	8006860 <_ZN16FlappyScreenViewD1Ev>
 800687c:	4620      	mov	r0, r4
 800687e:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8006882:	f020 f8b8 	bl	80269f6 <_ZdlPvj>
 8006886:	4620      	mov	r0, r4
 8006888:	bd10      	pop	{r4, pc}
	...

0800688c <_ZN16FlappyScreenViewC1Ev>:
FlappyScreenView::FlappyScreenView()
 800688c:	b510      	push	{r4, lr}
 800688e:	4604      	mov	r4, r0
 8006890:	f7fd f872 	bl	8003978 <_ZN20FlappyScreenViewBaseC1Ev>
 8006894:	4b01      	ldr	r3, [pc, #4]	; (800689c <_ZN16FlappyScreenViewC1Ev+0x10>)
 8006896:	6023      	str	r3, [r4, #0]
}
 8006898:	4620      	mov	r0, r4
 800689a:	bd10      	pop	{r4, pc}
 800689c:	08029008 	.word	0x08029008

080068a0 <_ZN16FlappyScreenView11setupScreenEv>:
    FlappyScreenViewBase::setupScreen();
 80068a0:	f7fc bc6e 	b.w	8003180 <_ZN20FlappyScreenViewBase11setupScreenEv>

080068a4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80068a4:	4770      	bx	lr

080068a6 <_ZN19FrontendApplicationD0Ev>:
 80068a6:	b510      	push	{r4, lr}
 80068a8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80068ac:	4604      	mov	r4, r0
 80068ae:	f020 f8a2 	bl	80269f6 <_ZdlPvj>
 80068b2:	4620      	mov	r0, r4
 80068b4:	bd10      	pop	{r4, pc}

080068b6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80068b6:	b510      	push	{r4, lr}
 80068b8:	4604      	mov	r4, r0
    {
        model.tick();
 80068ba:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80068be:	f000 f812 	bl	80068e6 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80068c2:	4620      	mov	r0, r4
    }
 80068c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80068c8:	f00f b868 	b.w	801599c <_ZN8touchgfx11Application15handleTickEventEv>

080068cc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80068cc:	b510      	push	{r4, lr}
 80068ce:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80068d0:	f7fd fb10 	bl	8003ef4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80068d4:	4b01      	ldr	r3, [pc, #4]	; (80068dc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 80068d6:	6023      	str	r3, [r4, #0]
{

}
 80068d8:	4620      	mov	r0, r4
 80068da:	bd10      	pop	{r4, pc}
 80068dc:	0802903c 	.word	0x0802903c

080068e0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80068e0:	2200      	movs	r2, #0
 80068e2:	6002      	str	r2, [r0, #0]
{

}
 80068e4:	4770      	bx	lr

080068e6 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80068e6:	4770      	bx	lr

080068e8 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {}
 80068e8:	4770      	bx	lr

080068ea <_ZThn4_N16Screen2PresenterD1Ev>:
 80068ea:	3804      	subs	r0, #4
 80068ec:	4770      	bx	lr

080068ee <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 80068ee:	4770      	bx	lr

080068f0 <_ZN16Screen2PresenterD0Ev>:
 80068f0:	b510      	push	{r4, lr}
 80068f2:	2110      	movs	r1, #16
 80068f4:	4604      	mov	r4, r0
 80068f6:	f020 f87e 	bl	80269f6 <_ZdlPvj>
 80068fa:	4620      	mov	r0, r4
 80068fc:	bd10      	pop	{r4, pc}

080068fe <_ZThn4_N16Screen2PresenterD0Ev>:
 80068fe:	f1a0 0004 	sub.w	r0, r0, #4
 8006902:	e7f5      	b.n	80068f0 <_ZN16Screen2PresenterD0Ev>

08006904 <_ZN16Screen2PresenterC1ER11Screen2View>:
Screen2Presenter::Screen2Presenter(Screen2View& v)
 8006904:	b510      	push	{r4, lr}
 8006906:	2200      	movs	r2, #0
 8006908:	6082      	str	r2, [r0, #8]
    : view(v)
 800690a:	4a04      	ldr	r2, [pc, #16]	; (800691c <_ZN16Screen2PresenterC1ER11Screen2View+0x18>)
 800690c:	60c1      	str	r1, [r0, #12]
 800690e:	f102 0408 	add.w	r4, r2, #8
 8006912:	3220      	adds	r2, #32
 8006914:	6004      	str	r4, [r0, #0]
 8006916:	6042      	str	r2, [r0, #4]
}
 8006918:	bd10      	pop	{r4, pc}
 800691a:	bf00      	nop
 800691c:	08029088 	.word	0x08029088

08006920 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 8006920:	4770      	bx	lr
	...

08006924 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8006924:	b510      	push	{r4, lr}
 8006926:	4b03      	ldr	r3, [pc, #12]	; (8006934 <_ZN11Screen2ViewD1Ev+0x10>)
 8006928:	6003      	str	r3, [r0, #0]
 800692a:	4604      	mov	r4, r0
 800692c:	f7fd fe58 	bl	80045e0 <_ZN15Screen2ViewBaseD1Ev>
 8006930:	4620      	mov	r0, r4
 8006932:	bd10      	pop	{r4, pc}
 8006934:	080290b8 	.word	0x080290b8

08006938 <_ZN11Screen2ViewD0Ev>:
 8006938:	b510      	push	{r4, lr}
 800693a:	4604      	mov	r4, r0
 800693c:	f7ff fff2 	bl	8006924 <_ZN11Screen2ViewD1Ev>
 8006940:	4620      	mov	r0, r4
 8006942:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8006946:	f020 f856 	bl	80269f6 <_ZdlPvj>
 800694a:	4620      	mov	r0, r4
 800694c:	bd10      	pop	{r4, pc}
	...

08006950 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 8006950:	b510      	push	{r4, lr}
 8006952:	4604      	mov	r4, r0
 8006954:	f7fd ff04 	bl	8004760 <_ZN15Screen2ViewBaseC1Ev>
 8006958:	4b01      	ldr	r3, [pc, #4]	; (8006960 <_ZN11Screen2ViewC1Ev+0x10>)
 800695a:	6023      	str	r3, [r4, #0]
}
 800695c:	4620      	mov	r0, r4
 800695e:	bd10      	pop	{r4, pc}
 8006960:	080290b8 	.word	0x080290b8

08006964 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 8006964:	f7fd be3d 	b.w	80045e2 <_ZN15Screen2ViewBase11setupScreenEv>

08006968 <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {}
 8006968:	4770      	bx	lr

0800696a <_ZThn4_N16Screen3PresenterD1Ev>:
 800696a:	3804      	subs	r0, #4
 800696c:	4770      	bx	lr

0800696e <_ZN16Screen3Presenter10deactivateEv>:
}

void Screen3Presenter::activate()
{

}
 800696e:	4770      	bx	lr

08006970 <_ZN16Screen3PresenterD0Ev>:
 8006970:	b510      	push	{r4, lr}
 8006972:	2110      	movs	r1, #16
 8006974:	4604      	mov	r4, r0
 8006976:	f020 f83e 	bl	80269f6 <_ZdlPvj>
 800697a:	4620      	mov	r0, r4
 800697c:	bd10      	pop	{r4, pc}

0800697e <_ZThn4_N16Screen3PresenterD0Ev>:
 800697e:	f1a0 0004 	sub.w	r0, r0, #4
 8006982:	e7f5      	b.n	8006970 <_ZN16Screen3PresenterD0Ev>

08006984 <_ZN16Screen3PresenterC1ER11Screen3View>:
Screen3Presenter::Screen3Presenter(Screen3View& v)
 8006984:	b510      	push	{r4, lr}
 8006986:	2200      	movs	r2, #0
 8006988:	6082      	str	r2, [r0, #8]
    : view(v)
 800698a:	4a04      	ldr	r2, [pc, #16]	; (800699c <_ZN16Screen3PresenterC1ER11Screen3View+0x18>)
 800698c:	60c1      	str	r1, [r0, #12]
 800698e:	f102 0408 	add.w	r4, r2, #8
 8006992:	3220      	adds	r2, #32
 8006994:	6004      	str	r4, [r0, #0]
 8006996:	6042      	str	r2, [r0, #4]
}
 8006998:	bd10      	pop	{r4, pc}
 800699a:	bf00      	nop
 800699c:	080290e4 	.word	0x080290e4

080069a0 <_ZN11Screen3View14tearDownScreenEv>:
}

void Screen3View::tearDownScreen()
{
    Screen3ViewBase::tearDownScreen();
}
 80069a0:	4770      	bx	lr
	...

080069a4 <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 80069a4:	b510      	push	{r4, lr}
 80069a6:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <_ZN11Screen3ViewD1Ev+0x10>)
 80069a8:	6003      	str	r3, [r0, #0]
 80069aa:	4604      	mov	r4, r0
 80069ac:	f7fe f806 	bl	80049bc <_ZN15Screen3ViewBaseD1Ev>
 80069b0:	4620      	mov	r0, r4
 80069b2:	bd10      	pop	{r4, pc}
 80069b4:	08029114 	.word	0x08029114

080069b8 <_ZN11Screen3ViewD0Ev>:
 80069b8:	b510      	push	{r4, lr}
 80069ba:	4604      	mov	r4, r0
 80069bc:	f7ff fff2 	bl	80069a4 <_ZN11Screen3ViewD1Ev>
 80069c0:	4620      	mov	r0, r4
 80069c2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80069c6:	f020 f816 	bl	80269f6 <_ZdlPvj>
 80069ca:	4620      	mov	r0, r4
 80069cc:	bd10      	pop	{r4, pc}
	...

080069d0 <_ZN11Screen3ViewC1Ev>:
Screen3View::Screen3View()
 80069d0:	b510      	push	{r4, lr}
 80069d2:	4604      	mov	r4, r0
 80069d4:	f7fe f84e 	bl	8004a74 <_ZN15Screen3ViewBaseC1Ev>
 80069d8:	4b01      	ldr	r3, [pc, #4]	; (80069e0 <_ZN11Screen3ViewC1Ev+0x10>)
 80069da:	6023      	str	r3, [r4, #0]
}
 80069dc:	4620      	mov	r0, r4
 80069de:	bd10      	pop	{r4, pc}
 80069e0:	08029114 	.word	0x08029114

080069e4 <_ZN11Screen3View11setupScreenEv>:
    Screen3ViewBase::setupScreen();
 80069e4:	f7fd bfeb 	b.w	80049be <_ZN15Screen3ViewBase11setupScreenEv>

080069e8 <_ZN16Screen4PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen4Presenter() {}
 80069e8:	4770      	bx	lr

080069ea <_ZThn4_N16Screen4PresenterD1Ev>:
 80069ea:	3804      	subs	r0, #4
 80069ec:	4770      	bx	lr

080069ee <_ZN16Screen4Presenter10deactivateEv>:
}

void Screen4Presenter::activate()
{

}
 80069ee:	4770      	bx	lr

080069f0 <_ZN16Screen4PresenterD0Ev>:
 80069f0:	b510      	push	{r4, lr}
 80069f2:	2110      	movs	r1, #16
 80069f4:	4604      	mov	r4, r0
 80069f6:	f01f fffe 	bl	80269f6 <_ZdlPvj>
 80069fa:	4620      	mov	r0, r4
 80069fc:	bd10      	pop	{r4, pc}

080069fe <_ZThn4_N16Screen4PresenterD0Ev>:
 80069fe:	f1a0 0004 	sub.w	r0, r0, #4
 8006a02:	e7f5      	b.n	80069f0 <_ZN16Screen4PresenterD0Ev>

08006a04 <_ZN16Screen4PresenterC1ER11Screen4View>:
Screen4Presenter::Screen4Presenter(Screen4View& v)
 8006a04:	b510      	push	{r4, lr}
 8006a06:	2200      	movs	r2, #0
 8006a08:	6082      	str	r2, [r0, #8]
    : view(v)
 8006a0a:	4a04      	ldr	r2, [pc, #16]	; (8006a1c <_ZN16Screen4PresenterC1ER11Screen4View+0x18>)
 8006a0c:	60c1      	str	r1, [r0, #12]
 8006a0e:	f102 0408 	add.w	r4, r2, #8
 8006a12:	3220      	adds	r2, #32
 8006a14:	6004      	str	r4, [r0, #0]
 8006a16:	6042      	str	r2, [r0, #4]
}
 8006a18:	bd10      	pop	{r4, pc}
 8006a1a:	bf00      	nop
 8006a1c:	08029140 	.word	0x08029140

08006a20 <_ZN11Screen4View14tearDownScreenEv>:
}

void Screen4View::tearDownScreen()
{
    Screen4ViewBase::tearDownScreen();
}
 8006a20:	4770      	bx	lr
	...

08006a24 <_ZN11Screen4ViewD1Ev>:

class Screen4View : public Screen4ViewBase
{
public:
    Screen4View();
    virtual ~Screen4View() {}
 8006a24:	b510      	push	{r4, lr}
 8006a26:	4b03      	ldr	r3, [pc, #12]	; (8006a34 <_ZN11Screen4ViewD1Ev+0x10>)
 8006a28:	6003      	str	r3, [r0, #0]
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	f7fe f94a 	bl	8004cc4 <_ZN15Screen4ViewBaseD1Ev>
 8006a30:	4620      	mov	r0, r4
 8006a32:	bd10      	pop	{r4, pc}
 8006a34:	08029170 	.word	0x08029170

08006a38 <_ZN11Screen4ViewD0Ev>:
 8006a38:	b510      	push	{r4, lr}
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	f7ff fff2 	bl	8006a24 <_ZN11Screen4ViewD1Ev>
 8006a40:	4620      	mov	r0, r4
 8006a42:	f242 1170 	movw	r1, #8560	; 0x2170
 8006a46:	f01f ffd6 	bl	80269f6 <_ZdlPvj>
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	bd10      	pop	{r4, pc}
	...

08006a50 <_ZN11Screen4ViewC1Ev>:
Screen4View::Screen4View()
 8006a50:	b510      	push	{r4, lr}
 8006a52:	4604      	mov	r4, r0
 8006a54:	f7fe f960 	bl	8004d18 <_ZN15Screen4ViewBaseC1Ev>
 8006a58:	4b01      	ldr	r3, [pc, #4]	; (8006a60 <_ZN11Screen4ViewC1Ev+0x10>)
 8006a5a:	6023      	str	r3, [r4, #0]
}
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	bd10      	pop	{r4, pc}
 8006a60:	08029170 	.word	0x08029170

08006a64 <_ZN11Screen4View11setupScreenEv>:
    Screen4ViewBase::setupScreen();
 8006a64:	f7fe b8f8 	b.w	8004c58 <_ZN15Screen4ViewBase11setupScreenEv>

08006a68 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8006a6c:	f7fa fe40 	bl	80016f0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8006a70:	20ca      	movs	r0, #202	; 0xca
 8006a72:	f000 f95d 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8006a76:	20c3      	movs	r0, #195	; 0xc3
 8006a78:	f000 f967 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8006a7c:	2008      	movs	r0, #8
 8006a7e:	f000 f964 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8006a82:	2050      	movs	r0, #80	; 0x50
 8006a84:	f000 f961 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8006a88:	20cf      	movs	r0, #207	; 0xcf
 8006a8a:	f000 f951 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006a8e:	2000      	movs	r0, #0
 8006a90:	f000 f95b 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8006a94:	20c1      	movs	r0, #193	; 0xc1
 8006a96:	f000 f958 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8006a9a:	2030      	movs	r0, #48	; 0x30
 8006a9c:	f000 f955 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8006aa0:	20ed      	movs	r0, #237	; 0xed
 8006aa2:	f000 f945 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8006aa6:	2064      	movs	r0, #100	; 0x64
 8006aa8:	f000 f94f 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8006aac:	2003      	movs	r0, #3
 8006aae:	f000 f94c 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8006ab2:	2012      	movs	r0, #18
 8006ab4:	f000 f949 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8006ab8:	2081      	movs	r0, #129	; 0x81
 8006aba:	f000 f946 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8006abe:	20e8      	movs	r0, #232	; 0xe8
 8006ac0:	f000 f936 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8006ac4:	2085      	movs	r0, #133	; 0x85
 8006ac6:	f000 f940 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006aca:	2000      	movs	r0, #0
 8006acc:	f000 f93d 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8006ad0:	2078      	movs	r0, #120	; 0x78
 8006ad2:	f000 f93a 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8006ad6:	20cb      	movs	r0, #203	; 0xcb
 8006ad8:	f000 f92a 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8006adc:	2039      	movs	r0, #57	; 0x39
 8006ade:	f000 f934 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8006ae2:	202c      	movs	r0, #44	; 0x2c
 8006ae4:	f000 f931 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006ae8:	2000      	movs	r0, #0
 8006aea:	f000 f92e 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8006aee:	2034      	movs	r0, #52	; 0x34
 8006af0:	f000 f92b 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8006af4:	2002      	movs	r0, #2
 8006af6:	f000 f928 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8006afa:	20f7      	movs	r0, #247	; 0xf7
 8006afc:	f000 f918 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8006b00:	2020      	movs	r0, #32
 8006b02:	f000 f922 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8006b06:	20ea      	movs	r0, #234	; 0xea
 8006b08:	f000 f912 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	f000 f91c 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006b12:	2000      	movs	r0, #0
 8006b14:	f000 f919 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8006b18:	20b1      	movs	r0, #177	; 0xb1
 8006b1a:	f000 f909 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006b1e:	2000      	movs	r0, #0
 8006b20:	f000 f913 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8006b24:	201b      	movs	r0, #27
 8006b26:	f000 f910 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8006b2a:	20b6      	movs	r0, #182	; 0xb6
 8006b2c:	f000 f900 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8006b30:	200a      	movs	r0, #10
 8006b32:	f000 f90a 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8006b36:	20a2      	movs	r0, #162	; 0xa2
 8006b38:	f000 f907 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8006b3c:	20c0      	movs	r0, #192	; 0xc0
 8006b3e:	f000 f8f7 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8006b42:	2010      	movs	r0, #16
 8006b44:	f000 f901 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8006b48:	20c1      	movs	r0, #193	; 0xc1
 8006b4a:	f000 f8f1 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8006b4e:	2010      	movs	r0, #16
 8006b50:	f000 f8fb 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8006b54:	20c5      	movs	r0, #197	; 0xc5
 8006b56:	f000 f8eb 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8006b5a:	2045      	movs	r0, #69	; 0x45
 8006b5c:	f000 f8f5 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8006b60:	2015      	movs	r0, #21
 8006b62:	f000 f8f2 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8006b66:	20c7      	movs	r0, #199	; 0xc7
 8006b68:	f000 f8e2 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8006b6c:	2090      	movs	r0, #144	; 0x90
 8006b6e:	f000 f8ec 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8006b72:	2036      	movs	r0, #54	; 0x36
 8006b74:	f000 f8dc 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8006b78:	20c8      	movs	r0, #200	; 0xc8
 8006b7a:	f000 f8e6 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8006b7e:	20f2      	movs	r0, #242	; 0xf2
 8006b80:	f000 f8d6 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006b84:	2000      	movs	r0, #0
 8006b86:	f000 f8e0 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8006b8a:	20b0      	movs	r0, #176	; 0xb0
 8006b8c:	f000 f8d0 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8006b90:	20c2      	movs	r0, #194	; 0xc2
 8006b92:	f000 f8da 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8006b96:	20b6      	movs	r0, #182	; 0xb6
 8006b98:	f000 f8ca 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8006b9c:	200a      	movs	r0, #10
 8006b9e:	f000 f8d4 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8006ba2:	20a7      	movs	r0, #167	; 0xa7
 8006ba4:	f000 f8d1 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8006ba8:	2027      	movs	r0, #39	; 0x27
 8006baa:	f000 f8ce 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8006bae:	2004      	movs	r0, #4
 8006bb0:	f000 f8cb 	bl	8006d4a <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8006bb4:	202a      	movs	r0, #42	; 0x2a
 8006bb6:	f000 f8bb 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006bba:	2000      	movs	r0, #0
 8006bbc:	f000 f8c5 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	f000 f8c2 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	f000 f8bf 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8006bcc:	20ef      	movs	r0, #239	; 0xef
 8006bce:	f000 f8bc 	bl	8006d4a <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8006bd2:	202b      	movs	r0, #43	; 0x2b
 8006bd4:	f000 f8ac 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006bd8:	2000      	movs	r0, #0
 8006bda:	f000 f8b6 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006bde:	2000      	movs	r0, #0
 8006be0:	f000 f8b3 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8006be4:	2001      	movs	r0, #1
 8006be6:	f000 f8b0 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8006bea:	203f      	movs	r0, #63	; 0x3f
 8006bec:	f000 f8ad 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8006bf0:	20f6      	movs	r0, #246	; 0xf6
 8006bf2:	f000 f89d 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8006bf6:	2001      	movs	r0, #1
 8006bf8:	f000 f8a7 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	f000 f8a4 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8006c02:	2006      	movs	r0, #6
 8006c04:	f000 f8a1 	bl	8006d4a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8006c08:	202c      	movs	r0, #44	; 0x2c
 8006c0a:	f000 f891 	bl	8006d30 <ili9341_WriteReg>
  LCD_Delay(200);
 8006c0e:	20c8      	movs	r0, #200	; 0xc8
 8006c10:	f7fa fdf4 	bl	80017fc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8006c14:	2026      	movs	r0, #38	; 0x26
 8006c16:	f000 f88b 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	f000 f895 	bl	8006d4a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8006c20:	20e0      	movs	r0, #224	; 0xe0
 8006c22:	f000 f885 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8006c26:	200f      	movs	r0, #15
 8006c28:	f000 f88f 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8006c2c:	2029      	movs	r0, #41	; 0x29
 8006c2e:	f000 f88c 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8006c32:	2024      	movs	r0, #36	; 0x24
 8006c34:	f000 f889 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8006c38:	200c      	movs	r0, #12
 8006c3a:	f000 f886 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8006c3e:	200e      	movs	r0, #14
 8006c40:	f000 f883 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8006c44:	2009      	movs	r0, #9
 8006c46:	f000 f880 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8006c4a:	204e      	movs	r0, #78	; 0x4e
 8006c4c:	f000 f87d 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8006c50:	2078      	movs	r0, #120	; 0x78
 8006c52:	f000 f87a 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8006c56:	203c      	movs	r0, #60	; 0x3c
 8006c58:	f000 f877 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8006c5c:	2009      	movs	r0, #9
 8006c5e:	f000 f874 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8006c62:	2013      	movs	r0, #19
 8006c64:	f000 f871 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8006c68:	2005      	movs	r0, #5
 8006c6a:	f000 f86e 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8006c6e:	2017      	movs	r0, #23
 8006c70:	f000 f86b 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8006c74:	2011      	movs	r0, #17
 8006c76:	f000 f868 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	f000 f865 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8006c80:	20e1      	movs	r0, #225	; 0xe1
 8006c82:	f000 f855 	bl	8006d30 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006c86:	2000      	movs	r0, #0
 8006c88:	f000 f85f 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8006c8c:	2016      	movs	r0, #22
 8006c8e:	f000 f85c 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8006c92:	201b      	movs	r0, #27
 8006c94:	f000 f859 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8006c98:	2004      	movs	r0, #4
 8006c9a:	f000 f856 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8006c9e:	2011      	movs	r0, #17
 8006ca0:	f000 f853 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8006ca4:	2007      	movs	r0, #7
 8006ca6:	f000 f850 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8006caa:	2031      	movs	r0, #49	; 0x31
 8006cac:	f000 f84d 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8006cb0:	2033      	movs	r0, #51	; 0x33
 8006cb2:	f000 f84a 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8006cb6:	2042      	movs	r0, #66	; 0x42
 8006cb8:	f000 f847 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8006cbc:	2005      	movs	r0, #5
 8006cbe:	f000 f844 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8006cc2:	200c      	movs	r0, #12
 8006cc4:	f000 f841 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8006cc8:	200a      	movs	r0, #10
 8006cca:	f000 f83e 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8006cce:	2028      	movs	r0, #40	; 0x28
 8006cd0:	f000 f83b 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8006cd4:	202f      	movs	r0, #47	; 0x2f
 8006cd6:	f000 f838 	bl	8006d4a <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8006cda:	200f      	movs	r0, #15
 8006cdc:	f000 f835 	bl	8006d4a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8006ce0:	2011      	movs	r0, #17
 8006ce2:	f000 f825 	bl	8006d30 <ili9341_WriteReg>
  LCD_Delay(200);
 8006ce6:	20c8      	movs	r0, #200	; 0xc8
 8006ce8:	f7fa fd88 	bl	80017fc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8006cec:	2029      	movs	r0, #41	; 0x29
 8006cee:	f000 f81f 	bl	8006d30 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8006cf2:	202c      	movs	r0, #44	; 0x2c
 8006cf4:	f000 f81c 	bl	8006d30 <ili9341_WriteReg>
}
 8006cf8:	bf00      	nop
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8006d00:	f7fa fcf6 	bl	80016f0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8006d04:	2103      	movs	r1, #3
 8006d06:	20d3      	movs	r0, #211	; 0xd3
 8006d08:	f000 f82c 	bl	8006d64 <ili9341_ReadData>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	b29b      	uxth	r3, r3
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8006d18:	2029      	movs	r0, #41	; 0x29
 8006d1a:	f000 f809 	bl	8006d30 <ili9341_WriteReg>
}
 8006d1e:	bf00      	nop
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8006d26:	2028      	movs	r0, #40	; 0x28
 8006d28:	f000 f802 	bl	8006d30 <ili9341_WriteReg>
}
 8006d2c:	bf00      	nop
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fa fd09 	bl	8001754 <LCD_IO_WriteReg>
}
 8006d42:	bf00      	nop
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	4603      	mov	r3, r0
 8006d52:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8006d54:	88fb      	ldrh	r3, [r7, #6]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fa fcda 	bl	8001710 <LCD_IO_WriteData>
}
 8006d5c:	bf00      	nop
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	460a      	mov	r2, r1
 8006d6e:	80fb      	strh	r3, [r7, #6]
 8006d70:	4613      	mov	r3, r2
 8006d72:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8006d74:	797a      	ldrb	r2, [r7, #5]
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	4611      	mov	r1, r2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fa fd0c 	bl	8001798 <LCD_IO_ReadData>
 8006d80:	4603      	mov	r3, r0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8006d8e:	23f0      	movs	r3, #240	; 0xf0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8006d9e:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8006db6:	88fb      	ldrh	r3, [r7, #6]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 fa59 	bl	8007270 <stmpe811_GetInstance>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	2bff      	cmp	r3, #255	; 0xff
 8006dc6:	d112      	bne.n	8006dee <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8006dc8:	2000      	movs	r0, #0
 8006dca:	f000 fa51 	bl	8007270 <stmpe811_GetInstance>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d80a      	bhi.n	8006dee <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	88fa      	ldrh	r2, [r7, #6]
 8006ddc:	b2d1      	uxtb	r1, r2
 8006dde:	4a06      	ldr	r2, [pc, #24]	; (8006df8 <stmpe811_Init+0x4c>)
 8006de0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8006de2:	f7fa fb71 	bl	80014c8 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 f807 	bl	8006dfc <stmpe811_Reset>
    }
  }
}
 8006dee:	bf00      	nop
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	200037ec 	.word	0x200037ec

08006dfc <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	4603      	mov	r3, r0
 8006e04:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	2103      	movs	r1, #3
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fa fb68 	bl	80014e4 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8006e14:	200a      	movs	r0, #10
 8006e16:	f7fa fba2 	bl	800155e <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2103      	movs	r1, #3
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fa fb5e 	bl	80014e4 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8006e28:	2002      	movs	r0, #2
 8006e2a:	f7fa fb98 	bl	800155e <IOE_Delay>
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8006e36:	b590      	push	{r4, r7, lr}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8006e40:	f7fa fb42 	bl	80014c8 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8006e44:	88fb      	ldrh	r3, [r7, #6]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2100      	movs	r1, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fa fb5d 	bl	800150a <IOE_Read>
 8006e50:	4603      	mov	r3, r0
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fa fb54 	bl	800150a <IOE_Read>
 8006e62:	4603      	mov	r3, r0
 8006e64:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8006e66:	4323      	orrs	r3, r4
 8006e68:	b21b      	sxth	r3, r3
 8006e6a:	b29b      	uxth	r3, r3
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd90      	pop	{r4, r7, pc}

08006e74 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2109      	movs	r1, #9
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fa fb3e 	bl	800150a <IOE_Read>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	f043 0301 	orr.w	r3, r3, #1
 8006e98:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ea0:	2109      	movs	r1, #9
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fa fb1e 	bl	80014e4 <IOE_Write>
}
 8006ea8:	bf00      	nop
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2109      	movs	r1, #9
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fa fb20 	bl	800150a <IOE_Read>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	f023 0301 	bic.w	r3, r3, #1
 8006ed4:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8006ed6:	88fb      	ldrh	r3, [r7, #6]
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	7bfa      	ldrb	r2, [r7, #15]
 8006edc:	2109      	movs	r1, #9
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fa fb00 	bl	80014e4 <IOE_Write>
    
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	460a      	mov	r2, r1
 8006ef6:	80fb      	strh	r3, [r7, #6]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8006f00:	88fb      	ldrh	r3, [r7, #6]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	210a      	movs	r1, #10
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fa faff 	bl	800150a <IOE_Read>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8006f10:	7bfa      	ldrb	r2, [r7, #15]
 8006f12:	797b      	ldrb	r3, [r7, #5]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8006f18:	88fb      	ldrh	r3, [r7, #6]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	7bfa      	ldrb	r2, [r7, #15]
 8006f1e:	210a      	movs	r1, #10
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fa fadf 	bl	80014e4 <IOE_Write>
}
 8006f26:	bf00      	nop
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	4603      	mov	r3, r0
 8006f36:	460a      	mov	r2, r1
 8006f38:	80fb      	strh	r3, [r7, #6]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8006f42:	88fb      	ldrh	r3, [r7, #6]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	210a      	movs	r1, #10
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fa fade 	bl	800150a <IOE_Read>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8006f52:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006f56:	43db      	mvns	r3, r3
 8006f58:	b25a      	sxtb	r2, r3
 8006f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f5e:	4013      	ands	r3, r2
 8006f60:	b25b      	sxtb	r3, r3
 8006f62:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	7bfa      	ldrb	r2, [r7, #15]
 8006f6a:	210a      	movs	r1, #10
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fa fab9 	bl	80014e4 <IOE_Write>
}
 8006f72:	bf00      	nop
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	4603      	mov	r3, r0
 8006f82:	460a      	mov	r2, r1
 8006f84:	80fb      	strh	r3, [r7, #6]
 8006f86:	4613      	mov	r3, r2
 8006f88:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8006f8a:	88fb      	ldrh	r3, [r7, #6]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	210b      	movs	r1, #11
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fa faba 	bl	800150a <IOE_Read>
 8006f96:	4603      	mov	r3, r0
 8006f98:	461a      	mov	r2, r3
 8006f9a:	797b      	ldrb	r3, [r7, #5]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	b2db      	uxtb	r3, r3
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	460a      	mov	r2, r1
 8006fb2:	80fb      	strh	r3, [r7, #6]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8006fb8:	88fb      	ldrh	r3, [r7, #6]
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	797a      	ldrb	r2, [r7, #5]
 8006fbe:	210b      	movs	r1, #11
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fa fa8f 	bl	80014e4 <IOE_Write>
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	6039      	str	r1, [r7, #0]
 8006fd8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8006fde:	88fb      	ldrh	r3, [r7, #6]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2117      	movs	r1, #23
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fa fa90 	bl	800150a <IOE_Read>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	b25b      	sxtb	r3, r3
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	b25a      	sxtb	r2, r3
 8006ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	b25b      	sxtb	r3, r3
 8006ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	7bfa      	ldrb	r2, [r7, #15]
 8007006:	2117      	movs	r1, #23
 8007008:	4618      	mov	r0, r3
 800700a:	f7fa fa6b 	bl	80014e4 <IOE_Write>
}
 800700e:	bf00      	nop
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	4603      	mov	r3, r0
 800701e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2104      	movs	r1, #4
 8007026:	4618      	mov	r0, r3
 8007028:	f7fa fa6f 	bl	800150a <IOE_Read>
 800702c:	4603      	mov	r3, r0
 800702e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	f023 0304 	bic.w	r3, r3, #4
 8007036:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	7bfa      	ldrb	r2, [r7, #15]
 800703e:	2104      	movs	r1, #4
 8007040:	4618      	mov	r0, r3
 8007042:	f7fa fa4f 	bl	80014e4 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8007046:	88fb      	ldrh	r3, [r7, #6]
 8007048:	21f0      	movs	r1, #240	; 0xf0
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff ffbf 	bl	8006fce <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	f023 0303 	bic.w	r3, r3, #3
 8007056:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	7bfa      	ldrb	r2, [r7, #15]
 800705e:	2104      	movs	r1, #4
 8007060:	4618      	mov	r0, r3
 8007062:	f7fa fa3f 	bl	80014e4 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2249      	movs	r2, #73	; 0x49
 800706c:	2120      	movs	r1, #32
 800706e:	4618      	mov	r0, r3
 8007070:	f7fa fa38 	bl	80014e4 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8007074:	2002      	movs	r0, #2
 8007076:	f7fa fa72 	bl	800155e <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2201      	movs	r2, #1
 8007080:	2121      	movs	r1, #33	; 0x21
 8007082:	4618      	mov	r0, r3
 8007084:	f7fa fa2e 	bl	80014e4 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8007088:	88fb      	ldrh	r3, [r7, #6]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	229a      	movs	r2, #154	; 0x9a
 800708e:	2141      	movs	r1, #65	; 0x41
 8007090:	4618      	mov	r0, r3
 8007092:	f7fa fa27 	bl	80014e4 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8007096:	88fb      	ldrh	r3, [r7, #6]
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2201      	movs	r2, #1
 800709c:	214a      	movs	r1, #74	; 0x4a
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fa fa20 	bl	80014e4 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80070a4:	88fb      	ldrh	r3, [r7, #6]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2201      	movs	r2, #1
 80070aa:	214b      	movs	r1, #75	; 0x4b
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fa fa19 	bl	80014e4 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80070b2:	88fb      	ldrh	r3, [r7, #6]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2200      	movs	r2, #0
 80070b8:	214b      	movs	r1, #75	; 0x4b
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fa fa12 	bl	80014e4 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80070c0:	88fb      	ldrh	r3, [r7, #6]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2201      	movs	r2, #1
 80070c6:	2156      	movs	r1, #86	; 0x56
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fa fa0b 	bl	80014e4 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2201      	movs	r2, #1
 80070d4:	2158      	movs	r1, #88	; 0x58
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fa fa04 	bl	80014e4 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80070dc:	88fb      	ldrh	r3, [r7, #6]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2201      	movs	r2, #1
 80070e2:	2140      	movs	r1, #64	; 0x40
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fa f9fd 	bl	80014e4 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80070ea:	88fb      	ldrh	r3, [r7, #6]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	22ff      	movs	r2, #255	; 0xff
 80070f0:	210b      	movs	r1, #11
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fa f9f6 	bl	80014e4 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80070f8:	2002      	movs	r0, #2
 80070fa:	f7fa fa30 	bl	800155e <IOE_Delay>
}
 80070fe:	bf00      	nop
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	4603      	mov	r3, r0
 800710e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2140      	movs	r1, #64	; 0x40
 800711a:	4618      	mov	r0, r3
 800711c:	f7fa f9f5 	bl	800150a <IOE_Read>
 8007120:	4603      	mov	r3, r0
 8007122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007126:	2b80      	cmp	r3, #128	; 0x80
 8007128:	bf0c      	ite	eq
 800712a:	2301      	moveq	r3, #1
 800712c:	2300      	movne	r3, #0
 800712e:	b2db      	uxtb	r3, r3
 8007130:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00b      	beq.n	8007150 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8007138:	88fb      	ldrh	r3, [r7, #6]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	214c      	movs	r1, #76	; 0x4c
 800713e:	4618      	mov	r0, r3
 8007140:	f7fa f9e3 	bl	800150a <IOE_Read>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d010      	beq.n	800716c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800714a:	2301      	movs	r3, #1
 800714c:	73fb      	strb	r3, [r7, #15]
 800714e:	e00d      	b.n	800716c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8007150:	88fb      	ldrh	r3, [r7, #6]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2201      	movs	r2, #1
 8007156:	214b      	movs	r1, #75	; 0x4b
 8007158:	4618      	mov	r0, r3
 800715a:	f7fa f9c3 	bl	80014e4 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2200      	movs	r2, #0
 8007164:	214b      	movs	r1, #75	; 0x4b
 8007166:	4618      	mov	r0, r3
 8007168:	f7fa f9bc 	bl	80014e4 <IOE_Write>
  }
  
  return ret;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	4603      	mov	r3, r0
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8007184:	89fb      	ldrh	r3, [r7, #14]
 8007186:	b2d8      	uxtb	r0, r3
 8007188:	f107 0210 	add.w	r2, r7, #16
 800718c:	2304      	movs	r3, #4
 800718e:	21d7      	movs	r1, #215	; 0xd7
 8007190:	f7fa f9ce 	bl	8001530 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8007194:	7c3b      	ldrb	r3, [r7, #16]
 8007196:	061a      	lsls	r2, r3, #24
 8007198:	7c7b      	ldrb	r3, [r7, #17]
 800719a:	041b      	lsls	r3, r3, #16
 800719c:	431a      	orrs	r2, r3
 800719e:	7cbb      	ldrb	r3, [r7, #18]
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	4313      	orrs	r3, r2
 80071a4:	7cfa      	ldrb	r2, [r7, #19]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	0d1b      	lsrs	r3, r3, #20
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	0a1b      	lsrs	r3, r3, #8
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071be:	b29a      	uxth	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80071c4:	89fb      	ldrh	r3, [r7, #14]
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2201      	movs	r2, #1
 80071ca:	214b      	movs	r1, #75	; 0x4b
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fa f989 	bl	80014e4 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80071d2:	89fb      	ldrh	r3, [r7, #14]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2200      	movs	r2, #0
 80071d8:	214b      	movs	r1, #75	; 0x4b
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fa f982 	bl	80014e4 <IOE_Write>
}
 80071e0:	bf00      	nop
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80071f2:	f7fa f970 	bl	80014d6 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80071f6:	88fb      	ldrh	r3, [r7, #6]
 80071f8:	211f      	movs	r1, #31
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7ff fe76 	bl	8006eec <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8007200:	88fb      	ldrh	r3, [r7, #6]
 8007202:	4618      	mov	r0, r3
 8007204:	f7ff fe36 	bl	8006e74 <stmpe811_EnableGlobalIT>
}
 8007208:	bf00      	nop
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	4603      	mov	r3, r0
 8007218:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff fe47 	bl	8006eb0 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8007222:	88fb      	ldrh	r3, [r7, #6]
 8007224:	211f      	movs	r1, #31
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff fe81 	bl	8006f2e <stmpe811_DisableITSource>
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	211f      	movs	r1, #31
 8007242:	4618      	mov	r0, r3
 8007244:	f7ff fe99 	bl	8006f7a <stmpe811_ReadGITStatus>
 8007248:	4603      	mov	r3, r0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	4603      	mov	r3, r0
 800725a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800725c:	88fb      	ldrh	r3, [r7, #6]
 800725e:	211f      	movs	r1, #31
 8007260:	4618      	mov	r0, r3
 8007262:	f7ff fea1 	bl	8006fa8 <stmpe811_ClearGlobalIT>
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	4603      	mov	r3, r0
 8007278:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
 8007282:	e00b      	b.n	800729c <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	4a0a      	ldr	r2, [pc, #40]	; (80072b0 <stmpe811_GetInstance+0x40>)
 8007288:	5cd3      	ldrb	r3, [r2, r3]
 800728a:	b29b      	uxth	r3, r3
 800728c:	88fa      	ldrh	r2, [r7, #6]
 800728e:	429a      	cmp	r2, r3
 8007290:	d101      	bne.n	8007296 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	e006      	b.n	80072a4 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8007296:	7bfb      	ldrb	r3, [r7, #15]
 8007298:	3301      	adds	r3, #1
 800729a:	73fb      	strb	r3, [r7, #15]
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d9f0      	bls.n	8007284 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80072a2:	23ff      	movs	r3, #255	; 0xff
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	200037ec 	.word	0x200037ec

080072b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80072b8:	4b08      	ldr	r3, [pc, #32]	; (80072dc <SystemInit+0x28>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072be:	4a07      	ldr	r2, [pc, #28]	; (80072dc <SystemInit+0x28>)
 80072c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80072c8:	4b04      	ldr	r3, [pc, #16]	; (80072dc <SystemInit+0x28>)
 80072ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072ce:	609a      	str	r2, [r3, #8]
#endif
}
 80072d0:	bf00      	nop
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	e000ed00 	.word	0xe000ed00

080072e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072e4:	4b0e      	ldr	r3, [pc, #56]	; (8007320 <HAL_Init+0x40>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a0d      	ldr	r2, [pc, #52]	; (8007320 <HAL_Init+0x40>)
 80072ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80072f0:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <HAL_Init+0x40>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a0a      	ldr	r2, [pc, #40]	; (8007320 <HAL_Init+0x40>)
 80072f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072fc:	4b08      	ldr	r3, [pc, #32]	; (8007320 <HAL_Init+0x40>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a07      	ldr	r2, [pc, #28]	; (8007320 <HAL_Init+0x40>)
 8007302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007308:	2003      	movs	r0, #3
 800730a:	f000 f8fc 	bl	8007506 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800730e:	2000      	movs	r0, #0
 8007310:	f7fa fdfc 	bl	8001f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007314:	f7fa faac 	bl	8001870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	40023c00 	.word	0x40023c00

08007324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007328:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_IncTick+0x20>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	4b06      	ldr	r3, [pc, #24]	; (8007348 <HAL_IncTick+0x24>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4413      	add	r3, r2
 8007334:	4a04      	ldr	r2, [pc, #16]	; (8007348 <HAL_IncTick+0x24>)
 8007336:	6013      	str	r3, [r2, #0]
}
 8007338:	bf00      	nop
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20000088 	.word	0x20000088
 8007348:	200037f0 	.word	0x200037f0

0800734c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  return uwTick;
 8007350:	4b03      	ldr	r3, [pc, #12]	; (8007360 <HAL_GetTick+0x14>)
 8007352:	681b      	ldr	r3, [r3, #0]
}
 8007354:	4618      	mov	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	200037f0 	.word	0x200037f0

08007364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800736c:	f7ff ffee 	bl	800734c <HAL_GetTick>
 8007370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d005      	beq.n	800738a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800737e:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <HAL_Delay+0x44>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800738a:	bf00      	nop
 800738c:	f7ff ffde 	bl	800734c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	429a      	cmp	r2, r3
 800739a:	d8f7      	bhi.n	800738c <HAL_Delay+0x28>
  {
  }
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000088 	.word	0x20000088

080073ac <__NVIC_SetPriorityGrouping>:
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073bc:	4b0c      	ldr	r3, [pc, #48]	; (80073f0 <__NVIC_SetPriorityGrouping+0x44>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80073c8:	4013      	ands	r3, r2
 80073ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80073d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80073d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073de:	4a04      	ldr	r2, [pc, #16]	; (80073f0 <__NVIC_SetPriorityGrouping+0x44>)
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	60d3      	str	r3, [r2, #12]
}
 80073e4:	bf00      	nop
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	e000ed00 	.word	0xe000ed00

080073f4 <__NVIC_GetPriorityGrouping>:
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073f8:	4b04      	ldr	r3, [pc, #16]	; (800740c <__NVIC_GetPriorityGrouping+0x18>)
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	0a1b      	lsrs	r3, r3, #8
 80073fe:	f003 0307 	and.w	r3, r3, #7
}
 8007402:	4618      	mov	r0, r3
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	e000ed00 	.word	0xe000ed00

08007410 <__NVIC_EnableIRQ>:
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800741a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800741e:	2b00      	cmp	r3, #0
 8007420:	db0b      	blt.n	800743a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007422:	79fb      	ldrb	r3, [r7, #7]
 8007424:	f003 021f 	and.w	r2, r3, #31
 8007428:	4907      	ldr	r1, [pc, #28]	; (8007448 <__NVIC_EnableIRQ+0x38>)
 800742a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	2001      	movs	r0, #1
 8007432:	fa00 f202 	lsl.w	r2, r0, r2
 8007436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	e000e100 	.word	0xe000e100

0800744c <__NVIC_SetPriority>:
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	6039      	str	r1, [r7, #0]
 8007456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800745c:	2b00      	cmp	r3, #0
 800745e:	db0a      	blt.n	8007476 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	b2da      	uxtb	r2, r3
 8007464:	490c      	ldr	r1, [pc, #48]	; (8007498 <__NVIC_SetPriority+0x4c>)
 8007466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800746a:	0112      	lsls	r2, r2, #4
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	440b      	add	r3, r1
 8007470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007474:	e00a      	b.n	800748c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	b2da      	uxtb	r2, r3
 800747a:	4908      	ldr	r1, [pc, #32]	; (800749c <__NVIC_SetPriority+0x50>)
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	3b04      	subs	r3, #4
 8007484:	0112      	lsls	r2, r2, #4
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	440b      	add	r3, r1
 800748a:	761a      	strb	r2, [r3, #24]
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	e000e100 	.word	0xe000e100
 800749c:	e000ed00 	.word	0xe000ed00

080074a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b089      	sub	sp, #36	; 0x24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f1c3 0307 	rsb	r3, r3, #7
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	bf28      	it	cs
 80074be:	2304      	movcs	r3, #4
 80074c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	3304      	adds	r3, #4
 80074c6:	2b06      	cmp	r3, #6
 80074c8:	d902      	bls.n	80074d0 <NVIC_EncodePriority+0x30>
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	3b03      	subs	r3, #3
 80074ce:	e000      	b.n	80074d2 <NVIC_EncodePriority+0x32>
 80074d0:	2300      	movs	r3, #0
 80074d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074d4:	f04f 32ff 	mov.w	r2, #4294967295
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	43da      	mvns	r2, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	401a      	ands	r2, r3
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074e8:	f04f 31ff 	mov.w	r1, #4294967295
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	fa01 f303 	lsl.w	r3, r1, r3
 80074f2:	43d9      	mvns	r1, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074f8:	4313      	orrs	r3, r2
         );
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3724      	adds	r7, #36	; 0x24
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff ff4c 	bl	80073ac <__NVIC_SetPriorityGrouping>
}
 8007514:	bf00      	nop
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800752a:	2300      	movs	r3, #0
 800752c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800752e:	f7ff ff61 	bl	80073f4 <__NVIC_GetPriorityGrouping>
 8007532:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	6978      	ldr	r0, [r7, #20]
 800753a:	f7ff ffb1 	bl	80074a0 <NVIC_EncodePriority>
 800753e:	4602      	mov	r2, r0
 8007540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007544:	4611      	mov	r1, r2
 8007546:	4618      	mov	r0, r3
 8007548:	f7ff ff80 	bl	800744c <__NVIC_SetPriority>
}
 800754c:	bf00      	nop
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800755e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff ff54 	bl	8007410 <__NVIC_EnableIRQ>
}
 8007568:	bf00      	nop
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e00e      	b.n	80075a0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	795b      	ldrb	r3, [r3, #5]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d105      	bne.n	8007598 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7fa f998 	bl	80018c8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e03b      	b.n	8007632 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d106      	bne.n	80075d4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7fa f99c 	bl	800190c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	f023 0107 	bic.w	r1, r3, #7
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007612:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	68d1      	ldr	r1, [r2, #12]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6812      	ldr	r2, [r2, #0]
 800761e:	430b      	orrs	r3, r1
 8007620:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b084      	sub	sp, #16
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	d026      	beq.n	80076aa <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007662:	2b00      	cmp	r3, #0
 8007664:	d021      	beq.n	80076aa <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007674:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767a:	f043 0201 	orr.w	r2, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2201      	movs	r2, #1
 8007688:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2204      	movs	r2, #4
 800768e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f003 0320 	and.w	r3, r3, #32
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d026      	beq.n	8007702 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d021      	beq.n	8007702 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076cc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2220      	movs	r2, #32
 80076d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076da:	f043 0202 	orr.w	r2, r3, #2
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2204      	movs	r2, #4
 80076e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b00      	cmp	r3, #0
 800770a:	d026      	beq.n	800775a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007712:	2b00      	cmp	r3, #0
 8007714:	d021      	beq.n	800775a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007724:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2208      	movs	r2, #8
 800772c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007732:	f043 0204 	orr.w	r2, r3, #4
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2204      	movs	r2, #4
 800773e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b00      	cmp	r3, #0
 8007762:	d013      	beq.n	800778c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00e      	beq.n	800778c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800777c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2204      	movs	r2, #4
 8007784:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f853 	bl	8007832 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d024      	beq.n	80077e0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01f      	beq.n	80077e0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80077ae:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2202      	movs	r2, #2
 80077b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f003 0310 	and.w	r3, r3, #16
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01f      	beq.n	800782a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d01a      	beq.n	800782a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007802:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2210      	movs	r2, #16
 800780a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f80e 	bl	8007846 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800784e:	bf00      	nop
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
	...

0800785c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007874:	2b01      	cmp	r3, #1
 8007876:	d101      	bne.n	800787c <HAL_DMA2D_ConfigLayer+0x20>
 8007878:	2302      	movs	r3, #2
 800787a:	e079      	b.n	8007970 <HAL_DMA2D_ConfigLayer+0x114>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	011b      	lsls	r3, r3, #4
 8007890:	3318      	adds	r3, #24
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	4413      	add	r3, r2
 8007896:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	041b      	lsls	r3, r3, #16
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80078a6:	4b35      	ldr	r3, [pc, #212]	; (800797c <HAL_DMA2D_ConfigLayer+0x120>)
 80078a8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	2b0a      	cmp	r3, #10
 80078b0:	d003      	beq.n	80078ba <HAL_DMA2D_ConfigLayer+0x5e>
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2b09      	cmp	r3, #9
 80078b8:	d107      	bne.n	80078ca <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	617b      	str	r3, [r7, #20]
 80078c8:	e005      	b.n	80078d6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	061b      	lsls	r3, r3, #24
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d120      	bne.n	800791e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	43db      	mvns	r3, r3
 80078e6:	ea02 0103 	and.w	r1, r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	6812      	ldr	r2, [r2, #0]
 80078fc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2b0a      	cmp	r3, #10
 8007904:	d003      	beq.n	800790e <HAL_DMA2D_ConfigLayer+0xb2>
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2b09      	cmp	r3, #9
 800790c:	d127      	bne.n	800795e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800791a:	629a      	str	r2, [r3, #40]	; 0x28
 800791c:	e01f      	b.n	800795e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69da      	ldr	r2, [r3, #28]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	43db      	mvns	r3, r3
 8007928:	ea02 0103 	and.w	r1, r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	430a      	orrs	r2, r1
 8007934:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	6812      	ldr	r2, [r2, #0]
 800793e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	2b0a      	cmp	r3, #10
 8007946:	d003      	beq.n	8007950 <HAL_DMA2D_ConfigLayer+0xf4>
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	2b09      	cmp	r3, #9
 800794e:	d106      	bne.n	800795e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800795c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	371c      	adds	r7, #28
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	ff03000f 	.word	0xff03000f

08007980 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007992:	4b23      	ldr	r3, [pc, #140]	; (8007a20 <HAL_FLASH_Program+0xa0>)
 8007994:	7e1b      	ldrb	r3, [r3, #24]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d101      	bne.n	800799e <HAL_FLASH_Program+0x1e>
 800799a:	2302      	movs	r3, #2
 800799c:	e03b      	b.n	8007a16 <HAL_FLASH_Program+0x96>
 800799e:	4b20      	ldr	r3, [pc, #128]	; (8007a20 <HAL_FLASH_Program+0xa0>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80079a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079a8:	f000 f870 	bl	8007a8c <FLASH_WaitForLastOperation>
 80079ac:	4603      	mov	r3, r0
 80079ae:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d12b      	bne.n	8007a0e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d105      	bne.n	80079c8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80079bc:	783b      	ldrb	r3, [r7, #0]
 80079be:	4619      	mov	r1, r3
 80079c0:	68b8      	ldr	r0, [r7, #8]
 80079c2:	f000 f91b 	bl	8007bfc <FLASH_Program_Byte>
 80079c6:	e016      	b.n	80079f6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d105      	bne.n	80079da <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80079ce:	883b      	ldrh	r3, [r7, #0]
 80079d0:	4619      	mov	r1, r3
 80079d2:	68b8      	ldr	r0, [r7, #8]
 80079d4:	f000 f8ee 	bl	8007bb4 <FLASH_Program_HalfWord>
 80079d8:	e00d      	b.n	80079f6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d105      	bne.n	80079ec <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	4619      	mov	r1, r3
 80079e4:	68b8      	ldr	r0, [r7, #8]
 80079e6:	f000 f8c3 	bl	8007b70 <FLASH_Program_Word>
 80079ea:	e004      	b.n	80079f6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80079ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079f0:	68b8      	ldr	r0, [r7, #8]
 80079f2:	f000 f88b 	bl	8007b0c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80079f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079fa:	f000 f847 	bl	8007a8c <FLASH_WaitForLastOperation>
 80079fe:	4603      	mov	r3, r0
 8007a00:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007a02:	4b08      	ldr	r3, [pc, #32]	; (8007a24 <HAL_FLASH_Program+0xa4>)
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	4a07      	ldr	r2, [pc, #28]	; (8007a24 <HAL_FLASH_Program+0xa4>)
 8007a08:	f023 0301 	bic.w	r3, r3, #1
 8007a0c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007a0e:	4b04      	ldr	r3, [pc, #16]	; (8007a20 <HAL_FLASH_Program+0xa0>)
 8007a10:	2200      	movs	r2, #0
 8007a12:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	200037f4 	.word	0x200037f4
 8007a24:	40023c00 	.word	0x40023c00

08007a28 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007a32:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <HAL_FLASH_Unlock+0x38>)
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	da0b      	bge.n	8007a52 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007a3a:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <HAL_FLASH_Unlock+0x38>)
 8007a3c:	4a09      	ldr	r2, [pc, #36]	; (8007a64 <HAL_FLASH_Unlock+0x3c>)
 8007a3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007a40:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <HAL_FLASH_Unlock+0x38>)
 8007a42:	4a09      	ldr	r2, [pc, #36]	; (8007a68 <HAL_FLASH_Unlock+0x40>)
 8007a44:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007a46:	4b06      	ldr	r3, [pc, #24]	; (8007a60 <HAL_FLASH_Unlock+0x38>)
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	da01      	bge.n	8007a52 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007a52:	79fb      	ldrb	r3, [r7, #7]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	40023c00 	.word	0x40023c00
 8007a64:	45670123 	.word	0x45670123
 8007a68:	cdef89ab 	.word	0xcdef89ab

08007a6c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007a70:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <HAL_FLASH_Lock+0x1c>)
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	4a04      	ldr	r2, [pc, #16]	; (8007a88 <HAL_FLASH_Lock+0x1c>)
 8007a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a7a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	40023c00 	.word	0x40023c00

08007a8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a98:	4b1a      	ldr	r3, [pc, #104]	; (8007b04 <FLASH_WaitForLastOperation+0x78>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007a9e:	f7ff fc55 	bl	800734c <HAL_GetTick>
 8007aa2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007aa4:	e010      	b.n	8007ac8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d00c      	beq.n	8007ac8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d007      	beq.n	8007ac4 <FLASH_WaitForLastOperation+0x38>
 8007ab4:	f7ff fc4a 	bl	800734c <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d201      	bcs.n	8007ac8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e019      	b.n	8007afc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007ac8:	4b0f      	ldr	r3, [pc, #60]	; (8007b08 <FLASH_WaitForLastOperation+0x7c>)
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e8      	bne.n	8007aa6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007ad4:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <FLASH_WaitForLastOperation+0x7c>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007ae0:	4b09      	ldr	r3, [pc, #36]	; (8007b08 <FLASH_WaitForLastOperation+0x7c>)
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007ae6:	4b08      	ldr	r3, [pc, #32]	; (8007b08 <FLASH_WaitForLastOperation+0x7c>)
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007af2:	f000 f8a5 	bl	8007c40 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
  
}  
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	200037f4 	.word	0x200037f4
 8007b08:	40023c00 	.word	0x40023c00

08007b0c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b18:	4b14      	ldr	r3, [pc, #80]	; (8007b6c <FLASH_Program_DoubleWord+0x60>)
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	4a13      	ldr	r2, [pc, #76]	; (8007b6c <FLASH_Program_DoubleWord+0x60>)
 8007b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007b24:	4b11      	ldr	r3, [pc, #68]	; (8007b6c <FLASH_Program_DoubleWord+0x60>)
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	4a10      	ldr	r2, [pc, #64]	; (8007b6c <FLASH_Program_DoubleWord+0x60>)
 8007b2a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007b30:	4b0e      	ldr	r3, [pc, #56]	; (8007b6c <FLASH_Program_DoubleWord+0x60>)
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	4a0d      	ldr	r2, [pc, #52]	; (8007b6c <FLASH_Program_DoubleWord+0x60>)
 8007b36:	f043 0301 	orr.w	r3, r3, #1
 8007b3a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	f3bf 8f6f 	isb	sy
}
 8007b46:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007b48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b4c:	f04f 0200 	mov.w	r2, #0
 8007b50:	f04f 0300 	mov.w	r3, #0
 8007b54:	000a      	movs	r2, r1
 8007b56:	2300      	movs	r3, #0
 8007b58:	68f9      	ldr	r1, [r7, #12]
 8007b5a:	3104      	adds	r1, #4
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	600b      	str	r3, [r1, #0]
}
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	40023c00 	.word	0x40023c00

08007b70 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b7a:	4b0d      	ldr	r3, [pc, #52]	; (8007bb0 <FLASH_Program_Word+0x40>)
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	4a0c      	ldr	r2, [pc, #48]	; (8007bb0 <FLASH_Program_Word+0x40>)
 8007b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007b86:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <FLASH_Program_Word+0x40>)
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <FLASH_Program_Word+0x40>)
 8007b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007b92:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <FLASH_Program_Word+0x40>)
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	4a06      	ldr	r2, [pc, #24]	; (8007bb0 <FLASH_Program_Word+0x40>)
 8007b98:	f043 0301 	orr.w	r3, r3, #1
 8007b9c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	601a      	str	r2, [r3, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	40023c00 	.word	0x40023c00

08007bb4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007bc0:	4b0d      	ldr	r3, [pc, #52]	; (8007bf8 <FLASH_Program_HalfWord+0x44>)
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	4a0c      	ldr	r2, [pc, #48]	; (8007bf8 <FLASH_Program_HalfWord+0x44>)
 8007bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <FLASH_Program_HalfWord+0x44>)
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	4a09      	ldr	r2, [pc, #36]	; (8007bf8 <FLASH_Program_HalfWord+0x44>)
 8007bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007bd8:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <FLASH_Program_HalfWord+0x44>)
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	4a06      	ldr	r2, [pc, #24]	; (8007bf8 <FLASH_Program_HalfWord+0x44>)
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	887a      	ldrh	r2, [r7, #2]
 8007be8:	801a      	strh	r2, [r3, #0]
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40023c00 	.word	0x40023c00

08007bfc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c08:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <FLASH_Program_Byte+0x40>)
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	4a0b      	ldr	r2, [pc, #44]	; (8007c3c <FLASH_Program_Byte+0x40>)
 8007c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007c14:	4b09      	ldr	r3, [pc, #36]	; (8007c3c <FLASH_Program_Byte+0x40>)
 8007c16:	4a09      	ldr	r2, [pc, #36]	; (8007c3c <FLASH_Program_Byte+0x40>)
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007c1c:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <FLASH_Program_Byte+0x40>)
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	4a06      	ldr	r2, [pc, #24]	; (8007c3c <FLASH_Program_Byte+0x40>)
 8007c22:	f043 0301 	orr.w	r3, r3, #1
 8007c26:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	78fa      	ldrb	r2, [r7, #3]
 8007c2c:	701a      	strb	r2, [r3, #0]
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	40023c00 	.word	0x40023c00

08007c40 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007c40:	b480      	push	{r7}
 8007c42:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007c44:	4b2f      	ldr	r3, [pc, #188]	; (8007d04 <FLASH_SetErrorCode+0xc4>)
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f003 0310 	and.w	r3, r3, #16
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d008      	beq.n	8007c62 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007c50:	4b2d      	ldr	r3, [pc, #180]	; (8007d08 <FLASH_SetErrorCode+0xc8>)
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	f043 0310 	orr.w	r3, r3, #16
 8007c58:	4a2b      	ldr	r2, [pc, #172]	; (8007d08 <FLASH_SetErrorCode+0xc8>)
 8007c5a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007c5c:	4b29      	ldr	r3, [pc, #164]	; (8007d04 <FLASH_SetErrorCode+0xc4>)
 8007c5e:	2210      	movs	r2, #16
 8007c60:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007c62:	4b28      	ldr	r3, [pc, #160]	; (8007d04 <FLASH_SetErrorCode+0xc4>)
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f003 0320 	and.w	r3, r3, #32
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d008      	beq.n	8007c80 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007c6e:	4b26      	ldr	r3, [pc, #152]	; (8007d08 <FLASH_SetErrorCode+0xc8>)
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	f043 0308 	orr.w	r3, r3, #8
 8007c76:	4a24      	ldr	r2, [pc, #144]	; (8007d08 <FLASH_SetErrorCode+0xc8>)
 8007c78:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007c7a:	4b22      	ldr	r3, [pc, #136]	; (8007d04 <FLASH_SetErrorCode+0xc4>)
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007c80:	4b20      	ldr	r3, [pc, #128]	; (8007d04 <FLASH_SetErrorCode+0xc4>)
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d008      	beq.n	8007c9e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007c8c:	4b1e      	ldr	r3, [pc, #120]	; (8007d08 <FLASH_SetErrorCode+0xc8>)
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	f043 0304 	orr.w	r3, r3, #4
 8007c94:	4a1c      	ldr	r2, [pc, #112]	; (8007d08 <FLASH_SetErrorCode+0xc8>)
 8007c96:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007c98:	4b1a      	ldr	r3, [pc, #104]	; (8007d04 <FLASH_SetErrorCode+0xc4>)
 8007c9a:	2240      	movs	r2, #64	; 0x40
 8007c9c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007c9e:	4b19      	ldr	r3, [pc, #100]	; (8007d04 <FLASH_SetErrorCode+0xc4>)
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d008      	beq.n	8007cbc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007caa:	4b17      	ldr	r3, [pc, #92]	; (8007d08 <FLASH_SetErrorCode+0xc8>)
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	f043 0302 	orr.w	r3, r3, #2
 8007cb2:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <FLASH_SetErrorCode+0xc8>)
 8007cb4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007cb6:	4b13      	ldr	r3, [pc, #76]	; (8007d04 <FLASH_SetErrorCode+0xc4>)
 8007cb8:	2280      	movs	r2, #128	; 0x80
 8007cba:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8007cbc:	4b11      	ldr	r3, [pc, #68]	; (8007d04 <FLASH_SetErrorCode+0xc4>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d009      	beq.n	8007cdc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007cc8:	4b0f      	ldr	r3, [pc, #60]	; (8007d08 <FLASH_SetErrorCode+0xc8>)
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	f043 0301 	orr.w	r3, r3, #1
 8007cd0:	4a0d      	ldr	r2, [pc, #52]	; (8007d08 <FLASH_SetErrorCode+0xc8>)
 8007cd2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007cd4:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <FLASH_SetErrorCode+0xc4>)
 8007cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cda:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007cdc:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <FLASH_SetErrorCode+0xc4>)
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d008      	beq.n	8007cfa <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007ce8:	4b07      	ldr	r3, [pc, #28]	; (8007d08 <FLASH_SetErrorCode+0xc8>)
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	f043 0320 	orr.w	r3, r3, #32
 8007cf0:	4a05      	ldr	r2, [pc, #20]	; (8007d08 <FLASH_SetErrorCode+0xc8>)
 8007cf2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007cf4:	4b03      	ldr	r3, [pc, #12]	; (8007d04 <FLASH_SetErrorCode+0xc4>)
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	60da      	str	r2, [r3, #12]
  }
}
 8007cfa:	bf00      	nop
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	40023c00 	.word	0x40023c00
 8007d08:	200037f4 	.word	0x200037f4

08007d0c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007d1e:	4b32      	ldr	r3, [pc, #200]	; (8007de8 <HAL_FLASHEx_Erase+0xdc>)
 8007d20:	7e1b      	ldrb	r3, [r3, #24]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d101      	bne.n	8007d2a <HAL_FLASHEx_Erase+0x1e>
 8007d26:	2302      	movs	r3, #2
 8007d28:	e05a      	b.n	8007de0 <HAL_FLASHEx_Erase+0xd4>
 8007d2a:	4b2f      	ldr	r3, [pc, #188]	; (8007de8 <HAL_FLASHEx_Erase+0xdc>)
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d34:	f7ff feaa 	bl	8007a8c <FLASH_WaitForLastOperation>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d14a      	bne.n	8007dd8 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	f04f 32ff 	mov.w	r2, #4294967295
 8007d48:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d117      	bne.n	8007d82 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	f000 f846 	bl	8007df0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d68:	f7ff fe90 	bl	8007a8c <FLASH_WaitForLastOperation>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007d70:	4b1e      	ldr	r3, [pc, #120]	; (8007dec <HAL_FLASHEx_Erase+0xe0>)
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	4a1d      	ldr	r2, [pc, #116]	; (8007dec <HAL_FLASHEx_Erase+0xe0>)
 8007d76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d7a:	f023 0304 	bic.w	r3, r3, #4
 8007d7e:	6113      	str	r3, [r2, #16]
 8007d80:	e028      	b.n	8007dd4 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	60bb      	str	r3, [r7, #8]
 8007d88:	e01c      	b.n	8007dc4 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	4619      	mov	r1, r3
 8007d92:	68b8      	ldr	r0, [r7, #8]
 8007d94:	f000 f866 	bl	8007e64 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d9c:	f7ff fe76 	bl	8007a8c <FLASH_WaitForLastOperation>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007da4:	4b11      	ldr	r3, [pc, #68]	; (8007dec <HAL_FLASHEx_Erase+0xe0>)
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	4a10      	ldr	r2, [pc, #64]	; (8007dec <HAL_FLASHEx_Erase+0xe0>)
 8007daa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007dae:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	601a      	str	r2, [r3, #0]
          break;
 8007dbc:	e00a      	b.n	8007dd4 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	60bb      	str	r3, [r7, #8]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	4413      	add	r3, r2
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d3da      	bcc.n	8007d8a <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007dd4:	f000 f894 	bl	8007f00 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007dd8:	4b03      	ldr	r3, [pc, #12]	; (8007de8 <HAL_FLASHEx_Erase+0xdc>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	761a      	strb	r2, [r3, #24]

  return status;
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	200037f4 	.word	0x200037f4
 8007dec:	40023c00 	.word	0x40023c00

08007df0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	6039      	str	r1, [r7, #0]
 8007dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007dfc:	4b18      	ldr	r3, [pc, #96]	; (8007e60 <FLASH_MassErase+0x70>)
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	4a17      	ldr	r2, [pc, #92]	; (8007e60 <FLASH_MassErase+0x70>)
 8007e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e06:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d108      	bne.n	8007e20 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8007e0e:	4b14      	ldr	r3, [pc, #80]	; (8007e60 <FLASH_MassErase+0x70>)
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	4a13      	ldr	r2, [pc, #76]	; (8007e60 <FLASH_MassErase+0x70>)
 8007e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e18:	f043 0304 	orr.w	r3, r3, #4
 8007e1c:	6113      	str	r3, [r2, #16]
 8007e1e:	e00f      	b.n	8007e40 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d106      	bne.n	8007e34 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8007e26:	4b0e      	ldr	r3, [pc, #56]	; (8007e60 <FLASH_MassErase+0x70>)
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	4a0d      	ldr	r2, [pc, #52]	; (8007e60 <FLASH_MassErase+0x70>)
 8007e2c:	f043 0304 	orr.w	r3, r3, #4
 8007e30:	6113      	str	r3, [r2, #16]
 8007e32:	e005      	b.n	8007e40 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8007e34:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <FLASH_MassErase+0x70>)
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	4a09      	ldr	r2, [pc, #36]	; (8007e60 <FLASH_MassErase+0x70>)
 8007e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007e40:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <FLASH_MassErase+0x70>)
 8007e42:	691a      	ldr	r2, [r3, #16]
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	021b      	lsls	r3, r3, #8
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	4a05      	ldr	r2, [pc, #20]	; (8007e60 <FLASH_MassErase+0x70>)
 8007e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e50:	6113      	str	r3, [r2, #16]
}
 8007e52:	bf00      	nop
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	40023c00 	.word	0x40023c00

08007e64 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d102      	bne.n	8007e80 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	e010      	b.n	8007ea2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d103      	bne.n	8007e8e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	e009      	b.n	8007ea2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d103      	bne.n	8007e9c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	e002      	b.n	8007ea2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007e9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007ea0:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b0b      	cmp	r3, #11
 8007ea6:	d902      	bls.n	8007eae <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007eae:	4b13      	ldr	r3, [pc, #76]	; (8007efc <FLASH_Erase_Sector+0x98>)
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	4a12      	ldr	r2, [pc, #72]	; (8007efc <FLASH_Erase_Sector+0x98>)
 8007eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007eba:	4b10      	ldr	r3, [pc, #64]	; (8007efc <FLASH_Erase_Sector+0x98>)
 8007ebc:	691a      	ldr	r2, [r3, #16]
 8007ebe:	490f      	ldr	r1, [pc, #60]	; (8007efc <FLASH_Erase_Sector+0x98>)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <FLASH_Erase_Sector+0x98>)
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	4a0c      	ldr	r2, [pc, #48]	; (8007efc <FLASH_Erase_Sector+0x98>)
 8007ecc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007ed0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <FLASH_Erase_Sector+0x98>)
 8007ed4:	691a      	ldr	r2, [r3, #16]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	00db      	lsls	r3, r3, #3
 8007eda:	4313      	orrs	r3, r2
 8007edc:	4a07      	ldr	r2, [pc, #28]	; (8007efc <FLASH_Erase_Sector+0x98>)
 8007ede:	f043 0302 	orr.w	r3, r3, #2
 8007ee2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007ee4:	4b05      	ldr	r3, [pc, #20]	; (8007efc <FLASH_Erase_Sector+0x98>)
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	4a04      	ldr	r2, [pc, #16]	; (8007efc <FLASH_Erase_Sector+0x98>)
 8007eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eee:	6113      	str	r3, [r2, #16]
}
 8007ef0:	bf00      	nop
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	40023c00 	.word	0x40023c00

08007f00 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007f04:	4b20      	ldr	r3, [pc, #128]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d017      	beq.n	8007f40 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007f10:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a1c      	ldr	r2, [pc, #112]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f1a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a19      	ldr	r2, [pc, #100]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	4b17      	ldr	r3, [pc, #92]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a16      	ldr	r2, [pc, #88]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f32:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007f34:	4b14      	ldr	r3, [pc, #80]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a13      	ldr	r2, [pc, #76]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f3e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007f40:	4b11      	ldr	r3, [pc, #68]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d017      	beq.n	8007f7c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007f4c:	4b0e      	ldr	r3, [pc, #56]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a0d      	ldr	r2, [pc, #52]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f56:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007f58:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a0a      	ldr	r2, [pc, #40]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	4b08      	ldr	r3, [pc, #32]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a07      	ldr	r2, [pc, #28]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f6e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007f70:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a04      	ldr	r2, [pc, #16]	; (8007f88 <FLASH_FlushCaches+0x88>)
 8007f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f7a:	6013      	str	r3, [r2, #0]
  }
}
 8007f7c:	bf00      	nop
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	40023c00 	.word	0x40023c00

08007f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b089      	sub	sp, #36	; 0x24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	e177      	b.n	8008298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007fa8:	2201      	movs	r2, #1
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4013      	ands	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	f040 8166 	bne.w	8008292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d005      	beq.n	8007fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d130      	bne.n	8008040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	2203      	movs	r2, #3
 8007fea:	fa02 f303 	lsl.w	r3, r2, r3
 8007fee:	43db      	mvns	r3, r3
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	4313      	orrs	r3, r2
 8008006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008014:	2201      	movs	r2, #1
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	fa02 f303 	lsl.w	r3, r2, r3
 800801c:	43db      	mvns	r3, r3
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	4013      	ands	r3, r2
 8008022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	091b      	lsrs	r3, r3, #4
 800802a:	f003 0201 	and.w	r2, r3, #1
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	fa02 f303 	lsl.w	r3, r2, r3
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	4313      	orrs	r3, r2
 8008038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f003 0303 	and.w	r3, r3, #3
 8008048:	2b03      	cmp	r3, #3
 800804a:	d017      	beq.n	800807c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	2203      	movs	r2, #3
 8008058:	fa02 f303 	lsl.w	r3, r2, r3
 800805c:	43db      	mvns	r3, r3
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	4013      	ands	r3, r2
 8008062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	005b      	lsls	r3, r3, #1
 800806c:	fa02 f303 	lsl.w	r3, r2, r3
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	4313      	orrs	r3, r2
 8008074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f003 0303 	and.w	r3, r3, #3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d123      	bne.n	80080d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	08da      	lsrs	r2, r3, #3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	3208      	adds	r2, #8
 8008090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	f003 0307 	and.w	r3, r3, #7
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	220f      	movs	r2, #15
 80080a0:	fa02 f303 	lsl.w	r3, r2, r3
 80080a4:	43db      	mvns	r3, r3
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	4013      	ands	r3, r2
 80080aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	691a      	ldr	r2, [r3, #16]
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	fa02 f303 	lsl.w	r3, r2, r3
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	4313      	orrs	r3, r2
 80080c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	08da      	lsrs	r2, r3, #3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	3208      	adds	r2, #8
 80080ca:	69b9      	ldr	r1, [r7, #24]
 80080cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	005b      	lsls	r3, r3, #1
 80080da:	2203      	movs	r2, #3
 80080dc:	fa02 f303 	lsl.w	r3, r2, r3
 80080e0:	43db      	mvns	r3, r3
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	4013      	ands	r3, r2
 80080e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f003 0203 	and.w	r2, r3, #3
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	005b      	lsls	r3, r3, #1
 80080f4:	fa02 f303 	lsl.w	r3, r2, r3
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 80c0 	beq.w	8008292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008112:	2300      	movs	r3, #0
 8008114:	60fb      	str	r3, [r7, #12]
 8008116:	4b66      	ldr	r3, [pc, #408]	; (80082b0 <HAL_GPIO_Init+0x324>)
 8008118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811a:	4a65      	ldr	r2, [pc, #404]	; (80082b0 <HAL_GPIO_Init+0x324>)
 800811c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008120:	6453      	str	r3, [r2, #68]	; 0x44
 8008122:	4b63      	ldr	r3, [pc, #396]	; (80082b0 <HAL_GPIO_Init+0x324>)
 8008124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800812e:	4a61      	ldr	r2, [pc, #388]	; (80082b4 <HAL_GPIO_Init+0x328>)
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	089b      	lsrs	r3, r3, #2
 8008134:	3302      	adds	r3, #2
 8008136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800813a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f003 0303 	and.w	r3, r3, #3
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	220f      	movs	r2, #15
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	43db      	mvns	r3, r3
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	4013      	ands	r3, r2
 8008150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a58      	ldr	r2, [pc, #352]	; (80082b8 <HAL_GPIO_Init+0x32c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d037      	beq.n	80081ca <HAL_GPIO_Init+0x23e>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a57      	ldr	r2, [pc, #348]	; (80082bc <HAL_GPIO_Init+0x330>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d031      	beq.n	80081c6 <HAL_GPIO_Init+0x23a>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a56      	ldr	r2, [pc, #344]	; (80082c0 <HAL_GPIO_Init+0x334>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d02b      	beq.n	80081c2 <HAL_GPIO_Init+0x236>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a55      	ldr	r2, [pc, #340]	; (80082c4 <HAL_GPIO_Init+0x338>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d025      	beq.n	80081be <HAL_GPIO_Init+0x232>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a54      	ldr	r2, [pc, #336]	; (80082c8 <HAL_GPIO_Init+0x33c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d01f      	beq.n	80081ba <HAL_GPIO_Init+0x22e>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a53      	ldr	r2, [pc, #332]	; (80082cc <HAL_GPIO_Init+0x340>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d019      	beq.n	80081b6 <HAL_GPIO_Init+0x22a>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a52      	ldr	r2, [pc, #328]	; (80082d0 <HAL_GPIO_Init+0x344>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d013      	beq.n	80081b2 <HAL_GPIO_Init+0x226>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a51      	ldr	r2, [pc, #324]	; (80082d4 <HAL_GPIO_Init+0x348>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00d      	beq.n	80081ae <HAL_GPIO_Init+0x222>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a50      	ldr	r2, [pc, #320]	; (80082d8 <HAL_GPIO_Init+0x34c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d007      	beq.n	80081aa <HAL_GPIO_Init+0x21e>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a4f      	ldr	r2, [pc, #316]	; (80082dc <HAL_GPIO_Init+0x350>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d101      	bne.n	80081a6 <HAL_GPIO_Init+0x21a>
 80081a2:	2309      	movs	r3, #9
 80081a4:	e012      	b.n	80081cc <HAL_GPIO_Init+0x240>
 80081a6:	230a      	movs	r3, #10
 80081a8:	e010      	b.n	80081cc <HAL_GPIO_Init+0x240>
 80081aa:	2308      	movs	r3, #8
 80081ac:	e00e      	b.n	80081cc <HAL_GPIO_Init+0x240>
 80081ae:	2307      	movs	r3, #7
 80081b0:	e00c      	b.n	80081cc <HAL_GPIO_Init+0x240>
 80081b2:	2306      	movs	r3, #6
 80081b4:	e00a      	b.n	80081cc <HAL_GPIO_Init+0x240>
 80081b6:	2305      	movs	r3, #5
 80081b8:	e008      	b.n	80081cc <HAL_GPIO_Init+0x240>
 80081ba:	2304      	movs	r3, #4
 80081bc:	e006      	b.n	80081cc <HAL_GPIO_Init+0x240>
 80081be:	2303      	movs	r3, #3
 80081c0:	e004      	b.n	80081cc <HAL_GPIO_Init+0x240>
 80081c2:	2302      	movs	r3, #2
 80081c4:	e002      	b.n	80081cc <HAL_GPIO_Init+0x240>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e000      	b.n	80081cc <HAL_GPIO_Init+0x240>
 80081ca:	2300      	movs	r3, #0
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	f002 0203 	and.w	r2, r2, #3
 80081d2:	0092      	lsls	r2, r2, #2
 80081d4:	4093      	lsls	r3, r2
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	4313      	orrs	r3, r2
 80081da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80081dc:	4935      	ldr	r1, [pc, #212]	; (80082b4 <HAL_GPIO_Init+0x328>)
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	089b      	lsrs	r3, r3, #2
 80081e2:	3302      	adds	r3, #2
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80081ea:	4b3d      	ldr	r3, [pc, #244]	; (80082e0 <HAL_GPIO_Init+0x354>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	43db      	mvns	r3, r3
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	4013      	ands	r3, r2
 80081f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800820e:	4a34      	ldr	r2, [pc, #208]	; (80082e0 <HAL_GPIO_Init+0x354>)
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008214:	4b32      	ldr	r3, [pc, #200]	; (80082e0 <HAL_GPIO_Init+0x354>)
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	43db      	mvns	r3, r3
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	4013      	ands	r3, r2
 8008222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	4313      	orrs	r3, r2
 8008236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008238:	4a29      	ldr	r2, [pc, #164]	; (80082e0 <HAL_GPIO_Init+0x354>)
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800823e:	4b28      	ldr	r3, [pc, #160]	; (80082e0 <HAL_GPIO_Init+0x354>)
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	43db      	mvns	r3, r3
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	4013      	ands	r3, r2
 800824c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	4313      	orrs	r3, r2
 8008260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008262:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <HAL_GPIO_Init+0x354>)
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008268:	4b1d      	ldr	r3, [pc, #116]	; (80082e0 <HAL_GPIO_Init+0x354>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	43db      	mvns	r3, r3
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	4013      	ands	r3, r2
 8008276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	4313      	orrs	r3, r2
 800828a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800828c:	4a14      	ldr	r2, [pc, #80]	; (80082e0 <HAL_GPIO_Init+0x354>)
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	3301      	adds	r3, #1
 8008296:	61fb      	str	r3, [r7, #28]
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	2b0f      	cmp	r3, #15
 800829c:	f67f ae84 	bls.w	8007fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	3724      	adds	r7, #36	; 0x24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	40023800 	.word	0x40023800
 80082b4:	40013800 	.word	0x40013800
 80082b8:	40020000 	.word	0x40020000
 80082bc:	40020400 	.word	0x40020400
 80082c0:	40020800 	.word	0x40020800
 80082c4:	40020c00 	.word	0x40020c00
 80082c8:	40021000 	.word	0x40021000
 80082cc:	40021400 	.word	0x40021400
 80082d0:	40021800 	.word	0x40021800
 80082d4:	40021c00 	.word	0x40021c00
 80082d8:	40022000 	.word	0x40022000
 80082dc:	40022400 	.word	0x40022400
 80082e0:	40013c00 	.word	0x40013c00

080082e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691a      	ldr	r2, [r3, #16]
 80082f4:	887b      	ldrh	r3, [r7, #2]
 80082f6:	4013      	ands	r3, r2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80082fc:	2301      	movs	r3, #1
 80082fe:	73fb      	strb	r3, [r7, #15]
 8008300:	e001      	b.n	8008306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	807b      	strh	r3, [r7, #2]
 8008320:	4613      	mov	r3, r2
 8008322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008324:	787b      	ldrb	r3, [r7, #1]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800832a:	887a      	ldrh	r2, [r7, #2]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008330:	e003      	b.n	800833a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008332:	887b      	ldrh	r3, [r7, #2]
 8008334:	041a      	lsls	r2, r3, #16
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	619a      	str	r2, [r3, #24]
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008346:	b480      	push	{r7}
 8008348:	b085      	sub	sp, #20
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008358:	887a      	ldrh	r2, [r7, #2]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4013      	ands	r3, r2
 800835e:	041a      	lsls	r2, r3, #16
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	43d9      	mvns	r1, r3
 8008364:	887b      	ldrh	r3, [r7, #2]
 8008366:	400b      	ands	r3, r1
 8008368:	431a      	orrs	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	619a      	str	r2, [r3, #24]
}
 800836e:	bf00      	nop
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
	...

0800837c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008386:	4b08      	ldr	r3, [pc, #32]	; (80083a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008388:	695a      	ldr	r2, [r3, #20]
 800838a:	88fb      	ldrh	r3, [r7, #6]
 800838c:	4013      	ands	r3, r2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d006      	beq.n	80083a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008392:	4a05      	ldr	r2, [pc, #20]	; (80083a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008394:	88fb      	ldrh	r3, [r7, #6]
 8008396:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008398:	88fb      	ldrh	r3, [r7, #6]
 800839a:	4618      	mov	r0, r3
 800839c:	f7f8 ffc8 	bl	8001330 <HAL_GPIO_EXTI_Callback>
  }
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	40013c00 	.word	0x40013c00

080083ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e12b      	b.n	8008616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d106      	bne.n	80083d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7f9 fac2 	bl	800195c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2224      	movs	r2, #36	; 0x24
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 0201 	bic.w	r2, r2, #1
 80083ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800840e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008410:	f002 f80c 	bl	800a42c <HAL_RCC_GetPCLK1Freq>
 8008414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	4a81      	ldr	r2, [pc, #516]	; (8008620 <HAL_I2C_Init+0x274>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d807      	bhi.n	8008430 <HAL_I2C_Init+0x84>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4a80      	ldr	r2, [pc, #512]	; (8008624 <HAL_I2C_Init+0x278>)
 8008424:	4293      	cmp	r3, r2
 8008426:	bf94      	ite	ls
 8008428:	2301      	movls	r3, #1
 800842a:	2300      	movhi	r3, #0
 800842c:	b2db      	uxtb	r3, r3
 800842e:	e006      	b.n	800843e <HAL_I2C_Init+0x92>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4a7d      	ldr	r2, [pc, #500]	; (8008628 <HAL_I2C_Init+0x27c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	bf94      	ite	ls
 8008438:	2301      	movls	r3, #1
 800843a:	2300      	movhi	r3, #0
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e0e7      	b.n	8008616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4a78      	ldr	r2, [pc, #480]	; (800862c <HAL_I2C_Init+0x280>)
 800844a:	fba2 2303 	umull	r2, r3, r2, r3
 800844e:	0c9b      	lsrs	r3, r3, #18
 8008450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	430a      	orrs	r2, r1
 8008464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	4a6a      	ldr	r2, [pc, #424]	; (8008620 <HAL_I2C_Init+0x274>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d802      	bhi.n	8008480 <HAL_I2C_Init+0xd4>
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	3301      	adds	r3, #1
 800847e:	e009      	b.n	8008494 <HAL_I2C_Init+0xe8>
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008486:	fb02 f303 	mul.w	r3, r2, r3
 800848a:	4a69      	ldr	r2, [pc, #420]	; (8008630 <HAL_I2C_Init+0x284>)
 800848c:	fba2 2303 	umull	r2, r3, r2, r3
 8008490:	099b      	lsrs	r3, r3, #6
 8008492:	3301      	adds	r3, #1
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	6812      	ldr	r2, [r2, #0]
 8008498:	430b      	orrs	r3, r1
 800849a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80084a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	495c      	ldr	r1, [pc, #368]	; (8008620 <HAL_I2C_Init+0x274>)
 80084b0:	428b      	cmp	r3, r1
 80084b2:	d819      	bhi.n	80084e8 <HAL_I2C_Init+0x13c>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	1e59      	subs	r1, r3, #1
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	fbb1 f3f3 	udiv	r3, r1, r3
 80084c2:	1c59      	adds	r1, r3, #1
 80084c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80084c8:	400b      	ands	r3, r1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <HAL_I2C_Init+0x138>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	1e59      	subs	r1, r3, #1
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	005b      	lsls	r3, r3, #1
 80084d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80084dc:	3301      	adds	r3, #1
 80084de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084e2:	e051      	b.n	8008588 <HAL_I2C_Init+0x1dc>
 80084e4:	2304      	movs	r3, #4
 80084e6:	e04f      	b.n	8008588 <HAL_I2C_Init+0x1dc>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d111      	bne.n	8008514 <HAL_I2C_Init+0x168>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	1e58      	subs	r0, r3, #1
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6859      	ldr	r1, [r3, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	005b      	lsls	r3, r3, #1
 80084fc:	440b      	add	r3, r1
 80084fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008502:	3301      	adds	r3, #1
 8008504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008508:	2b00      	cmp	r3, #0
 800850a:	bf0c      	ite	eq
 800850c:	2301      	moveq	r3, #1
 800850e:	2300      	movne	r3, #0
 8008510:	b2db      	uxtb	r3, r3
 8008512:	e012      	b.n	800853a <HAL_I2C_Init+0x18e>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	1e58      	subs	r0, r3, #1
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6859      	ldr	r1, [r3, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	440b      	add	r3, r1
 8008522:	0099      	lsls	r1, r3, #2
 8008524:	440b      	add	r3, r1
 8008526:	fbb0 f3f3 	udiv	r3, r0, r3
 800852a:	3301      	adds	r3, #1
 800852c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008530:	2b00      	cmp	r3, #0
 8008532:	bf0c      	ite	eq
 8008534:	2301      	moveq	r3, #1
 8008536:	2300      	movne	r3, #0
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <HAL_I2C_Init+0x196>
 800853e:	2301      	movs	r3, #1
 8008540:	e022      	b.n	8008588 <HAL_I2C_Init+0x1dc>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10e      	bne.n	8008568 <HAL_I2C_Init+0x1bc>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	1e58      	subs	r0, r3, #1
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6859      	ldr	r1, [r3, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	440b      	add	r3, r1
 8008558:	fbb0 f3f3 	udiv	r3, r0, r3
 800855c:	3301      	adds	r3, #1
 800855e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008566:	e00f      	b.n	8008588 <HAL_I2C_Init+0x1dc>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	1e58      	subs	r0, r3, #1
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6859      	ldr	r1, [r3, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	440b      	add	r3, r1
 8008576:	0099      	lsls	r1, r3, #2
 8008578:	440b      	add	r3, r1
 800857a:	fbb0 f3f3 	udiv	r3, r0, r3
 800857e:	3301      	adds	r3, #1
 8008580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	6809      	ldr	r1, [r1, #0]
 800858c:	4313      	orrs	r3, r2
 800858e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	69da      	ldr	r2, [r3, #28]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	431a      	orrs	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	430a      	orrs	r2, r1
 80085aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80085b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	6911      	ldr	r1, [r2, #16]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	68d2      	ldr	r2, [r2, #12]
 80085c2:	4311      	orrs	r1, r2
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	6812      	ldr	r2, [r2, #0]
 80085c8:	430b      	orrs	r3, r1
 80085ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695a      	ldr	r2, [r3, #20]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	431a      	orrs	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0201 	orr.w	r2, r2, #1
 80085f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	000186a0 	.word	0x000186a0
 8008624:	001e847f 	.word	0x001e847f
 8008628:	003d08ff 	.word	0x003d08ff
 800862c:	431bde83 	.word	0x431bde83
 8008630:	10624dd3 	.word	0x10624dd3

08008634 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b088      	sub	sp, #32
 8008638:	af02      	add	r7, sp, #8
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	4608      	mov	r0, r1
 800863e:	4611      	mov	r1, r2
 8008640:	461a      	mov	r2, r3
 8008642:	4603      	mov	r3, r0
 8008644:	817b      	strh	r3, [r7, #10]
 8008646:	460b      	mov	r3, r1
 8008648:	813b      	strh	r3, [r7, #8]
 800864a:	4613      	mov	r3, r2
 800864c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800864e:	f7fe fe7d 	bl	800734c <HAL_GetTick>
 8008652:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b20      	cmp	r3, #32
 800865e:	f040 80d9 	bne.w	8008814 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	2319      	movs	r3, #25
 8008668:	2201      	movs	r2, #1
 800866a:	496d      	ldr	r1, [pc, #436]	; (8008820 <HAL_I2C_Mem_Write+0x1ec>)
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 fc7f 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008678:	2302      	movs	r3, #2
 800867a:	e0cc      	b.n	8008816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <HAL_I2C_Mem_Write+0x56>
 8008686:	2302      	movs	r3, #2
 8008688:	e0c5      	b.n	8008816 <HAL_I2C_Mem_Write+0x1e2>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b01      	cmp	r3, #1
 800869e:	d007      	beq.n	80086b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f042 0201 	orr.w	r2, r2, #1
 80086ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2221      	movs	r2, #33	; 0x21
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2240      	movs	r2, #64	; 0x40
 80086cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a3a      	ldr	r2, [r7, #32]
 80086da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4a4d      	ldr	r2, [pc, #308]	; (8008824 <HAL_I2C_Mem_Write+0x1f0>)
 80086f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086f2:	88f8      	ldrh	r0, [r7, #6]
 80086f4:	893a      	ldrh	r2, [r7, #8]
 80086f6:	8979      	ldrh	r1, [r7, #10]
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	4603      	mov	r3, r0
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 fab6 	bl	8008c74 <I2C_RequestMemoryWrite>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d052      	beq.n	80087b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e081      	b.n	8008816 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 fd00 	bl	800911c <I2C_WaitOnTXEFlagUntilTimeout>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00d      	beq.n	800873e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008726:	2b04      	cmp	r3, #4
 8008728:	d107      	bne.n	800873a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008738:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e06b      	b.n	8008816 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008742:	781a      	ldrb	r2, [r3, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008758:	3b01      	subs	r3, #1
 800875a:	b29a      	uxth	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008764:	b29b      	uxth	r3, r3
 8008766:	3b01      	subs	r3, #1
 8008768:	b29a      	uxth	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	f003 0304 	and.w	r3, r3, #4
 8008778:	2b04      	cmp	r3, #4
 800877a:	d11b      	bne.n	80087b4 <HAL_I2C_Mem_Write+0x180>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008780:	2b00      	cmp	r3, #0
 8008782:	d017      	beq.n	80087b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	781a      	ldrb	r2, [r3, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800879e:	3b01      	subs	r3, #1
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	3b01      	subs	r3, #1
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1aa      	bne.n	8008712 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 fcec 	bl	800919e <I2C_WaitOnBTFFlagUntilTimeout>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00d      	beq.n	80087e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d0:	2b04      	cmp	r3, #4
 80087d2:	d107      	bne.n	80087e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e016      	b.n	8008816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2220      	movs	r2, #32
 80087fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	e000      	b.n	8008816 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008814:	2302      	movs	r3, #2
  }
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	00100002 	.word	0x00100002
 8008824:	ffff0000 	.word	0xffff0000

08008828 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08c      	sub	sp, #48	; 0x30
 800882c:	af02      	add	r7, sp, #8
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	4608      	mov	r0, r1
 8008832:	4611      	mov	r1, r2
 8008834:	461a      	mov	r2, r3
 8008836:	4603      	mov	r3, r0
 8008838:	817b      	strh	r3, [r7, #10]
 800883a:	460b      	mov	r3, r1
 800883c:	813b      	strh	r3, [r7, #8]
 800883e:	4613      	mov	r3, r2
 8008840:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008842:	f7fe fd83 	bl	800734c <HAL_GetTick>
 8008846:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800884e:	b2db      	uxtb	r3, r3
 8008850:	2b20      	cmp	r3, #32
 8008852:	f040 8208 	bne.w	8008c66 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	2319      	movs	r3, #25
 800885c:	2201      	movs	r2, #1
 800885e:	497b      	ldr	r1, [pc, #492]	; (8008a4c <HAL_I2C_Mem_Read+0x224>)
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f000 fb85 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800886c:	2302      	movs	r3, #2
 800886e:	e1fb      	b.n	8008c68 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008876:	2b01      	cmp	r3, #1
 8008878:	d101      	bne.n	800887e <HAL_I2C_Mem_Read+0x56>
 800887a:	2302      	movs	r3, #2
 800887c:	e1f4      	b.n	8008c68 <HAL_I2C_Mem_Read+0x440>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b01      	cmp	r3, #1
 8008892:	d007      	beq.n	80088a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f042 0201 	orr.w	r2, r2, #1
 80088a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2222      	movs	r2, #34	; 0x22
 80088b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2240      	movs	r2, #64	; 0x40
 80088c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80088d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088da:	b29a      	uxth	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4a5b      	ldr	r2, [pc, #364]	; (8008a50 <HAL_I2C_Mem_Read+0x228>)
 80088e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088e6:	88f8      	ldrh	r0, [r7, #6]
 80088e8:	893a      	ldrh	r2, [r7, #8]
 80088ea:	8979      	ldrh	r1, [r7, #10]
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	9301      	str	r3, [sp, #4]
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	4603      	mov	r3, r0
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 fa52 	bl	8008da0 <I2C_RequestMemoryRead>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e1b0      	b.n	8008c68 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800890a:	2b00      	cmp	r3, #0
 800890c:	d113      	bne.n	8008936 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800890e:	2300      	movs	r3, #0
 8008910:	623b      	str	r3, [r7, #32]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	623b      	str	r3, [r7, #32]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	623b      	str	r3, [r7, #32]
 8008922:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e184      	b.n	8008c40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800893a:	2b01      	cmp	r3, #1
 800893c:	d11b      	bne.n	8008976 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800894c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800894e:	2300      	movs	r3, #0
 8008950:	61fb      	str	r3, [r7, #28]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	61fb      	str	r3, [r7, #28]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	61fb      	str	r3, [r7, #28]
 8008962:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	e164      	b.n	8008c40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800897a:	2b02      	cmp	r3, #2
 800897c:	d11b      	bne.n	80089b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800898c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800899c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800899e:	2300      	movs	r3, #0
 80089a0:	61bb      	str	r3, [r7, #24]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	695b      	ldr	r3, [r3, #20]
 80089a8:	61bb      	str	r3, [r7, #24]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	61bb      	str	r3, [r7, #24]
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	e144      	b.n	8008c40 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80089cc:	e138      	b.n	8008c40 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089d2:	2b03      	cmp	r3, #3
 80089d4:	f200 80f1 	bhi.w	8008bba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d123      	bne.n	8008a28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 fc1b 	bl	8009220 <I2C_WaitOnRXNEFlagUntilTimeout>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e139      	b.n	8008c68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691a      	ldr	r2, [r3, #16]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	b2d2      	uxtb	r2, r2
 8008a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a10:	3b01      	subs	r3, #1
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a26:	e10b      	b.n	8008c40 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d14e      	bne.n	8008ace <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a36:	2200      	movs	r2, #0
 8008a38:	4906      	ldr	r1, [pc, #24]	; (8008a54 <HAL_I2C_Mem_Read+0x22c>)
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 fa98 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d008      	beq.n	8008a58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e10e      	b.n	8008c68 <HAL_I2C_Mem_Read+0x440>
 8008a4a:	bf00      	nop
 8008a4c:	00100002 	.word	0x00100002
 8008a50:	ffff0000 	.word	0xffff0000
 8008a54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	691a      	ldr	r2, [r3, #16]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	b2d2      	uxtb	r2, r2
 8008a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a84:	3b01      	subs	r3, #1
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	3b01      	subs	r3, #1
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	691a      	ldr	r2, [r3, #16]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	b2d2      	uxtb	r2, r2
 8008aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008acc:	e0b8      	b.n	8008c40 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4966      	ldr	r1, [pc, #408]	; (8008c70 <HAL_I2C_Mem_Read+0x448>)
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 fa49 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e0bf      	b.n	8008c68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	691a      	ldr	r2, [r3, #16]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b02:	b2d2      	uxtb	r2, r2
 8008b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b14:	3b01      	subs	r3, #1
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	3b01      	subs	r3, #1
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	2200      	movs	r2, #0
 8008b32:	494f      	ldr	r1, [pc, #316]	; (8008c70 <HAL_I2C_Mem_Read+0x448>)
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 fa1b 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e091      	b.n	8008c68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691a      	ldr	r2, [r3, #16]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	b2d2      	uxtb	r2, r2
 8008b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b70:	3b01      	subs	r3, #1
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	691a      	ldr	r2, [r3, #16]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	b2d2      	uxtb	r2, r2
 8008b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	1c5a      	adds	r2, r3, #1
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bb8:	e042      	b.n	8008c40 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 fb2e 	bl	8009220 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e04c      	b.n	8008c68 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	691a      	ldr	r2, [r3, #16]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	b2d2      	uxtb	r2, r2
 8008bda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bea:	3b01      	subs	r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	f003 0304 	and.w	r3, r3, #4
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d118      	bne.n	8008c40 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	691a      	ldr	r2, [r3, #16]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	b2d2      	uxtb	r2, r2
 8008c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f47f aec2 	bne.w	80089ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	e000      	b.n	8008c68 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008c66:	2302      	movs	r3, #2
  }
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3728      	adds	r7, #40	; 0x28
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	00010004 	.word	0x00010004

08008c74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b088      	sub	sp, #32
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	4608      	mov	r0, r1
 8008c7e:	4611      	mov	r1, r2
 8008c80:	461a      	mov	r2, r3
 8008c82:	4603      	mov	r3, r0
 8008c84:	817b      	strh	r3, [r7, #10]
 8008c86:	460b      	mov	r3, r1
 8008c88:	813b      	strh	r3, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 f960 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00d      	beq.n	8008cd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cc4:	d103      	bne.n	8008cce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e05f      	b.n	8008d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008cd2:	897b      	ldrh	r3, [r7, #10]
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ce0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	6a3a      	ldr	r2, [r7, #32]
 8008ce6:	492d      	ldr	r1, [pc, #180]	; (8008d9c <I2C_RequestMemoryWrite+0x128>)
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 f998 	bl	800901e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e04c      	b.n	8008d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	617b      	str	r3, [r7, #20]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d10:	6a39      	ldr	r1, [r7, #32]
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 fa02 	bl	800911c <I2C_WaitOnTXEFlagUntilTimeout>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00d      	beq.n	8008d3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d107      	bne.n	8008d36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e02b      	b.n	8008d92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d3a:	88fb      	ldrh	r3, [r7, #6]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d105      	bne.n	8008d4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d40:	893b      	ldrh	r3, [r7, #8]
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	611a      	str	r2, [r3, #16]
 8008d4a:	e021      	b.n	8008d90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008d4c:	893b      	ldrh	r3, [r7, #8]
 8008d4e:	0a1b      	lsrs	r3, r3, #8
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d5c:	6a39      	ldr	r1, [r7, #32]
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f000 f9dc 	bl	800911c <I2C_WaitOnTXEFlagUntilTimeout>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00d      	beq.n	8008d86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d107      	bne.n	8008d82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e005      	b.n	8008d92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d86:	893b      	ldrh	r3, [r7, #8]
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	00010002 	.word	0x00010002

08008da0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	4608      	mov	r0, r1
 8008daa:	4611      	mov	r1, r2
 8008dac:	461a      	mov	r2, r3
 8008dae:	4603      	mov	r3, r0
 8008db0:	817b      	strh	r3, [r7, #10]
 8008db2:	460b      	mov	r3, r1
 8008db4:	813b      	strh	r3, [r7, #8]
 8008db6:	4613      	mov	r3, r2
 8008db8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008dc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	6a3b      	ldr	r3, [r7, #32]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 f8c2 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00d      	beq.n	8008e0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e00:	d103      	bne.n	8008e0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e0aa      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e0e:	897b      	ldrh	r3, [r7, #10]
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	461a      	mov	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008e1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	6a3a      	ldr	r2, [r7, #32]
 8008e22:	4952      	ldr	r1, [pc, #328]	; (8008f6c <I2C_RequestMemoryRead+0x1cc>)
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 f8fa 	bl	800901e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e097      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e34:	2300      	movs	r3, #0
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	617b      	str	r3, [r7, #20]
 8008e48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e4c:	6a39      	ldr	r1, [r7, #32]
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 f964 	bl	800911c <I2C_WaitOnTXEFlagUntilTimeout>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00d      	beq.n	8008e76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d107      	bne.n	8008e72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e076      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e76:	88fb      	ldrh	r3, [r7, #6]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d105      	bne.n	8008e88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e7c:	893b      	ldrh	r3, [r7, #8]
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	611a      	str	r2, [r3, #16]
 8008e86:	e021      	b.n	8008ecc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008e88:	893b      	ldrh	r3, [r7, #8]
 8008e8a:	0a1b      	lsrs	r3, r3, #8
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e98:	6a39      	ldr	r1, [r7, #32]
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f000 f93e 	bl	800911c <I2C_WaitOnTXEFlagUntilTimeout>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00d      	beq.n	8008ec2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d107      	bne.n	8008ebe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ebc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e050      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ec2:	893b      	ldrh	r3, [r7, #8]
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ece:	6a39      	ldr	r1, [r7, #32]
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 f923 	bl	800911c <I2C_WaitOnTXEFlagUntilTimeout>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00d      	beq.n	8008ef8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d107      	bne.n	8008ef4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ef2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e035      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f000 f82b 	bl	8008f70 <I2C_WaitOnFlagUntilTimeout>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00d      	beq.n	8008f3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f2e:	d103      	bne.n	8008f38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e013      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008f3c:	897b      	ldrh	r3, [r7, #10]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	f043 0301 	orr.w	r3, r3, #1
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	6a3a      	ldr	r2, [r7, #32]
 8008f50:	4906      	ldr	r1, [pc, #24]	; (8008f6c <I2C_RequestMemoryRead+0x1cc>)
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 f863 	bl	800901e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e000      	b.n	8008f64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	00010002 	.word	0x00010002

08008f70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	603b      	str	r3, [r7, #0]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f80:	e025      	b.n	8008fce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f88:	d021      	beq.n	8008fce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f8a:	f7fe f9df 	bl	800734c <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d302      	bcc.n	8008fa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d116      	bne.n	8008fce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fba:	f043 0220 	orr.w	r2, r3, #32
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e023      	b.n	8009016 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	0c1b      	lsrs	r3, r3, #16
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d10d      	bne.n	8008ff4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	43da      	mvns	r2, r3
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	bf0c      	ite	eq
 8008fea:	2301      	moveq	r3, #1
 8008fec:	2300      	movne	r3, #0
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	e00c      	b.n	800900e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	43da      	mvns	r2, r3
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4013      	ands	r3, r2
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	bf0c      	ite	eq
 8009006:	2301      	moveq	r3, #1
 8009008:	2300      	movne	r3, #0
 800900a:	b2db      	uxtb	r3, r3
 800900c:	461a      	mov	r2, r3
 800900e:	79fb      	ldrb	r3, [r7, #7]
 8009010:	429a      	cmp	r2, r3
 8009012:	d0b6      	beq.n	8008f82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	607a      	str	r2, [r7, #4]
 800902a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800902c:	e051      	b.n	80090d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800903c:	d123      	bne.n	8009086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800904c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009056:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2220      	movs	r2, #32
 8009062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009072:	f043 0204 	orr.w	r2, r3, #4
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e046      	b.n	8009114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908c:	d021      	beq.n	80090d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800908e:	f7fe f95d 	bl	800734c <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	429a      	cmp	r2, r3
 800909c:	d302      	bcc.n	80090a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d116      	bne.n	80090d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2220      	movs	r2, #32
 80090ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090be:	f043 0220 	orr.w	r2, r3, #32
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e020      	b.n	8009114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	0c1b      	lsrs	r3, r3, #16
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d10c      	bne.n	80090f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	43da      	mvns	r2, r3
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4013      	ands	r3, r2
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	bf14      	ite	ne
 80090ee:	2301      	movne	r3, #1
 80090f0:	2300      	moveq	r3, #0
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	e00b      	b.n	800910e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	699b      	ldr	r3, [r3, #24]
 80090fc:	43da      	mvns	r2, r3
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	4013      	ands	r3, r2
 8009102:	b29b      	uxth	r3, r3
 8009104:	2b00      	cmp	r3, #0
 8009106:	bf14      	ite	ne
 8009108:	2301      	movne	r3, #1
 800910a:	2300      	moveq	r3, #0
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d18d      	bne.n	800902e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009128:	e02d      	b.n	8009186 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 f8ce 	bl	80092cc <I2C_IsAcknowledgeFailed>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e02d      	b.n	8009196 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d021      	beq.n	8009186 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009142:	f7fe f903 	bl	800734c <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	429a      	cmp	r2, r3
 8009150:	d302      	bcc.n	8009158 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d116      	bne.n	8009186 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2220      	movs	r2, #32
 8009162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009172:	f043 0220 	orr.w	r2, r3, #32
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e007      	b.n	8009196 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009190:	2b80      	cmp	r3, #128	; 0x80
 8009192:	d1ca      	bne.n	800912a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	60f8      	str	r0, [r7, #12]
 80091a6:	60b9      	str	r1, [r7, #8]
 80091a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80091aa:	e02d      	b.n	8009208 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 f88d 	bl	80092cc <I2C_IsAcknowledgeFailed>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d001      	beq.n	80091bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e02d      	b.n	8009218 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c2:	d021      	beq.n	8009208 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091c4:	f7fe f8c2 	bl	800734c <HAL_GetTick>
 80091c8:	4602      	mov	r2, r0
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d302      	bcc.n	80091da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d116      	bne.n	8009208 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f4:	f043 0220 	orr.w	r2, r3, #32
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e007      	b.n	8009218 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	f003 0304 	and.w	r3, r3, #4
 8009212:	2b04      	cmp	r3, #4
 8009214:	d1ca      	bne.n	80091ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800922c:	e042      	b.n	80092b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	f003 0310 	and.w	r3, r3, #16
 8009238:	2b10      	cmp	r3, #16
 800923a:	d119      	bne.n	8009270 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f06f 0210 	mvn.w	r2, #16
 8009244:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2220      	movs	r2, #32
 8009250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e029      	b.n	80092c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009270:	f7fe f86c 	bl	800734c <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	429a      	cmp	r2, r3
 800927e:	d302      	bcc.n	8009286 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d116      	bne.n	80092b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2220      	movs	r2, #32
 8009290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a0:	f043 0220 	orr.w	r2, r3, #32
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e007      	b.n	80092c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092be:	2b40      	cmp	r3, #64	; 0x40
 80092c0:	d1b5      	bne.n	800922e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092e2:	d11b      	bne.n	800931c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80092ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2220      	movs	r2, #32
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009308:	f043 0204 	orr.w	r2, r3, #4
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e000      	b.n	800931e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b20      	cmp	r3, #32
 800933e:	d129      	bne.n	8009394 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2224      	movs	r2, #36	; 0x24
 8009344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f022 0201 	bic.w	r2, r2, #1
 8009356:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f022 0210 	bic.w	r2, r2, #16
 8009366:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	430a      	orrs	r2, r1
 8009376:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f042 0201 	orr.w	r2, r2, #1
 8009386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2220      	movs	r2, #32
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	e000      	b.n	8009396 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009394:	2302      	movs	r3, #2
  }
}
 8009396:	4618      	mov	r0, r3
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b085      	sub	sp, #20
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b20      	cmp	r3, #32
 80093ba:	d12a      	bne.n	8009412 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2224      	movs	r2, #36	; 0x24
 80093c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f022 0201 	bic.w	r2, r2, #1
 80093d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80093dc:	89fb      	ldrh	r3, [r7, #14]
 80093de:	f023 030f 	bic.w	r3, r3, #15
 80093e2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	89fb      	ldrh	r3, [r7, #14]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	89fa      	ldrh	r2, [r7, #14]
 80093f4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f042 0201 	orr.w	r2, r2, #1
 8009404:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2220      	movs	r2, #32
 800940a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	e000      	b.n	8009414 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009412:	2302      	movs	r3, #2
  }
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e0bf      	b.n	80095b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d106      	bne.n	800944c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7f8 fafe 	bl	8001a48 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2202      	movs	r2, #2
 8009450:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699a      	ldr	r2, [r3, #24]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009462:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6999      	ldr	r1, [r3, #24]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009478:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6899      	ldr	r1, [r3, #8]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	4b4a      	ldr	r3, [pc, #296]	; (80095bc <HAL_LTDC_Init+0x19c>)
 8009494:	400b      	ands	r3, r1
 8009496:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	041b      	lsls	r3, r3, #16
 800949e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6899      	ldr	r1, [r3, #8]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	699a      	ldr	r2, [r3, #24]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	431a      	orrs	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68d9      	ldr	r1, [r3, #12]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	4b3e      	ldr	r3, [pc, #248]	; (80095bc <HAL_LTDC_Init+0x19c>)
 80094c2:	400b      	ands	r3, r1
 80094c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	041b      	lsls	r3, r3, #16
 80094cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68d9      	ldr	r1, [r3, #12]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a1a      	ldr	r2, [r3, #32]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	431a      	orrs	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	430a      	orrs	r2, r1
 80094e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6919      	ldr	r1, [r3, #16]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	4b33      	ldr	r3, [pc, #204]	; (80095bc <HAL_LTDC_Init+0x19c>)
 80094f0:	400b      	ands	r3, r1
 80094f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	041b      	lsls	r3, r3, #16
 80094fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6919      	ldr	r1, [r3, #16]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	431a      	orrs	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	6959      	ldr	r1, [r3, #20]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	4b27      	ldr	r3, [pc, #156]	; (80095bc <HAL_LTDC_Init+0x19c>)
 800951e:	400b      	ands	r3, r1
 8009520:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009526:	041b      	lsls	r3, r3, #16
 8009528:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6959      	ldr	r1, [r3, #20]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	431a      	orrs	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009546:	021b      	lsls	r3, r3, #8
 8009548:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009550:	041b      	lsls	r3, r3, #16
 8009552:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009562:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4313      	orrs	r3, r2
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f042 0206 	orr.w	r2, r2, #6
 800958e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	699a      	ldr	r2, [r3, #24]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f042 0201 	orr.w	r2, r2, #1
 800959e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	f000f800 	.word	0xf000f800

080095c0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f003 0304 	and.w	r3, r3, #4
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d023      	beq.n	800962a <HAL_LTDC_IRQHandler+0x6a>
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	f003 0304 	and.w	r3, r3, #4
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d01e      	beq.n	800962a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f022 0204 	bic.w	r2, r2, #4
 80095fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2204      	movs	r2, #4
 8009602:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800960a:	f043 0201 	orr.w	r2, r3, #1
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2204      	movs	r2, #4
 8009618:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f86f 	bl	8009708 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f003 0302 	and.w	r3, r3, #2
 8009630:	2b00      	cmp	r3, #0
 8009632:	d023      	beq.n	800967c <HAL_LTDC_IRQHandler+0xbc>
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f003 0302 	and.w	r3, r3, #2
 800963a:	2b00      	cmp	r3, #0
 800963c:	d01e      	beq.n	800967c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 0202 	bic.w	r2, r2, #2
 800964c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2202      	movs	r2, #2
 8009654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800965c:	f043 0202 	orr.w	r2, r3, #2
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2204      	movs	r2, #4
 800966a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f846 	bl	8009708 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d01b      	beq.n	80096be <HAL_LTDC_IRQHandler+0xfe>
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	f003 0301 	and.w	r3, r3, #1
 800968c:	2b00      	cmp	r3, #0
 800968e:	d016      	beq.n	80096be <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 0201 	bic.w	r2, r2, #1
 800969e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2201      	movs	r2, #1
 80096a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7f9 fc91 	bl	8002fe0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f003 0308 	and.w	r3, r3, #8
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d01b      	beq.n	8009700 <HAL_LTDC_IRQHandler+0x140>
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f003 0308 	and.w	r3, r3, #8
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d016      	beq.n	8009700 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 0208 	bic.w	r2, r2, #8
 80096e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2208      	movs	r2, #8
 80096e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f80e 	bl	800971c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009700:	bf00      	nop
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009730:	b5b0      	push	{r4, r5, r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <HAL_LTDC_ConfigLayer+0x1a>
 8009746:	2302      	movs	r3, #2
 8009748:	e02c      	b.n	80097a4 <HAL_LTDC_ConfigLayer+0x74>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2202      	movs	r2, #2
 8009756:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2134      	movs	r1, #52	; 0x34
 8009760:	fb01 f303 	mul.w	r3, r1, r3
 8009764:	4413      	add	r3, r2
 8009766:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	4614      	mov	r4, r2
 800976e:	461d      	mov	r5, r3
 8009770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800977a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800977c:	682b      	ldr	r3, [r5, #0]
 800977e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	68b9      	ldr	r1, [r7, #8]
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 f849 	bl	800981c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2201      	movs	r2, #1
 8009790:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bdb0      	pop	{r4, r5, r7, pc}

080097ac <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d101      	bne.n	80097c4 <HAL_LTDC_ProgramLineEvent+0x18>
 80097c0:	2302      	movs	r3, #2
 80097c2:	e023      	b.n	800980c <HAL_LTDC_ProgramLineEvent+0x60>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0201 	bic.w	r2, r2, #1
 80097e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80097e4:	4a0c      	ldr	r2, [pc, #48]	; (8009818 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f042 0201 	orr.w	r2, r2, #1
 80097f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	40016800 	.word	0x40016800

0800981c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800981c:	b480      	push	{r7}
 800981e:	b089      	sub	sp, #36	; 0x24
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	0c1b      	lsrs	r3, r3, #16
 8009834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009838:	4413      	add	r3, r2
 800983a:	041b      	lsls	r3, r3, #16
 800983c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	461a      	mov	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	01db      	lsls	r3, r3, #7
 8009848:	4413      	add	r3, r2
 800984a:	3384      	adds	r3, #132	; 0x84
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	6812      	ldr	r2, [r2, #0]
 8009852:	4611      	mov	r1, r2
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	01d2      	lsls	r2, r2, #7
 8009858:	440a      	add	r2, r1
 800985a:	3284      	adds	r2, #132	; 0x84
 800985c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009860:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	0c1b      	lsrs	r3, r3, #16
 800986e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009872:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009874:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4619      	mov	r1, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	01db      	lsls	r3, r3, #7
 8009880:	440b      	add	r3, r1
 8009882:	3384      	adds	r3, #132	; 0x84
 8009884:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800988a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	68da      	ldr	r2, [r3, #12]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800989a:	4413      	add	r3, r2
 800989c:	041b      	lsls	r3, r3, #16
 800989e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	461a      	mov	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	01db      	lsls	r3, r3, #7
 80098aa:	4413      	add	r3, r2
 80098ac:	3384      	adds	r3, #132	; 0x84
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	6812      	ldr	r2, [r2, #0]
 80098b4:	4611      	mov	r1, r2
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	01d2      	lsls	r2, r2, #7
 80098ba:	440a      	add	r2, r1
 80098bc:	3284      	adds	r2, #132	; 0x84
 80098be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80098c2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	689a      	ldr	r2, [r3, #8]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098d2:	4413      	add	r3, r2
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4619      	mov	r1, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	01db      	lsls	r3, r3, #7
 80098e0:	440b      	add	r3, r1
 80098e2:	3384      	adds	r3, #132	; 0x84
 80098e4:	4619      	mov	r1, r3
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	461a      	mov	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	01db      	lsls	r3, r3, #7
 80098f6:	4413      	add	r3, r2
 80098f8:	3384      	adds	r3, #132	; 0x84
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	6812      	ldr	r2, [r2, #0]
 8009900:	4611      	mov	r1, r2
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	01d2      	lsls	r2, r2, #7
 8009906:	440a      	add	r2, r1
 8009908:	3284      	adds	r2, #132	; 0x84
 800990a:	f023 0307 	bic.w	r3, r3, #7
 800990e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	461a      	mov	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	01db      	lsls	r3, r3, #7
 800991a:	4413      	add	r3, r2
 800991c:	3384      	adds	r3, #132	; 0x84
 800991e:	461a      	mov	r2, r3
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800992c:	021b      	lsls	r3, r3, #8
 800992e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009936:	041b      	lsls	r3, r3, #16
 8009938:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	061b      	lsls	r3, r3, #24
 8009940:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	01db      	lsls	r3, r3, #7
 800994c:	4413      	add	r3, r2
 800994e:	3384      	adds	r3, #132	; 0x84
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	461a      	mov	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	01db      	lsls	r3, r3, #7
 800995c:	4413      	add	r3, r2
 800995e:	3384      	adds	r3, #132	; 0x84
 8009960:	461a      	mov	r2, r3
 8009962:	2300      	movs	r3, #0
 8009964:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800996c:	461a      	mov	r2, r3
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	431a      	orrs	r2, r3
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	431a      	orrs	r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4619      	mov	r1, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	01db      	lsls	r3, r3, #7
 8009980:	440b      	add	r3, r1
 8009982:	3384      	adds	r3, #132	; 0x84
 8009984:	4619      	mov	r1, r3
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	4313      	orrs	r3, r2
 800998a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	461a      	mov	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	01db      	lsls	r3, r3, #7
 8009996:	4413      	add	r3, r2
 8009998:	3384      	adds	r3, #132	; 0x84
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	6812      	ldr	r2, [r2, #0]
 80099a0:	4611      	mov	r1, r2
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	01d2      	lsls	r2, r2, #7
 80099a6:	440a      	add	r2, r1
 80099a8:	3284      	adds	r2, #132	; 0x84
 80099aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80099ae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	461a      	mov	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	01db      	lsls	r3, r3, #7
 80099ba:	4413      	add	r3, r2
 80099bc:	3384      	adds	r3, #132	; 0x84
 80099be:	461a      	mov	r2, r3
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	01db      	lsls	r3, r3, #7
 80099d0:	4413      	add	r3, r2
 80099d2:	3384      	adds	r3, #132	; 0x84
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	6812      	ldr	r2, [r2, #0]
 80099da:	4611      	mov	r1, r2
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	01d2      	lsls	r2, r2, #7
 80099e0:	440a      	add	r2, r1
 80099e2:	3284      	adds	r2, #132	; 0x84
 80099e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80099e8:	f023 0307 	bic.w	r3, r3, #7
 80099ec:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	69da      	ldr	r2, [r3, #28]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	68f9      	ldr	r1, [r7, #12]
 80099f8:	6809      	ldr	r1, [r1, #0]
 80099fa:	4608      	mov	r0, r1
 80099fc:	6879      	ldr	r1, [r7, #4]
 80099fe:	01c9      	lsls	r1, r1, #7
 8009a00:	4401      	add	r1, r0
 8009a02:	3184      	adds	r1, #132	; 0x84
 8009a04:	4313      	orrs	r3, r2
 8009a06:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	01db      	lsls	r3, r3, #7
 8009a12:	4413      	add	r3, r2
 8009a14:	3384      	adds	r3, #132	; 0x84
 8009a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	01db      	lsls	r3, r3, #7
 8009a22:	4413      	add	r3, r2
 8009a24:	3384      	adds	r3, #132	; 0x84
 8009a26:	461a      	mov	r2, r3
 8009a28:	2300      	movs	r3, #0
 8009a2a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	461a      	mov	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	01db      	lsls	r3, r3, #7
 8009a36:	4413      	add	r3, r2
 8009a38:	3384      	adds	r3, #132	; 0x84
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d102      	bne.n	8009a50 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8009a4a:	2304      	movs	r3, #4
 8009a4c:	61fb      	str	r3, [r7, #28]
 8009a4e:	e01b      	b.n	8009a88 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d102      	bne.n	8009a5e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	61fb      	str	r3, [r7, #28]
 8009a5c:	e014      	b.n	8009a88 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d00b      	beq.n	8009a7e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d007      	beq.n	8009a7e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d003      	beq.n	8009a7e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009a7a:	2b07      	cmp	r3, #7
 8009a7c:	d102      	bne.n	8009a84 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8009a7e:	2302      	movs	r3, #2
 8009a80:	61fb      	str	r3, [r7, #28]
 8009a82:	e001      	b.n	8009a88 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8009a84:	2301      	movs	r3, #1
 8009a86:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	01db      	lsls	r3, r3, #7
 8009a92:	4413      	add	r3, r2
 8009a94:	3384      	adds	r3, #132	; 0x84
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	6812      	ldr	r2, [r2, #0]
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	01d2      	lsls	r2, r2, #7
 8009aa2:	440a      	add	r2, r1
 8009aa4:	3284      	adds	r2, #132	; 0x84
 8009aa6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009aaa:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab0:	69fa      	ldr	r2, [r7, #28]
 8009ab2:	fb02 f303 	mul.w	r3, r2, r3
 8009ab6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	6859      	ldr	r1, [r3, #4]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	1acb      	subs	r3, r1, r3
 8009ac2:	69f9      	ldr	r1, [r7, #28]
 8009ac4:	fb01 f303 	mul.w	r3, r1, r3
 8009ac8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009aca:	68f9      	ldr	r1, [r7, #12]
 8009acc:	6809      	ldr	r1, [r1, #0]
 8009ace:	4608      	mov	r0, r1
 8009ad0:	6879      	ldr	r1, [r7, #4]
 8009ad2:	01c9      	lsls	r1, r1, #7
 8009ad4:	4401      	add	r1, r0
 8009ad6:	3184      	adds	r1, #132	; 0x84
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	01db      	lsls	r3, r3, #7
 8009ae6:	4413      	add	r3, r2
 8009ae8:	3384      	adds	r3, #132	; 0x84
 8009aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	6812      	ldr	r2, [r2, #0]
 8009af0:	4611      	mov	r1, r2
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	01d2      	lsls	r2, r2, #7
 8009af6:	440a      	add	r2, r1
 8009af8:	3284      	adds	r2, #132	; 0x84
 8009afa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009afe:	f023 0307 	bic.w	r3, r3, #7
 8009b02:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	01db      	lsls	r3, r3, #7
 8009b0e:	4413      	add	r3, r2
 8009b10:	3384      	adds	r3, #132	; 0x84
 8009b12:	461a      	mov	r2, r3
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b18:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	01db      	lsls	r3, r3, #7
 8009b24:	4413      	add	r3, r2
 8009b26:	3384      	adds	r3, #132	; 0x84
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	6812      	ldr	r2, [r2, #0]
 8009b2e:	4611      	mov	r1, r2
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	01d2      	lsls	r2, r2, #7
 8009b34:	440a      	add	r2, r1
 8009b36:	3284      	adds	r2, #132	; 0x84
 8009b38:	f043 0301 	orr.w	r3, r3, #1
 8009b3c:	6013      	str	r3, [r2, #0]
}
 8009b3e:	bf00      	nop
 8009b40:	3724      	adds	r7, #36	; 0x24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
	...

08009b4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d101      	bne.n	8009b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e267      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d075      	beq.n	8009c56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009b6a:	4b88      	ldr	r3, [pc, #544]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	f003 030c 	and.w	r3, r3, #12
 8009b72:	2b04      	cmp	r3, #4
 8009b74:	d00c      	beq.n	8009b90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b76:	4b85      	ldr	r3, [pc, #532]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009b7e:	2b08      	cmp	r3, #8
 8009b80:	d112      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b82:	4b82      	ldr	r3, [pc, #520]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b8e:	d10b      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b90:	4b7e      	ldr	r3, [pc, #504]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d05b      	beq.n	8009c54 <HAL_RCC_OscConfig+0x108>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d157      	bne.n	8009c54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e242      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb0:	d106      	bne.n	8009bc0 <HAL_RCC_OscConfig+0x74>
 8009bb2:	4b76      	ldr	r3, [pc, #472]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a75      	ldr	r2, [pc, #468]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bbc:	6013      	str	r3, [r2, #0]
 8009bbe:	e01d      	b.n	8009bfc <HAL_RCC_OscConfig+0xb0>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bc8:	d10c      	bne.n	8009be4 <HAL_RCC_OscConfig+0x98>
 8009bca:	4b70      	ldr	r3, [pc, #448]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a6f      	ldr	r2, [pc, #444]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009bd4:	6013      	str	r3, [r2, #0]
 8009bd6:	4b6d      	ldr	r3, [pc, #436]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a6c      	ldr	r2, [pc, #432]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	e00b      	b.n	8009bfc <HAL_RCC_OscConfig+0xb0>
 8009be4:	4b69      	ldr	r3, [pc, #420]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a68      	ldr	r2, [pc, #416]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	4b66      	ldr	r3, [pc, #408]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a65      	ldr	r2, [pc, #404]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d013      	beq.n	8009c2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c04:	f7fd fba2 	bl	800734c <HAL_GetTick>
 8009c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c0a:	e008      	b.n	8009c1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009c0c:	f7fd fb9e 	bl	800734c <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	2b64      	cmp	r3, #100	; 0x64
 8009c18:	d901      	bls.n	8009c1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e207      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c1e:	4b5b      	ldr	r3, [pc, #364]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0f0      	beq.n	8009c0c <HAL_RCC_OscConfig+0xc0>
 8009c2a:	e014      	b.n	8009c56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c2c:	f7fd fb8e 	bl	800734c <HAL_GetTick>
 8009c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c32:	e008      	b.n	8009c46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009c34:	f7fd fb8a 	bl	800734c <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b64      	cmp	r3, #100	; 0x64
 8009c40:	d901      	bls.n	8009c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e1f3      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c46:	4b51      	ldr	r3, [pc, #324]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1f0      	bne.n	8009c34 <HAL_RCC_OscConfig+0xe8>
 8009c52:	e000      	b.n	8009c56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 0302 	and.w	r3, r3, #2
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d063      	beq.n	8009d2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009c62:	4b4a      	ldr	r3, [pc, #296]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f003 030c 	and.w	r3, r3, #12
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00b      	beq.n	8009c86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c6e:	4b47      	ldr	r3, [pc, #284]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009c76:	2b08      	cmp	r3, #8
 8009c78:	d11c      	bne.n	8009cb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c7a:	4b44      	ldr	r3, [pc, #272]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d116      	bne.n	8009cb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c86:	4b41      	ldr	r3, [pc, #260]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 0302 	and.w	r3, r3, #2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d005      	beq.n	8009c9e <HAL_RCC_OscConfig+0x152>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d001      	beq.n	8009c9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e1c7      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c9e:	4b3b      	ldr	r3, [pc, #236]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	4937      	ldr	r1, [pc, #220]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009cb2:	e03a      	b.n	8009d2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d020      	beq.n	8009cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009cbc:	4b34      	ldr	r3, [pc, #208]	; (8009d90 <HAL_RCC_OscConfig+0x244>)
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cc2:	f7fd fb43 	bl	800734c <HAL_GetTick>
 8009cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cc8:	e008      	b.n	8009cdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009cca:	f7fd fb3f 	bl	800734c <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d901      	bls.n	8009cdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e1a8      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cdc:	4b2b      	ldr	r3, [pc, #172]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0f0      	beq.n	8009cca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ce8:	4b28      	ldr	r3, [pc, #160]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	00db      	lsls	r3, r3, #3
 8009cf6:	4925      	ldr	r1, [pc, #148]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	600b      	str	r3, [r1, #0]
 8009cfc:	e015      	b.n	8009d2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009cfe:	4b24      	ldr	r3, [pc, #144]	; (8009d90 <HAL_RCC_OscConfig+0x244>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d04:	f7fd fb22 	bl	800734c <HAL_GetTick>
 8009d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d0a:	e008      	b.n	8009d1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009d0c:	f7fd fb1e 	bl	800734c <HAL_GetTick>
 8009d10:	4602      	mov	r2, r0
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	1ad3      	subs	r3, r2, r3
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d901      	bls.n	8009d1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	e187      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d1e:	4b1b      	ldr	r3, [pc, #108]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 0302 	and.w	r3, r3, #2
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1f0      	bne.n	8009d0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f003 0308 	and.w	r3, r3, #8
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d036      	beq.n	8009da4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d016      	beq.n	8009d6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d3e:	4b15      	ldr	r3, [pc, #84]	; (8009d94 <HAL_RCC_OscConfig+0x248>)
 8009d40:	2201      	movs	r2, #1
 8009d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d44:	f7fd fb02 	bl	800734c <HAL_GetTick>
 8009d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d4a:	e008      	b.n	8009d5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d4c:	f7fd fafe 	bl	800734c <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d901      	bls.n	8009d5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e167      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d5e:	4b0b      	ldr	r3, [pc, #44]	; (8009d8c <HAL_RCC_OscConfig+0x240>)
 8009d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d62:	f003 0302 	and.w	r3, r3, #2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d0f0      	beq.n	8009d4c <HAL_RCC_OscConfig+0x200>
 8009d6a:	e01b      	b.n	8009da4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d6c:	4b09      	ldr	r3, [pc, #36]	; (8009d94 <HAL_RCC_OscConfig+0x248>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d72:	f7fd faeb 	bl	800734c <HAL_GetTick>
 8009d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d78:	e00e      	b.n	8009d98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d7a:	f7fd fae7 	bl	800734c <HAL_GetTick>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d907      	bls.n	8009d98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e150      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
 8009d8c:	40023800 	.word	0x40023800
 8009d90:	42470000 	.word	0x42470000
 8009d94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d98:	4b88      	ldr	r3, [pc, #544]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d9c:	f003 0302 	and.w	r3, r3, #2
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1ea      	bne.n	8009d7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 0304 	and.w	r3, r3, #4
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 8097 	beq.w	8009ee0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009db2:	2300      	movs	r3, #0
 8009db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009db6:	4b81      	ldr	r3, [pc, #516]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10f      	bne.n	8009de2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60bb      	str	r3, [r7, #8]
 8009dc6:	4b7d      	ldr	r3, [pc, #500]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dca:	4a7c      	ldr	r2, [pc, #496]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8009dd2:	4b7a      	ldr	r3, [pc, #488]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dda:	60bb      	str	r3, [r7, #8]
 8009ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009dde:	2301      	movs	r3, #1
 8009de0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009de2:	4b77      	ldr	r3, [pc, #476]	; (8009fc0 <HAL_RCC_OscConfig+0x474>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d118      	bne.n	8009e20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009dee:	4b74      	ldr	r3, [pc, #464]	; (8009fc0 <HAL_RCC_OscConfig+0x474>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a73      	ldr	r2, [pc, #460]	; (8009fc0 <HAL_RCC_OscConfig+0x474>)
 8009df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009dfa:	f7fd faa7 	bl	800734c <HAL_GetTick>
 8009dfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e00:	e008      	b.n	8009e14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e02:	f7fd faa3 	bl	800734c <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d901      	bls.n	8009e14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e10c      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e14:	4b6a      	ldr	r3, [pc, #424]	; (8009fc0 <HAL_RCC_OscConfig+0x474>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d0f0      	beq.n	8009e02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d106      	bne.n	8009e36 <HAL_RCC_OscConfig+0x2ea>
 8009e28:	4b64      	ldr	r3, [pc, #400]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e2c:	4a63      	ldr	r2, [pc, #396]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009e2e:	f043 0301 	orr.w	r3, r3, #1
 8009e32:	6713      	str	r3, [r2, #112]	; 0x70
 8009e34:	e01c      	b.n	8009e70 <HAL_RCC_OscConfig+0x324>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	2b05      	cmp	r3, #5
 8009e3c:	d10c      	bne.n	8009e58 <HAL_RCC_OscConfig+0x30c>
 8009e3e:	4b5f      	ldr	r3, [pc, #380]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e42:	4a5e      	ldr	r2, [pc, #376]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009e44:	f043 0304 	orr.w	r3, r3, #4
 8009e48:	6713      	str	r3, [r2, #112]	; 0x70
 8009e4a:	4b5c      	ldr	r3, [pc, #368]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e4e:	4a5b      	ldr	r2, [pc, #364]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009e50:	f043 0301 	orr.w	r3, r3, #1
 8009e54:	6713      	str	r3, [r2, #112]	; 0x70
 8009e56:	e00b      	b.n	8009e70 <HAL_RCC_OscConfig+0x324>
 8009e58:	4b58      	ldr	r3, [pc, #352]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e5c:	4a57      	ldr	r2, [pc, #348]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009e5e:	f023 0301 	bic.w	r3, r3, #1
 8009e62:	6713      	str	r3, [r2, #112]	; 0x70
 8009e64:	4b55      	ldr	r3, [pc, #340]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e68:	4a54      	ldr	r2, [pc, #336]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009e6a:	f023 0304 	bic.w	r3, r3, #4
 8009e6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d015      	beq.n	8009ea4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e78:	f7fd fa68 	bl	800734c <HAL_GetTick>
 8009e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e7e:	e00a      	b.n	8009e96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e80:	f7fd fa64 	bl	800734c <HAL_GetTick>
 8009e84:	4602      	mov	r2, r0
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d901      	bls.n	8009e96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009e92:	2303      	movs	r3, #3
 8009e94:	e0cb      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e96:	4b49      	ldr	r3, [pc, #292]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e9a:	f003 0302 	and.w	r3, r3, #2
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d0ee      	beq.n	8009e80 <HAL_RCC_OscConfig+0x334>
 8009ea2:	e014      	b.n	8009ece <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ea4:	f7fd fa52 	bl	800734c <HAL_GetTick>
 8009ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009eaa:	e00a      	b.n	8009ec2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009eac:	f7fd fa4e 	bl	800734c <HAL_GetTick>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d901      	bls.n	8009ec2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	e0b5      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ec2:	4b3e      	ldr	r3, [pc, #248]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec6:	f003 0302 	and.w	r3, r3, #2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1ee      	bne.n	8009eac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d105      	bne.n	8009ee0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ed4:	4b39      	ldr	r3, [pc, #228]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed8:	4a38      	ldr	r2, [pc, #224]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ede:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 80a1 	beq.w	800a02c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009eea:	4b34      	ldr	r3, [pc, #208]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f003 030c 	and.w	r3, r3, #12
 8009ef2:	2b08      	cmp	r3, #8
 8009ef4:	d05c      	beq.n	8009fb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d141      	bne.n	8009f82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009efe:	4b31      	ldr	r3, [pc, #196]	; (8009fc4 <HAL_RCC_OscConfig+0x478>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f04:	f7fd fa22 	bl	800734c <HAL_GetTick>
 8009f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f0a:	e008      	b.n	8009f1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f0c:	f7fd fa1e 	bl	800734c <HAL_GetTick>
 8009f10:	4602      	mov	r2, r0
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d901      	bls.n	8009f1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e087      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f1e:	4b27      	ldr	r3, [pc, #156]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1f0      	bne.n	8009f0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	69da      	ldr	r2, [r3, #28]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	431a      	orrs	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f38:	019b      	lsls	r3, r3, #6
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f40:	085b      	lsrs	r3, r3, #1
 8009f42:	3b01      	subs	r3, #1
 8009f44:	041b      	lsls	r3, r3, #16
 8009f46:	431a      	orrs	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4c:	061b      	lsls	r3, r3, #24
 8009f4e:	491b      	ldr	r1, [pc, #108]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f54:	4b1b      	ldr	r3, [pc, #108]	; (8009fc4 <HAL_RCC_OscConfig+0x478>)
 8009f56:	2201      	movs	r2, #1
 8009f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f5a:	f7fd f9f7 	bl	800734c <HAL_GetTick>
 8009f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f60:	e008      	b.n	8009f74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f62:	f7fd f9f3 	bl	800734c <HAL_GetTick>
 8009f66:	4602      	mov	r2, r0
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d901      	bls.n	8009f74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009f70:	2303      	movs	r3, #3
 8009f72:	e05c      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f74:	4b11      	ldr	r3, [pc, #68]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d0f0      	beq.n	8009f62 <HAL_RCC_OscConfig+0x416>
 8009f80:	e054      	b.n	800a02c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f82:	4b10      	ldr	r3, [pc, #64]	; (8009fc4 <HAL_RCC_OscConfig+0x478>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f88:	f7fd f9e0 	bl	800734c <HAL_GetTick>
 8009f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f8e:	e008      	b.n	8009fa2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f90:	f7fd f9dc 	bl	800734c <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d901      	bls.n	8009fa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e045      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fa2:	4b06      	ldr	r3, [pc, #24]	; (8009fbc <HAL_RCC_OscConfig+0x470>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1f0      	bne.n	8009f90 <HAL_RCC_OscConfig+0x444>
 8009fae:	e03d      	b.n	800a02c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d107      	bne.n	8009fc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e038      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
 8009fbc:	40023800 	.word	0x40023800
 8009fc0:	40007000 	.word	0x40007000
 8009fc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009fc8:	4b1b      	ldr	r3, [pc, #108]	; (800a038 <HAL_RCC_OscConfig+0x4ec>)
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d028      	beq.n	800a028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d121      	bne.n	800a028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d11a      	bne.n	800a028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ffe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a000:	4293      	cmp	r3, r2
 800a002:	d111      	bne.n	800a028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00e:	085b      	lsrs	r3, r3, #1
 800a010:	3b01      	subs	r3, #1
 800a012:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a014:	429a      	cmp	r2, r3
 800a016:	d107      	bne.n	800a028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a022:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a024:	429a      	cmp	r2, r3
 800a026:	d001      	beq.n	800a02c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e000      	b.n	800a02e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	40023800 	.word	0x40023800

0800a03c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e0cc      	b.n	800a1ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a050:	4b68      	ldr	r3, [pc, #416]	; (800a1f4 <HAL_RCC_ClockConfig+0x1b8>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 030f 	and.w	r3, r3, #15
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d90c      	bls.n	800a078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a05e:	4b65      	ldr	r3, [pc, #404]	; (800a1f4 <HAL_RCC_ClockConfig+0x1b8>)
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	b2d2      	uxtb	r2, r2
 800a064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a066:	4b63      	ldr	r3, [pc, #396]	; (800a1f4 <HAL_RCC_ClockConfig+0x1b8>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 030f 	and.w	r3, r3, #15
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	429a      	cmp	r2, r3
 800a072:	d001      	beq.n	800a078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e0b8      	b.n	800a1ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 0302 	and.w	r3, r3, #2
 800a080:	2b00      	cmp	r3, #0
 800a082:	d020      	beq.n	800a0c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 0304 	and.w	r3, r3, #4
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d005      	beq.n	800a09c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a090:	4b59      	ldr	r3, [pc, #356]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	4a58      	ldr	r2, [pc, #352]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a09a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 0308 	and.w	r3, r3, #8
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d005      	beq.n	800a0b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a0a8:	4b53      	ldr	r3, [pc, #332]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	4a52      	ldr	r2, [pc, #328]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a0b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0b4:	4b50      	ldr	r3, [pc, #320]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	494d      	ldr	r1, [pc, #308]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d044      	beq.n	800a15c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d107      	bne.n	800a0ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0da:	4b47      	ldr	r3, [pc, #284]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d119      	bne.n	800a11a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e07f      	b.n	800a1ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d003      	beq.n	800a0fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a0f6:	2b03      	cmp	r3, #3
 800a0f8:	d107      	bne.n	800a10a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0fa:	4b3f      	ldr	r3, [pc, #252]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d109      	bne.n	800a11a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e06f      	b.n	800a1ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a10a:	4b3b      	ldr	r3, [pc, #236]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0302 	and.w	r3, r3, #2
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e067      	b.n	800a1ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a11a:	4b37      	ldr	r3, [pc, #220]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	f023 0203 	bic.w	r2, r3, #3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	4934      	ldr	r1, [pc, #208]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a128:	4313      	orrs	r3, r2
 800a12a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a12c:	f7fd f90e 	bl	800734c <HAL_GetTick>
 800a130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a132:	e00a      	b.n	800a14a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a134:	f7fd f90a 	bl	800734c <HAL_GetTick>
 800a138:	4602      	mov	r2, r0
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a142:	4293      	cmp	r3, r2
 800a144:	d901      	bls.n	800a14a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e04f      	b.n	800a1ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a14a:	4b2b      	ldr	r3, [pc, #172]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f003 020c 	and.w	r2, r3, #12
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	429a      	cmp	r2, r3
 800a15a:	d1eb      	bne.n	800a134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a15c:	4b25      	ldr	r3, [pc, #148]	; (800a1f4 <HAL_RCC_ClockConfig+0x1b8>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 030f 	and.w	r3, r3, #15
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d20c      	bcs.n	800a184 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a16a:	4b22      	ldr	r3, [pc, #136]	; (800a1f4 <HAL_RCC_ClockConfig+0x1b8>)
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	b2d2      	uxtb	r2, r2
 800a170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a172:	4b20      	ldr	r3, [pc, #128]	; (800a1f4 <HAL_RCC_ClockConfig+0x1b8>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 030f 	and.w	r3, r3, #15
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d001      	beq.n	800a184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e032      	b.n	800a1ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 0304 	and.w	r3, r3, #4
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d008      	beq.n	800a1a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a190:	4b19      	ldr	r3, [pc, #100]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	4916      	ldr	r1, [pc, #88]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0308 	and.w	r3, r3, #8
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d009      	beq.n	800a1c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a1ae:	4b12      	ldr	r3, [pc, #72]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	00db      	lsls	r3, r3, #3
 800a1bc:	490e      	ldr	r1, [pc, #56]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a1c2:	f000 f821 	bl	800a208 <HAL_RCC_GetSysClockFreq>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	4b0b      	ldr	r3, [pc, #44]	; (800a1f8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	091b      	lsrs	r3, r3, #4
 800a1ce:	f003 030f 	and.w	r3, r3, #15
 800a1d2:	490a      	ldr	r1, [pc, #40]	; (800a1fc <HAL_RCC_ClockConfig+0x1c0>)
 800a1d4:	5ccb      	ldrb	r3, [r1, r3]
 800a1d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1da:	4a09      	ldr	r2, [pc, #36]	; (800a200 <HAL_RCC_ClockConfig+0x1c4>)
 800a1dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a1de:	4b09      	ldr	r3, [pc, #36]	; (800a204 <HAL_RCC_ClockConfig+0x1c8>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7f7 fe92 	bl	8001f0c <HAL_InitTick>

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	40023c00 	.word	0x40023c00
 800a1f8:	40023800 	.word	0x40023800
 800a1fc:	0802919c 	.word	0x0802919c
 800a200:	20000080 	.word	0x20000080
 800a204:	20000084 	.word	0x20000084

0800a208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a20c:	b094      	sub	sp, #80	; 0x50
 800a20e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a210:	2300      	movs	r3, #0
 800a212:	647b      	str	r3, [r7, #68]	; 0x44
 800a214:	2300      	movs	r3, #0
 800a216:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a218:	2300      	movs	r3, #0
 800a21a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a21c:	2300      	movs	r3, #0
 800a21e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a220:	4b79      	ldr	r3, [pc, #484]	; (800a408 <HAL_RCC_GetSysClockFreq+0x200>)
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f003 030c 	and.w	r3, r3, #12
 800a228:	2b08      	cmp	r3, #8
 800a22a:	d00d      	beq.n	800a248 <HAL_RCC_GetSysClockFreq+0x40>
 800a22c:	2b08      	cmp	r3, #8
 800a22e:	f200 80e1 	bhi.w	800a3f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a232:	2b00      	cmp	r3, #0
 800a234:	d002      	beq.n	800a23c <HAL_RCC_GetSysClockFreq+0x34>
 800a236:	2b04      	cmp	r3, #4
 800a238:	d003      	beq.n	800a242 <HAL_RCC_GetSysClockFreq+0x3a>
 800a23a:	e0db      	b.n	800a3f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a23c:	4b73      	ldr	r3, [pc, #460]	; (800a40c <HAL_RCC_GetSysClockFreq+0x204>)
 800a23e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a240:	e0db      	b.n	800a3fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a242:	4b73      	ldr	r3, [pc, #460]	; (800a410 <HAL_RCC_GetSysClockFreq+0x208>)
 800a244:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a246:	e0d8      	b.n	800a3fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a248:	4b6f      	ldr	r3, [pc, #444]	; (800a408 <HAL_RCC_GetSysClockFreq+0x200>)
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a250:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a252:	4b6d      	ldr	r3, [pc, #436]	; (800a408 <HAL_RCC_GetSysClockFreq+0x200>)
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d063      	beq.n	800a326 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a25e:	4b6a      	ldr	r3, [pc, #424]	; (800a408 <HAL_RCC_GetSysClockFreq+0x200>)
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	099b      	lsrs	r3, r3, #6
 800a264:	2200      	movs	r2, #0
 800a266:	63bb      	str	r3, [r7, #56]	; 0x38
 800a268:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a270:	633b      	str	r3, [r7, #48]	; 0x30
 800a272:	2300      	movs	r3, #0
 800a274:	637b      	str	r3, [r7, #52]	; 0x34
 800a276:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a27a:	4622      	mov	r2, r4
 800a27c:	462b      	mov	r3, r5
 800a27e:	f04f 0000 	mov.w	r0, #0
 800a282:	f04f 0100 	mov.w	r1, #0
 800a286:	0159      	lsls	r1, r3, #5
 800a288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a28c:	0150      	lsls	r0, r2, #5
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4621      	mov	r1, r4
 800a294:	1a51      	subs	r1, r2, r1
 800a296:	6139      	str	r1, [r7, #16]
 800a298:	4629      	mov	r1, r5
 800a29a:	eb63 0301 	sbc.w	r3, r3, r1
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	f04f 0200 	mov.w	r2, #0
 800a2a4:	f04f 0300 	mov.w	r3, #0
 800a2a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a2ac:	4659      	mov	r1, fp
 800a2ae:	018b      	lsls	r3, r1, #6
 800a2b0:	4651      	mov	r1, sl
 800a2b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a2b6:	4651      	mov	r1, sl
 800a2b8:	018a      	lsls	r2, r1, #6
 800a2ba:	4651      	mov	r1, sl
 800a2bc:	ebb2 0801 	subs.w	r8, r2, r1
 800a2c0:	4659      	mov	r1, fp
 800a2c2:	eb63 0901 	sbc.w	r9, r3, r1
 800a2c6:	f04f 0200 	mov.w	r2, #0
 800a2ca:	f04f 0300 	mov.w	r3, #0
 800a2ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a2da:	4690      	mov	r8, r2
 800a2dc:	4699      	mov	r9, r3
 800a2de:	4623      	mov	r3, r4
 800a2e0:	eb18 0303 	adds.w	r3, r8, r3
 800a2e4:	60bb      	str	r3, [r7, #8]
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	eb49 0303 	adc.w	r3, r9, r3
 800a2ec:	60fb      	str	r3, [r7, #12]
 800a2ee:	f04f 0200 	mov.w	r2, #0
 800a2f2:	f04f 0300 	mov.w	r3, #0
 800a2f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	024b      	lsls	r3, r1, #9
 800a2fe:	4621      	mov	r1, r4
 800a300:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a304:	4621      	mov	r1, r4
 800a306:	024a      	lsls	r2, r1, #9
 800a308:	4610      	mov	r0, r2
 800a30a:	4619      	mov	r1, r3
 800a30c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a30e:	2200      	movs	r2, #0
 800a310:	62bb      	str	r3, [r7, #40]	; 0x28
 800a312:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a314:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a318:	f7f6 fac0 	bl	800089c <__aeabi_uldivmod>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4613      	mov	r3, r2
 800a322:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a324:	e058      	b.n	800a3d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a326:	4b38      	ldr	r3, [pc, #224]	; (800a408 <HAL_RCC_GetSysClockFreq+0x200>)
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	099b      	lsrs	r3, r3, #6
 800a32c:	2200      	movs	r2, #0
 800a32e:	4618      	mov	r0, r3
 800a330:	4611      	mov	r1, r2
 800a332:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a336:	623b      	str	r3, [r7, #32]
 800a338:	2300      	movs	r3, #0
 800a33a:	627b      	str	r3, [r7, #36]	; 0x24
 800a33c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a340:	4642      	mov	r2, r8
 800a342:	464b      	mov	r3, r9
 800a344:	f04f 0000 	mov.w	r0, #0
 800a348:	f04f 0100 	mov.w	r1, #0
 800a34c:	0159      	lsls	r1, r3, #5
 800a34e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a352:	0150      	lsls	r0, r2, #5
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4641      	mov	r1, r8
 800a35a:	ebb2 0a01 	subs.w	sl, r2, r1
 800a35e:	4649      	mov	r1, r9
 800a360:	eb63 0b01 	sbc.w	fp, r3, r1
 800a364:	f04f 0200 	mov.w	r2, #0
 800a368:	f04f 0300 	mov.w	r3, #0
 800a36c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a370:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a374:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a378:	ebb2 040a 	subs.w	r4, r2, sl
 800a37c:	eb63 050b 	sbc.w	r5, r3, fp
 800a380:	f04f 0200 	mov.w	r2, #0
 800a384:	f04f 0300 	mov.w	r3, #0
 800a388:	00eb      	lsls	r3, r5, #3
 800a38a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a38e:	00e2      	lsls	r2, r4, #3
 800a390:	4614      	mov	r4, r2
 800a392:	461d      	mov	r5, r3
 800a394:	4643      	mov	r3, r8
 800a396:	18e3      	adds	r3, r4, r3
 800a398:	603b      	str	r3, [r7, #0]
 800a39a:	464b      	mov	r3, r9
 800a39c:	eb45 0303 	adc.w	r3, r5, r3
 800a3a0:	607b      	str	r3, [r7, #4]
 800a3a2:	f04f 0200 	mov.w	r2, #0
 800a3a6:	f04f 0300 	mov.w	r3, #0
 800a3aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	028b      	lsls	r3, r1, #10
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	028a      	lsls	r2, r1, #10
 800a3bc:	4610      	mov	r0, r2
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	61bb      	str	r3, [r7, #24]
 800a3c6:	61fa      	str	r2, [r7, #28]
 800a3c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a3cc:	f7f6 fa66 	bl	800089c <__aeabi_uldivmod>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a3d8:	4b0b      	ldr	r3, [pc, #44]	; (800a408 <HAL_RCC_GetSysClockFreq+0x200>)
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	0c1b      	lsrs	r3, r3, #16
 800a3de:	f003 0303 	and.w	r3, r3, #3
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a3e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a3f2:	e002      	b.n	800a3fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a3f4:	4b05      	ldr	r3, [pc, #20]	; (800a40c <HAL_RCC_GetSysClockFreq+0x204>)
 800a3f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a3f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a3fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3750      	adds	r7, #80	; 0x50
 800a400:	46bd      	mov	sp, r7
 800a402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a406:	bf00      	nop
 800a408:	40023800 	.word	0x40023800
 800a40c:	00f42400 	.word	0x00f42400
 800a410:	007a1200 	.word	0x007a1200

0800a414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a414:	b480      	push	{r7}
 800a416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a418:	4b03      	ldr	r3, [pc, #12]	; (800a428 <HAL_RCC_GetHCLKFreq+0x14>)
 800a41a:	681b      	ldr	r3, [r3, #0]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	20000080 	.word	0x20000080

0800a42c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a430:	f7ff fff0 	bl	800a414 <HAL_RCC_GetHCLKFreq>
 800a434:	4602      	mov	r2, r0
 800a436:	4b05      	ldr	r3, [pc, #20]	; (800a44c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	0a9b      	lsrs	r3, r3, #10
 800a43c:	f003 0307 	and.w	r3, r3, #7
 800a440:	4903      	ldr	r1, [pc, #12]	; (800a450 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a442:	5ccb      	ldrb	r3, [r1, r3]
 800a444:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a448:	4618      	mov	r0, r3
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	40023800 	.word	0x40023800
 800a450:	080291ac 	.word	0x080291ac

0800a454 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	220f      	movs	r2, #15
 800a462:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a464:	4b12      	ldr	r3, [pc, #72]	; (800a4b0 <HAL_RCC_GetClockConfig+0x5c>)
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	f003 0203 	and.w	r2, r3, #3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a470:	4b0f      	ldr	r3, [pc, #60]	; (800a4b0 <HAL_RCC_GetClockConfig+0x5c>)
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a47c:	4b0c      	ldr	r3, [pc, #48]	; (800a4b0 <HAL_RCC_GetClockConfig+0x5c>)
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a488:	4b09      	ldr	r3, [pc, #36]	; (800a4b0 <HAL_RCC_GetClockConfig+0x5c>)
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	08db      	lsrs	r3, r3, #3
 800a48e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a496:	4b07      	ldr	r3, [pc, #28]	; (800a4b4 <HAL_RCC_GetClockConfig+0x60>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 020f 	and.w	r2, r3, #15
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	601a      	str	r2, [r3, #0]
}
 800a4a2:	bf00      	nop
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	40023800 	.word	0x40023800
 800a4b4:	40023c00 	.word	0x40023c00

0800a4b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0301 	and.w	r3, r3, #1
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10b      	bne.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d105      	bne.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d075      	beq.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a4ec:	4b91      	ldr	r3, [pc, #580]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a4f2:	f7fc ff2b 	bl	800734c <HAL_GetTick>
 800a4f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a4f8:	e008      	b.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a4fa:	f7fc ff27 	bl	800734c <HAL_GetTick>
 800a4fe:	4602      	mov	r2, r0
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	2b02      	cmp	r3, #2
 800a506:	d901      	bls.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e189      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a50c:	4b8a      	ldr	r3, [pc, #552]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1f0      	bne.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b00      	cmp	r3, #0
 800a522:	d009      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	019a      	lsls	r2, r3, #6
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	071b      	lsls	r3, r3, #28
 800a530:	4981      	ldr	r1, [pc, #516]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a532:	4313      	orrs	r3, r2
 800a534:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0302 	and.w	r3, r3, #2
 800a540:	2b00      	cmp	r3, #0
 800a542:	d01f      	beq.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a544:	4b7c      	ldr	r3, [pc, #496]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a54a:	0f1b      	lsrs	r3, r3, #28
 800a54c:	f003 0307 	and.w	r3, r3, #7
 800a550:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	019a      	lsls	r2, r3, #6
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	061b      	lsls	r3, r3, #24
 800a55e:	431a      	orrs	r2, r3
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	071b      	lsls	r3, r3, #28
 800a564:	4974      	ldr	r1, [pc, #464]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a566:	4313      	orrs	r3, r2
 800a568:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a56c:	4b72      	ldr	r3, [pc, #456]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a56e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a572:	f023 021f 	bic.w	r2, r3, #31
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	69db      	ldr	r3, [r3, #28]
 800a57a:	3b01      	subs	r3, #1
 800a57c:	496e      	ldr	r1, [pc, #440]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a57e:	4313      	orrs	r3, r2
 800a580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00d      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	019a      	lsls	r2, r3, #6
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	061b      	lsls	r3, r3, #24
 800a59c:	431a      	orrs	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	071b      	lsls	r3, r3, #28
 800a5a4:	4964      	ldr	r1, [pc, #400]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a5ac:	4b61      	ldr	r3, [pc, #388]	; (800a734 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a5b2:	f7fc fecb 	bl	800734c <HAL_GetTick>
 800a5b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a5b8:	e008      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a5ba:	f7fc fec7 	bl	800734c <HAL_GetTick>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d901      	bls.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e129      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a5cc:	4b5a      	ldr	r3, [pc, #360]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d0f0      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 0304 	and.w	r3, r3, #4
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d105      	bne.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d079      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a5f0:	4b52      	ldr	r3, [pc, #328]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a5f6:	f7fc fea9 	bl	800734c <HAL_GetTick>
 800a5fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a5fc:	e008      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a5fe:	f7fc fea5 	bl	800734c <HAL_GetTick>
 800a602:	4602      	mov	r2, r0
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d901      	bls.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e107      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a610:	4b49      	ldr	r3, [pc, #292]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a61c:	d0ef      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0304 	and.w	r3, r3, #4
 800a626:	2b00      	cmp	r3, #0
 800a628:	d020      	beq.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a62a:	4b43      	ldr	r3, [pc, #268]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a630:	0f1b      	lsrs	r3, r3, #28
 800a632:	f003 0307 	and.w	r3, r3, #7
 800a636:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	019a      	lsls	r2, r3, #6
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	061b      	lsls	r3, r3, #24
 800a644:	431a      	orrs	r2, r3
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	071b      	lsls	r3, r3, #28
 800a64a:	493b      	ldr	r1, [pc, #236]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a64c:	4313      	orrs	r3, r2
 800a64e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a652:	4b39      	ldr	r3, [pc, #228]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a658:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a1b      	ldr	r3, [r3, #32]
 800a660:	3b01      	subs	r3, #1
 800a662:	021b      	lsls	r3, r3, #8
 800a664:	4934      	ldr	r1, [pc, #208]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a666:	4313      	orrs	r3, r2
 800a668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0308 	and.w	r3, r3, #8
 800a674:	2b00      	cmp	r3, #0
 800a676:	d01e      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a678:	4b2f      	ldr	r3, [pc, #188]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a67e:	0e1b      	lsrs	r3, r3, #24
 800a680:	f003 030f 	and.w	r3, r3, #15
 800a684:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	019a      	lsls	r2, r3, #6
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	061b      	lsls	r3, r3, #24
 800a690:	431a      	orrs	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	071b      	lsls	r3, r3, #28
 800a698:	4927      	ldr	r1, [pc, #156]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a69a:	4313      	orrs	r3, r2
 800a69c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a6a0:	4b25      	ldr	r3, [pc, #148]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a6a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	4922      	ldr	r1, [pc, #136]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a6b6:	4b21      	ldr	r3, [pc, #132]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a6bc:	f7fc fe46 	bl	800734c <HAL_GetTick>
 800a6c0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a6c2:	e008      	b.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a6c4:	f7fc fe42 	bl	800734c <HAL_GetTick>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d901      	bls.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e0a4      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a6d6:	4b18      	ldr	r3, [pc, #96]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6e2:	d1ef      	bne.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0320 	and.w	r3, r3, #32
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 808b 	beq.w	800a808 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	60fb      	str	r3, [r7, #12]
 800a6f6:	4b10      	ldr	r3, [pc, #64]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fa:	4a0f      	ldr	r2, [pc, #60]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a6fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a700:	6413      	str	r3, [r2, #64]	; 0x40
 800a702:	4b0d      	ldr	r3, [pc, #52]	; (800a738 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a70e:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a0b      	ldr	r2, [pc, #44]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a718:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a71a:	f7fc fe17 	bl	800734c <HAL_GetTick>
 800a71e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a720:	e010      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a722:	f7fc fe13 	bl	800734c <HAL_GetTick>
 800a726:	4602      	mov	r2, r0
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d909      	bls.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800a730:	2303      	movs	r3, #3
 800a732:	e075      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800a734:	42470068 	.word	0x42470068
 800a738:	40023800 	.word	0x40023800
 800a73c:	42470070 	.word	0x42470070
 800a740:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a744:	4b38      	ldr	r3, [pc, #224]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d0e8      	beq.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a750:	4b36      	ldr	r3, [pc, #216]	; (800a82c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a758:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d02f      	beq.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d028      	beq.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a76e:	4b2f      	ldr	r3, [pc, #188]	; (800a82c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a776:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a778:	4b2d      	ldr	r3, [pc, #180]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a77a:	2201      	movs	r2, #1
 800a77c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a77e:	4b2c      	ldr	r3, [pc, #176]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a784:	4a29      	ldr	r2, [pc, #164]	; (800a82c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a78a:	4b28      	ldr	r3, [pc, #160]	; (800a82c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	2b01      	cmp	r3, #1
 800a794:	d114      	bne.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a796:	f7fc fdd9 	bl	800734c <HAL_GetTick>
 800a79a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a79c:	e00a      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a79e:	f7fc fdd5 	bl	800734c <HAL_GetTick>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d901      	bls.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e035      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7b4:	4b1d      	ldr	r3, [pc, #116]	; (800a82c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a7b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7b8:	f003 0302 	and.w	r3, r3, #2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d0ee      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7cc:	d10d      	bne.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a7ce:	4b17      	ldr	r3, [pc, #92]	; (800a82c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a7de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7e2:	4912      	ldr	r1, [pc, #72]	; (800a82c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	608b      	str	r3, [r1, #8]
 800a7e8:	e005      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800a7ea:	4b10      	ldr	r3, [pc, #64]	; (800a82c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	4a0f      	ldr	r2, [pc, #60]	; (800a82c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a7f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a7f4:	6093      	str	r3, [r2, #8]
 800a7f6:	4b0d      	ldr	r3, [pc, #52]	; (800a82c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a7f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a802:	490a      	ldr	r1, [pc, #40]	; (800a82c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a804:	4313      	orrs	r3, r2
 800a806:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0310 	and.w	r3, r3, #16
 800a810:	2b00      	cmp	r3, #0
 800a812:	d004      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a81a:	4b06      	ldr	r3, [pc, #24]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800a81c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3718      	adds	r7, #24
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	40007000 	.word	0x40007000
 800a82c:	40023800 	.word	0x40023800
 800a830:	42470e40 	.word	0x42470e40
 800a834:	424711e0 	.word	0x424711e0

0800a838 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d101      	bne.n	800a84a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	e01c      	b.n	800a884 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	795b      	ldrb	r3, [r3, #5]
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	d105      	bne.n	800a860 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7f7 fa24 	bl	8001ca8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2202      	movs	r2, #2
 800a864:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f042 0204 	orr.w	r2, r2, #4
 800a874:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a896:	2300      	movs	r3, #0
 800a898:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	791b      	ldrb	r3, [r3, #4]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d101      	bne.n	800a8a6 <HAL_RNG_GenerateRandomNumber+0x1a>
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	e044      	b.n	800a930 <HAL_RNG_GenerateRandomNumber+0xa4>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	795b      	ldrb	r3, [r3, #5]
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d133      	bne.n	800a91e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2202      	movs	r2, #2
 800a8ba:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a8bc:	f7fc fd46 	bl	800734c <HAL_GetTick>
 800a8c0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a8c2:	e018      	b.n	800a8f6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a8c4:	f7fc fd42 	bl	800734c <HAL_GetTick>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d911      	bls.n	800a8f6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	f003 0301 	and.w	r3, r3, #1
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d00a      	beq.n	800a8f6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2202      	movs	r2, #2
 800a8ea:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e01c      	b.n	800a930 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	f003 0301 	and.w	r3, r3, #1
 800a900:	2b01      	cmp	r3, #1
 800a902:	d1df      	bne.n	800a8c4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	689a      	ldr	r2, [r3, #8]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68da      	ldr	r2, [r3, #12]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	715a      	strb	r2, [r3, #5]
 800a91c:	e004      	b.n	800a928 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2204      	movs	r2, #4
 800a922:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	711a      	strb	r2, [r3, #4]

  return status;
 800a92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 800a940:	2300      	movs	r3, #0
 800a942:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	f003 0320 	and.w	r3, r3, #32
 800a94e:	2b20      	cmp	r3, #32
 800a950:	d105      	bne.n	800a95e <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2210      	movs	r2, #16
 800a956:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800a958:	2301      	movs	r3, #1
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	e00b      	b.n	800a976 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a968:	2b40      	cmp	r3, #64	; 0x40
 800a96a:	d104      	bne.n	800a976 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2208      	movs	r2, #8
 800a970:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800a972:	2301      	movs	r3, #1
 800a974:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d10b      	bne.n	800a994 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2204      	movs	r2, #4
 800a980:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f839 	bl	800a9fa <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800a990:	605a      	str	r2, [r3, #4]

    return;
 800a992:	e024      	b.n	800a9de <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d11d      	bne.n	800a9de <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0208 	bic.w	r2, r2, #8
 800a9b0:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	689a      	ldr	r2, [r3, #8]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	795b      	ldrb	r3, [r3, #5]
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	2b04      	cmp	r3, #4
 800a9c4:	d00b      	beq.n	800a9de <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f803 	bl	800a9e4 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800a9ee:	bf00      	nop
 800a9f0:	370c      	adds	r7, #12
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b083      	sub	sp, #12
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800aa02:	bf00      	nop
 800aa04:	370c      	adds	r7, #12
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b082      	sub	sp, #8
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d101      	bne.n	800aa22 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e025      	b.n	800aa6e <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d106      	bne.n	800aa3c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7f7 fa5e 	bl	8001ef8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2202      	movs	r2, #2
 800aa40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	3304      	adds	r3, #4
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	4610      	mov	r0, r2
 800aa50:	f001 fac6 	bl	800bfe0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6818      	ldr	r0, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	f001 fb1b 	bl	800c09a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b086      	sub	sp, #24
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	60b9      	str	r1, [r7, #8]
 800aa80:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa88:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d101      	bne.n	800aa94 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800aa90:	2302      	movs	r3, #2
 800aa92:	e021      	b.n	800aad8 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800aa94:	7dfb      	ldrb	r3, [r7, #23]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d002      	beq.n	800aaa0 <HAL_SDRAM_SendCommand+0x2a>
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	2b05      	cmp	r3, #5
 800aa9e:	d118      	bne.n	800aad2 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	68b9      	ldr	r1, [r7, #8]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f001 fb5b 	bl	800c16c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d104      	bne.n	800aac8 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2205      	movs	r2, #5
 800aac2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aac6:	e006      	b.n	800aad6 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aad0:	e001      	b.n	800aad6 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e000      	b.n	800aad8 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3718      	adds	r7, #24
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d101      	bne.n	800aafa <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	e016      	b.n	800ab28 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d10f      	bne.n	800ab26 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2202      	movs	r2, #2
 800ab0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	6839      	ldr	r1, [r7, #0]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f001 fb66 	bl	800c1e6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	e000      	b.n	800ab28 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e07b      	b.n	800ac3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d108      	bne.n	800ab5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab52:	d009      	beq.n	800ab68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	61da      	str	r2, [r3, #28]
 800ab5a:	e005      	b.n	800ab68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d106      	bne.n	800ab88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7f7 f8b8 	bl	8001cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800abb0:	431a      	orrs	r2, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abba:	431a      	orrs	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	f003 0302 	and.w	r3, r3, #2
 800abc4:	431a      	orrs	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	695b      	ldr	r3, [r3, #20]
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	431a      	orrs	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abd8:	431a      	orrs	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	69db      	ldr	r3, [r3, #28]
 800abde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abe2:	431a      	orrs	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a1b      	ldr	r3, [r3, #32]
 800abe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abec:	ea42 0103 	orr.w	r1, r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	430a      	orrs	r2, r1
 800abfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	0c1b      	lsrs	r3, r3, #16
 800ac06:	f003 0104 	and.w	r1, r3, #4
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0e:	f003 0210 	and.w	r2, r3, #16
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	430a      	orrs	r2, r1
 800ac18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	69da      	ldr	r2, [r3, #28]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b088      	sub	sp, #32
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	60f8      	str	r0, [r7, #12]
 800ac4a:	60b9      	str	r1, [r7, #8]
 800ac4c:	603b      	str	r3, [r7, #0]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d101      	bne.n	800ac64 <HAL_SPI_Transmit+0x22>
 800ac60:	2302      	movs	r3, #2
 800ac62:	e126      	b.n	800aeb2 <HAL_SPI_Transmit+0x270>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac6c:	f7fc fb6e 	bl	800734c <HAL_GetTick>
 800ac70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ac72:	88fb      	ldrh	r3, [r7, #6]
 800ac74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d002      	beq.n	800ac88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ac82:	2302      	movs	r3, #2
 800ac84:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ac86:	e10b      	b.n	800aea0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d002      	beq.n	800ac94 <HAL_SPI_Transmit+0x52>
 800ac8e:	88fb      	ldrh	r3, [r7, #6]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d102      	bne.n	800ac9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ac98:	e102      	b.n	800aea0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2203      	movs	r2, #3
 800ac9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2200      	movs	r2, #0
 800aca6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	88fa      	ldrh	r2, [r7, #6]
 800acb2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	88fa      	ldrh	r2, [r7, #6]
 800acb8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ace0:	d10f      	bne.n	800ad02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad0c:	2b40      	cmp	r3, #64	; 0x40
 800ad0e:	d007      	beq.n	800ad20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad28:	d14b      	bne.n	800adc2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d002      	beq.n	800ad38 <HAL_SPI_Transmit+0xf6>
 800ad32:	8afb      	ldrh	r3, [r7, #22]
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d13e      	bne.n	800adb6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3c:	881a      	ldrh	r2, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad48:	1c9a      	adds	r2, r3, #2
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	3b01      	subs	r3, #1
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ad5c:	e02b      	b.n	800adb6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	f003 0302 	and.w	r3, r3, #2
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d112      	bne.n	800ad92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad70:	881a      	ldrh	r2, [r3, #0]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7c:	1c9a      	adds	r2, r3, #2
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	86da      	strh	r2, [r3, #54]	; 0x36
 800ad90:	e011      	b.n	800adb6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad92:	f7fc fadb 	bl	800734c <HAL_GetTick>
 800ad96:	4602      	mov	r2, r0
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	683a      	ldr	r2, [r7, #0]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d803      	bhi.n	800adaa <HAL_SPI_Transmit+0x168>
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada8:	d102      	bne.n	800adb0 <HAL_SPI_Transmit+0x16e>
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d102      	bne.n	800adb6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800adb0:	2303      	movs	r3, #3
 800adb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800adb4:	e074      	b.n	800aea0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adba:	b29b      	uxth	r3, r3
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1ce      	bne.n	800ad5e <HAL_SPI_Transmit+0x11c>
 800adc0:	e04c      	b.n	800ae5c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d002      	beq.n	800add0 <HAL_SPI_Transmit+0x18e>
 800adca:	8afb      	ldrh	r3, [r7, #22]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d140      	bne.n	800ae52 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	330c      	adds	r3, #12
 800adda:	7812      	ldrb	r2, [r2, #0]
 800addc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade2:	1c5a      	adds	r2, r3, #1
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adec:	b29b      	uxth	r3, r3
 800adee:	3b01      	subs	r3, #1
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800adf6:	e02c      	b.n	800ae52 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	f003 0302 	and.w	r3, r3, #2
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d113      	bne.n	800ae2e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	330c      	adds	r3, #12
 800ae10:	7812      	ldrb	r2, [r2, #0]
 800ae12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae18:	1c5a      	adds	r2, r3, #1
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	3b01      	subs	r3, #1
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	86da      	strh	r2, [r3, #54]	; 0x36
 800ae2c:	e011      	b.n	800ae52 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae2e:	f7fc fa8d 	bl	800734c <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d803      	bhi.n	800ae46 <HAL_SPI_Transmit+0x204>
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae44:	d102      	bne.n	800ae4c <HAL_SPI_Transmit+0x20a>
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d102      	bne.n	800ae52 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ae50:	e026      	b.n	800aea0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1cd      	bne.n	800adf8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ae5c:	69ba      	ldr	r2, [r7, #24]
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f000 fbcb 	bl	800b5fc <SPI_EndRxTxTransaction>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d002      	beq.n	800ae72 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2220      	movs	r2, #32
 800ae70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10a      	bne.n	800ae90 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	613b      	str	r3, [r7, #16]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	613b      	str	r3, [r7, #16]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	613b      	str	r3, [r7, #16]
 800ae8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	77fb      	strb	r3, [r7, #31]
 800ae9c:	e000      	b.n	800aea0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800ae9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aeb0:	7ffb      	ldrb	r3, [r7, #31]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3720      	adds	r7, #32
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b088      	sub	sp, #32
 800aebe:	af02      	add	r7, sp, #8
 800aec0:	60f8      	str	r0, [r7, #12]
 800aec2:	60b9      	str	r1, [r7, #8]
 800aec4:	603b      	str	r3, [r7, #0]
 800aec6:	4613      	mov	r3, r2
 800aec8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aeca:	2300      	movs	r3, #0
 800aecc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aed6:	d112      	bne.n	800aefe <HAL_SPI_Receive+0x44>
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10e      	bne.n	800aefe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2204      	movs	r2, #4
 800aee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800aee8:	88fa      	ldrh	r2, [r7, #6]
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	4613      	mov	r3, r2
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	68b9      	ldr	r1, [r7, #8]
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f000 f8f1 	bl	800b0dc <HAL_SPI_TransmitReceive>
 800aefa:	4603      	mov	r3, r0
 800aefc:	e0ea      	b.n	800b0d4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800af04:	2b01      	cmp	r3, #1
 800af06:	d101      	bne.n	800af0c <HAL_SPI_Receive+0x52>
 800af08:	2302      	movs	r3, #2
 800af0a:	e0e3      	b.n	800b0d4 <HAL_SPI_Receive+0x21a>
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af14:	f7fc fa1a 	bl	800734c <HAL_GetTick>
 800af18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b01      	cmp	r3, #1
 800af24:	d002      	beq.n	800af2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800af26:	2302      	movs	r3, #2
 800af28:	75fb      	strb	r3, [r7, #23]
    goto error;
 800af2a:	e0ca      	b.n	800b0c2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d002      	beq.n	800af38 <HAL_SPI_Receive+0x7e>
 800af32:	88fb      	ldrh	r3, [r7, #6]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d102      	bne.n	800af3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800af3c:	e0c1      	b.n	800b0c2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2204      	movs	r2, #4
 800af42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	68ba      	ldr	r2, [r7, #8]
 800af50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	88fa      	ldrh	r2, [r7, #6]
 800af56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	88fa      	ldrh	r2, [r7, #6]
 800af5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2200      	movs	r2, #0
 800af62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af84:	d10f      	bne.n	800afa6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800afa4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb0:	2b40      	cmp	r3, #64	; 0x40
 800afb2:	d007      	beq.n	800afc4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d162      	bne.n	800b092 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800afcc:	e02e      	b.n	800b02c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	f003 0301 	and.w	r3, r3, #1
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d115      	bne.n	800b008 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f103 020c 	add.w	r2, r3, #12
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe8:	7812      	ldrb	r2, [r2, #0]
 800afea:	b2d2      	uxtb	r2, r2
 800afec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff2:	1c5a      	adds	r2, r3, #1
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800affc:	b29b      	uxth	r3, r3
 800affe:	3b01      	subs	r3, #1
 800b000:	b29a      	uxth	r2, r3
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b006:	e011      	b.n	800b02c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b008:	f7fc f9a0 	bl	800734c <HAL_GetTick>
 800b00c:	4602      	mov	r2, r0
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	429a      	cmp	r2, r3
 800b016:	d803      	bhi.n	800b020 <HAL_SPI_Receive+0x166>
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b01e:	d102      	bne.n	800b026 <HAL_SPI_Receive+0x16c>
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d102      	bne.n	800b02c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b026:	2303      	movs	r3, #3
 800b028:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b02a:	e04a      	b.n	800b0c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b030:	b29b      	uxth	r3, r3
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1cb      	bne.n	800afce <HAL_SPI_Receive+0x114>
 800b036:	e031      	b.n	800b09c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	2b01      	cmp	r3, #1
 800b044:	d113      	bne.n	800b06e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68da      	ldr	r2, [r3, #12]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b050:	b292      	uxth	r2, r2
 800b052:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b058:	1c9a      	adds	r2, r3, #2
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b062:	b29b      	uxth	r3, r3
 800b064:	3b01      	subs	r3, #1
 800b066:	b29a      	uxth	r2, r3
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b06c:	e011      	b.n	800b092 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b06e:	f7fc f96d 	bl	800734c <HAL_GetTick>
 800b072:	4602      	mov	r2, r0
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	683a      	ldr	r2, [r7, #0]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d803      	bhi.n	800b086 <HAL_SPI_Receive+0x1cc>
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b084:	d102      	bne.n	800b08c <HAL_SPI_Receive+0x1d2>
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d102      	bne.n	800b092 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b08c:	2303      	movs	r3, #3
 800b08e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b090:	e017      	b.n	800b0c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b096:	b29b      	uxth	r3, r3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1cd      	bne.n	800b038 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f000 fa45 	bl	800b530 <SPI_EndRxTransaction>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2220      	movs	r2, #32
 800b0b0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d002      	beq.n	800b0c0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	75fb      	strb	r3, [r7, #23]
 800b0be:	e000      	b.n	800b0c2 <HAL_SPI_Receive+0x208>
  }

error :
 800b0c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b0d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3718      	adds	r7, #24
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08c      	sub	sp, #48	; 0x30
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
 800b0e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d101      	bne.n	800b102 <HAL_SPI_TransmitReceive+0x26>
 800b0fe:	2302      	movs	r3, #2
 800b100:	e18a      	b.n	800b418 <HAL_SPI_TransmitReceive+0x33c>
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2201      	movs	r2, #1
 800b106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b10a:	f7fc f91f 	bl	800734c <HAL_GetTick>
 800b10e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b120:	887b      	ldrh	r3, [r7, #2]
 800b122:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d00f      	beq.n	800b14c <HAL_SPI_TransmitReceive+0x70>
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b132:	d107      	bne.n	800b144 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d103      	bne.n	800b144 <HAL_SPI_TransmitReceive+0x68>
 800b13c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b140:	2b04      	cmp	r3, #4
 800b142:	d003      	beq.n	800b14c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b144:	2302      	movs	r3, #2
 800b146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b14a:	e15b      	b.n	800b404 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d005      	beq.n	800b15e <HAL_SPI_TransmitReceive+0x82>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <HAL_SPI_TransmitReceive+0x82>
 800b158:	887b      	ldrh	r3, [r7, #2]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d103      	bne.n	800b166 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b164:	e14e      	b.n	800b404 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b04      	cmp	r3, #4
 800b170:	d003      	beq.n	800b17a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2205      	movs	r2, #5
 800b176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2200      	movs	r2, #0
 800b17e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	887a      	ldrh	r2, [r7, #2]
 800b18a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	887a      	ldrh	r2, [r7, #2]
 800b190:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	887a      	ldrh	r2, [r7, #2]
 800b19c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	887a      	ldrh	r2, [r7, #2]
 800b1a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ba:	2b40      	cmp	r3, #64	; 0x40
 800b1bc:	d007      	beq.n	800b1ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1d6:	d178      	bne.n	800b2ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <HAL_SPI_TransmitReceive+0x10a>
 800b1e0:	8b7b      	ldrh	r3, [r7, #26]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d166      	bne.n	800b2b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ea:	881a      	ldrh	r2, [r3, #0]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f6:	1c9a      	adds	r2, r3, #2
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b200:	b29b      	uxth	r3, r3
 800b202:	3b01      	subs	r3, #1
 800b204:	b29a      	uxth	r2, r3
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b20a:	e053      	b.n	800b2b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	f003 0302 	and.w	r3, r3, #2
 800b216:	2b02      	cmp	r3, #2
 800b218:	d11b      	bne.n	800b252 <HAL_SPI_TransmitReceive+0x176>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b21e:	b29b      	uxth	r3, r3
 800b220:	2b00      	cmp	r3, #0
 800b222:	d016      	beq.n	800b252 <HAL_SPI_TransmitReceive+0x176>
 800b224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b226:	2b01      	cmp	r3, #1
 800b228:	d113      	bne.n	800b252 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b22e:	881a      	ldrh	r2, [r3, #0]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23a:	1c9a      	adds	r2, r3, #2
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b244:	b29b      	uxth	r3, r3
 800b246:	3b01      	subs	r3, #1
 800b248:	b29a      	uxth	r2, r3
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b24e:	2300      	movs	r3, #0
 800b250:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	f003 0301 	and.w	r3, r3, #1
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d119      	bne.n	800b294 <HAL_SPI_TransmitReceive+0x1b8>
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b264:	b29b      	uxth	r3, r3
 800b266:	2b00      	cmp	r3, #0
 800b268:	d014      	beq.n	800b294 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	68da      	ldr	r2, [r3, #12]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b274:	b292      	uxth	r2, r2
 800b276:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27c:	1c9a      	adds	r2, r3, #2
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b286:	b29b      	uxth	r3, r3
 800b288:	3b01      	subs	r3, #1
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b290:	2301      	movs	r3, #1
 800b292:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b294:	f7fc f85a 	bl	800734c <HAL_GetTick>
 800b298:	4602      	mov	r2, r0
 800b29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d807      	bhi.n	800b2b4 <HAL_SPI_TransmitReceive+0x1d8>
 800b2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2aa:	d003      	beq.n	800b2b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b2b2:	e0a7      	b.n	800b404 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1a6      	bne.n	800b20c <HAL_SPI_TransmitReceive+0x130>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1a1      	bne.n	800b20c <HAL_SPI_TransmitReceive+0x130>
 800b2c8:	e07c      	b.n	800b3c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d002      	beq.n	800b2d8 <HAL_SPI_TransmitReceive+0x1fc>
 800b2d2:	8b7b      	ldrh	r3, [r7, #26]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d16b      	bne.n	800b3b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	330c      	adds	r3, #12
 800b2e2:	7812      	ldrb	r2, [r2, #0]
 800b2e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b2fe:	e057      	b.n	800b3b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	f003 0302 	and.w	r3, r3, #2
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d11c      	bne.n	800b348 <HAL_SPI_TransmitReceive+0x26c>
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b312:	b29b      	uxth	r3, r3
 800b314:	2b00      	cmp	r3, #0
 800b316:	d017      	beq.n	800b348 <HAL_SPI_TransmitReceive+0x26c>
 800b318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d114      	bne.n	800b348 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	330c      	adds	r3, #12
 800b328:	7812      	ldrb	r2, [r2, #0]
 800b32a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b330:	1c5a      	adds	r2, r3, #1
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	3b01      	subs	r3, #1
 800b33e:	b29a      	uxth	r2, r3
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b344:	2300      	movs	r3, #0
 800b346:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	2b01      	cmp	r3, #1
 800b354:	d119      	bne.n	800b38a <HAL_SPI_TransmitReceive+0x2ae>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d014      	beq.n	800b38a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68da      	ldr	r2, [r3, #12]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b36a:	b2d2      	uxtb	r2, r2
 800b36c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b372:	1c5a      	adds	r2, r3, #1
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	3b01      	subs	r3, #1
 800b380:	b29a      	uxth	r2, r3
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b386:	2301      	movs	r3, #1
 800b388:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b38a:	f7fb ffdf 	bl	800734c <HAL_GetTick>
 800b38e:	4602      	mov	r2, r0
 800b390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b396:	429a      	cmp	r2, r3
 800b398:	d803      	bhi.n	800b3a2 <HAL_SPI_TransmitReceive+0x2c6>
 800b39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a0:	d102      	bne.n	800b3a8 <HAL_SPI_TransmitReceive+0x2cc>
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d103      	bne.n	800b3b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b3ae:	e029      	b.n	800b404 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1a2      	bne.n	800b300 <HAL_SPI_TransmitReceive+0x224>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d19d      	bne.n	800b300 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b3c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f000 f917 	bl	800b5fc <SPI_EndRxTxTransaction>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d006      	beq.n	800b3e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2220      	movs	r2, #32
 800b3de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b3e0:	e010      	b.n	800b404 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10b      	bne.n	800b402 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	617b      	str	r3, [r7, #20]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	617b      	str	r3, [r7, #20]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	617b      	str	r3, [r7, #20]
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	e000      	b.n	800b404 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b402:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2200      	movs	r2, #0
 800b410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b414:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3730      	adds	r7, #48	; 0x30
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	603b      	str	r3, [r7, #0]
 800b42c:	4613      	mov	r3, r2
 800b42e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b430:	f7fb ff8c 	bl	800734c <HAL_GetTick>
 800b434:	4602      	mov	r2, r0
 800b436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b438:	1a9b      	subs	r3, r3, r2
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	4413      	add	r3, r2
 800b43e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b440:	f7fb ff84 	bl	800734c <HAL_GetTick>
 800b444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b446:	4b39      	ldr	r3, [pc, #228]	; (800b52c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	015b      	lsls	r3, r3, #5
 800b44c:	0d1b      	lsrs	r3, r3, #20
 800b44e:	69fa      	ldr	r2, [r7, #28]
 800b450:	fb02 f303 	mul.w	r3, r2, r3
 800b454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b456:	e054      	b.n	800b502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b45e:	d050      	beq.n	800b502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b460:	f7fb ff74 	bl	800734c <HAL_GetTick>
 800b464:	4602      	mov	r2, r0
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	1ad3      	subs	r3, r2, r3
 800b46a:	69fa      	ldr	r2, [r7, #28]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d902      	bls.n	800b476 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d13d      	bne.n	800b4f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	685a      	ldr	r2, [r3, #4]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b48e:	d111      	bne.n	800b4b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b498:	d004      	beq.n	800b4a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4a2:	d107      	bne.n	800b4b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4bc:	d10f      	bne.n	800b4de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b4cc:	601a      	str	r2, [r3, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b4dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	e017      	b.n	800b522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d101      	bne.n	800b4fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	3b01      	subs	r3, #1
 800b500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	689a      	ldr	r2, [r3, #8]
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	4013      	ands	r3, r2
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	429a      	cmp	r2, r3
 800b510:	bf0c      	ite	eq
 800b512:	2301      	moveq	r3, #1
 800b514:	2300      	movne	r3, #0
 800b516:	b2db      	uxtb	r3, r3
 800b518:	461a      	mov	r2, r3
 800b51a:	79fb      	ldrb	r3, [r7, #7]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d19b      	bne.n	800b458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3720      	adds	r7, #32
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20000080 	.word	0x20000080

0800b530 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af02      	add	r7, sp, #8
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b544:	d111      	bne.n	800b56a <SPI_EndRxTransaction+0x3a>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b54e:	d004      	beq.n	800b55a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b558:	d107      	bne.n	800b56a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b568:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b572:	d12a      	bne.n	800b5ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b57c:	d012      	beq.n	800b5a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2200      	movs	r2, #0
 800b586:	2180      	movs	r1, #128	; 0x80
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f7ff ff49 	bl	800b420 <SPI_WaitFlagStateUntilTimeout>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d02d      	beq.n	800b5f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b598:	f043 0220 	orr.w	r2, r3, #32
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e026      	b.n	800b5f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f7ff ff36 	bl	800b420 <SPI_WaitFlagStateUntilTimeout>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d01a      	beq.n	800b5f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5be:	f043 0220 	orr.w	r2, r3, #32
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e013      	b.n	800b5f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f7ff ff23 	bl	800b420 <SPI_WaitFlagStateUntilTimeout>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d007      	beq.n	800b5f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5e4:	f043 0220 	orr.w	r2, r3, #32
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	e000      	b.n	800b5f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
	...

0800b5fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b088      	sub	sp, #32
 800b600:	af02      	add	r7, sp, #8
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b608:	4b1b      	ldr	r3, [pc, #108]	; (800b678 <SPI_EndRxTxTransaction+0x7c>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a1b      	ldr	r2, [pc, #108]	; (800b67c <SPI_EndRxTxTransaction+0x80>)
 800b60e:	fba2 2303 	umull	r2, r3, r2, r3
 800b612:	0d5b      	lsrs	r3, r3, #21
 800b614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b618:	fb02 f303 	mul.w	r3, r2, r3
 800b61c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b626:	d112      	bne.n	800b64e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	2200      	movs	r2, #0
 800b630:	2180      	movs	r1, #128	; 0x80
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f7ff fef4 	bl	800b420 <SPI_WaitFlagStateUntilTimeout>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d016      	beq.n	800b66c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b642:	f043 0220 	orr.w	r2, r3, #32
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e00f      	b.n	800b66e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00a      	beq.n	800b66a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	3b01      	subs	r3, #1
 800b658:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b664:	2b80      	cmp	r3, #128	; 0x80
 800b666:	d0f2      	beq.n	800b64e <SPI_EndRxTxTransaction+0x52>
 800b668:	e000      	b.n	800b66c <SPI_EndRxTxTransaction+0x70>
        break;
 800b66a:	bf00      	nop
  }

  return HAL_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3718      	adds	r7, #24
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	20000080 	.word	0x20000080
 800b67c:	165e9f81 	.word	0x165e9f81

0800b680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e041      	b.n	800b716 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d106      	bne.n	800b6ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7f6 fb6e 	bl	8001d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2202      	movs	r2, #2
 800b6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4610      	mov	r0, r2
 800b6c0:	f000 fac4 	bl	800bc4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
	...

0800b720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b01      	cmp	r3, #1
 800b732:	d001      	beq.n	800b738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	e04e      	b.n	800b7d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2202      	movs	r2, #2
 800b73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68da      	ldr	r2, [r3, #12]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f042 0201 	orr.w	r2, r2, #1
 800b74e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a23      	ldr	r2, [pc, #140]	; (800b7e4 <HAL_TIM_Base_Start_IT+0xc4>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d022      	beq.n	800b7a0 <HAL_TIM_Base_Start_IT+0x80>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b762:	d01d      	beq.n	800b7a0 <HAL_TIM_Base_Start_IT+0x80>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a1f      	ldr	r2, [pc, #124]	; (800b7e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d018      	beq.n	800b7a0 <HAL_TIM_Base_Start_IT+0x80>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a1e      	ldr	r2, [pc, #120]	; (800b7ec <HAL_TIM_Base_Start_IT+0xcc>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d013      	beq.n	800b7a0 <HAL_TIM_Base_Start_IT+0x80>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a1c      	ldr	r2, [pc, #112]	; (800b7f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d00e      	beq.n	800b7a0 <HAL_TIM_Base_Start_IT+0x80>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a1b      	ldr	r2, [pc, #108]	; (800b7f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d009      	beq.n	800b7a0 <HAL_TIM_Base_Start_IT+0x80>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a19      	ldr	r2, [pc, #100]	; (800b7f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d004      	beq.n	800b7a0 <HAL_TIM_Base_Start_IT+0x80>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a18      	ldr	r2, [pc, #96]	; (800b7fc <HAL_TIM_Base_Start_IT+0xdc>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d111      	bne.n	800b7c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	f003 0307 	and.w	r3, r3, #7
 800b7aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2b06      	cmp	r3, #6
 800b7b0:	d010      	beq.n	800b7d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f042 0201 	orr.w	r2, r2, #1
 800b7c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7c2:	e007      	b.n	800b7d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f042 0201 	orr.w	r2, r2, #1
 800b7d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3714      	adds	r7, #20
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	40010000 	.word	0x40010000
 800b7e8:	40000400 	.word	0x40000400
 800b7ec:	40000800 	.word	0x40000800
 800b7f0:	40000c00 	.word	0x40000c00
 800b7f4:	40010400 	.word	0x40010400
 800b7f8:	40014000 	.word	0x40014000
 800b7fc:	40001800 	.word	0x40001800

0800b800 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68da      	ldr	r2, [r3, #12]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f022 0201 	bic.w	r2, r2, #1
 800b816:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6a1a      	ldr	r2, [r3, #32]
 800b81e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b822:	4013      	ands	r3, r2
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10f      	bne.n	800b848 <HAL_TIM_Base_Stop_IT+0x48>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6a1a      	ldr	r2, [r3, #32]
 800b82e:	f240 4344 	movw	r3, #1092	; 0x444
 800b832:	4013      	ands	r3, r2
 800b834:	2b00      	cmp	r3, #0
 800b836:	d107      	bne.n	800b848 <HAL_TIM_Base_Stop_IT+0x48>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f022 0201 	bic.w	r2, r2, #1
 800b846:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	370c      	adds	r7, #12
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr

0800b85e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	691b      	ldr	r3, [r3, #16]
 800b86c:	f003 0302 	and.w	r3, r3, #2
 800b870:	2b02      	cmp	r3, #2
 800b872:	d122      	bne.n	800b8ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	f003 0302 	and.w	r3, r3, #2
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d11b      	bne.n	800b8ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f06f 0202 	mvn.w	r2, #2
 800b88a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	f003 0303 	and.w	r3, r3, #3
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d003      	beq.n	800b8a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 f9b5 	bl	800bc10 <HAL_TIM_IC_CaptureCallback>
 800b8a6:	e005      	b.n	800b8b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 f9a7 	bl	800bbfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f9b8 	bl	800bc24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	f003 0304 	and.w	r3, r3, #4
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	d122      	bne.n	800b90e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	f003 0304 	and.w	r3, r3, #4
 800b8d2:	2b04      	cmp	r3, #4
 800b8d4:	d11b      	bne.n	800b90e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f06f 0204 	mvn.w	r2, #4
 800b8de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d003      	beq.n	800b8fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 f98b 	bl	800bc10 <HAL_TIM_IC_CaptureCallback>
 800b8fa:	e005      	b.n	800b908 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f97d 	bl	800bbfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f98e 	bl	800bc24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	f003 0308 	and.w	r3, r3, #8
 800b918:	2b08      	cmp	r3, #8
 800b91a:	d122      	bne.n	800b962 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	f003 0308 	and.w	r3, r3, #8
 800b926:	2b08      	cmp	r3, #8
 800b928:	d11b      	bne.n	800b962 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f06f 0208 	mvn.w	r2, #8
 800b932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2204      	movs	r2, #4
 800b938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	69db      	ldr	r3, [r3, #28]
 800b940:	f003 0303 	and.w	r3, r3, #3
 800b944:	2b00      	cmp	r3, #0
 800b946:	d003      	beq.n	800b950 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f961 	bl	800bc10 <HAL_TIM_IC_CaptureCallback>
 800b94e:	e005      	b.n	800b95c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f953 	bl	800bbfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 f964 	bl	800bc24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	f003 0310 	and.w	r3, r3, #16
 800b96c:	2b10      	cmp	r3, #16
 800b96e:	d122      	bne.n	800b9b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	f003 0310 	and.w	r3, r3, #16
 800b97a:	2b10      	cmp	r3, #16
 800b97c:	d11b      	bne.n	800b9b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f06f 0210 	mvn.w	r2, #16
 800b986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2208      	movs	r2, #8
 800b98c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	69db      	ldr	r3, [r3, #28]
 800b994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f937 	bl	800bc10 <HAL_TIM_IC_CaptureCallback>
 800b9a2:	e005      	b.n	800b9b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 f929 	bl	800bbfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 f93a 	bl	800bc24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d10e      	bne.n	800b9e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	f003 0301 	and.w	r3, r3, #1
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d107      	bne.n	800b9e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f06f 0201 	mvn.w	r2, #1
 800b9da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7f5 ff21 	bl	8001824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ec:	2b80      	cmp	r3, #128	; 0x80
 800b9ee:	d10e      	bne.n	800ba0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9fa:	2b80      	cmp	r3, #128	; 0x80
 800b9fc:	d107      	bne.n	800ba0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ba06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fadf 	bl	800bfcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba18:	2b40      	cmp	r3, #64	; 0x40
 800ba1a:	d10e      	bne.n	800ba3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba26:	2b40      	cmp	r3, #64	; 0x40
 800ba28:	d107      	bne.n	800ba3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ba32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f8ff 	bl	800bc38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	f003 0320 	and.w	r3, r3, #32
 800ba44:	2b20      	cmp	r3, #32
 800ba46:	d10e      	bne.n	800ba66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	f003 0320 	and.w	r3, r3, #32
 800ba52:	2b20      	cmp	r3, #32
 800ba54:	d107      	bne.n	800ba66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f06f 0220 	mvn.w	r2, #32
 800ba5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 faa9 	bl	800bfb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba66:	bf00      	nop
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d101      	bne.n	800ba8a <HAL_TIM_ConfigClockSource+0x1c>
 800ba86:	2302      	movs	r3, #2
 800ba88:	e0b4      	b.n	800bbf4 <HAL_TIM_ConfigClockSource+0x186>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2202      	movs	r2, #2
 800ba96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800baa8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bab0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bac2:	d03e      	beq.n	800bb42 <HAL_TIM_ConfigClockSource+0xd4>
 800bac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bac8:	f200 8087 	bhi.w	800bbda <HAL_TIM_ConfigClockSource+0x16c>
 800bacc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bad0:	f000 8086 	beq.w	800bbe0 <HAL_TIM_ConfigClockSource+0x172>
 800bad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bad8:	d87f      	bhi.n	800bbda <HAL_TIM_ConfigClockSource+0x16c>
 800bada:	2b70      	cmp	r3, #112	; 0x70
 800badc:	d01a      	beq.n	800bb14 <HAL_TIM_ConfigClockSource+0xa6>
 800bade:	2b70      	cmp	r3, #112	; 0x70
 800bae0:	d87b      	bhi.n	800bbda <HAL_TIM_ConfigClockSource+0x16c>
 800bae2:	2b60      	cmp	r3, #96	; 0x60
 800bae4:	d050      	beq.n	800bb88 <HAL_TIM_ConfigClockSource+0x11a>
 800bae6:	2b60      	cmp	r3, #96	; 0x60
 800bae8:	d877      	bhi.n	800bbda <HAL_TIM_ConfigClockSource+0x16c>
 800baea:	2b50      	cmp	r3, #80	; 0x50
 800baec:	d03c      	beq.n	800bb68 <HAL_TIM_ConfigClockSource+0xfa>
 800baee:	2b50      	cmp	r3, #80	; 0x50
 800baf0:	d873      	bhi.n	800bbda <HAL_TIM_ConfigClockSource+0x16c>
 800baf2:	2b40      	cmp	r3, #64	; 0x40
 800baf4:	d058      	beq.n	800bba8 <HAL_TIM_ConfigClockSource+0x13a>
 800baf6:	2b40      	cmp	r3, #64	; 0x40
 800baf8:	d86f      	bhi.n	800bbda <HAL_TIM_ConfigClockSource+0x16c>
 800bafa:	2b30      	cmp	r3, #48	; 0x30
 800bafc:	d064      	beq.n	800bbc8 <HAL_TIM_ConfigClockSource+0x15a>
 800bafe:	2b30      	cmp	r3, #48	; 0x30
 800bb00:	d86b      	bhi.n	800bbda <HAL_TIM_ConfigClockSource+0x16c>
 800bb02:	2b20      	cmp	r3, #32
 800bb04:	d060      	beq.n	800bbc8 <HAL_TIM_ConfigClockSource+0x15a>
 800bb06:	2b20      	cmp	r3, #32
 800bb08:	d867      	bhi.n	800bbda <HAL_TIM_ConfigClockSource+0x16c>
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d05c      	beq.n	800bbc8 <HAL_TIM_ConfigClockSource+0x15a>
 800bb0e:	2b10      	cmp	r3, #16
 800bb10:	d05a      	beq.n	800bbc8 <HAL_TIM_ConfigClockSource+0x15a>
 800bb12:	e062      	b.n	800bbda <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6818      	ldr	r0, [r3, #0]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	6899      	ldr	r1, [r3, #8]
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	685a      	ldr	r2, [r3, #4]
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	f000 f9ac 	bl	800be80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bb36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	609a      	str	r2, [r3, #8]
      break;
 800bb40:	e04f      	b.n	800bbe2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6818      	ldr	r0, [r3, #0]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	6899      	ldr	r1, [r3, #8]
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	685a      	ldr	r2, [r3, #4]
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	f000 f995 	bl	800be80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	689a      	ldr	r2, [r3, #8]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb64:	609a      	str	r2, [r3, #8]
      break;
 800bb66:	e03c      	b.n	800bbe2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6818      	ldr	r0, [r3, #0]
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	6859      	ldr	r1, [r3, #4]
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	461a      	mov	r2, r3
 800bb76:	f000 f909 	bl	800bd8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2150      	movs	r1, #80	; 0x50
 800bb80:	4618      	mov	r0, r3
 800bb82:	f000 f962 	bl	800be4a <TIM_ITRx_SetConfig>
      break;
 800bb86:	e02c      	b.n	800bbe2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6818      	ldr	r0, [r3, #0]
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	6859      	ldr	r1, [r3, #4]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	461a      	mov	r2, r3
 800bb96:	f000 f928 	bl	800bdea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2160      	movs	r1, #96	; 0x60
 800bba0:	4618      	mov	r0, r3
 800bba2:	f000 f952 	bl	800be4a <TIM_ITRx_SetConfig>
      break;
 800bba6:	e01c      	b.n	800bbe2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6818      	ldr	r0, [r3, #0]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	6859      	ldr	r1, [r3, #4]
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	f000 f8e9 	bl	800bd8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2140      	movs	r1, #64	; 0x40
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 f942 	bl	800be4a <TIM_ITRx_SetConfig>
      break;
 800bbc6:	e00c      	b.n	800bbe2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	4610      	mov	r0, r2
 800bbd4:	f000 f939 	bl	800be4a <TIM_ITRx_SetConfig>
      break;
 800bbd8:	e003      	b.n	800bbe2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	73fb      	strb	r3, [r7, #15]
      break;
 800bbde:	e000      	b.n	800bbe2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bbe0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc18:	bf00      	nop
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc2c:	bf00      	nop
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4a40      	ldr	r2, [pc, #256]	; (800bd60 <TIM_Base_SetConfig+0x114>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d013      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc6a:	d00f      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a3d      	ldr	r2, [pc, #244]	; (800bd64 <TIM_Base_SetConfig+0x118>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d00b      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4a3c      	ldr	r2, [pc, #240]	; (800bd68 <TIM_Base_SetConfig+0x11c>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d007      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a3b      	ldr	r2, [pc, #236]	; (800bd6c <TIM_Base_SetConfig+0x120>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d003      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a3a      	ldr	r2, [pc, #232]	; (800bd70 <TIM_Base_SetConfig+0x124>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d108      	bne.n	800bc9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4a2f      	ldr	r2, [pc, #188]	; (800bd60 <TIM_Base_SetConfig+0x114>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d02b      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcac:	d027      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a2c      	ldr	r2, [pc, #176]	; (800bd64 <TIM_Base_SetConfig+0x118>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d023      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a2b      	ldr	r2, [pc, #172]	; (800bd68 <TIM_Base_SetConfig+0x11c>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d01f      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a2a      	ldr	r2, [pc, #168]	; (800bd6c <TIM_Base_SetConfig+0x120>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d01b      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a29      	ldr	r2, [pc, #164]	; (800bd70 <TIM_Base_SetConfig+0x124>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d017      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a28      	ldr	r2, [pc, #160]	; (800bd74 <TIM_Base_SetConfig+0x128>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d013      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a27      	ldr	r2, [pc, #156]	; (800bd78 <TIM_Base_SetConfig+0x12c>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d00f      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a26      	ldr	r2, [pc, #152]	; (800bd7c <TIM_Base_SetConfig+0x130>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d00b      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a25      	ldr	r2, [pc, #148]	; (800bd80 <TIM_Base_SetConfig+0x134>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d007      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a24      	ldr	r2, [pc, #144]	; (800bd84 <TIM_Base_SetConfig+0x138>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d003      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a23      	ldr	r2, [pc, #140]	; (800bd88 <TIM_Base_SetConfig+0x13c>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d108      	bne.n	800bd10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	695b      	ldr	r3, [r3, #20]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	689a      	ldr	r2, [r3, #8]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a0a      	ldr	r2, [pc, #40]	; (800bd60 <TIM_Base_SetConfig+0x114>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d003      	beq.n	800bd44 <TIM_Base_SetConfig+0xf8>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4a0c      	ldr	r2, [pc, #48]	; (800bd70 <TIM_Base_SetConfig+0x124>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d103      	bne.n	800bd4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	691a      	ldr	r2, [r3, #16]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	615a      	str	r2, [r3, #20]
}
 800bd52:	bf00      	nop
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	40010000 	.word	0x40010000
 800bd64:	40000400 	.word	0x40000400
 800bd68:	40000800 	.word	0x40000800
 800bd6c:	40000c00 	.word	0x40000c00
 800bd70:	40010400 	.word	0x40010400
 800bd74:	40014000 	.word	0x40014000
 800bd78:	40014400 	.word	0x40014400
 800bd7c:	40014800 	.word	0x40014800
 800bd80:	40001800 	.word	0x40001800
 800bd84:	40001c00 	.word	0x40001c00
 800bd88:	40002000 	.word	0x40002000

0800bd8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b087      	sub	sp, #28
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6a1b      	ldr	r3, [r3, #32]
 800bd9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6a1b      	ldr	r3, [r3, #32]
 800bda2:	f023 0201 	bic.w	r2, r3, #1
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	699b      	ldr	r3, [r3, #24]
 800bdae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bdb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	011b      	lsls	r3, r3, #4
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f023 030a 	bic.w	r3, r3, #10
 800bdc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	621a      	str	r2, [r3, #32]
}
 800bdde:	bf00      	nop
 800bde0:	371c      	adds	r7, #28
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr

0800bdea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdea:	b480      	push	{r7}
 800bdec:	b087      	sub	sp, #28
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	60f8      	str	r0, [r7, #12]
 800bdf2:	60b9      	str	r1, [r7, #8]
 800bdf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	f023 0210 	bic.w	r2, r3, #16
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6a1b      	ldr	r3, [r3, #32]
 800be0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	031b      	lsls	r3, r3, #12
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	011b      	lsls	r3, r3, #4
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	4313      	orrs	r3, r2
 800be30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	697a      	ldr	r2, [r7, #20]
 800be36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	621a      	str	r2, [r3, #32]
}
 800be3e:	bf00      	nop
 800be40:	371c      	adds	r7, #28
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be4a:	b480      	push	{r7}
 800be4c:	b085      	sub	sp, #20
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	4313      	orrs	r3, r2
 800be68:	f043 0307 	orr.w	r3, r3, #7
 800be6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	609a      	str	r2, [r3, #8]
}
 800be74:	bf00      	nop
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be80:	b480      	push	{r7}
 800be82:	b087      	sub	sp, #28
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	021a      	lsls	r2, r3, #8
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	431a      	orrs	r2, r3
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	4313      	orrs	r3, r2
 800beac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	697a      	ldr	r2, [r7, #20]
 800beb2:	609a      	str	r2, [r3, #8]
}
 800beb4:	bf00      	nop
 800beb6:	371c      	adds	r7, #28
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d101      	bne.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bed4:	2302      	movs	r3, #2
 800bed6:	e05a      	b.n	800bf8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2202      	movs	r2, #2
 800bee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800befe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a21      	ldr	r2, [pc, #132]	; (800bf9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d022      	beq.n	800bf62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf24:	d01d      	beq.n	800bf62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a1d      	ldr	r2, [pc, #116]	; (800bfa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d018      	beq.n	800bf62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a1b      	ldr	r2, [pc, #108]	; (800bfa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d013      	beq.n	800bf62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a1a      	ldr	r2, [pc, #104]	; (800bfa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d00e      	beq.n	800bf62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a18      	ldr	r2, [pc, #96]	; (800bfac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d009      	beq.n	800bf62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a17      	ldr	r2, [pc, #92]	; (800bfb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d004      	beq.n	800bf62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a15      	ldr	r2, [pc, #84]	; (800bfb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d10c      	bne.n	800bf7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	4313      	orrs	r3, r2
 800bf72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3714      	adds	r7, #20
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	40010000 	.word	0x40010000
 800bfa0:	40000400 	.word	0x40000400
 800bfa4:	40000800 	.word	0x40000800
 800bfa8:	40000c00 	.word	0x40000c00
 800bfac:	40010400 	.word	0x40010400
 800bfb0:	40014000 	.word	0x40014000
 800bfb4:	40001800 	.word	0x40001800

0800bfb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bfc0:	bf00      	nop
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bfd4:	bf00      	nop
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d123      	bne.n	800c03a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800bffa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	6851      	ldr	r1, [r2, #4]
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	6892      	ldr	r2, [r2, #8]
 800c006:	4311      	orrs	r1, r2
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	68d2      	ldr	r2, [r2, #12]
 800c00c:	4311      	orrs	r1, r2
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	6912      	ldr	r2, [r2, #16]
 800c012:	4311      	orrs	r1, r2
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	6952      	ldr	r2, [r2, #20]
 800c018:	4311      	orrs	r1, r2
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	6992      	ldr	r2, [r2, #24]
 800c01e:	4311      	orrs	r1, r2
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	69d2      	ldr	r2, [r2, #28]
 800c024:	4311      	orrs	r1, r2
 800c026:	683a      	ldr	r2, [r7, #0]
 800c028:	6a12      	ldr	r2, [r2, #32]
 800c02a:	4311      	orrs	r1, r2
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c030:	430a      	orrs	r2, r1
 800c032:	431a      	orrs	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	601a      	str	r2, [r3, #0]
 800c038:	e028      	b.n	800c08c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	69d9      	ldr	r1, [r3, #28]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	4319      	orrs	r1, r3
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c050:	430b      	orrs	r3, r1
 800c052:	431a      	orrs	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c060:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c064:	683a      	ldr	r2, [r7, #0]
 800c066:	6851      	ldr	r1, [r2, #4]
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	6892      	ldr	r2, [r2, #8]
 800c06c:	4311      	orrs	r1, r2
 800c06e:	683a      	ldr	r2, [r7, #0]
 800c070:	68d2      	ldr	r2, [r2, #12]
 800c072:	4311      	orrs	r1, r2
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	6912      	ldr	r2, [r2, #16]
 800c078:	4311      	orrs	r1, r2
 800c07a:	683a      	ldr	r2, [r7, #0]
 800c07c:	6952      	ldr	r2, [r2, #20]
 800c07e:	4311      	orrs	r1, r2
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	6992      	ldr	r2, [r2, #24]
 800c084:	430a      	orrs	r2, r1
 800c086:	431a      	orrs	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c09a:	b480      	push	{r7}
 800c09c:	b085      	sub	sp, #20
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	60f8      	str	r0, [r7, #12]
 800c0a2:	60b9      	str	r1, [r7, #8]
 800c0a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d128      	bne.n	800c0fe <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	1e59      	subs	r1, r3, #1
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	011b      	lsls	r3, r3, #4
 800c0c2:	4319      	orrs	r1, r3
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	021b      	lsls	r3, r3, #8
 800c0cc:	4319      	orrs	r1, r3
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	031b      	lsls	r3, r3, #12
 800c0d6:	4319      	orrs	r1, r3
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	041b      	lsls	r3, r3, #16
 800c0e0:	4319      	orrs	r1, r3
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	695b      	ldr	r3, [r3, #20]
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	051b      	lsls	r3, r3, #20
 800c0ea:	4319      	orrs	r1, r3
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	061b      	lsls	r3, r3, #24
 800c0f4:	430b      	orrs	r3, r1
 800c0f6:	431a      	orrs	r2, r3
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	609a      	str	r2, [r3, #8]
 800c0fc:	e02f      	b.n	800c15e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c106:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	68d2      	ldr	r2, [r2, #12]
 800c10e:	3a01      	subs	r2, #1
 800c110:	0311      	lsls	r1, r2, #12
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	6952      	ldr	r2, [r2, #20]
 800c116:	3a01      	subs	r2, #1
 800c118:	0512      	lsls	r2, r2, #20
 800c11a:	430a      	orrs	r2, r1
 800c11c:	431a      	orrs	r2, r3
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	1e59      	subs	r1, r3, #1
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	3b01      	subs	r3, #1
 800c136:	011b      	lsls	r3, r3, #4
 800c138:	4319      	orrs	r1, r3
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	3b01      	subs	r3, #1
 800c140:	021b      	lsls	r3, r3, #8
 800c142:	4319      	orrs	r1, r3
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	691b      	ldr	r3, [r3, #16]
 800c148:	3b01      	subs	r3, #1
 800c14a:	041b      	lsls	r3, r3, #16
 800c14c:	4319      	orrs	r1, r3
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	3b01      	subs	r3, #1
 800c154:	061b      	lsls	r3, r3, #24
 800c156:	430b      	orrs	r3, r1
 800c158:	431a      	orrs	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c178:	2300      	movs	r3, #0
 800c17a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	0d9b      	lsrs	r3, r3, #22
 800c182:	059b      	lsls	r3, r3, #22
 800c184:	68ba      	ldr	r2, [r7, #8]
 800c186:	6811      	ldr	r1, [r2, #0]
 800c188:	68ba      	ldr	r2, [r7, #8]
 800c18a:	6852      	ldr	r2, [r2, #4]
 800c18c:	4311      	orrs	r1, r2
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	6892      	ldr	r2, [r2, #8]
 800c192:	3a01      	subs	r2, #1
 800c194:	0152      	lsls	r2, r2, #5
 800c196:	4311      	orrs	r1, r2
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	68d2      	ldr	r2, [r2, #12]
 800c19c:	0252      	lsls	r2, r2, #9
 800c19e:	430a      	orrs	r2, r1
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800c1a6:	f7fb f8d1 	bl	800734c <HAL_GetTick>
 800c1aa:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800c1ac:	e010      	b.n	800c1d0 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b4:	d00c      	beq.n	800c1d0 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d007      	beq.n	800c1cc <FMC_SDRAM_SendCommand+0x60>
 800c1bc:	f7fb f8c6 	bl	800734c <HAL_GetTick>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d201      	bcs.n	800c1d0 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800c1cc:	2303      	movs	r3, #3
 800c1ce:	e006      	b.n	800c1de <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	f003 0320 	and.w	r3, r3, #32
 800c1d8:	2b20      	cmp	r3, #32
 800c1da:	d0e8      	beq.n	800c1ae <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3718      	adds	r7, #24
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b083      	sub	sp, #12
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800c1f8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800c1fc:	683a      	ldr	r2, [r7, #0]
 800c1fe:	0052      	lsls	r2, r2, #1
 800c200:	431a      	orrs	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <__NVIC_SetPriority>:
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	4603      	mov	r3, r0
 800c21c:	6039      	str	r1, [r7, #0]
 800c21e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c224:	2b00      	cmp	r3, #0
 800c226:	db0a      	blt.n	800c23e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	490c      	ldr	r1, [pc, #48]	; (800c260 <__NVIC_SetPriority+0x4c>)
 800c22e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c232:	0112      	lsls	r2, r2, #4
 800c234:	b2d2      	uxtb	r2, r2
 800c236:	440b      	add	r3, r1
 800c238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c23c:	e00a      	b.n	800c254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	b2da      	uxtb	r2, r3
 800c242:	4908      	ldr	r1, [pc, #32]	; (800c264 <__NVIC_SetPriority+0x50>)
 800c244:	79fb      	ldrb	r3, [r7, #7]
 800c246:	f003 030f 	and.w	r3, r3, #15
 800c24a:	3b04      	subs	r3, #4
 800c24c:	0112      	lsls	r2, r2, #4
 800c24e:	b2d2      	uxtb	r2, r2
 800c250:	440b      	add	r3, r1
 800c252:	761a      	strb	r2, [r3, #24]
}
 800c254:	bf00      	nop
 800c256:	370c      	adds	r7, #12
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr
 800c260:	e000e100 	.word	0xe000e100
 800c264:	e000ed00 	.word	0xe000ed00

0800c268 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c268:	b580      	push	{r7, lr}
 800c26a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c26c:	4b05      	ldr	r3, [pc, #20]	; (800c284 <SysTick_Handler+0x1c>)
 800c26e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c270:	f002 fed4 	bl	800f01c <xTaskGetSchedulerState>
 800c274:	4603      	mov	r3, r0
 800c276:	2b01      	cmp	r3, #1
 800c278:	d001      	beq.n	800c27e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c27a:	f000 ffe5 	bl	800d248 <xPortSysTickHandler>
  }
}
 800c27e:	bf00      	nop
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	e000e010 	.word	0xe000e010

0800c288 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c288:	b580      	push	{r7, lr}
 800c28a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c28c:	2100      	movs	r1, #0
 800c28e:	f06f 0004 	mvn.w	r0, #4
 800c292:	f7ff ffbf 	bl	800c214 <__NVIC_SetPriority>
#endif
}
 800c296:	bf00      	nop
 800c298:	bd80      	pop	{r7, pc}
	...

0800c29c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2a2:	f3ef 8305 	mrs	r3, IPSR
 800c2a6:	603b      	str	r3, [r7, #0]
  return(result);
 800c2a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d003      	beq.n	800c2b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c2ae:	f06f 0305 	mvn.w	r3, #5
 800c2b2:	607b      	str	r3, [r7, #4]
 800c2b4:	e00c      	b.n	800c2d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c2b6:	4b0a      	ldr	r3, [pc, #40]	; (800c2e0 <osKernelInitialize+0x44>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d105      	bne.n	800c2ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c2be:	4b08      	ldr	r3, [pc, #32]	; (800c2e0 <osKernelInitialize+0x44>)
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	607b      	str	r3, [r7, #4]
 800c2c8:	e002      	b.n	800c2d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c2d0:	687b      	ldr	r3, [r7, #4]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	370c      	adds	r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	20003814 	.word	0x20003814

0800c2e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2ea:	f3ef 8305 	mrs	r3, IPSR
 800c2ee:	603b      	str	r3, [r7, #0]
  return(result);
 800c2f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d003      	beq.n	800c2fe <osKernelStart+0x1a>
    stat = osErrorISR;
 800c2f6:	f06f 0305 	mvn.w	r3, #5
 800c2fa:	607b      	str	r3, [r7, #4]
 800c2fc:	e010      	b.n	800c320 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c2fe:	4b0b      	ldr	r3, [pc, #44]	; (800c32c <osKernelStart+0x48>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d109      	bne.n	800c31a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c306:	f7ff ffbf 	bl	800c288 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c30a:	4b08      	ldr	r3, [pc, #32]	; (800c32c <osKernelStart+0x48>)
 800c30c:	2202      	movs	r2, #2
 800c30e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c310:	f002 fa28 	bl	800e764 <vTaskStartScheduler>
      stat = osOK;
 800c314:	2300      	movs	r3, #0
 800c316:	607b      	str	r3, [r7, #4]
 800c318:	e002      	b.n	800c320 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c31a:	f04f 33ff 	mov.w	r3, #4294967295
 800c31e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c320:	687b      	ldr	r3, [r7, #4]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	20003814 	.word	0x20003814

0800c330 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c330:	b580      	push	{r7, lr}
 800c332:	b08e      	sub	sp, #56	; 0x38
 800c334:	af04      	add	r7, sp, #16
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c33c:	2300      	movs	r3, #0
 800c33e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c340:	f3ef 8305 	mrs	r3, IPSR
 800c344:	617b      	str	r3, [r7, #20]
  return(result);
 800c346:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d17e      	bne.n	800c44a <osThreadNew+0x11a>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d07b      	beq.n	800c44a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c352:	2380      	movs	r3, #128	; 0x80
 800c354:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c356:	2318      	movs	r3, #24
 800c358:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c35a:	2300      	movs	r3, #0
 800c35c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c35e:	f04f 33ff 	mov.w	r3, #4294967295
 800c362:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d045      	beq.n	800c3f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d002      	beq.n	800c378 <osThreadNew+0x48>
        name = attr->name;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	699b      	ldr	r3, [r3, #24]
 800c384:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d008      	beq.n	800c39e <osThreadNew+0x6e>
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	2b38      	cmp	r3, #56	; 0x38
 800c390:	d805      	bhi.n	800c39e <osThreadNew+0x6e>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	f003 0301 	and.w	r3, r3, #1
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d001      	beq.n	800c3a2 <osThreadNew+0x72>
        return (NULL);
 800c39e:	2300      	movs	r3, #0
 800c3a0:	e054      	b.n	800c44c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	695b      	ldr	r3, [r3, #20]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d003      	beq.n	800c3b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	695b      	ldr	r3, [r3, #20]
 800c3ae:	089b      	lsrs	r3, r3, #2
 800c3b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00e      	beq.n	800c3d8 <osThreadNew+0xa8>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	2bab      	cmp	r3, #171	; 0xab
 800c3c0:	d90a      	bls.n	800c3d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d006      	beq.n	800c3d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	695b      	ldr	r3, [r3, #20]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d002      	beq.n	800c3d8 <osThreadNew+0xa8>
        mem = 1;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	61bb      	str	r3, [r7, #24]
 800c3d6:	e010      	b.n	800c3fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10c      	bne.n	800c3fa <osThreadNew+0xca>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d108      	bne.n	800c3fa <osThreadNew+0xca>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d104      	bne.n	800c3fa <osThreadNew+0xca>
          mem = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	61bb      	str	r3, [r7, #24]
 800c3f4:	e001      	b.n	800c3fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d110      	bne.n	800c422 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c408:	9202      	str	r2, [sp, #8]
 800c40a:	9301      	str	r3, [sp, #4]
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	6a3a      	ldr	r2, [r7, #32]
 800c414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f001 ffb4 	bl	800e384 <xTaskCreateStatic>
 800c41c:	4603      	mov	r3, r0
 800c41e:	613b      	str	r3, [r7, #16]
 800c420:	e013      	b.n	800c44a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d110      	bne.n	800c44a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c428:	6a3b      	ldr	r3, [r7, #32]
 800c42a:	b29a      	uxth	r2, r3
 800c42c:	f107 0310 	add.w	r3, r7, #16
 800c430:	9301      	str	r3, [sp, #4]
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f001 ffff 	bl	800e43e <xTaskCreate>
 800c440:	4603      	mov	r3, r0
 800c442:	2b01      	cmp	r3, #1
 800c444:	d001      	beq.n	800c44a <osThreadNew+0x11a>
            hTask = NULL;
 800c446:	2300      	movs	r3, #0
 800c448:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c44a:	693b      	ldr	r3, [r7, #16]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3728      	adds	r7, #40	; 0x28
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c45c:	f3ef 8305 	mrs	r3, IPSR
 800c460:	60bb      	str	r3, [r7, #8]
  return(result);
 800c462:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c464:	2b00      	cmp	r3, #0
 800c466:	d003      	beq.n	800c470 <osDelay+0x1c>
    stat = osErrorISR;
 800c468:	f06f 0305 	mvn.w	r3, #5
 800c46c:	60fb      	str	r3, [r7, #12]
 800c46e:	e007      	b.n	800c480 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c470:	2300      	movs	r3, #0
 800c472:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d002      	beq.n	800c480 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f002 f93e 	bl	800e6fc <vTaskDelay>
    }
  }

  return (stat);
 800c480:	68fb      	ldr	r3, [r7, #12]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b08a      	sub	sp, #40	; 0x28
 800c48e:	af02      	add	r7, sp, #8
 800c490:	60f8      	str	r0, [r7, #12]
 800c492:	60b9      	str	r1, [r7, #8]
 800c494:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c496:	2300      	movs	r3, #0
 800c498:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c49a:	f3ef 8305 	mrs	r3, IPSR
 800c49e:	613b      	str	r3, [r7, #16]
  return(result);
 800c4a0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d175      	bne.n	800c592 <osSemaphoreNew+0x108>
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d072      	beq.n	800c592 <osSemaphoreNew+0x108>
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d86e      	bhi.n	800c592 <osSemaphoreNew+0x108>
    mem = -1;
 800c4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d015      	beq.n	800c4ec <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d006      	beq.n	800c4d6 <osSemaphoreNew+0x4c>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	2b4f      	cmp	r3, #79	; 0x4f
 800c4ce:	d902      	bls.n	800c4d6 <osSemaphoreNew+0x4c>
        mem = 1;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	61bb      	str	r3, [r7, #24]
 800c4d4:	e00c      	b.n	800c4f0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d108      	bne.n	800c4f0 <osSemaphoreNew+0x66>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d104      	bne.n	800c4f0 <osSemaphoreNew+0x66>
          mem = 0;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	61bb      	str	r3, [r7, #24]
 800c4ea:	e001      	b.n	800c4f0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f6:	d04c      	beq.n	800c592 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d128      	bne.n	800c550 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c4fe:	69bb      	ldr	r3, [r7, #24]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d10a      	bne.n	800c51a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	2203      	movs	r2, #3
 800c50a:	9200      	str	r2, [sp, #0]
 800c50c:	2200      	movs	r2, #0
 800c50e:	2100      	movs	r1, #0
 800c510:	2001      	movs	r0, #1
 800c512:	f000 ff91 	bl	800d438 <xQueueGenericCreateStatic>
 800c516:	61f8      	str	r0, [r7, #28]
 800c518:	e005      	b.n	800c526 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c51a:	2203      	movs	r2, #3
 800c51c:	2100      	movs	r1, #0
 800c51e:	2001      	movs	r0, #1
 800c520:	f001 f802 	bl	800d528 <xQueueGenericCreate>
 800c524:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c526:	69fb      	ldr	r3, [r7, #28]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d022      	beq.n	800c572 <osSemaphoreNew+0xe8>
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d01f      	beq.n	800c572 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c532:	2300      	movs	r3, #0
 800c534:	2200      	movs	r2, #0
 800c536:	2100      	movs	r1, #0
 800c538:	69f8      	ldr	r0, [r7, #28]
 800c53a:	f001 f8bd 	bl	800d6b8 <xQueueGenericSend>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b01      	cmp	r3, #1
 800c542:	d016      	beq.n	800c572 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c544:	69f8      	ldr	r0, [r7, #28]
 800c546:	f001 fd49 	bl	800dfdc <vQueueDelete>
            hSemaphore = NULL;
 800c54a:	2300      	movs	r3, #0
 800c54c:	61fb      	str	r3, [r7, #28]
 800c54e:	e010      	b.n	800c572 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d108      	bne.n	800c568 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	461a      	mov	r2, r3
 800c55c:	68b9      	ldr	r1, [r7, #8]
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f001 f83f 	bl	800d5e2 <xQueueCreateCountingSemaphoreStatic>
 800c564:	61f8      	str	r0, [r7, #28]
 800c566:	e004      	b.n	800c572 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c568:	68b9      	ldr	r1, [r7, #8]
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f001 f870 	bl	800d650 <xQueueCreateCountingSemaphore>
 800c570:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00c      	beq.n	800c592 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d003      	beq.n	800c586 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	617b      	str	r3, [r7, #20]
 800c584:	e001      	b.n	800c58a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c586:	2300      	movs	r3, #0
 800c588:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c58a:	6979      	ldr	r1, [r7, #20]
 800c58c:	69f8      	ldr	r0, [r7, #28]
 800c58e:	f001 fe71 	bl	800e274 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c592:	69fb      	ldr	r3, [r7, #28]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3720      	adds	r7, #32
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d103      	bne.n	800c5bc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c5b4:	f06f 0303 	mvn.w	r3, #3
 800c5b8:	617b      	str	r3, [r7, #20]
 800c5ba:	e039      	b.n	800c630 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5bc:	f3ef 8305 	mrs	r3, IPSR
 800c5c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d022      	beq.n	800c60e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d003      	beq.n	800c5d6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c5ce:	f06f 0303 	mvn.w	r3, #3
 800c5d2:	617b      	str	r3, [r7, #20]
 800c5d4:	e02c      	b.n	800c630 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c5da:	f107 0308 	add.w	r3, r7, #8
 800c5de:	461a      	mov	r2, r3
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	6938      	ldr	r0, [r7, #16]
 800c5e4:	f001 fc7a 	bl	800dedc <xQueueReceiveFromISR>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d003      	beq.n	800c5f6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c5ee:	f06f 0302 	mvn.w	r3, #2
 800c5f2:	617b      	str	r3, [r7, #20]
 800c5f4:	e01c      	b.n	800c630 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d019      	beq.n	800c630 <osSemaphoreAcquire+0x94>
 800c5fc:	4b0f      	ldr	r3, [pc, #60]	; (800c63c <osSemaphoreAcquire+0xa0>)
 800c5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	e010      	b.n	800c630 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c60e:	6839      	ldr	r1, [r7, #0]
 800c610:	6938      	ldr	r0, [r7, #16]
 800c612:	f001 fb57 	bl	800dcc4 <xQueueSemaphoreTake>
 800c616:	4603      	mov	r3, r0
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d009      	beq.n	800c630 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d003      	beq.n	800c62a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c622:	f06f 0301 	mvn.w	r3, #1
 800c626:	617b      	str	r3, [r7, #20]
 800c628:	e002      	b.n	800c630 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c62a:	f06f 0302 	mvn.w	r3, #2
 800c62e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c630:	697b      	ldr	r3, [r7, #20]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3718      	adds	r7, #24
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	e000ed04 	.word	0xe000ed04

0800c640 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c64c:	2300      	movs	r3, #0
 800c64e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d103      	bne.n	800c65e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c656:	f06f 0303 	mvn.w	r3, #3
 800c65a:	617b      	str	r3, [r7, #20]
 800c65c:	e02c      	b.n	800c6b8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c65e:	f3ef 8305 	mrs	r3, IPSR
 800c662:	60fb      	str	r3, [r7, #12]
  return(result);
 800c664:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c666:	2b00      	cmp	r3, #0
 800c668:	d01a      	beq.n	800c6a0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c66a:	2300      	movs	r3, #0
 800c66c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c66e:	f107 0308 	add.w	r3, r7, #8
 800c672:	4619      	mov	r1, r3
 800c674:	6938      	ldr	r0, [r7, #16]
 800c676:	f001 f9b8 	bl	800d9ea <xQueueGiveFromISR>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d003      	beq.n	800c688 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c680:	f06f 0302 	mvn.w	r3, #2
 800c684:	617b      	str	r3, [r7, #20]
 800c686:	e017      	b.n	800c6b8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d014      	beq.n	800c6b8 <osSemaphoreRelease+0x78>
 800c68e:	4b0d      	ldr	r3, [pc, #52]	; (800c6c4 <osSemaphoreRelease+0x84>)
 800c690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c694:	601a      	str	r2, [r3, #0]
 800c696:	f3bf 8f4f 	dsb	sy
 800c69a:	f3bf 8f6f 	isb	sy
 800c69e:	e00b      	b.n	800c6b8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	6938      	ldr	r0, [r7, #16]
 800c6a8:	f001 f806 	bl	800d6b8 <xQueueGenericSend>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d002      	beq.n	800c6b8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c6b2:	f06f 0302 	mvn.w	r3, #2
 800c6b6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c6b8:	697b      	ldr	r3, [r7, #20]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3718      	adds	r7, #24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	e000ed04 	.word	0xe000ed04

0800c6c8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b08a      	sub	sp, #40	; 0x28
 800c6cc:	af02      	add	r7, sp, #8
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6d8:	f3ef 8305 	mrs	r3, IPSR
 800c6dc:	613b      	str	r3, [r7, #16]
  return(result);
 800c6de:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d15f      	bne.n	800c7a4 <osMessageQueueNew+0xdc>
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d05c      	beq.n	800c7a4 <osMessageQueueNew+0xdc>
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d059      	beq.n	800c7a4 <osMessageQueueNew+0xdc>
    mem = -1;
 800c6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d029      	beq.n	800c750 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d012      	beq.n	800c72a <osMessageQueueNew+0x62>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	2b4f      	cmp	r3, #79	; 0x4f
 800c70a:	d90e      	bls.n	800c72a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00a      	beq.n	800c72a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	695a      	ldr	r2, [r3, #20]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	68b9      	ldr	r1, [r7, #8]
 800c71c:	fb01 f303 	mul.w	r3, r1, r3
 800c720:	429a      	cmp	r2, r3
 800c722:	d302      	bcc.n	800c72a <osMessageQueueNew+0x62>
        mem = 1;
 800c724:	2301      	movs	r3, #1
 800c726:	61bb      	str	r3, [r7, #24]
 800c728:	e014      	b.n	800c754 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d110      	bne.n	800c754 <osMessageQueueNew+0x8c>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10c      	bne.n	800c754 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d108      	bne.n	800c754 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d104      	bne.n	800c754 <osMessageQueueNew+0x8c>
          mem = 0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	61bb      	str	r3, [r7, #24]
 800c74e:	e001      	b.n	800c754 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d10b      	bne.n	800c772 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	691a      	ldr	r2, [r3, #16]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	2100      	movs	r1, #0
 800c764:	9100      	str	r1, [sp, #0]
 800c766:	68b9      	ldr	r1, [r7, #8]
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f000 fe65 	bl	800d438 <xQueueGenericCreateStatic>
 800c76e:	61f8      	str	r0, [r7, #28]
 800c770:	e008      	b.n	800c784 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d105      	bne.n	800c784 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c778:	2200      	movs	r2, #0
 800c77a:	68b9      	ldr	r1, [r7, #8]
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f000 fed3 	bl	800d528 <xQueueGenericCreate>
 800c782:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00c      	beq.n	800c7a4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d003      	beq.n	800c798 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	617b      	str	r3, [r7, #20]
 800c796:	e001      	b.n	800c79c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c798:	2300      	movs	r3, #0
 800c79a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c79c:	6979      	ldr	r1, [r7, #20]
 800c79e:	69f8      	ldr	r0, [r7, #28]
 800c7a0:	f001 fd68 	bl	800e274 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c7a4:	69fb      	ldr	r3, [r7, #28]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3720      	adds	r7, #32
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
	...

0800c7b0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b088      	sub	sp, #32
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	603b      	str	r3, [r7, #0]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7c8:	f3ef 8305 	mrs	r3, IPSR
 800c7cc:	617b      	str	r3, [r7, #20]
  return(result);
 800c7ce:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d028      	beq.n	800c826 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d005      	beq.n	800c7e6 <osMessageQueuePut+0x36>
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d002      	beq.n	800c7e6 <osMessageQueuePut+0x36>
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c7e6:	f06f 0303 	mvn.w	r3, #3
 800c7ea:	61fb      	str	r3, [r7, #28]
 800c7ec:	e038      	b.n	800c860 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c7f2:	f107 0210 	add.w	r2, r7, #16
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	68b9      	ldr	r1, [r7, #8]
 800c7fa:	69b8      	ldr	r0, [r7, #24]
 800c7fc:	f001 f85a 	bl	800d8b4 <xQueueGenericSendFromISR>
 800c800:	4603      	mov	r3, r0
 800c802:	2b01      	cmp	r3, #1
 800c804:	d003      	beq.n	800c80e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c806:	f06f 0302 	mvn.w	r3, #2
 800c80a:	61fb      	str	r3, [r7, #28]
 800c80c:	e028      	b.n	800c860 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d025      	beq.n	800c860 <osMessageQueuePut+0xb0>
 800c814:	4b15      	ldr	r3, [pc, #84]	; (800c86c <osMessageQueuePut+0xbc>)
 800c816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	e01c      	b.n	800c860 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <osMessageQueuePut+0x82>
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d103      	bne.n	800c83a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c832:	f06f 0303 	mvn.w	r3, #3
 800c836:	61fb      	str	r3, [r7, #28]
 800c838:	e012      	b.n	800c860 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c83a:	2300      	movs	r3, #0
 800c83c:	683a      	ldr	r2, [r7, #0]
 800c83e:	68b9      	ldr	r1, [r7, #8]
 800c840:	69b8      	ldr	r0, [r7, #24]
 800c842:	f000 ff39 	bl	800d6b8 <xQueueGenericSend>
 800c846:	4603      	mov	r3, r0
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d009      	beq.n	800c860 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d003      	beq.n	800c85a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c852:	f06f 0301 	mvn.w	r3, #1
 800c856:	61fb      	str	r3, [r7, #28]
 800c858:	e002      	b.n	800c860 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c85a:	f06f 0302 	mvn.w	r3, #2
 800c85e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c860:	69fb      	ldr	r3, [r7, #28]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3720      	adds	r7, #32
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	e000ed04 	.word	0xe000ed04

0800c870 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c870:	b580      	push	{r7, lr}
 800c872:	b088      	sub	sp, #32
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]
 800c87c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c882:	2300      	movs	r3, #0
 800c884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c886:	f3ef 8305 	mrs	r3, IPSR
 800c88a:	617b      	str	r3, [r7, #20]
  return(result);
 800c88c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d028      	beq.n	800c8e4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d005      	beq.n	800c8a4 <osMessageQueueGet+0x34>
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d002      	beq.n	800c8a4 <osMessageQueueGet+0x34>
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d003      	beq.n	800c8ac <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c8a4:	f06f 0303 	mvn.w	r3, #3
 800c8a8:	61fb      	str	r3, [r7, #28]
 800c8aa:	e037      	b.n	800c91c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c8b0:	f107 0310 	add.w	r3, r7, #16
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	68b9      	ldr	r1, [r7, #8]
 800c8b8:	69b8      	ldr	r0, [r7, #24]
 800c8ba:	f001 fb0f 	bl	800dedc <xQueueReceiveFromISR>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d003      	beq.n	800c8cc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c8c4:	f06f 0302 	mvn.w	r3, #2
 800c8c8:	61fb      	str	r3, [r7, #28]
 800c8ca:	e027      	b.n	800c91c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d024      	beq.n	800c91c <osMessageQueueGet+0xac>
 800c8d2:	4b15      	ldr	r3, [pc, #84]	; (800c928 <osMessageQueueGet+0xb8>)
 800c8d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8d8:	601a      	str	r2, [r3, #0]
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	e01b      	b.n	800c91c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d002      	beq.n	800c8f0 <osMessageQueueGet+0x80>
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d103      	bne.n	800c8f8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c8f0:	f06f 0303 	mvn.w	r3, #3
 800c8f4:	61fb      	str	r3, [r7, #28]
 800c8f6:	e011      	b.n	800c91c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c8f8:	683a      	ldr	r2, [r7, #0]
 800c8fa:	68b9      	ldr	r1, [r7, #8]
 800c8fc:	69b8      	ldr	r0, [r7, #24]
 800c8fe:	f001 f901 	bl	800db04 <xQueueReceive>
 800c902:	4603      	mov	r3, r0
 800c904:	2b01      	cmp	r3, #1
 800c906:	d009      	beq.n	800c91c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d003      	beq.n	800c916 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c90e:	f06f 0301 	mvn.w	r3, #1
 800c912:	61fb      	str	r3, [r7, #28]
 800c914:	e002      	b.n	800c91c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c916:	f06f 0302 	mvn.w	r3, #2
 800c91a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c91c:	69fb      	ldr	r3, [r7, #28]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3720      	adds	r7, #32
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	e000ed04 	.word	0xe000ed04

0800c92c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c92c:	b480      	push	{r7}
 800c92e:	b085      	sub	sp, #20
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	4a07      	ldr	r2, [pc, #28]	; (800c958 <vApplicationGetIdleTaskMemory+0x2c>)
 800c93c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	4a06      	ldr	r2, [pc, #24]	; (800c95c <vApplicationGetIdleTaskMemory+0x30>)
 800c942:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2280      	movs	r2, #128	; 0x80
 800c948:	601a      	str	r2, [r3, #0]
}
 800c94a:	bf00      	nop
 800c94c:	3714      	adds	r7, #20
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	20003818 	.word	0x20003818
 800c95c:	200038c4 	.word	0x200038c4

0800c960 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	4a07      	ldr	r2, [pc, #28]	; (800c98c <vApplicationGetTimerTaskMemory+0x2c>)
 800c970:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	4a06      	ldr	r2, [pc, #24]	; (800c990 <vApplicationGetTimerTaskMemory+0x30>)
 800c976:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c97e:	601a      	str	r2, [r3, #0]
}
 800c980:	bf00      	nop
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr
 800c98c:	20003ac4 	.word	0x20003ac4
 800c990:	20003b70 	.word	0x20003b70

0800c994 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b08a      	sub	sp, #40	; 0x28
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c99c:	2300      	movs	r3, #0
 800c99e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c9a0:	f001 ff50 	bl	800e844 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c9a4:	4b5b      	ldr	r3, [pc, #364]	; (800cb14 <pvPortMalloc+0x180>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d101      	bne.n	800c9b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c9ac:	f000 f920 	bl	800cbf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c9b0:	4b59      	ldr	r3, [pc, #356]	; (800cb18 <pvPortMalloc+0x184>)
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f040 8093 	bne.w	800cae4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d01d      	beq.n	800ca00 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c9c4:	2208      	movs	r2, #8
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f003 0307 	and.w	r3, r3, #7
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d014      	beq.n	800ca00 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f023 0307 	bic.w	r3, r3, #7
 800c9dc:	3308      	adds	r3, #8
 800c9de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f003 0307 	and.w	r3, r3, #7
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d00a      	beq.n	800ca00 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ee:	f383 8811 	msr	BASEPRI, r3
 800c9f2:	f3bf 8f6f 	isb	sy
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c9fc:	bf00      	nop
 800c9fe:	e7fe      	b.n	800c9fe <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d06e      	beq.n	800cae4 <pvPortMalloc+0x150>
 800ca06:	4b45      	ldr	r3, [pc, #276]	; (800cb1c <pvPortMalloc+0x188>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d869      	bhi.n	800cae4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca10:	4b43      	ldr	r3, [pc, #268]	; (800cb20 <pvPortMalloc+0x18c>)
 800ca12:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca14:	4b42      	ldr	r3, [pc, #264]	; (800cb20 <pvPortMalloc+0x18c>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca1a:	e004      	b.n	800ca26 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d903      	bls.n	800ca38 <pvPortMalloc+0xa4>
 800ca30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1f1      	bne.n	800ca1c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca38:	4b36      	ldr	r3, [pc, #216]	; (800cb14 <pvPortMalloc+0x180>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d050      	beq.n	800cae4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca42:	6a3b      	ldr	r3, [r7, #32]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2208      	movs	r2, #8
 800ca48:	4413      	add	r3, r2
 800ca4a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	6a3b      	ldr	r3, [r7, #32]
 800ca52:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca56:	685a      	ldr	r2, [r3, #4]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	1ad2      	subs	r2, r2, r3
 800ca5c:	2308      	movs	r3, #8
 800ca5e:	005b      	lsls	r3, r3, #1
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d91f      	bls.n	800caa4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	4413      	add	r3, r2
 800ca6a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	f003 0307 	and.w	r3, r3, #7
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d00a      	beq.n	800ca8c <pvPortMalloc+0xf8>
	__asm volatile
 800ca76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca7a:	f383 8811 	msr	BASEPRI, r3
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f3bf 8f4f 	dsb	sy
 800ca86:	613b      	str	r3, [r7, #16]
}
 800ca88:	bf00      	nop
 800ca8a:	e7fe      	b.n	800ca8a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	685a      	ldr	r2, [r3, #4]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	1ad2      	subs	r2, r2, r3
 800ca94:	69bb      	ldr	r3, [r7, #24]
 800ca96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca9e:	69b8      	ldr	r0, [r7, #24]
 800caa0:	f000 f908 	bl	800ccb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800caa4:	4b1d      	ldr	r3, [pc, #116]	; (800cb1c <pvPortMalloc+0x188>)
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	4a1b      	ldr	r2, [pc, #108]	; (800cb1c <pvPortMalloc+0x188>)
 800cab0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cab2:	4b1a      	ldr	r3, [pc, #104]	; (800cb1c <pvPortMalloc+0x188>)
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	4b1b      	ldr	r3, [pc, #108]	; (800cb24 <pvPortMalloc+0x190>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d203      	bcs.n	800cac6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cabe:	4b17      	ldr	r3, [pc, #92]	; (800cb1c <pvPortMalloc+0x188>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a18      	ldr	r2, [pc, #96]	; (800cb24 <pvPortMalloc+0x190>)
 800cac4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac8:	685a      	ldr	r2, [r3, #4]
 800caca:	4b13      	ldr	r3, [pc, #76]	; (800cb18 <pvPortMalloc+0x184>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	431a      	orrs	r2, r3
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad6:	2200      	movs	r2, #0
 800cad8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cada:	4b13      	ldr	r3, [pc, #76]	; (800cb28 <pvPortMalloc+0x194>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	3301      	adds	r3, #1
 800cae0:	4a11      	ldr	r2, [pc, #68]	; (800cb28 <pvPortMalloc+0x194>)
 800cae2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cae4:	f001 febc 	bl	800e860 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	f003 0307 	and.w	r3, r3, #7
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00a      	beq.n	800cb08 <pvPortMalloc+0x174>
	__asm volatile
 800caf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf6:	f383 8811 	msr	BASEPRI, r3
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	60fb      	str	r3, [r7, #12]
}
 800cb04:	bf00      	nop
 800cb06:	e7fe      	b.n	800cb06 <pvPortMalloc+0x172>
	return pvReturn;
 800cb08:	69fb      	ldr	r3, [r7, #28]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3728      	adds	r7, #40	; 0x28
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	20013f78 	.word	0x20013f78
 800cb18:	20013f8c 	.word	0x20013f8c
 800cb1c:	20013f7c 	.word	0x20013f7c
 800cb20:	20013f70 	.word	0x20013f70
 800cb24:	20013f80 	.word	0x20013f80
 800cb28:	20013f84 	.word	0x20013f84

0800cb2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b086      	sub	sp, #24
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d04d      	beq.n	800cbda <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb3e:	2308      	movs	r3, #8
 800cb40:	425b      	negs	r3, r3
 800cb42:	697a      	ldr	r2, [r7, #20]
 800cb44:	4413      	add	r3, r2
 800cb46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	685a      	ldr	r2, [r3, #4]
 800cb50:	4b24      	ldr	r3, [pc, #144]	; (800cbe4 <vPortFree+0xb8>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4013      	ands	r3, r2
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10a      	bne.n	800cb70 <vPortFree+0x44>
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	60fb      	str	r3, [r7, #12]
}
 800cb6c:	bf00      	nop
 800cb6e:	e7fe      	b.n	800cb6e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d00a      	beq.n	800cb8e <vPortFree+0x62>
	__asm volatile
 800cb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7c:	f383 8811 	msr	BASEPRI, r3
 800cb80:	f3bf 8f6f 	isb	sy
 800cb84:	f3bf 8f4f 	dsb	sy
 800cb88:	60bb      	str	r3, [r7, #8]
}
 800cb8a:	bf00      	nop
 800cb8c:	e7fe      	b.n	800cb8c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	685a      	ldr	r2, [r3, #4]
 800cb92:	4b14      	ldr	r3, [pc, #80]	; (800cbe4 <vPortFree+0xb8>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4013      	ands	r3, r2
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d01e      	beq.n	800cbda <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d11a      	bne.n	800cbda <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	685a      	ldr	r2, [r3, #4]
 800cba8:	4b0e      	ldr	r3, [pc, #56]	; (800cbe4 <vPortFree+0xb8>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	43db      	mvns	r3, r3
 800cbae:	401a      	ands	r2, r3
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cbb4:	f001 fe46 	bl	800e844 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	685a      	ldr	r2, [r3, #4]
 800cbbc:	4b0a      	ldr	r3, [pc, #40]	; (800cbe8 <vPortFree+0xbc>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	4a09      	ldr	r2, [pc, #36]	; (800cbe8 <vPortFree+0xbc>)
 800cbc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cbc6:	6938      	ldr	r0, [r7, #16]
 800cbc8:	f000 f874 	bl	800ccb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cbcc:	4b07      	ldr	r3, [pc, #28]	; (800cbec <vPortFree+0xc0>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	4a06      	ldr	r2, [pc, #24]	; (800cbec <vPortFree+0xc0>)
 800cbd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cbd6:	f001 fe43 	bl	800e860 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cbda:	bf00      	nop
 800cbdc:	3718      	adds	r7, #24
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	20013f8c 	.word	0x20013f8c
 800cbe8:	20013f7c 	.word	0x20013f7c
 800cbec:	20013f88 	.word	0x20013f88

0800cbf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cbfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbfc:	4b27      	ldr	r3, [pc, #156]	; (800cc9c <prvHeapInit+0xac>)
 800cbfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f003 0307 	and.w	r3, r3, #7
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00c      	beq.n	800cc24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3307      	adds	r3, #7
 800cc0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f023 0307 	bic.w	r3, r3, #7
 800cc16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc18:	68ba      	ldr	r2, [r7, #8]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	1ad3      	subs	r3, r2, r3
 800cc1e:	4a1f      	ldr	r2, [pc, #124]	; (800cc9c <prvHeapInit+0xac>)
 800cc20:	4413      	add	r3, r2
 800cc22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc28:	4a1d      	ldr	r2, [pc, #116]	; (800cca0 <prvHeapInit+0xb0>)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc2e:	4b1c      	ldr	r3, [pc, #112]	; (800cca0 <prvHeapInit+0xb0>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	4413      	add	r3, r2
 800cc3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc3c:	2208      	movs	r2, #8
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	1a9b      	subs	r3, r3, r2
 800cc42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f023 0307 	bic.w	r3, r3, #7
 800cc4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	4a15      	ldr	r2, [pc, #84]	; (800cca4 <prvHeapInit+0xb4>)
 800cc50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc52:	4b14      	ldr	r3, [pc, #80]	; (800cca4 <prvHeapInit+0xb4>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2200      	movs	r2, #0
 800cc58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc5a:	4b12      	ldr	r3, [pc, #72]	; (800cca4 <prvHeapInit+0xb4>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	1ad2      	subs	r2, r2, r3
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc70:	4b0c      	ldr	r3, [pc, #48]	; (800cca4 <prvHeapInit+0xb4>)
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	4a0a      	ldr	r2, [pc, #40]	; (800cca8 <prvHeapInit+0xb8>)
 800cc7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	4a09      	ldr	r2, [pc, #36]	; (800ccac <prvHeapInit+0xbc>)
 800cc86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc88:	4b09      	ldr	r3, [pc, #36]	; (800ccb0 <prvHeapInit+0xc0>)
 800cc8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc8e:	601a      	str	r2, [r3, #0]
}
 800cc90:	bf00      	nop
 800cc92:	3714      	adds	r7, #20
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	20003f70 	.word	0x20003f70
 800cca0:	20013f70 	.word	0x20013f70
 800cca4:	20013f78 	.word	0x20013f78
 800cca8:	20013f80 	.word	0x20013f80
 800ccac:	20013f7c 	.word	0x20013f7c
 800ccb0:	20013f8c 	.word	0x20013f8c

0800ccb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ccbc:	4b28      	ldr	r3, [pc, #160]	; (800cd60 <prvInsertBlockIntoFreeList+0xac>)
 800ccbe:	60fb      	str	r3, [r7, #12]
 800ccc0:	e002      	b.n	800ccc8 <prvInsertBlockIntoFreeList+0x14>
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	60fb      	str	r3, [r7, #12]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d8f7      	bhi.n	800ccc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	4413      	add	r3, r2
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d108      	bne.n	800ccf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	685a      	ldr	r2, [r3, #4]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	441a      	add	r2, r3
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	441a      	add	r2, r3
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d118      	bne.n	800cd3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	4b15      	ldr	r3, [pc, #84]	; (800cd64 <prvInsertBlockIntoFreeList+0xb0>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d00d      	beq.n	800cd32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	685a      	ldr	r2, [r3, #4]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	441a      	add	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	601a      	str	r2, [r3, #0]
 800cd30:	e008      	b.n	800cd44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd32:	4b0c      	ldr	r3, [pc, #48]	; (800cd64 <prvInsertBlockIntoFreeList+0xb0>)
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	601a      	str	r2, [r3, #0]
 800cd3a:	e003      	b.n	800cd44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d002      	beq.n	800cd52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd52:	bf00      	nop
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	20013f70 	.word	0x20013f70
 800cd64:	20013f78 	.word	0x20013f78

0800cd68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b083      	sub	sp, #12
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f103 0208 	add.w	r2, r3, #8
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f103 0208 	add.w	r2, r3, #8
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f103 0208 	add.w	r2, r3, #8
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd9c:	bf00      	nop
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cdb6:	bf00      	nop
 800cdb8:	370c      	adds	r7, #12
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr

0800cdc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cdc2:	b480      	push	{r7}
 800cdc4:	b085      	sub	sp, #20
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
 800cdca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	689a      	ldr	r2, [r3, #8]
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	689b      	ldr	r3, [r3, #8]
 800cde4:	683a      	ldr	r2, [r7, #0]
 800cde6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	683a      	ldr	r2, [r7, #0]
 800cdec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	1c5a      	adds	r2, r3, #1
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	601a      	str	r2, [r3, #0]
}
 800cdfe:	bf00      	nop
 800ce00:	3714      	adds	r7, #20
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr

0800ce0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce0a:	b480      	push	{r7}
 800ce0c:	b085      	sub	sp, #20
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
 800ce12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce20:	d103      	bne.n	800ce2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	691b      	ldr	r3, [r3, #16]
 800ce26:	60fb      	str	r3, [r7, #12]
 800ce28:	e00c      	b.n	800ce44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	3308      	adds	r3, #8
 800ce2e:	60fb      	str	r3, [r7, #12]
 800ce30:	e002      	b.n	800ce38 <vListInsert+0x2e>
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	60fb      	str	r3, [r7, #12]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	68ba      	ldr	r2, [r7, #8]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d2f6      	bcs.n	800ce32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	685a      	ldr	r2, [r3, #4]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	683a      	ldr	r2, [r7, #0]
 800ce52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	683a      	ldr	r2, [r7, #0]
 800ce5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	1c5a      	adds	r2, r3, #1
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	601a      	str	r2, [r3, #0]
}
 800ce70:	bf00      	nop
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	691b      	ldr	r3, [r3, #16]
 800ce88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	6892      	ldr	r2, [r2, #8]
 800ce92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	6852      	ldr	r2, [r2, #4]
 800ce9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d103      	bne.n	800ceb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	689a      	ldr	r2, [r3, #8]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	1e5a      	subs	r2, r3, #1
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3714      	adds	r7, #20
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	3b04      	subs	r3, #4
 800cee0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	3b04      	subs	r3, #4
 800ceee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	f023 0201 	bic.w	r2, r3, #1
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	3b04      	subs	r3, #4
 800cefe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf00:	4a0c      	ldr	r2, [pc, #48]	; (800cf34 <pxPortInitialiseStack+0x64>)
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	3b14      	subs	r3, #20
 800cf0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	3b04      	subs	r3, #4
 800cf16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f06f 0202 	mvn.w	r2, #2
 800cf1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	3b20      	subs	r3, #32
 800cf24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf26:	68fb      	ldr	r3, [r7, #12]
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3714      	adds	r7, #20
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr
 800cf34:	0800cf39 	.word	0x0800cf39

0800cf38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cf42:	4b12      	ldr	r3, [pc, #72]	; (800cf8c <prvTaskExitError+0x54>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf4a:	d00a      	beq.n	800cf62 <prvTaskExitError+0x2a>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	60fb      	str	r3, [r7, #12]
}
 800cf5e:	bf00      	nop
 800cf60:	e7fe      	b.n	800cf60 <prvTaskExitError+0x28>
	__asm volatile
 800cf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf66:	f383 8811 	msr	BASEPRI, r3
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	60bb      	str	r3, [r7, #8]
}
 800cf74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cf76:	bf00      	nop
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d0fc      	beq.n	800cf78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf7e:	bf00      	nop
 800cf80:	bf00      	nop
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	2000008c 	.word	0x2000008c

0800cf90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cf90:	4b07      	ldr	r3, [pc, #28]	; (800cfb0 <pxCurrentTCBConst2>)
 800cf92:	6819      	ldr	r1, [r3, #0]
 800cf94:	6808      	ldr	r0, [r1, #0]
 800cf96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf9a:	f380 8809 	msr	PSP, r0
 800cf9e:	f3bf 8f6f 	isb	sy
 800cfa2:	f04f 0000 	mov.w	r0, #0
 800cfa6:	f380 8811 	msr	BASEPRI, r0
 800cfaa:	4770      	bx	lr
 800cfac:	f3af 8000 	nop.w

0800cfb0 <pxCurrentTCBConst2>:
 800cfb0:	20013fd8 	.word	0x20013fd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cfb4:	bf00      	nop
 800cfb6:	bf00      	nop

0800cfb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cfb8:	4808      	ldr	r0, [pc, #32]	; (800cfdc <prvPortStartFirstTask+0x24>)
 800cfba:	6800      	ldr	r0, [r0, #0]
 800cfbc:	6800      	ldr	r0, [r0, #0]
 800cfbe:	f380 8808 	msr	MSP, r0
 800cfc2:	f04f 0000 	mov.w	r0, #0
 800cfc6:	f380 8814 	msr	CONTROL, r0
 800cfca:	b662      	cpsie	i
 800cfcc:	b661      	cpsie	f
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	df00      	svc	0
 800cfd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cfda:	bf00      	nop
 800cfdc:	e000ed08 	.word	0xe000ed08

0800cfe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cfe6:	4b46      	ldr	r3, [pc, #280]	; (800d100 <xPortStartScheduler+0x120>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a46      	ldr	r2, [pc, #280]	; (800d104 <xPortStartScheduler+0x124>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d10a      	bne.n	800d006 <xPortStartScheduler+0x26>
	__asm volatile
 800cff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff4:	f383 8811 	msr	BASEPRI, r3
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	613b      	str	r3, [r7, #16]
}
 800d002:	bf00      	nop
 800d004:	e7fe      	b.n	800d004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d006:	4b3e      	ldr	r3, [pc, #248]	; (800d100 <xPortStartScheduler+0x120>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a3f      	ldr	r2, [pc, #252]	; (800d108 <xPortStartScheduler+0x128>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d10a      	bne.n	800d026 <xPortStartScheduler+0x46>
	__asm volatile
 800d010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	60fb      	str	r3, [r7, #12]
}
 800d022:	bf00      	nop
 800d024:	e7fe      	b.n	800d024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d026:	4b39      	ldr	r3, [pc, #228]	; (800d10c <xPortStartScheduler+0x12c>)
 800d028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	22ff      	movs	r2, #255	; 0xff
 800d036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d040:	78fb      	ldrb	r3, [r7, #3]
 800d042:	b2db      	uxtb	r3, r3
 800d044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d048:	b2da      	uxtb	r2, r3
 800d04a:	4b31      	ldr	r3, [pc, #196]	; (800d110 <xPortStartScheduler+0x130>)
 800d04c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d04e:	4b31      	ldr	r3, [pc, #196]	; (800d114 <xPortStartScheduler+0x134>)
 800d050:	2207      	movs	r2, #7
 800d052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d054:	e009      	b.n	800d06a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d056:	4b2f      	ldr	r3, [pc, #188]	; (800d114 <xPortStartScheduler+0x134>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	3b01      	subs	r3, #1
 800d05c:	4a2d      	ldr	r2, [pc, #180]	; (800d114 <xPortStartScheduler+0x134>)
 800d05e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d060:	78fb      	ldrb	r3, [r7, #3]
 800d062:	b2db      	uxtb	r3, r3
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	b2db      	uxtb	r3, r3
 800d068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d06a:	78fb      	ldrb	r3, [r7, #3]
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d072:	2b80      	cmp	r3, #128	; 0x80
 800d074:	d0ef      	beq.n	800d056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d076:	4b27      	ldr	r3, [pc, #156]	; (800d114 <xPortStartScheduler+0x134>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f1c3 0307 	rsb	r3, r3, #7
 800d07e:	2b04      	cmp	r3, #4
 800d080:	d00a      	beq.n	800d098 <xPortStartScheduler+0xb8>
	__asm volatile
 800d082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d086:	f383 8811 	msr	BASEPRI, r3
 800d08a:	f3bf 8f6f 	isb	sy
 800d08e:	f3bf 8f4f 	dsb	sy
 800d092:	60bb      	str	r3, [r7, #8]
}
 800d094:	bf00      	nop
 800d096:	e7fe      	b.n	800d096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d098:	4b1e      	ldr	r3, [pc, #120]	; (800d114 <xPortStartScheduler+0x134>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	021b      	lsls	r3, r3, #8
 800d09e:	4a1d      	ldr	r2, [pc, #116]	; (800d114 <xPortStartScheduler+0x134>)
 800d0a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d0a2:	4b1c      	ldr	r3, [pc, #112]	; (800d114 <xPortStartScheduler+0x134>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d0aa:	4a1a      	ldr	r2, [pc, #104]	; (800d114 <xPortStartScheduler+0x134>)
 800d0ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d0b6:	4b18      	ldr	r3, [pc, #96]	; (800d118 <xPortStartScheduler+0x138>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a17      	ldr	r2, [pc, #92]	; (800d118 <xPortStartScheduler+0x138>)
 800d0bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d0c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d0c2:	4b15      	ldr	r3, [pc, #84]	; (800d118 <xPortStartScheduler+0x138>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4a14      	ldr	r2, [pc, #80]	; (800d118 <xPortStartScheduler+0x138>)
 800d0c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d0cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d0ce:	f000 f8dd 	bl	800d28c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d0d2:	4b12      	ldr	r3, [pc, #72]	; (800d11c <xPortStartScheduler+0x13c>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d0d8:	f000 f8fc 	bl	800d2d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d0dc:	4b10      	ldr	r3, [pc, #64]	; (800d120 <xPortStartScheduler+0x140>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a0f      	ldr	r2, [pc, #60]	; (800d120 <xPortStartScheduler+0x140>)
 800d0e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d0e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d0e8:	f7ff ff66 	bl	800cfb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d0ec:	f001 fd20 	bl	800eb30 <vTaskSwitchContext>
	prvTaskExitError();
 800d0f0:	f7ff ff22 	bl	800cf38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3718      	adds	r7, #24
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	e000ed00 	.word	0xe000ed00
 800d104:	410fc271 	.word	0x410fc271
 800d108:	410fc270 	.word	0x410fc270
 800d10c:	e000e400 	.word	0xe000e400
 800d110:	20013f90 	.word	0x20013f90
 800d114:	20013f94 	.word	0x20013f94
 800d118:	e000ed20 	.word	0xe000ed20
 800d11c:	2000008c 	.word	0x2000008c
 800d120:	e000ef34 	.word	0xe000ef34

0800d124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
	__asm volatile
 800d12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12e:	f383 8811 	msr	BASEPRI, r3
 800d132:	f3bf 8f6f 	isb	sy
 800d136:	f3bf 8f4f 	dsb	sy
 800d13a:	607b      	str	r3, [r7, #4]
}
 800d13c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d13e:	4b0f      	ldr	r3, [pc, #60]	; (800d17c <vPortEnterCritical+0x58>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	3301      	adds	r3, #1
 800d144:	4a0d      	ldr	r2, [pc, #52]	; (800d17c <vPortEnterCritical+0x58>)
 800d146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d148:	4b0c      	ldr	r3, [pc, #48]	; (800d17c <vPortEnterCritical+0x58>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d10f      	bne.n	800d170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d150:	4b0b      	ldr	r3, [pc, #44]	; (800d180 <vPortEnterCritical+0x5c>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	b2db      	uxtb	r3, r3
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00a      	beq.n	800d170 <vPortEnterCritical+0x4c>
	__asm volatile
 800d15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15e:	f383 8811 	msr	BASEPRI, r3
 800d162:	f3bf 8f6f 	isb	sy
 800d166:	f3bf 8f4f 	dsb	sy
 800d16a:	603b      	str	r3, [r7, #0]
}
 800d16c:	bf00      	nop
 800d16e:	e7fe      	b.n	800d16e <vPortEnterCritical+0x4a>
	}
}
 800d170:	bf00      	nop
 800d172:	370c      	adds	r7, #12
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr
 800d17c:	2000008c 	.word	0x2000008c
 800d180:	e000ed04 	.word	0xe000ed04

0800d184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d18a:	4b12      	ldr	r3, [pc, #72]	; (800d1d4 <vPortExitCritical+0x50>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10a      	bne.n	800d1a8 <vPortExitCritical+0x24>
	__asm volatile
 800d192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d196:	f383 8811 	msr	BASEPRI, r3
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	607b      	str	r3, [r7, #4]
}
 800d1a4:	bf00      	nop
 800d1a6:	e7fe      	b.n	800d1a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d1a8:	4b0a      	ldr	r3, [pc, #40]	; (800d1d4 <vPortExitCritical+0x50>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	4a09      	ldr	r2, [pc, #36]	; (800d1d4 <vPortExitCritical+0x50>)
 800d1b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d1b2:	4b08      	ldr	r3, [pc, #32]	; (800d1d4 <vPortExitCritical+0x50>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d105      	bne.n	800d1c6 <vPortExitCritical+0x42>
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d1c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d1c6:	bf00      	nop
 800d1c8:	370c      	adds	r7, #12
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	2000008c 	.word	0x2000008c
	...

0800d1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d1e0:	f3ef 8009 	mrs	r0, PSP
 800d1e4:	f3bf 8f6f 	isb	sy
 800d1e8:	4b15      	ldr	r3, [pc, #84]	; (800d240 <pxCurrentTCBConst>)
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	f01e 0f10 	tst.w	lr, #16
 800d1f0:	bf08      	it	eq
 800d1f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d1f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fa:	6010      	str	r0, [r2, #0]
 800d1fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d200:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d204:	f380 8811 	msr	BASEPRI, r0
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f001 fc8e 	bl	800eb30 <vTaskSwitchContext>
 800d214:	f04f 0000 	mov.w	r0, #0
 800d218:	f380 8811 	msr	BASEPRI, r0
 800d21c:	bc09      	pop	{r0, r3}
 800d21e:	6819      	ldr	r1, [r3, #0]
 800d220:	6808      	ldr	r0, [r1, #0]
 800d222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d226:	f01e 0f10 	tst.w	lr, #16
 800d22a:	bf08      	it	eq
 800d22c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d230:	f380 8809 	msr	PSP, r0
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	f3af 8000 	nop.w

0800d240 <pxCurrentTCBConst>:
 800d240:	20013fd8 	.word	0x20013fd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d244:	bf00      	nop
 800d246:	bf00      	nop

0800d248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
	__asm volatile
 800d24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d252:	f383 8811 	msr	BASEPRI, r3
 800d256:	f3bf 8f6f 	isb	sy
 800d25a:	f3bf 8f4f 	dsb	sy
 800d25e:	607b      	str	r3, [r7, #4]
}
 800d260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d262:	f001 fbab 	bl	800e9bc <xTaskIncrementTick>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d26c:	4b06      	ldr	r3, [pc, #24]	; (800d288 <xPortSysTickHandler+0x40>)
 800d26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d272:	601a      	str	r2, [r3, #0]
 800d274:	2300      	movs	r3, #0
 800d276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	f383 8811 	msr	BASEPRI, r3
}
 800d27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d280:	bf00      	nop
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	e000ed04 	.word	0xe000ed04

0800d28c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d28c:	b480      	push	{r7}
 800d28e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d290:	4b0b      	ldr	r3, [pc, #44]	; (800d2c0 <vPortSetupTimerInterrupt+0x34>)
 800d292:	2200      	movs	r2, #0
 800d294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d296:	4b0b      	ldr	r3, [pc, #44]	; (800d2c4 <vPortSetupTimerInterrupt+0x38>)
 800d298:	2200      	movs	r2, #0
 800d29a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d29c:	4b0a      	ldr	r3, [pc, #40]	; (800d2c8 <vPortSetupTimerInterrupt+0x3c>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a0a      	ldr	r2, [pc, #40]	; (800d2cc <vPortSetupTimerInterrupt+0x40>)
 800d2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d2a6:	099b      	lsrs	r3, r3, #6
 800d2a8:	4a09      	ldr	r2, [pc, #36]	; (800d2d0 <vPortSetupTimerInterrupt+0x44>)
 800d2aa:	3b01      	subs	r3, #1
 800d2ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d2ae:	4b04      	ldr	r3, [pc, #16]	; (800d2c0 <vPortSetupTimerInterrupt+0x34>)
 800d2b0:	2207      	movs	r2, #7
 800d2b2:	601a      	str	r2, [r3, #0]
}
 800d2b4:	bf00      	nop
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	e000e010 	.word	0xe000e010
 800d2c4:	e000e018 	.word	0xe000e018
 800d2c8:	20000080 	.word	0x20000080
 800d2cc:	10624dd3 	.word	0x10624dd3
 800d2d0:	e000e014 	.word	0xe000e014

0800d2d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d2d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d2e4 <vPortEnableVFP+0x10>
 800d2d8:	6801      	ldr	r1, [r0, #0]
 800d2da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d2de:	6001      	str	r1, [r0, #0]
 800d2e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d2e2:	bf00      	nop
 800d2e4:	e000ed88 	.word	0xe000ed88

0800d2e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b085      	sub	sp, #20
 800d2ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d2ee:	f3ef 8305 	mrs	r3, IPSR
 800d2f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2b0f      	cmp	r3, #15
 800d2f8:	d914      	bls.n	800d324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d2fa:	4a17      	ldr	r2, [pc, #92]	; (800d358 <vPortValidateInterruptPriority+0x70>)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	4413      	add	r3, r2
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d304:	4b15      	ldr	r3, [pc, #84]	; (800d35c <vPortValidateInterruptPriority+0x74>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	7afa      	ldrb	r2, [r7, #11]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d20a      	bcs.n	800d324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d312:	f383 8811 	msr	BASEPRI, r3
 800d316:	f3bf 8f6f 	isb	sy
 800d31a:	f3bf 8f4f 	dsb	sy
 800d31e:	607b      	str	r3, [r7, #4]
}
 800d320:	bf00      	nop
 800d322:	e7fe      	b.n	800d322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d324:	4b0e      	ldr	r3, [pc, #56]	; (800d360 <vPortValidateInterruptPriority+0x78>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d32c:	4b0d      	ldr	r3, [pc, #52]	; (800d364 <vPortValidateInterruptPriority+0x7c>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	429a      	cmp	r2, r3
 800d332:	d90a      	bls.n	800d34a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d338:	f383 8811 	msr	BASEPRI, r3
 800d33c:	f3bf 8f6f 	isb	sy
 800d340:	f3bf 8f4f 	dsb	sy
 800d344:	603b      	str	r3, [r7, #0]
}
 800d346:	bf00      	nop
 800d348:	e7fe      	b.n	800d348 <vPortValidateInterruptPriority+0x60>
	}
 800d34a:	bf00      	nop
 800d34c:	3714      	adds	r7, #20
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	e000e3f0 	.word	0xe000e3f0
 800d35c:	20013f90 	.word	0x20013f90
 800d360:	e000ed0c 	.word	0xe000ed0c
 800d364:	20013f94 	.word	0x20013f94

0800d368 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d10a      	bne.n	800d392 <xQueueGenericReset+0x2a>
	__asm volatile
 800d37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d380:	f383 8811 	msr	BASEPRI, r3
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	60bb      	str	r3, [r7, #8]
}
 800d38e:	bf00      	nop
 800d390:	e7fe      	b.n	800d390 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d392:	f7ff fec7 	bl	800d124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d39e:	68f9      	ldr	r1, [r7, #12]
 800d3a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3a2:	fb01 f303 	mul.w	r3, r1, r3
 800d3a6:	441a      	add	r2, r3
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	68f9      	ldr	r1, [r7, #12]
 800d3c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3c8:	fb01 f303 	mul.w	r3, r1, r3
 800d3cc:	441a      	add	r2, r3
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	22ff      	movs	r2, #255	; 0xff
 800d3d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	22ff      	movs	r2, #255	; 0xff
 800d3de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d114      	bne.n	800d412 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d01a      	beq.n	800d426 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	3310      	adds	r3, #16
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f001 fc4f 	bl	800ec98 <xTaskRemoveFromEventList>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d012      	beq.n	800d426 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d400:	4b0c      	ldr	r3, [pc, #48]	; (800d434 <xQueueGenericReset+0xcc>)
 800d402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d406:	601a      	str	r2, [r3, #0]
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	f3bf 8f6f 	isb	sy
 800d410:	e009      	b.n	800d426 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	3310      	adds	r3, #16
 800d416:	4618      	mov	r0, r3
 800d418:	f7ff fca6 	bl	800cd68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	3324      	adds	r3, #36	; 0x24
 800d420:	4618      	mov	r0, r3
 800d422:	f7ff fca1 	bl	800cd68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d426:	f7ff fead 	bl	800d184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d42a:	2301      	movs	r3, #1
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	e000ed04 	.word	0xe000ed04

0800d438 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08e      	sub	sp, #56	; 0x38
 800d43c:	af02      	add	r7, sp, #8
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
 800d444:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10a      	bne.n	800d462 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d450:	f383 8811 	msr	BASEPRI, r3
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d45e:	bf00      	nop
 800d460:	e7fe      	b.n	800d460 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10a      	bne.n	800d47e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d47a:	bf00      	nop
 800d47c:	e7fe      	b.n	800d47c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d002      	beq.n	800d48a <xQueueGenericCreateStatic+0x52>
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d001      	beq.n	800d48e <xQueueGenericCreateStatic+0x56>
 800d48a:	2301      	movs	r3, #1
 800d48c:	e000      	b.n	800d490 <xQueueGenericCreateStatic+0x58>
 800d48e:	2300      	movs	r3, #0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d10a      	bne.n	800d4aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	623b      	str	r3, [r7, #32]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d102      	bne.n	800d4b6 <xQueueGenericCreateStatic+0x7e>
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d101      	bne.n	800d4ba <xQueueGenericCreateStatic+0x82>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e000      	b.n	800d4bc <xQueueGenericCreateStatic+0x84>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10a      	bne.n	800d4d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c4:	f383 8811 	msr	BASEPRI, r3
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	61fb      	str	r3, [r7, #28]
}
 800d4d2:	bf00      	nop
 800d4d4:	e7fe      	b.n	800d4d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d4d6:	2350      	movs	r3, #80	; 0x50
 800d4d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	2b50      	cmp	r3, #80	; 0x50
 800d4de:	d00a      	beq.n	800d4f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	61bb      	str	r3, [r7, #24]
}
 800d4f2:	bf00      	nop
 800d4f4:	e7fe      	b.n	800d4f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d4f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00d      	beq.n	800d51e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d504:	2201      	movs	r2, #1
 800d506:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d50a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d510:	9300      	str	r3, [sp, #0]
 800d512:	4613      	mov	r3, r2
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	68b9      	ldr	r1, [r7, #8]
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f000 f83f 	bl	800d59c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d520:	4618      	mov	r0, r3
 800d522:	3730      	adds	r7, #48	; 0x30
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b08a      	sub	sp, #40	; 0x28
 800d52c:	af02      	add	r7, sp, #8
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	4613      	mov	r3, r2
 800d534:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d10a      	bne.n	800d552 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d540:	f383 8811 	msr	BASEPRI, r3
 800d544:	f3bf 8f6f 	isb	sy
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	613b      	str	r3, [r7, #16]
}
 800d54e:	bf00      	nop
 800d550:	e7fe      	b.n	800d550 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	68ba      	ldr	r2, [r7, #8]
 800d556:	fb02 f303 	mul.w	r3, r2, r3
 800d55a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	3350      	adds	r3, #80	; 0x50
 800d560:	4618      	mov	r0, r3
 800d562:	f7ff fa17 	bl	800c994 <pvPortMalloc>
 800d566:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d011      	beq.n	800d592 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	3350      	adds	r3, #80	; 0x50
 800d576:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d580:	79fa      	ldrb	r2, [r7, #7]
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	4613      	mov	r3, r2
 800d588:	697a      	ldr	r2, [r7, #20]
 800d58a:	68b9      	ldr	r1, [r7, #8]
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f000 f805 	bl	800d59c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d592:	69bb      	ldr	r3, [r7, #24]
	}
 800d594:	4618      	mov	r0, r3
 800d596:	3720      	adds	r7, #32
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	607a      	str	r2, [r7, #4]
 800d5a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d103      	bne.n	800d5b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	69ba      	ldr	r2, [r7, #24]
 800d5b4:	601a      	str	r2, [r3, #0]
 800d5b6:	e002      	b.n	800d5be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d5ca:	2101      	movs	r1, #1
 800d5cc:	69b8      	ldr	r0, [r7, #24]
 800d5ce:	f7ff fecb 	bl	800d368 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	78fa      	ldrb	r2, [r7, #3]
 800d5d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d5da:	bf00      	nop
 800d5dc:	3710      	adds	r7, #16
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b08a      	sub	sp, #40	; 0x28
 800d5e6:	af02      	add	r7, sp, #8
 800d5e8:	60f8      	str	r0, [r7, #12]
 800d5ea:	60b9      	str	r1, [r7, #8]
 800d5ec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d10a      	bne.n	800d60a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	61bb      	str	r3, [r7, #24]
}
 800d606:	bf00      	nop
 800d608:	e7fe      	b.n	800d608 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d90a      	bls.n	800d628 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d616:	f383 8811 	msr	BASEPRI, r3
 800d61a:	f3bf 8f6f 	isb	sy
 800d61e:	f3bf 8f4f 	dsb	sy
 800d622:	617b      	str	r3, [r7, #20]
}
 800d624:	bf00      	nop
 800d626:	e7fe      	b.n	800d626 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d628:	2302      	movs	r3, #2
 800d62a:	9300      	str	r3, [sp, #0]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	2100      	movs	r1, #0
 800d632:	68f8      	ldr	r0, [r7, #12]
 800d634:	f7ff ff00 	bl	800d438 <xQueueGenericCreateStatic>
 800d638:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d646:	69fb      	ldr	r3, [r7, #28]
	}
 800d648:	4618      	mov	r0, r3
 800d64a:	3720      	adds	r7, #32
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d10a      	bne.n	800d676 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	613b      	str	r3, [r7, #16]
}
 800d672:	bf00      	nop
 800d674:	e7fe      	b.n	800d674 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d90a      	bls.n	800d694 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	60fb      	str	r3, [r7, #12]
}
 800d690:	bf00      	nop
 800d692:	e7fe      	b.n	800d692 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d694:	2202      	movs	r2, #2
 800d696:	2100      	movs	r1, #0
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f7ff ff45 	bl	800d528 <xQueueGenericCreate>
 800d69e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d002      	beq.n	800d6ac <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	683a      	ldr	r2, [r7, #0]
 800d6aa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d6ac:	697b      	ldr	r3, [r7, #20]
	}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3718      	adds	r7, #24
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
	...

0800d6b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b08e      	sub	sp, #56	; 0x38
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10a      	bne.n	800d6ea <xQueueGenericSend+0x32>
	__asm volatile
 800d6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d6e6:	bf00      	nop
 800d6e8:	e7fe      	b.n	800d6e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d103      	bne.n	800d6f8 <xQueueGenericSend+0x40>
 800d6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d101      	bne.n	800d6fc <xQueueGenericSend+0x44>
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e000      	b.n	800d6fe <xQueueGenericSend+0x46>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d10a      	bne.n	800d718 <xQueueGenericSend+0x60>
	__asm volatile
 800d702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d706:	f383 8811 	msr	BASEPRI, r3
 800d70a:	f3bf 8f6f 	isb	sy
 800d70e:	f3bf 8f4f 	dsb	sy
 800d712:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d714:	bf00      	nop
 800d716:	e7fe      	b.n	800d716 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	2b02      	cmp	r3, #2
 800d71c:	d103      	bne.n	800d726 <xQueueGenericSend+0x6e>
 800d71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d722:	2b01      	cmp	r3, #1
 800d724:	d101      	bne.n	800d72a <xQueueGenericSend+0x72>
 800d726:	2301      	movs	r3, #1
 800d728:	e000      	b.n	800d72c <xQueueGenericSend+0x74>
 800d72a:	2300      	movs	r3, #0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10a      	bne.n	800d746 <xQueueGenericSend+0x8e>
	__asm volatile
 800d730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	623b      	str	r3, [r7, #32]
}
 800d742:	bf00      	nop
 800d744:	e7fe      	b.n	800d744 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d746:	f001 fc69 	bl	800f01c <xTaskGetSchedulerState>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d102      	bne.n	800d756 <xQueueGenericSend+0x9e>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d101      	bne.n	800d75a <xQueueGenericSend+0xa2>
 800d756:	2301      	movs	r3, #1
 800d758:	e000      	b.n	800d75c <xQueueGenericSend+0xa4>
 800d75a:	2300      	movs	r3, #0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10a      	bne.n	800d776 <xQueueGenericSend+0xbe>
	__asm volatile
 800d760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d764:	f383 8811 	msr	BASEPRI, r3
 800d768:	f3bf 8f6f 	isb	sy
 800d76c:	f3bf 8f4f 	dsb	sy
 800d770:	61fb      	str	r3, [r7, #28]
}
 800d772:	bf00      	nop
 800d774:	e7fe      	b.n	800d774 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d776:	f7ff fcd5 	bl	800d124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d782:	429a      	cmp	r2, r3
 800d784:	d302      	bcc.n	800d78c <xQueueGenericSend+0xd4>
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	2b02      	cmp	r3, #2
 800d78a:	d129      	bne.n	800d7e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d78c:	683a      	ldr	r2, [r7, #0]
 800d78e:	68b9      	ldr	r1, [r7, #8]
 800d790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d792:	f000 fc5e 	bl	800e052 <prvCopyDataToQueue>
 800d796:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d010      	beq.n	800d7c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a2:	3324      	adds	r3, #36	; 0x24
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f001 fa77 	bl	800ec98 <xTaskRemoveFromEventList>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d013      	beq.n	800d7d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d7b0:	4b3f      	ldr	r3, [pc, #252]	; (800d8b0 <xQueueGenericSend+0x1f8>)
 800d7b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b6:	601a      	str	r2, [r3, #0]
 800d7b8:	f3bf 8f4f 	dsb	sy
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	e00a      	b.n	800d7d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d007      	beq.n	800d7d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d7c8:	4b39      	ldr	r3, [pc, #228]	; (800d8b0 <xQueueGenericSend+0x1f8>)
 800d7ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7ce:	601a      	str	r2, [r3, #0]
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d7d8:	f7ff fcd4 	bl	800d184 <vPortExitCritical>
				return pdPASS;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e063      	b.n	800d8a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d103      	bne.n	800d7ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7e6:	f7ff fccd 	bl	800d184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	e05c      	b.n	800d8a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d106      	bne.n	800d802 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7f4:	f107 0314 	add.w	r3, r7, #20
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f001 fab1 	bl	800ed60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7fe:	2301      	movs	r3, #1
 800d800:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d802:	f7ff fcbf 	bl	800d184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d806:	f001 f81d 	bl	800e844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d80a:	f7ff fc8b 	bl	800d124 <vPortEnterCritical>
 800d80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d814:	b25b      	sxtb	r3, r3
 800d816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81a:	d103      	bne.n	800d824 <xQueueGenericSend+0x16c>
 800d81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81e:	2200      	movs	r2, #0
 800d820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d82a:	b25b      	sxtb	r3, r3
 800d82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d830:	d103      	bne.n	800d83a <xQueueGenericSend+0x182>
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	2200      	movs	r2, #0
 800d836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d83a:	f7ff fca3 	bl	800d184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d83e:	1d3a      	adds	r2, r7, #4
 800d840:	f107 0314 	add.w	r3, r7, #20
 800d844:	4611      	mov	r1, r2
 800d846:	4618      	mov	r0, r3
 800d848:	f001 faa0 	bl	800ed8c <xTaskCheckForTimeOut>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d124      	bne.n	800d89c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d852:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d854:	f000 fcf5 	bl	800e242 <prvIsQueueFull>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d018      	beq.n	800d890 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d860:	3310      	adds	r3, #16
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	4611      	mov	r1, r2
 800d866:	4618      	mov	r0, r3
 800d868:	f001 f9c6 	bl	800ebf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d86c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d86e:	f000 fc80 	bl	800e172 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d872:	f000 fff5 	bl	800e860 <xTaskResumeAll>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	f47f af7c 	bne.w	800d776 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d87e:	4b0c      	ldr	r3, [pc, #48]	; (800d8b0 <xQueueGenericSend+0x1f8>)
 800d880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d884:	601a      	str	r2, [r3, #0]
 800d886:	f3bf 8f4f 	dsb	sy
 800d88a:	f3bf 8f6f 	isb	sy
 800d88e:	e772      	b.n	800d776 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d892:	f000 fc6e 	bl	800e172 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d896:	f000 ffe3 	bl	800e860 <xTaskResumeAll>
 800d89a:	e76c      	b.n	800d776 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d89c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d89e:	f000 fc68 	bl	800e172 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8a2:	f000 ffdd 	bl	800e860 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d8a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3738      	adds	r7, #56	; 0x38
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	e000ed04 	.word	0xe000ed04

0800d8b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b090      	sub	sp, #64	; 0x40
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
 800d8c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10a      	bne.n	800d8e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d0:	f383 8811 	msr	BASEPRI, r3
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d8de:	bf00      	nop
 800d8e0:	e7fe      	b.n	800d8e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d103      	bne.n	800d8f0 <xQueueGenericSendFromISR+0x3c>
 800d8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d101      	bne.n	800d8f4 <xQueueGenericSendFromISR+0x40>
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e000      	b.n	800d8f6 <xQueueGenericSendFromISR+0x42>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d10a      	bne.n	800d910 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fe:	f383 8811 	msr	BASEPRI, r3
 800d902:	f3bf 8f6f 	isb	sy
 800d906:	f3bf 8f4f 	dsb	sy
 800d90a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d90c:	bf00      	nop
 800d90e:	e7fe      	b.n	800d90e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	2b02      	cmp	r3, #2
 800d914:	d103      	bne.n	800d91e <xQueueGenericSendFromISR+0x6a>
 800d916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d101      	bne.n	800d922 <xQueueGenericSendFromISR+0x6e>
 800d91e:	2301      	movs	r3, #1
 800d920:	e000      	b.n	800d924 <xQueueGenericSendFromISR+0x70>
 800d922:	2300      	movs	r3, #0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d10a      	bne.n	800d93e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92c:	f383 8811 	msr	BASEPRI, r3
 800d930:	f3bf 8f6f 	isb	sy
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	623b      	str	r3, [r7, #32]
}
 800d93a:	bf00      	nop
 800d93c:	e7fe      	b.n	800d93c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d93e:	f7ff fcd3 	bl	800d2e8 <vPortValidateInterruptPriority>
	__asm volatile
 800d942:	f3ef 8211 	mrs	r2, BASEPRI
 800d946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94a:	f383 8811 	msr	BASEPRI, r3
 800d94e:	f3bf 8f6f 	isb	sy
 800d952:	f3bf 8f4f 	dsb	sy
 800d956:	61fa      	str	r2, [r7, #28]
 800d958:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d95a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d95c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d966:	429a      	cmp	r2, r3
 800d968:	d302      	bcc.n	800d970 <xQueueGenericSendFromISR+0xbc>
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d12f      	bne.n	800d9d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d980:	683a      	ldr	r2, [r7, #0]
 800d982:	68b9      	ldr	r1, [r7, #8]
 800d984:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d986:	f000 fb64 	bl	800e052 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d98a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d992:	d112      	bne.n	800d9ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d016      	beq.n	800d9ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99e:	3324      	adds	r3, #36	; 0x24
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f001 f979 	bl	800ec98 <xTaskRemoveFromEventList>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00e      	beq.n	800d9ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d00b      	beq.n	800d9ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	601a      	str	r2, [r3, #0]
 800d9b8:	e007      	b.n	800d9ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d9ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d9be:	3301      	adds	r3, #1
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	b25a      	sxtb	r2, r3
 800d9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d9ce:	e001      	b.n	800d9d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9d6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f383 8811 	msr	BASEPRI, r3
}
 800d9de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3740      	adds	r7, #64	; 0x40
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b08e      	sub	sp, #56	; 0x38
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d10a      	bne.n	800da14 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	623b      	str	r3, [r7, #32]
}
 800da10:	bf00      	nop
 800da12:	e7fe      	b.n	800da12 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d00a      	beq.n	800da32 <xQueueGiveFromISR+0x48>
	__asm volatile
 800da1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da20:	f383 8811 	msr	BASEPRI, r3
 800da24:	f3bf 8f6f 	isb	sy
 800da28:	f3bf 8f4f 	dsb	sy
 800da2c:	61fb      	str	r3, [r7, #28]
}
 800da2e:	bf00      	nop
 800da30:	e7fe      	b.n	800da30 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800da32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d103      	bne.n	800da42 <xQueueGiveFromISR+0x58>
 800da3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d101      	bne.n	800da46 <xQueueGiveFromISR+0x5c>
 800da42:	2301      	movs	r3, #1
 800da44:	e000      	b.n	800da48 <xQueueGiveFromISR+0x5e>
 800da46:	2300      	movs	r3, #0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d10a      	bne.n	800da62 <xQueueGiveFromISR+0x78>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	f383 8811 	msr	BASEPRI, r3
 800da54:	f3bf 8f6f 	isb	sy
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	61bb      	str	r3, [r7, #24]
}
 800da5e:	bf00      	nop
 800da60:	e7fe      	b.n	800da60 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da62:	f7ff fc41 	bl	800d2e8 <vPortValidateInterruptPriority>
	__asm volatile
 800da66:	f3ef 8211 	mrs	r2, BASEPRI
 800da6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6e:	f383 8811 	msr	BASEPRI, r3
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	f3bf 8f4f 	dsb	sy
 800da7a:	617a      	str	r2, [r7, #20]
 800da7c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800da7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800da88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da8e:	429a      	cmp	r2, r3
 800da90:	d22b      	bcs.n	800daea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800da92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9e:	1c5a      	adds	r2, r3, #1
 800daa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800daa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800daa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daac:	d112      	bne.n	800dad4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800daae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d016      	beq.n	800dae4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab8:	3324      	adds	r3, #36	; 0x24
 800daba:	4618      	mov	r0, r3
 800dabc:	f001 f8ec 	bl	800ec98 <xTaskRemoveFromEventList>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00e      	beq.n	800dae4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00b      	beq.n	800dae4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	2201      	movs	r2, #1
 800dad0:	601a      	str	r2, [r3, #0]
 800dad2:	e007      	b.n	800dae4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dad8:	3301      	adds	r3, #1
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	b25a      	sxtb	r2, r3
 800dade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dae4:	2301      	movs	r3, #1
 800dae6:	637b      	str	r3, [r7, #52]	; 0x34
 800dae8:	e001      	b.n	800daee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800daea:	2300      	movs	r3, #0
 800daec:	637b      	str	r3, [r7, #52]	; 0x34
 800daee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f383 8811 	msr	BASEPRI, r3
}
 800daf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3738      	adds	r7, #56	; 0x38
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b08c      	sub	sp, #48	; 0x30
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800db10:	2300      	movs	r3, #0
 800db12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d10a      	bne.n	800db34 <xQueueReceive+0x30>
	__asm volatile
 800db1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db22:	f383 8811 	msr	BASEPRI, r3
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	623b      	str	r3, [r7, #32]
}
 800db30:	bf00      	nop
 800db32:	e7fe      	b.n	800db32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d103      	bne.n	800db42 <xQueueReceive+0x3e>
 800db3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d101      	bne.n	800db46 <xQueueReceive+0x42>
 800db42:	2301      	movs	r3, #1
 800db44:	e000      	b.n	800db48 <xQueueReceive+0x44>
 800db46:	2300      	movs	r3, #0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d10a      	bne.n	800db62 <xQueueReceive+0x5e>
	__asm volatile
 800db4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db50:	f383 8811 	msr	BASEPRI, r3
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	61fb      	str	r3, [r7, #28]
}
 800db5e:	bf00      	nop
 800db60:	e7fe      	b.n	800db60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db62:	f001 fa5b 	bl	800f01c <xTaskGetSchedulerState>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d102      	bne.n	800db72 <xQueueReceive+0x6e>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d101      	bne.n	800db76 <xQueueReceive+0x72>
 800db72:	2301      	movs	r3, #1
 800db74:	e000      	b.n	800db78 <xQueueReceive+0x74>
 800db76:	2300      	movs	r3, #0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d10a      	bne.n	800db92 <xQueueReceive+0x8e>
	__asm volatile
 800db7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db80:	f383 8811 	msr	BASEPRI, r3
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	61bb      	str	r3, [r7, #24]
}
 800db8e:	bf00      	nop
 800db90:	e7fe      	b.n	800db90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db92:	f7ff fac7 	bl	800d124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d01f      	beq.n	800dbe2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dba2:	68b9      	ldr	r1, [r7, #8]
 800dba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dba6:	f000 fabe 	bl	800e126 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbac:	1e5a      	subs	r2, r3, #1
 800dbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb4:	691b      	ldr	r3, [r3, #16]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00f      	beq.n	800dbda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbbc:	3310      	adds	r3, #16
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f001 f86a 	bl	800ec98 <xTaskRemoveFromEventList>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d007      	beq.n	800dbda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dbca:	4b3d      	ldr	r3, [pc, #244]	; (800dcc0 <xQueueReceive+0x1bc>)
 800dbcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbd0:	601a      	str	r2, [r3, #0]
 800dbd2:	f3bf 8f4f 	dsb	sy
 800dbd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dbda:	f7ff fad3 	bl	800d184 <vPortExitCritical>
				return pdPASS;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e069      	b.n	800dcb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d103      	bne.n	800dbf0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dbe8:	f7ff facc 	bl	800d184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dbec:	2300      	movs	r3, #0
 800dbee:	e062      	b.n	800dcb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d106      	bne.n	800dc04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dbf6:	f107 0310 	add.w	r3, r7, #16
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f001 f8b0 	bl	800ed60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc00:	2301      	movs	r3, #1
 800dc02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc04:	f7ff fabe 	bl	800d184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc08:	f000 fe1c 	bl	800e844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc0c:	f7ff fa8a 	bl	800d124 <vPortEnterCritical>
 800dc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc16:	b25b      	sxtb	r3, r3
 800dc18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc1c:	d103      	bne.n	800dc26 <xQueueReceive+0x122>
 800dc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc20:	2200      	movs	r2, #0
 800dc22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc2c:	b25b      	sxtb	r3, r3
 800dc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc32:	d103      	bne.n	800dc3c <xQueueReceive+0x138>
 800dc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc36:	2200      	movs	r2, #0
 800dc38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc3c:	f7ff faa2 	bl	800d184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc40:	1d3a      	adds	r2, r7, #4
 800dc42:	f107 0310 	add.w	r3, r7, #16
 800dc46:	4611      	mov	r1, r2
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f001 f89f 	bl	800ed8c <xTaskCheckForTimeOut>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d123      	bne.n	800dc9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc56:	f000 fade 	bl	800e216 <prvIsQueueEmpty>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d017      	beq.n	800dc90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc62:	3324      	adds	r3, #36	; 0x24
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	4611      	mov	r1, r2
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f000 ffc5 	bl	800ebf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc70:	f000 fa7f 	bl	800e172 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc74:	f000 fdf4 	bl	800e860 <xTaskResumeAll>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d189      	bne.n	800db92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dc7e:	4b10      	ldr	r3, [pc, #64]	; (800dcc0 <xQueueReceive+0x1bc>)
 800dc80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc84:	601a      	str	r2, [r3, #0]
 800dc86:	f3bf 8f4f 	dsb	sy
 800dc8a:	f3bf 8f6f 	isb	sy
 800dc8e:	e780      	b.n	800db92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dc90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc92:	f000 fa6e 	bl	800e172 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc96:	f000 fde3 	bl	800e860 <xTaskResumeAll>
 800dc9a:	e77a      	b.n	800db92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dc9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc9e:	f000 fa68 	bl	800e172 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dca2:	f000 fddd 	bl	800e860 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dca8:	f000 fab5 	bl	800e216 <prvIsQueueEmpty>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	f43f af6f 	beq.w	800db92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dcb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3730      	adds	r7, #48	; 0x30
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	e000ed04 	.word	0xe000ed04

0800dcc4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b08e      	sub	sp, #56	; 0x38
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d10a      	bne.n	800dcf6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800dce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce4:	f383 8811 	msr	BASEPRI, r3
 800dce8:	f3bf 8f6f 	isb	sy
 800dcec:	f3bf 8f4f 	dsb	sy
 800dcf0:	623b      	str	r3, [r7, #32]
}
 800dcf2:	bf00      	nop
 800dcf4:	e7fe      	b.n	800dcf4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dcf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00a      	beq.n	800dd14 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800dcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	61fb      	str	r3, [r7, #28]
}
 800dd10:	bf00      	nop
 800dd12:	e7fe      	b.n	800dd12 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd14:	f001 f982 	bl	800f01c <xTaskGetSchedulerState>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d102      	bne.n	800dd24 <xQueueSemaphoreTake+0x60>
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d101      	bne.n	800dd28 <xQueueSemaphoreTake+0x64>
 800dd24:	2301      	movs	r3, #1
 800dd26:	e000      	b.n	800dd2a <xQueueSemaphoreTake+0x66>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d10a      	bne.n	800dd44 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800dd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd32:	f383 8811 	msr	BASEPRI, r3
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	61bb      	str	r3, [r7, #24]
}
 800dd40:	bf00      	nop
 800dd42:	e7fe      	b.n	800dd42 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd44:	f7ff f9ee 	bl	800d124 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d024      	beq.n	800dd9e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd56:	1e5a      	subs	r2, r3, #1
 800dd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d104      	bne.n	800dd6e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dd64:	f001 fad0 	bl	800f308 <pvTaskIncrementMutexHeldCount>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d00f      	beq.n	800dd96 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd78:	3310      	adds	r3, #16
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f000 ff8c 	bl	800ec98 <xTaskRemoveFromEventList>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d007      	beq.n	800dd96 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd86:	4b54      	ldr	r3, [pc, #336]	; (800ded8 <xQueueSemaphoreTake+0x214>)
 800dd88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd8c:	601a      	str	r2, [r3, #0]
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd96:	f7ff f9f5 	bl	800d184 <vPortExitCritical>
				return pdPASS;
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	e097      	b.n	800dece <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d111      	bne.n	800ddc8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00a      	beq.n	800ddc0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ddaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddae:	f383 8811 	msr	BASEPRI, r3
 800ddb2:	f3bf 8f6f 	isb	sy
 800ddb6:	f3bf 8f4f 	dsb	sy
 800ddba:	617b      	str	r3, [r7, #20]
}
 800ddbc:	bf00      	nop
 800ddbe:	e7fe      	b.n	800ddbe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ddc0:	f7ff f9e0 	bl	800d184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	e082      	b.n	800dece <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ddc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d106      	bne.n	800dddc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddce:	f107 030c 	add.w	r3, r7, #12
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f000 ffc4 	bl	800ed60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dddc:	f7ff f9d2 	bl	800d184 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dde0:	f000 fd30 	bl	800e844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dde4:	f7ff f99e 	bl	800d124 <vPortEnterCritical>
 800dde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ddee:	b25b      	sxtb	r3, r3
 800ddf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf4:	d103      	bne.n	800ddfe <xQueueSemaphoreTake+0x13a>
 800ddf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ddfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de04:	b25b      	sxtb	r3, r3
 800de06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de0a:	d103      	bne.n	800de14 <xQueueSemaphoreTake+0x150>
 800de0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0e:	2200      	movs	r2, #0
 800de10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de14:	f7ff f9b6 	bl	800d184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de18:	463a      	mov	r2, r7
 800de1a:	f107 030c 	add.w	r3, r7, #12
 800de1e:	4611      	mov	r1, r2
 800de20:	4618      	mov	r0, r3
 800de22:	f000 ffb3 	bl	800ed8c <xTaskCheckForTimeOut>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d132      	bne.n	800de92 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de2e:	f000 f9f2 	bl	800e216 <prvIsQueueEmpty>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d026      	beq.n	800de86 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d109      	bne.n	800de54 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800de40:	f7ff f970 	bl	800d124 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	4618      	mov	r0, r3
 800de4a:	f001 f905 	bl	800f058 <xTaskPriorityInherit>
 800de4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800de50:	f7ff f998 	bl	800d184 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de56:	3324      	adds	r3, #36	; 0x24
 800de58:	683a      	ldr	r2, [r7, #0]
 800de5a:	4611      	mov	r1, r2
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 fecb 	bl	800ebf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de64:	f000 f985 	bl	800e172 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de68:	f000 fcfa 	bl	800e860 <xTaskResumeAll>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f47f af68 	bne.w	800dd44 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800de74:	4b18      	ldr	r3, [pc, #96]	; (800ded8 <xQueueSemaphoreTake+0x214>)
 800de76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de7a:	601a      	str	r2, [r3, #0]
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	f3bf 8f6f 	isb	sy
 800de84:	e75e      	b.n	800dd44 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800de86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de88:	f000 f973 	bl	800e172 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de8c:	f000 fce8 	bl	800e860 <xTaskResumeAll>
 800de90:	e758      	b.n	800dd44 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800de92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de94:	f000 f96d 	bl	800e172 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de98:	f000 fce2 	bl	800e860 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de9e:	f000 f9ba 	bl	800e216 <prvIsQueueEmpty>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f43f af4d 	beq.w	800dd44 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800deaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00d      	beq.n	800decc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800deb0:	f7ff f938 	bl	800d124 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800deb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800deb6:	f000 f8b4 	bl	800e022 <prvGetDisinheritPriorityAfterTimeout>
 800deba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800debc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dec2:	4618      	mov	r0, r3
 800dec4:	f001 f99e 	bl	800f204 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dec8:	f7ff f95c 	bl	800d184 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800decc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3738      	adds	r7, #56	; 0x38
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	e000ed04 	.word	0xe000ed04

0800dedc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b08e      	sub	sp, #56	; 0x38
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800deec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deee:	2b00      	cmp	r3, #0
 800def0:	d10a      	bne.n	800df08 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800def2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def6:	f383 8811 	msr	BASEPRI, r3
 800defa:	f3bf 8f6f 	isb	sy
 800defe:	f3bf 8f4f 	dsb	sy
 800df02:	623b      	str	r3, [r7, #32]
}
 800df04:	bf00      	nop
 800df06:	e7fe      	b.n	800df06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d103      	bne.n	800df16 <xQueueReceiveFromISR+0x3a>
 800df0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df12:	2b00      	cmp	r3, #0
 800df14:	d101      	bne.n	800df1a <xQueueReceiveFromISR+0x3e>
 800df16:	2301      	movs	r3, #1
 800df18:	e000      	b.n	800df1c <xQueueReceiveFromISR+0x40>
 800df1a:	2300      	movs	r3, #0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d10a      	bne.n	800df36 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800df20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	61fb      	str	r3, [r7, #28]
}
 800df32:	bf00      	nop
 800df34:	e7fe      	b.n	800df34 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df36:	f7ff f9d7 	bl	800d2e8 <vPortValidateInterruptPriority>
	__asm volatile
 800df3a:	f3ef 8211 	mrs	r2, BASEPRI
 800df3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df42:	f383 8811 	msr	BASEPRI, r3
 800df46:	f3bf 8f6f 	isb	sy
 800df4a:	f3bf 8f4f 	dsb	sy
 800df4e:	61ba      	str	r2, [r7, #24]
 800df50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800df52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d02f      	beq.n	800dfc2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800df62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df6c:	68b9      	ldr	r1, [r7, #8]
 800df6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df70:	f000 f8d9 	bl	800e126 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df76:	1e5a      	subs	r2, r3, #1
 800df78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800df7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800df80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df84:	d112      	bne.n	800dfac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df88:	691b      	ldr	r3, [r3, #16]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d016      	beq.n	800dfbc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df90:	3310      	adds	r3, #16
 800df92:	4618      	mov	r0, r3
 800df94:	f000 fe80 	bl	800ec98 <xTaskRemoveFromEventList>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00e      	beq.n	800dfbc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d00b      	beq.n	800dfbc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	601a      	str	r2, [r3, #0]
 800dfaa:	e007      	b.n	800dfbc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dfac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	b25a      	sxtb	r2, r3
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	637b      	str	r3, [r7, #52]	; 0x34
 800dfc0:	e001      	b.n	800dfc6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	637b      	str	r3, [r7, #52]	; 0x34
 800dfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	f383 8811 	msr	BASEPRI, r3
}
 800dfd0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3738      	adds	r7, #56	; 0x38
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10a      	bne.n	800e004 <vQueueDelete+0x28>
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	60bb      	str	r3, [r7, #8]
}
 800e000:	bf00      	nop
 800e002:	e7fe      	b.n	800e002 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f000 f95f 	bl	800e2c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e010:	2b00      	cmp	r3, #0
 800e012:	d102      	bne.n	800e01a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e014:	68f8      	ldr	r0, [r7, #12]
 800e016:	f7fe fd89 	bl	800cb2c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e01a:	bf00      	nop
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}

0800e022 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e022:	b480      	push	{r7}
 800e024:	b085      	sub	sp, #20
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d006      	beq.n	800e040 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e03c:	60fb      	str	r3, [r7, #12]
 800e03e:	e001      	b.n	800e044 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e040:	2300      	movs	r3, #0
 800e042:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e044:	68fb      	ldr	r3, [r7, #12]
	}
 800e046:	4618      	mov	r0, r3
 800e048:	3714      	adds	r7, #20
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr

0800e052 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e052:	b580      	push	{r7, lr}
 800e054:	b086      	sub	sp, #24
 800e056:	af00      	add	r7, sp, #0
 800e058:	60f8      	str	r0, [r7, #12]
 800e05a:	60b9      	str	r1, [r7, #8]
 800e05c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e05e:	2300      	movs	r3, #0
 800e060:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e066:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d10d      	bne.n	800e08c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d14d      	bne.n	800e114 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	689b      	ldr	r3, [r3, #8]
 800e07c:	4618      	mov	r0, r3
 800e07e:	f001 f853 	bl	800f128 <xTaskPriorityDisinherit>
 800e082:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2200      	movs	r2, #0
 800e088:	609a      	str	r2, [r3, #8]
 800e08a:	e043      	b.n	800e114 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d119      	bne.n	800e0c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6858      	ldr	r0, [r3, #4]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e09a:	461a      	mov	r2, r3
 800e09c:	68b9      	ldr	r1, [r7, #8]
 800e09e:	f018 fff1 	bl	8027084 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	685a      	ldr	r2, [r3, #4]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0aa:	441a      	add	r2, r3
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	685a      	ldr	r2, [r3, #4]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d32b      	bcc.n	800e114 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	605a      	str	r2, [r3, #4]
 800e0c4:	e026      	b.n	800e114 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	68d8      	ldr	r0, [r3, #12]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	68b9      	ldr	r1, [r7, #8]
 800e0d2:	f018 ffd7 	bl	8027084 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	68da      	ldr	r2, [r3, #12]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0de:	425b      	negs	r3, r3
 800e0e0:	441a      	add	r2, r3
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	68da      	ldr	r2, [r3, #12]
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d207      	bcs.n	800e102 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	689a      	ldr	r2, [r3, #8]
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0fa:	425b      	negs	r3, r3
 800e0fc:	441a      	add	r2, r3
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b02      	cmp	r3, #2
 800e106:	d105      	bne.n	800e114 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d002      	beq.n	800e114 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	3b01      	subs	r3, #1
 800e112:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	1c5a      	adds	r2, r3, #1
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e11c:	697b      	ldr	r3, [r7, #20]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3718      	adds	r7, #24
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e126:	b580      	push	{r7, lr}
 800e128:	b082      	sub	sp, #8
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
 800e12e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e134:	2b00      	cmp	r3, #0
 800e136:	d018      	beq.n	800e16a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	68da      	ldr	r2, [r3, #12]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e140:	441a      	add	r2, r3
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	68da      	ldr	r2, [r3, #12]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	689b      	ldr	r3, [r3, #8]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d303      	bcc.n	800e15a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	68d9      	ldr	r1, [r3, #12]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e162:	461a      	mov	r2, r3
 800e164:	6838      	ldr	r0, [r7, #0]
 800e166:	f018 ff8d 	bl	8027084 <memcpy>
	}
}
 800e16a:	bf00      	nop
 800e16c:	3708      	adds	r7, #8
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}

0800e172 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e172:	b580      	push	{r7, lr}
 800e174:	b084      	sub	sp, #16
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e17a:	f7fe ffd3 	bl	800d124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e184:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e186:	e011      	b.n	800e1ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d012      	beq.n	800e1b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	3324      	adds	r3, #36	; 0x24
 800e194:	4618      	mov	r0, r3
 800e196:	f000 fd7f 	bl	800ec98 <xTaskRemoveFromEventList>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e1a0:	f000 fe56 	bl	800ee50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e1a4:	7bfb      	ldrb	r3, [r7, #15]
 800e1a6:	3b01      	subs	r3, #1
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e1ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	dce9      	bgt.n	800e188 <prvUnlockQueue+0x16>
 800e1b4:	e000      	b.n	800e1b8 <prvUnlockQueue+0x46>
					break;
 800e1b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	22ff      	movs	r2, #255	; 0xff
 800e1bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e1c0:	f7fe ffe0 	bl	800d184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e1c4:	f7fe ffae 	bl	800d124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e1ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e1d0:	e011      	b.n	800e1f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	691b      	ldr	r3, [r3, #16]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d012      	beq.n	800e200 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	3310      	adds	r3, #16
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f000 fd5a 	bl	800ec98 <xTaskRemoveFromEventList>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e1ea:	f000 fe31 	bl	800ee50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e1ee:	7bbb      	ldrb	r3, [r7, #14]
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e1f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	dce9      	bgt.n	800e1d2 <prvUnlockQueue+0x60>
 800e1fe:	e000      	b.n	800e202 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e200:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	22ff      	movs	r2, #255	; 0xff
 800e206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e20a:	f7fe ffbb 	bl	800d184 <vPortExitCritical>
}
 800e20e:	bf00      	nop
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b084      	sub	sp, #16
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e21e:	f7fe ff81 	bl	800d124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e226:	2b00      	cmp	r3, #0
 800e228:	d102      	bne.n	800e230 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e22a:	2301      	movs	r3, #1
 800e22c:	60fb      	str	r3, [r7, #12]
 800e22e:	e001      	b.n	800e234 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e230:	2300      	movs	r3, #0
 800e232:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e234:	f7fe ffa6 	bl	800d184 <vPortExitCritical>

	return xReturn;
 800e238:	68fb      	ldr	r3, [r7, #12]
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3710      	adds	r7, #16
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}

0800e242 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e242:	b580      	push	{r7, lr}
 800e244:	b084      	sub	sp, #16
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e24a:	f7fe ff6b 	bl	800d124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e256:	429a      	cmp	r2, r3
 800e258:	d102      	bne.n	800e260 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e25a:	2301      	movs	r3, #1
 800e25c:	60fb      	str	r3, [r7, #12]
 800e25e:	e001      	b.n	800e264 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e260:	2300      	movs	r3, #0
 800e262:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e264:	f7fe ff8e 	bl	800d184 <vPortExitCritical>

	return xReturn;
 800e268:	68fb      	ldr	r3, [r7, #12]
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
	...

0800e274 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e274:	b480      	push	{r7}
 800e276:	b085      	sub	sp, #20
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e27e:	2300      	movs	r3, #0
 800e280:	60fb      	str	r3, [r7, #12]
 800e282:	e014      	b.n	800e2ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e284:	4a0f      	ldr	r2, [pc, #60]	; (800e2c4 <vQueueAddToRegistry+0x50>)
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10b      	bne.n	800e2a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e290:	490c      	ldr	r1, [pc, #48]	; (800e2c4 <vQueueAddToRegistry+0x50>)
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e29a:	4a0a      	ldr	r2, [pc, #40]	; (800e2c4 <vQueueAddToRegistry+0x50>)
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	00db      	lsls	r3, r3, #3
 800e2a0:	4413      	add	r3, r2
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e2a6:	e006      	b.n	800e2b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	60fb      	str	r3, [r7, #12]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2b07      	cmp	r3, #7
 800e2b2:	d9e7      	bls.n	800e284 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e2b4:	bf00      	nop
 800e2b6:	bf00      	nop
 800e2b8:	3714      	adds	r7, #20
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr
 800e2c2:	bf00      	nop
 800e2c4:	20013f98 	.word	0x20013f98

0800e2c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	60fb      	str	r3, [r7, #12]
 800e2d4:	e016      	b.n	800e304 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e2d6:	4a10      	ldr	r2, [pc, #64]	; (800e318 <vQueueUnregisterQueue+0x50>)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	00db      	lsls	r3, r3, #3
 800e2dc:	4413      	add	r3, r2
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	687a      	ldr	r2, [r7, #4]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d10b      	bne.n	800e2fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e2e6:	4a0c      	ldr	r2, [pc, #48]	; (800e318 <vQueueUnregisterQueue+0x50>)
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e2f0:	4a09      	ldr	r2, [pc, #36]	; (800e318 <vQueueUnregisterQueue+0x50>)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	00db      	lsls	r3, r3, #3
 800e2f6:	4413      	add	r3, r2
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	605a      	str	r2, [r3, #4]
				break;
 800e2fc:	e006      	b.n	800e30c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	3301      	adds	r3, #1
 800e302:	60fb      	str	r3, [r7, #12]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2b07      	cmp	r3, #7
 800e308:	d9e5      	bls.n	800e2d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e30a:	bf00      	nop
 800e30c:	bf00      	nop
 800e30e:	3714      	adds	r7, #20
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr
 800e318:	20013f98 	.word	0x20013f98

0800e31c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b086      	sub	sp, #24
 800e320:	af00      	add	r7, sp, #0
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	60b9      	str	r1, [r7, #8]
 800e326:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e32c:	f7fe fefa 	bl	800d124 <vPortEnterCritical>
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e336:	b25b      	sxtb	r3, r3
 800e338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33c:	d103      	bne.n	800e346 <vQueueWaitForMessageRestricted+0x2a>
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	2200      	movs	r2, #0
 800e342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e34c:	b25b      	sxtb	r3, r3
 800e34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e352:	d103      	bne.n	800e35c <vQueueWaitForMessageRestricted+0x40>
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	2200      	movs	r2, #0
 800e358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e35c:	f7fe ff12 	bl	800d184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e364:	2b00      	cmp	r3, #0
 800e366:	d106      	bne.n	800e376 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	3324      	adds	r3, #36	; 0x24
 800e36c:	687a      	ldr	r2, [r7, #4]
 800e36e:	68b9      	ldr	r1, [r7, #8]
 800e370:	4618      	mov	r0, r3
 800e372:	f000 fc65 	bl	800ec40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e376:	6978      	ldr	r0, [r7, #20]
 800e378:	f7ff fefb 	bl	800e172 <prvUnlockQueue>
	}
 800e37c:	bf00      	nop
 800e37e:	3718      	adds	r7, #24
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e384:	b580      	push	{r7, lr}
 800e386:	b08e      	sub	sp, #56	; 0x38
 800e388:	af04      	add	r7, sp, #16
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	607a      	str	r2, [r7, #4]
 800e390:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e394:	2b00      	cmp	r3, #0
 800e396:	d10a      	bne.n	800e3ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800e398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39c:	f383 8811 	msr	BASEPRI, r3
 800e3a0:	f3bf 8f6f 	isb	sy
 800e3a4:	f3bf 8f4f 	dsb	sy
 800e3a8:	623b      	str	r3, [r7, #32]
}
 800e3aa:	bf00      	nop
 800e3ac:	e7fe      	b.n	800e3ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d10a      	bne.n	800e3ca <xTaskCreateStatic+0x46>
	__asm volatile
 800e3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b8:	f383 8811 	msr	BASEPRI, r3
 800e3bc:	f3bf 8f6f 	isb	sy
 800e3c0:	f3bf 8f4f 	dsb	sy
 800e3c4:	61fb      	str	r3, [r7, #28]
}
 800e3c6:	bf00      	nop
 800e3c8:	e7fe      	b.n	800e3c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e3ca:	23ac      	movs	r3, #172	; 0xac
 800e3cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	2bac      	cmp	r3, #172	; 0xac
 800e3d2:	d00a      	beq.n	800e3ea <xTaskCreateStatic+0x66>
	__asm volatile
 800e3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d8:	f383 8811 	msr	BASEPRI, r3
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	61bb      	str	r3, [r7, #24]
}
 800e3e6:	bf00      	nop
 800e3e8:	e7fe      	b.n	800e3e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e3ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d01e      	beq.n	800e430 <xTaskCreateStatic+0xac>
 800e3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d01b      	beq.n	800e430 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e400:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e404:	2202      	movs	r2, #2
 800e406:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e40a:	2300      	movs	r3, #0
 800e40c:	9303      	str	r3, [sp, #12]
 800e40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e410:	9302      	str	r3, [sp, #8]
 800e412:	f107 0314 	add.w	r3, r7, #20
 800e416:	9301      	str	r3, [sp, #4]
 800e418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41a:	9300      	str	r3, [sp, #0]
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	68b9      	ldr	r1, [r7, #8]
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	f000 f850 	bl	800e4c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e42a:	f000 f8f7 	bl	800e61c <prvAddNewTaskToReadyList>
 800e42e:	e001      	b.n	800e434 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e430:	2300      	movs	r3, #0
 800e432:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e434:	697b      	ldr	r3, [r7, #20]
	}
 800e436:	4618      	mov	r0, r3
 800e438:	3728      	adds	r7, #40	; 0x28
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b08c      	sub	sp, #48	; 0x30
 800e442:	af04      	add	r7, sp, #16
 800e444:	60f8      	str	r0, [r7, #12]
 800e446:	60b9      	str	r1, [r7, #8]
 800e448:	603b      	str	r3, [r7, #0]
 800e44a:	4613      	mov	r3, r2
 800e44c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e44e:	88fb      	ldrh	r3, [r7, #6]
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	4618      	mov	r0, r3
 800e454:	f7fe fa9e 	bl	800c994 <pvPortMalloc>
 800e458:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d00e      	beq.n	800e47e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e460:	20ac      	movs	r0, #172	; 0xac
 800e462:	f7fe fa97 	bl	800c994 <pvPortMalloc>
 800e466:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d003      	beq.n	800e476 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	697a      	ldr	r2, [r7, #20]
 800e472:	631a      	str	r2, [r3, #48]	; 0x30
 800e474:	e005      	b.n	800e482 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e476:	6978      	ldr	r0, [r7, #20]
 800e478:	f7fe fb58 	bl	800cb2c <vPortFree>
 800e47c:	e001      	b.n	800e482 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e47e:	2300      	movs	r3, #0
 800e480:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d017      	beq.n	800e4b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	2200      	movs	r2, #0
 800e48c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e490:	88fa      	ldrh	r2, [r7, #6]
 800e492:	2300      	movs	r3, #0
 800e494:	9303      	str	r3, [sp, #12]
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	9302      	str	r3, [sp, #8]
 800e49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e49c:	9301      	str	r3, [sp, #4]
 800e49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	68b9      	ldr	r1, [r7, #8]
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f000 f80e 	bl	800e4c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4ac:	69f8      	ldr	r0, [r7, #28]
 800e4ae:	f000 f8b5 	bl	800e61c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	61bb      	str	r3, [r7, #24]
 800e4b6:	e002      	b.n	800e4be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e4be:	69bb      	ldr	r3, [r7, #24]
	}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3720      	adds	r7, #32
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	607a      	str	r2, [r7, #4]
 800e4d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	009b      	lsls	r3, r3, #2
 800e4de:	461a      	mov	r2, r3
 800e4e0:	21a5      	movs	r1, #165	; 0xa5
 800e4e2:	f018 fcaa 	bl	8026e3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	4413      	add	r3, r2
 800e4f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	f023 0307 	bic.w	r3, r3, #7
 800e4fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	f003 0307 	and.w	r3, r3, #7
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00a      	beq.n	800e520 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50e:	f383 8811 	msr	BASEPRI, r3
 800e512:	f3bf 8f6f 	isb	sy
 800e516:	f3bf 8f4f 	dsb	sy
 800e51a:	617b      	str	r3, [r7, #20]
}
 800e51c:	bf00      	nop
 800e51e:	e7fe      	b.n	800e51e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d01f      	beq.n	800e566 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e526:	2300      	movs	r3, #0
 800e528:	61fb      	str	r3, [r7, #28]
 800e52a:	e012      	b.n	800e552 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e52c:	68ba      	ldr	r2, [r7, #8]
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	4413      	add	r3, r2
 800e532:	7819      	ldrb	r1, [r3, #0]
 800e534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	4413      	add	r3, r2
 800e53a:	3334      	adds	r3, #52	; 0x34
 800e53c:	460a      	mov	r2, r1
 800e53e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e540:	68ba      	ldr	r2, [r7, #8]
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	4413      	add	r3, r2
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d006      	beq.n	800e55a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	3301      	adds	r3, #1
 800e550:	61fb      	str	r3, [r7, #28]
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	2b0f      	cmp	r3, #15
 800e556:	d9e9      	bls.n	800e52c <prvInitialiseNewTask+0x64>
 800e558:	e000      	b.n	800e55c <prvInitialiseNewTask+0x94>
			{
				break;
 800e55a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55e:	2200      	movs	r2, #0
 800e560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e564:	e003      	b.n	800e56e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e568:	2200      	movs	r2, #0
 800e56a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e570:	2b37      	cmp	r3, #55	; 0x37
 800e572:	d901      	bls.n	800e578 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e574:	2337      	movs	r3, #55	; 0x37
 800e576:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e57c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e582:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e586:	2200      	movs	r2, #0
 800e588:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58c:	3304      	adds	r3, #4
 800e58e:	4618      	mov	r0, r3
 800e590:	f7fe fc0a 	bl	800cda8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e596:	3318      	adds	r3, #24
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fe fc05 	bl	800cda8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800e5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5bc:	2200      	movs	r2, #0
 800e5be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5cc:	3358      	adds	r3, #88	; 0x58
 800e5ce:	224c      	movs	r2, #76	; 0x4c
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f018 fc31 	bl	8026e3a <memset>
 800e5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5da:	4a0d      	ldr	r2, [pc, #52]	; (800e610 <prvInitialiseNewTask+0x148>)
 800e5dc:	65da      	str	r2, [r3, #92]	; 0x5c
 800e5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e0:	4a0c      	ldr	r2, [pc, #48]	; (800e614 <prvInitialiseNewTask+0x14c>)
 800e5e2:	661a      	str	r2, [r3, #96]	; 0x60
 800e5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e6:	4a0c      	ldr	r2, [pc, #48]	; (800e618 <prvInitialiseNewTask+0x150>)
 800e5e8:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e5ea:	683a      	ldr	r2, [r7, #0]
 800e5ec:	68f9      	ldr	r1, [r7, #12]
 800e5ee:	69b8      	ldr	r0, [r7, #24]
 800e5f0:	f7fe fc6e 	bl	800ced0 <pxPortInitialiseStack>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e606:	bf00      	nop
 800e608:	3720      	adds	r7, #32
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	20014f6c 	.word	0x20014f6c
 800e614:	20014fd4 	.word	0x20014fd4
 800e618:	2001503c 	.word	0x2001503c

0800e61c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e624:	f7fe fd7e 	bl	800d124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e628:	4b2d      	ldr	r3, [pc, #180]	; (800e6e0 <prvAddNewTaskToReadyList+0xc4>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	3301      	adds	r3, #1
 800e62e:	4a2c      	ldr	r2, [pc, #176]	; (800e6e0 <prvAddNewTaskToReadyList+0xc4>)
 800e630:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e632:	4b2c      	ldr	r3, [pc, #176]	; (800e6e4 <prvAddNewTaskToReadyList+0xc8>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d109      	bne.n	800e64e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e63a:	4a2a      	ldr	r2, [pc, #168]	; (800e6e4 <prvAddNewTaskToReadyList+0xc8>)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e640:	4b27      	ldr	r3, [pc, #156]	; (800e6e0 <prvAddNewTaskToReadyList+0xc4>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b01      	cmp	r3, #1
 800e646:	d110      	bne.n	800e66a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e648:	f000 fc26 	bl	800ee98 <prvInitialiseTaskLists>
 800e64c:	e00d      	b.n	800e66a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e64e:	4b26      	ldr	r3, [pc, #152]	; (800e6e8 <prvAddNewTaskToReadyList+0xcc>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d109      	bne.n	800e66a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e656:	4b23      	ldr	r3, [pc, #140]	; (800e6e4 <prvAddNewTaskToReadyList+0xc8>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e660:	429a      	cmp	r2, r3
 800e662:	d802      	bhi.n	800e66a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e664:	4a1f      	ldr	r2, [pc, #124]	; (800e6e4 <prvAddNewTaskToReadyList+0xc8>)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e66a:	4b20      	ldr	r3, [pc, #128]	; (800e6ec <prvAddNewTaskToReadyList+0xd0>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	3301      	adds	r3, #1
 800e670:	4a1e      	ldr	r2, [pc, #120]	; (800e6ec <prvAddNewTaskToReadyList+0xd0>)
 800e672:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e674:	4b1d      	ldr	r3, [pc, #116]	; (800e6ec <prvAddNewTaskToReadyList+0xd0>)
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e680:	4b1b      	ldr	r3, [pc, #108]	; (800e6f0 <prvAddNewTaskToReadyList+0xd4>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	429a      	cmp	r2, r3
 800e686:	d903      	bls.n	800e690 <prvAddNewTaskToReadyList+0x74>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68c:	4a18      	ldr	r2, [pc, #96]	; (800e6f0 <prvAddNewTaskToReadyList+0xd4>)
 800e68e:	6013      	str	r3, [r2, #0]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e694:	4613      	mov	r3, r2
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	4413      	add	r3, r2
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	4a15      	ldr	r2, [pc, #84]	; (800e6f4 <prvAddNewTaskToReadyList+0xd8>)
 800e69e:	441a      	add	r2, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	4610      	mov	r0, r2
 800e6a8:	f7fe fb8b 	bl	800cdc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e6ac:	f7fe fd6a 	bl	800d184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e6b0:	4b0d      	ldr	r3, [pc, #52]	; (800e6e8 <prvAddNewTaskToReadyList+0xcc>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00e      	beq.n	800e6d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e6b8:	4b0a      	ldr	r3, [pc, #40]	; (800e6e4 <prvAddNewTaskToReadyList+0xc8>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d207      	bcs.n	800e6d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e6c6:	4b0c      	ldr	r3, [pc, #48]	; (800e6f8 <prvAddNewTaskToReadyList+0xdc>)
 800e6c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6cc:	601a      	str	r2, [r3, #0]
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e6d6:	bf00      	nop
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	200144ac 	.word	0x200144ac
 800e6e4:	20013fd8 	.word	0x20013fd8
 800e6e8:	200144b8 	.word	0x200144b8
 800e6ec:	200144c8 	.word	0x200144c8
 800e6f0:	200144b4 	.word	0x200144b4
 800e6f4:	20013fdc 	.word	0x20013fdc
 800e6f8:	e000ed04 	.word	0xe000ed04

0800e6fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e704:	2300      	movs	r3, #0
 800e706:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d017      	beq.n	800e73e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e70e:	4b13      	ldr	r3, [pc, #76]	; (800e75c <vTaskDelay+0x60>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00a      	beq.n	800e72c <vTaskDelay+0x30>
	__asm volatile
 800e716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e71a:	f383 8811 	msr	BASEPRI, r3
 800e71e:	f3bf 8f6f 	isb	sy
 800e722:	f3bf 8f4f 	dsb	sy
 800e726:	60bb      	str	r3, [r7, #8]
}
 800e728:	bf00      	nop
 800e72a:	e7fe      	b.n	800e72a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e72c:	f000 f88a 	bl	800e844 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e730:	2100      	movs	r1, #0
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 fdfc 	bl	800f330 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e738:	f000 f892 	bl	800e860 <xTaskResumeAll>
 800e73c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d107      	bne.n	800e754 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e744:	4b06      	ldr	r3, [pc, #24]	; (800e760 <vTaskDelay+0x64>)
 800e746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e74a:	601a      	str	r2, [r3, #0]
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e754:	bf00      	nop
 800e756:	3710      	adds	r7, #16
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	200144d4 	.word	0x200144d4
 800e760:	e000ed04 	.word	0xe000ed04

0800e764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b08a      	sub	sp, #40	; 0x28
 800e768:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e76a:	2300      	movs	r3, #0
 800e76c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e76e:	2300      	movs	r3, #0
 800e770:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e772:	463a      	mov	r2, r7
 800e774:	1d39      	adds	r1, r7, #4
 800e776:	f107 0308 	add.w	r3, r7, #8
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fe f8d6 	bl	800c92c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e780:	6839      	ldr	r1, [r7, #0]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	68ba      	ldr	r2, [r7, #8]
 800e786:	9202      	str	r2, [sp, #8]
 800e788:	9301      	str	r3, [sp, #4]
 800e78a:	2300      	movs	r3, #0
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	2300      	movs	r3, #0
 800e790:	460a      	mov	r2, r1
 800e792:	4924      	ldr	r1, [pc, #144]	; (800e824 <vTaskStartScheduler+0xc0>)
 800e794:	4824      	ldr	r0, [pc, #144]	; (800e828 <vTaskStartScheduler+0xc4>)
 800e796:	f7ff fdf5 	bl	800e384 <xTaskCreateStatic>
 800e79a:	4603      	mov	r3, r0
 800e79c:	4a23      	ldr	r2, [pc, #140]	; (800e82c <vTaskStartScheduler+0xc8>)
 800e79e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e7a0:	4b22      	ldr	r3, [pc, #136]	; (800e82c <vTaskStartScheduler+0xc8>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d002      	beq.n	800e7ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	617b      	str	r3, [r7, #20]
 800e7ac:	e001      	b.n	800e7b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d102      	bne.n	800e7be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e7b8:	f000 fe0e 	bl	800f3d8 <xTimerCreateTimerTask>
 800e7bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d11b      	bne.n	800e7fc <vTaskStartScheduler+0x98>
	__asm volatile
 800e7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c8:	f383 8811 	msr	BASEPRI, r3
 800e7cc:	f3bf 8f6f 	isb	sy
 800e7d0:	f3bf 8f4f 	dsb	sy
 800e7d4:	613b      	str	r3, [r7, #16]
}
 800e7d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e7d8:	4b15      	ldr	r3, [pc, #84]	; (800e830 <vTaskStartScheduler+0xcc>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	3358      	adds	r3, #88	; 0x58
 800e7de:	4a15      	ldr	r2, [pc, #84]	; (800e834 <vTaskStartScheduler+0xd0>)
 800e7e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e7e2:	4b15      	ldr	r3, [pc, #84]	; (800e838 <vTaskStartScheduler+0xd4>)
 800e7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e7ea:	4b14      	ldr	r3, [pc, #80]	; (800e83c <vTaskStartScheduler+0xd8>)
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e7f0:	4b13      	ldr	r3, [pc, #76]	; (800e840 <vTaskStartScheduler+0xdc>)
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e7f6:	f7fe fbf3 	bl	800cfe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e7fa:	e00e      	b.n	800e81a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e802:	d10a      	bne.n	800e81a <vTaskStartScheduler+0xb6>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	60fb      	str	r3, [r7, #12]
}
 800e816:	bf00      	nop
 800e818:	e7fe      	b.n	800e818 <vTaskStartScheduler+0xb4>
}
 800e81a:	bf00      	nop
 800e81c:	3718      	adds	r7, #24
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop
 800e824:	08027b7c 	.word	0x08027b7c
 800e828:	0800ee69 	.word	0x0800ee69
 800e82c:	200144d0 	.word	0x200144d0
 800e830:	20013fd8 	.word	0x20013fd8
 800e834:	20000168 	.word	0x20000168
 800e838:	200144cc 	.word	0x200144cc
 800e83c:	200144b8 	.word	0x200144b8
 800e840:	200144b0 	.word	0x200144b0

0800e844 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e844:	b480      	push	{r7}
 800e846:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e848:	4b04      	ldr	r3, [pc, #16]	; (800e85c <vTaskSuspendAll+0x18>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	3301      	adds	r3, #1
 800e84e:	4a03      	ldr	r2, [pc, #12]	; (800e85c <vTaskSuspendAll+0x18>)
 800e850:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e852:	bf00      	nop
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr
 800e85c:	200144d4 	.word	0x200144d4

0800e860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e866:	2300      	movs	r3, #0
 800e868:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e86a:	2300      	movs	r3, #0
 800e86c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e86e:	4b42      	ldr	r3, [pc, #264]	; (800e978 <xTaskResumeAll+0x118>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d10a      	bne.n	800e88c <xTaskResumeAll+0x2c>
	__asm volatile
 800e876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87a:	f383 8811 	msr	BASEPRI, r3
 800e87e:	f3bf 8f6f 	isb	sy
 800e882:	f3bf 8f4f 	dsb	sy
 800e886:	603b      	str	r3, [r7, #0]
}
 800e888:	bf00      	nop
 800e88a:	e7fe      	b.n	800e88a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e88c:	f7fe fc4a 	bl	800d124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e890:	4b39      	ldr	r3, [pc, #228]	; (800e978 <xTaskResumeAll+0x118>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	3b01      	subs	r3, #1
 800e896:	4a38      	ldr	r2, [pc, #224]	; (800e978 <xTaskResumeAll+0x118>)
 800e898:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e89a:	4b37      	ldr	r3, [pc, #220]	; (800e978 <xTaskResumeAll+0x118>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d162      	bne.n	800e968 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e8a2:	4b36      	ldr	r3, [pc, #216]	; (800e97c <xTaskResumeAll+0x11c>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d05e      	beq.n	800e968 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8aa:	e02f      	b.n	800e90c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8ac:	4b34      	ldr	r3, [pc, #208]	; (800e980 <xTaskResumeAll+0x120>)
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	3318      	adds	r3, #24
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fe fadf 	bl	800ce7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	3304      	adds	r3, #4
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fe fada 	bl	800ce7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8cc:	4b2d      	ldr	r3, [pc, #180]	; (800e984 <xTaskResumeAll+0x124>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d903      	bls.n	800e8dc <xTaskResumeAll+0x7c>
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d8:	4a2a      	ldr	r2, [pc, #168]	; (800e984 <xTaskResumeAll+0x124>)
 800e8da:	6013      	str	r3, [r2, #0]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	4413      	add	r3, r2
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	4a27      	ldr	r2, [pc, #156]	; (800e988 <xTaskResumeAll+0x128>)
 800e8ea:	441a      	add	r2, r3
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	3304      	adds	r3, #4
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	4610      	mov	r0, r2
 800e8f4:	f7fe fa65 	bl	800cdc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8fc:	4b23      	ldr	r3, [pc, #140]	; (800e98c <xTaskResumeAll+0x12c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e902:	429a      	cmp	r2, r3
 800e904:	d302      	bcc.n	800e90c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e906:	4b22      	ldr	r3, [pc, #136]	; (800e990 <xTaskResumeAll+0x130>)
 800e908:	2201      	movs	r2, #1
 800e90a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e90c:	4b1c      	ldr	r3, [pc, #112]	; (800e980 <xTaskResumeAll+0x120>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d1cb      	bne.n	800e8ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d001      	beq.n	800e91e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e91a:	f000 fb5f 	bl	800efdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e91e:	4b1d      	ldr	r3, [pc, #116]	; (800e994 <xTaskResumeAll+0x134>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d010      	beq.n	800e94c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e92a:	f000 f847 	bl	800e9bc <xTaskIncrementTick>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d002      	beq.n	800e93a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e934:	4b16      	ldr	r3, [pc, #88]	; (800e990 <xTaskResumeAll+0x130>)
 800e936:	2201      	movs	r2, #1
 800e938:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	3b01      	subs	r3, #1
 800e93e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d1f1      	bne.n	800e92a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e946:	4b13      	ldr	r3, [pc, #76]	; (800e994 <xTaskResumeAll+0x134>)
 800e948:	2200      	movs	r2, #0
 800e94a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e94c:	4b10      	ldr	r3, [pc, #64]	; (800e990 <xTaskResumeAll+0x130>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d009      	beq.n	800e968 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e954:	2301      	movs	r3, #1
 800e956:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e958:	4b0f      	ldr	r3, [pc, #60]	; (800e998 <xTaskResumeAll+0x138>)
 800e95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e95e:	601a      	str	r2, [r3, #0]
 800e960:	f3bf 8f4f 	dsb	sy
 800e964:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e968:	f7fe fc0c 	bl	800d184 <vPortExitCritical>

	return xAlreadyYielded;
 800e96c:	68bb      	ldr	r3, [r7, #8]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	200144d4 	.word	0x200144d4
 800e97c:	200144ac 	.word	0x200144ac
 800e980:	2001446c 	.word	0x2001446c
 800e984:	200144b4 	.word	0x200144b4
 800e988:	20013fdc 	.word	0x20013fdc
 800e98c:	20013fd8 	.word	0x20013fd8
 800e990:	200144c0 	.word	0x200144c0
 800e994:	200144bc 	.word	0x200144bc
 800e998:	e000ed04 	.word	0xe000ed04

0800e99c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e9a2:	4b05      	ldr	r3, [pc, #20]	; (800e9b8 <xTaskGetTickCount+0x1c>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e9a8:	687b      	ldr	r3, [r7, #4]
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	370c      	adds	r7, #12
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr
 800e9b6:	bf00      	nop
 800e9b8:	200144b0 	.word	0x200144b0

0800e9bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b086      	sub	sp, #24
 800e9c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9c6:	4b4f      	ldr	r3, [pc, #316]	; (800eb04 <xTaskIncrementTick+0x148>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	f040 808f 	bne.w	800eaee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e9d0:	4b4d      	ldr	r3, [pc, #308]	; (800eb08 <xTaskIncrementTick+0x14c>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e9d8:	4a4b      	ldr	r2, [pc, #300]	; (800eb08 <xTaskIncrementTick+0x14c>)
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d120      	bne.n	800ea26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e9e4:	4b49      	ldr	r3, [pc, #292]	; (800eb0c <xTaskIncrementTick+0x150>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00a      	beq.n	800ea04 <xTaskIncrementTick+0x48>
	__asm volatile
 800e9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f2:	f383 8811 	msr	BASEPRI, r3
 800e9f6:	f3bf 8f6f 	isb	sy
 800e9fa:	f3bf 8f4f 	dsb	sy
 800e9fe:	603b      	str	r3, [r7, #0]
}
 800ea00:	bf00      	nop
 800ea02:	e7fe      	b.n	800ea02 <xTaskIncrementTick+0x46>
 800ea04:	4b41      	ldr	r3, [pc, #260]	; (800eb0c <xTaskIncrementTick+0x150>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	60fb      	str	r3, [r7, #12]
 800ea0a:	4b41      	ldr	r3, [pc, #260]	; (800eb10 <xTaskIncrementTick+0x154>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a3f      	ldr	r2, [pc, #252]	; (800eb0c <xTaskIncrementTick+0x150>)
 800ea10:	6013      	str	r3, [r2, #0]
 800ea12:	4a3f      	ldr	r2, [pc, #252]	; (800eb10 <xTaskIncrementTick+0x154>)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	6013      	str	r3, [r2, #0]
 800ea18:	4b3e      	ldr	r3, [pc, #248]	; (800eb14 <xTaskIncrementTick+0x158>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	4a3d      	ldr	r2, [pc, #244]	; (800eb14 <xTaskIncrementTick+0x158>)
 800ea20:	6013      	str	r3, [r2, #0]
 800ea22:	f000 fadb 	bl	800efdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ea26:	4b3c      	ldr	r3, [pc, #240]	; (800eb18 <xTaskIncrementTick+0x15c>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	693a      	ldr	r2, [r7, #16]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d349      	bcc.n	800eac4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea30:	4b36      	ldr	r3, [pc, #216]	; (800eb0c <xTaskIncrementTick+0x150>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d104      	bne.n	800ea44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea3a:	4b37      	ldr	r3, [pc, #220]	; (800eb18 <xTaskIncrementTick+0x15c>)
 800ea3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea40:	601a      	str	r2, [r3, #0]
					break;
 800ea42:	e03f      	b.n	800eac4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea44:	4b31      	ldr	r3, [pc, #196]	; (800eb0c <xTaskIncrementTick+0x150>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	68db      	ldr	r3, [r3, #12]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ea54:	693a      	ldr	r2, [r7, #16]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d203      	bcs.n	800ea64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ea5c:	4a2e      	ldr	r2, [pc, #184]	; (800eb18 <xTaskIncrementTick+0x15c>)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ea62:	e02f      	b.n	800eac4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	3304      	adds	r3, #4
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fe fa07 	bl	800ce7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d004      	beq.n	800ea80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	3318      	adds	r3, #24
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7fe f9fe 	bl	800ce7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea84:	4b25      	ldr	r3, [pc, #148]	; (800eb1c <xTaskIncrementTick+0x160>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d903      	bls.n	800ea94 <xTaskIncrementTick+0xd8>
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea90:	4a22      	ldr	r2, [pc, #136]	; (800eb1c <xTaskIncrementTick+0x160>)
 800ea92:	6013      	str	r3, [r2, #0]
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea98:	4613      	mov	r3, r2
 800ea9a:	009b      	lsls	r3, r3, #2
 800ea9c:	4413      	add	r3, r2
 800ea9e:	009b      	lsls	r3, r3, #2
 800eaa0:	4a1f      	ldr	r2, [pc, #124]	; (800eb20 <xTaskIncrementTick+0x164>)
 800eaa2:	441a      	add	r2, r3
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	3304      	adds	r3, #4
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4610      	mov	r0, r2
 800eaac:	f7fe f989 	bl	800cdc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab4:	4b1b      	ldr	r3, [pc, #108]	; (800eb24 <xTaskIncrementTick+0x168>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d3b8      	bcc.n	800ea30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eabe:	2301      	movs	r3, #1
 800eac0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eac2:	e7b5      	b.n	800ea30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eac4:	4b17      	ldr	r3, [pc, #92]	; (800eb24 <xTaskIncrementTick+0x168>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaca:	4915      	ldr	r1, [pc, #84]	; (800eb20 <xTaskIncrementTick+0x164>)
 800eacc:	4613      	mov	r3, r2
 800eace:	009b      	lsls	r3, r3, #2
 800ead0:	4413      	add	r3, r2
 800ead2:	009b      	lsls	r3, r3, #2
 800ead4:	440b      	add	r3, r1
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d901      	bls.n	800eae0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800eadc:	2301      	movs	r3, #1
 800eade:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eae0:	4b11      	ldr	r3, [pc, #68]	; (800eb28 <xTaskIncrementTick+0x16c>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d007      	beq.n	800eaf8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800eae8:	2301      	movs	r3, #1
 800eaea:	617b      	str	r3, [r7, #20]
 800eaec:	e004      	b.n	800eaf8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800eaee:	4b0f      	ldr	r3, [pc, #60]	; (800eb2c <xTaskIncrementTick+0x170>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	4a0d      	ldr	r2, [pc, #52]	; (800eb2c <xTaskIncrementTick+0x170>)
 800eaf6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800eaf8:	697b      	ldr	r3, [r7, #20]
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3718      	adds	r7, #24
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	200144d4 	.word	0x200144d4
 800eb08:	200144b0 	.word	0x200144b0
 800eb0c:	20014464 	.word	0x20014464
 800eb10:	20014468 	.word	0x20014468
 800eb14:	200144c4 	.word	0x200144c4
 800eb18:	200144cc 	.word	0x200144cc
 800eb1c:	200144b4 	.word	0x200144b4
 800eb20:	20013fdc 	.word	0x20013fdc
 800eb24:	20013fd8 	.word	0x20013fd8
 800eb28:	200144c0 	.word	0x200144c0
 800eb2c:	200144bc 	.word	0x200144bc

0800eb30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eb30:	b480      	push	{r7}
 800eb32:	b085      	sub	sp, #20
 800eb34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eb36:	4b2a      	ldr	r3, [pc, #168]	; (800ebe0 <vTaskSwitchContext+0xb0>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d003      	beq.n	800eb46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eb3e:	4b29      	ldr	r3, [pc, #164]	; (800ebe4 <vTaskSwitchContext+0xb4>)
 800eb40:	2201      	movs	r2, #1
 800eb42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eb44:	e046      	b.n	800ebd4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800eb46:	4b27      	ldr	r3, [pc, #156]	; (800ebe4 <vTaskSwitchContext+0xb4>)
 800eb48:	2200      	movs	r2, #0
 800eb4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb4c:	4b26      	ldr	r3, [pc, #152]	; (800ebe8 <vTaskSwitchContext+0xb8>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	60fb      	str	r3, [r7, #12]
 800eb52:	e010      	b.n	800eb76 <vTaskSwitchContext+0x46>
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d10a      	bne.n	800eb70 <vTaskSwitchContext+0x40>
	__asm volatile
 800eb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb5e:	f383 8811 	msr	BASEPRI, r3
 800eb62:	f3bf 8f6f 	isb	sy
 800eb66:	f3bf 8f4f 	dsb	sy
 800eb6a:	607b      	str	r3, [r7, #4]
}
 800eb6c:	bf00      	nop
 800eb6e:	e7fe      	b.n	800eb6e <vTaskSwitchContext+0x3e>
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	3b01      	subs	r3, #1
 800eb74:	60fb      	str	r3, [r7, #12]
 800eb76:	491d      	ldr	r1, [pc, #116]	; (800ebec <vTaskSwitchContext+0xbc>)
 800eb78:	68fa      	ldr	r2, [r7, #12]
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	009b      	lsls	r3, r3, #2
 800eb7e:	4413      	add	r3, r2
 800eb80:	009b      	lsls	r3, r3, #2
 800eb82:	440b      	add	r3, r1
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d0e4      	beq.n	800eb54 <vTaskSwitchContext+0x24>
 800eb8a:	68fa      	ldr	r2, [r7, #12]
 800eb8c:	4613      	mov	r3, r2
 800eb8e:	009b      	lsls	r3, r3, #2
 800eb90:	4413      	add	r3, r2
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	4a15      	ldr	r2, [pc, #84]	; (800ebec <vTaskSwitchContext+0xbc>)
 800eb96:	4413      	add	r3, r2
 800eb98:	60bb      	str	r3, [r7, #8]
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	685a      	ldr	r2, [r3, #4]
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	605a      	str	r2, [r3, #4]
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	685a      	ldr	r2, [r3, #4]
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	3308      	adds	r3, #8
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d104      	bne.n	800ebba <vTaskSwitchContext+0x8a>
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	685a      	ldr	r2, [r3, #4]
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	605a      	str	r2, [r3, #4]
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	4a0b      	ldr	r2, [pc, #44]	; (800ebf0 <vTaskSwitchContext+0xc0>)
 800ebc2:	6013      	str	r3, [r2, #0]
 800ebc4:	4a08      	ldr	r2, [pc, #32]	; (800ebe8 <vTaskSwitchContext+0xb8>)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ebca:	4b09      	ldr	r3, [pc, #36]	; (800ebf0 <vTaskSwitchContext+0xc0>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	3358      	adds	r3, #88	; 0x58
 800ebd0:	4a08      	ldr	r2, [pc, #32]	; (800ebf4 <vTaskSwitchContext+0xc4>)
 800ebd2:	6013      	str	r3, [r2, #0]
}
 800ebd4:	bf00      	nop
 800ebd6:	3714      	adds	r7, #20
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr
 800ebe0:	200144d4 	.word	0x200144d4
 800ebe4:	200144c0 	.word	0x200144c0
 800ebe8:	200144b4 	.word	0x200144b4
 800ebec:	20013fdc 	.word	0x20013fdc
 800ebf0:	20013fd8 	.word	0x20013fd8
 800ebf4:	20000168 	.word	0x20000168

0800ebf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d10a      	bne.n	800ec1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ec08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0c:	f383 8811 	msr	BASEPRI, r3
 800ec10:	f3bf 8f6f 	isb	sy
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	60fb      	str	r3, [r7, #12]
}
 800ec1a:	bf00      	nop
 800ec1c:	e7fe      	b.n	800ec1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec1e:	4b07      	ldr	r3, [pc, #28]	; (800ec3c <vTaskPlaceOnEventList+0x44>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	3318      	adds	r3, #24
 800ec24:	4619      	mov	r1, r3
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f7fe f8ef 	bl	800ce0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec2c:	2101      	movs	r1, #1
 800ec2e:	6838      	ldr	r0, [r7, #0]
 800ec30:	f000 fb7e 	bl	800f330 <prvAddCurrentTaskToDelayedList>
}
 800ec34:	bf00      	nop
 800ec36:	3710      	adds	r7, #16
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	20013fd8 	.word	0x20013fd8

0800ec40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b086      	sub	sp, #24
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	60f8      	str	r0, [r7, #12]
 800ec48:	60b9      	str	r1, [r7, #8]
 800ec4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d10a      	bne.n	800ec68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ec52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec56:	f383 8811 	msr	BASEPRI, r3
 800ec5a:	f3bf 8f6f 	isb	sy
 800ec5e:	f3bf 8f4f 	dsb	sy
 800ec62:	617b      	str	r3, [r7, #20]
}
 800ec64:	bf00      	nop
 800ec66:	e7fe      	b.n	800ec66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec68:	4b0a      	ldr	r3, [pc, #40]	; (800ec94 <vTaskPlaceOnEventListRestricted+0x54>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	3318      	adds	r3, #24
 800ec6e:	4619      	mov	r1, r3
 800ec70:	68f8      	ldr	r0, [r7, #12]
 800ec72:	f7fe f8a6 	bl	800cdc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d002      	beq.n	800ec82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ec7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ec82:	6879      	ldr	r1, [r7, #4]
 800ec84:	68b8      	ldr	r0, [r7, #8]
 800ec86:	f000 fb53 	bl	800f330 <prvAddCurrentTaskToDelayedList>
	}
 800ec8a:	bf00      	nop
 800ec8c:	3718      	adds	r7, #24
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	20013fd8 	.word	0x20013fd8

0800ec98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b086      	sub	sp, #24
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	68db      	ldr	r3, [r3, #12]
 800eca6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d10a      	bne.n	800ecc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ecae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb2:	f383 8811 	msr	BASEPRI, r3
 800ecb6:	f3bf 8f6f 	isb	sy
 800ecba:	f3bf 8f4f 	dsb	sy
 800ecbe:	60fb      	str	r3, [r7, #12]
}
 800ecc0:	bf00      	nop
 800ecc2:	e7fe      	b.n	800ecc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	3318      	adds	r3, #24
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7fe f8d7 	bl	800ce7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecce:	4b1e      	ldr	r3, [pc, #120]	; (800ed48 <xTaskRemoveFromEventList+0xb0>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d11d      	bne.n	800ed12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	3304      	adds	r3, #4
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7fe f8ce 	bl	800ce7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ece4:	4b19      	ldr	r3, [pc, #100]	; (800ed4c <xTaskRemoveFromEventList+0xb4>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d903      	bls.n	800ecf4 <xTaskRemoveFromEventList+0x5c>
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf0:	4a16      	ldr	r2, [pc, #88]	; (800ed4c <xTaskRemoveFromEventList+0xb4>)
 800ecf2:	6013      	str	r3, [r2, #0]
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf8:	4613      	mov	r3, r2
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	4413      	add	r3, r2
 800ecfe:	009b      	lsls	r3, r3, #2
 800ed00:	4a13      	ldr	r2, [pc, #76]	; (800ed50 <xTaskRemoveFromEventList+0xb8>)
 800ed02:	441a      	add	r2, r3
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	3304      	adds	r3, #4
 800ed08:	4619      	mov	r1, r3
 800ed0a:	4610      	mov	r0, r2
 800ed0c:	f7fe f859 	bl	800cdc2 <vListInsertEnd>
 800ed10:	e005      	b.n	800ed1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	3318      	adds	r3, #24
 800ed16:	4619      	mov	r1, r3
 800ed18:	480e      	ldr	r0, [pc, #56]	; (800ed54 <xTaskRemoveFromEventList+0xbc>)
 800ed1a:	f7fe f852 	bl	800cdc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed22:	4b0d      	ldr	r3, [pc, #52]	; (800ed58 <xTaskRemoveFromEventList+0xc0>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d905      	bls.n	800ed38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ed30:	4b0a      	ldr	r3, [pc, #40]	; (800ed5c <xTaskRemoveFromEventList+0xc4>)
 800ed32:	2201      	movs	r2, #1
 800ed34:	601a      	str	r2, [r3, #0]
 800ed36:	e001      	b.n	800ed3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ed3c:	697b      	ldr	r3, [r7, #20]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3718      	adds	r7, #24
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	200144d4 	.word	0x200144d4
 800ed4c:	200144b4 	.word	0x200144b4
 800ed50:	20013fdc 	.word	0x20013fdc
 800ed54:	2001446c 	.word	0x2001446c
 800ed58:	20013fd8 	.word	0x20013fd8
 800ed5c:	200144c0 	.word	0x200144c0

0800ed60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ed68:	4b06      	ldr	r3, [pc, #24]	; (800ed84 <vTaskInternalSetTimeOutState+0x24>)
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ed70:	4b05      	ldr	r3, [pc, #20]	; (800ed88 <vTaskInternalSetTimeOutState+0x28>)
 800ed72:	681a      	ldr	r2, [r3, #0]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	605a      	str	r2, [r3, #4]
}
 800ed78:	bf00      	nop
 800ed7a:	370c      	adds	r7, #12
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr
 800ed84:	200144c4 	.word	0x200144c4
 800ed88:	200144b0 	.word	0x200144b0

0800ed8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b088      	sub	sp, #32
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d10a      	bne.n	800edb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ed9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda0:	f383 8811 	msr	BASEPRI, r3
 800eda4:	f3bf 8f6f 	isb	sy
 800eda8:	f3bf 8f4f 	dsb	sy
 800edac:	613b      	str	r3, [r7, #16]
}
 800edae:	bf00      	nop
 800edb0:	e7fe      	b.n	800edb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d10a      	bne.n	800edce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800edb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edbc:	f383 8811 	msr	BASEPRI, r3
 800edc0:	f3bf 8f6f 	isb	sy
 800edc4:	f3bf 8f4f 	dsb	sy
 800edc8:	60fb      	str	r3, [r7, #12]
}
 800edca:	bf00      	nop
 800edcc:	e7fe      	b.n	800edcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800edce:	f7fe f9a9 	bl	800d124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800edd2:	4b1d      	ldr	r3, [pc, #116]	; (800ee48 <xTaskCheckForTimeOut+0xbc>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	69ba      	ldr	r2, [r7, #24]
 800edde:	1ad3      	subs	r3, r2, r3
 800ede0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edea:	d102      	bne.n	800edf2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800edec:	2300      	movs	r3, #0
 800edee:	61fb      	str	r3, [r7, #28]
 800edf0:	e023      	b.n	800ee3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	4b15      	ldr	r3, [pc, #84]	; (800ee4c <xTaskCheckForTimeOut+0xc0>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d007      	beq.n	800ee0e <xTaskCheckForTimeOut+0x82>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	69ba      	ldr	r2, [r7, #24]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d302      	bcc.n	800ee0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	61fb      	str	r3, [r7, #28]
 800ee0c:	e015      	b.n	800ee3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	697a      	ldr	r2, [r7, #20]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d20b      	bcs.n	800ee30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	681a      	ldr	r2, [r3, #0]
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	1ad2      	subs	r2, r2, r3
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7ff ff9b 	bl	800ed60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	61fb      	str	r3, [r7, #28]
 800ee2e:	e004      	b.n	800ee3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	2200      	movs	r2, #0
 800ee34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ee36:	2301      	movs	r3, #1
 800ee38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ee3a:	f7fe f9a3 	bl	800d184 <vPortExitCritical>

	return xReturn;
 800ee3e:	69fb      	ldr	r3, [r7, #28]
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3720      	adds	r7, #32
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	200144b0 	.word	0x200144b0
 800ee4c:	200144c4 	.word	0x200144c4

0800ee50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ee50:	b480      	push	{r7}
 800ee52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ee54:	4b03      	ldr	r3, [pc, #12]	; (800ee64 <vTaskMissedYield+0x14>)
 800ee56:	2201      	movs	r2, #1
 800ee58:	601a      	str	r2, [r3, #0]
}
 800ee5a:	bf00      	nop
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr
 800ee64:	200144c0 	.word	0x200144c0

0800ee68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ee70:	f000 f852 	bl	800ef18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ee74:	4b06      	ldr	r3, [pc, #24]	; (800ee90 <prvIdleTask+0x28>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d9f9      	bls.n	800ee70 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ee7c:	4b05      	ldr	r3, [pc, #20]	; (800ee94 <prvIdleTask+0x2c>)
 800ee7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee82:	601a      	str	r2, [r3, #0]
 800ee84:	f3bf 8f4f 	dsb	sy
 800ee88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ee8c:	e7f0      	b.n	800ee70 <prvIdleTask+0x8>
 800ee8e:	bf00      	nop
 800ee90:	20013fdc 	.word	0x20013fdc
 800ee94:	e000ed04 	.word	0xe000ed04

0800ee98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee9e:	2300      	movs	r3, #0
 800eea0:	607b      	str	r3, [r7, #4]
 800eea2:	e00c      	b.n	800eebe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	4613      	mov	r3, r2
 800eea8:	009b      	lsls	r3, r3, #2
 800eeaa:	4413      	add	r3, r2
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	4a12      	ldr	r2, [pc, #72]	; (800eef8 <prvInitialiseTaskLists+0x60>)
 800eeb0:	4413      	add	r3, r2
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fd ff58 	bl	800cd68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	3301      	adds	r3, #1
 800eebc:	607b      	str	r3, [r7, #4]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2b37      	cmp	r3, #55	; 0x37
 800eec2:	d9ef      	bls.n	800eea4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eec4:	480d      	ldr	r0, [pc, #52]	; (800eefc <prvInitialiseTaskLists+0x64>)
 800eec6:	f7fd ff4f 	bl	800cd68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eeca:	480d      	ldr	r0, [pc, #52]	; (800ef00 <prvInitialiseTaskLists+0x68>)
 800eecc:	f7fd ff4c 	bl	800cd68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eed0:	480c      	ldr	r0, [pc, #48]	; (800ef04 <prvInitialiseTaskLists+0x6c>)
 800eed2:	f7fd ff49 	bl	800cd68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eed6:	480c      	ldr	r0, [pc, #48]	; (800ef08 <prvInitialiseTaskLists+0x70>)
 800eed8:	f7fd ff46 	bl	800cd68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eedc:	480b      	ldr	r0, [pc, #44]	; (800ef0c <prvInitialiseTaskLists+0x74>)
 800eede:	f7fd ff43 	bl	800cd68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eee2:	4b0b      	ldr	r3, [pc, #44]	; (800ef10 <prvInitialiseTaskLists+0x78>)
 800eee4:	4a05      	ldr	r2, [pc, #20]	; (800eefc <prvInitialiseTaskLists+0x64>)
 800eee6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eee8:	4b0a      	ldr	r3, [pc, #40]	; (800ef14 <prvInitialiseTaskLists+0x7c>)
 800eeea:	4a05      	ldr	r2, [pc, #20]	; (800ef00 <prvInitialiseTaskLists+0x68>)
 800eeec:	601a      	str	r2, [r3, #0]
}
 800eeee:	bf00      	nop
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	20013fdc 	.word	0x20013fdc
 800eefc:	2001443c 	.word	0x2001443c
 800ef00:	20014450 	.word	0x20014450
 800ef04:	2001446c 	.word	0x2001446c
 800ef08:	20014480 	.word	0x20014480
 800ef0c:	20014498 	.word	0x20014498
 800ef10:	20014464 	.word	0x20014464
 800ef14:	20014468 	.word	0x20014468

0800ef18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef1e:	e019      	b.n	800ef54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ef20:	f7fe f900 	bl	800d124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef24:	4b10      	ldr	r3, [pc, #64]	; (800ef68 <prvCheckTasksWaitingTermination+0x50>)
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	3304      	adds	r3, #4
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7fd ffa3 	bl	800ce7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ef36:	4b0d      	ldr	r3, [pc, #52]	; (800ef6c <prvCheckTasksWaitingTermination+0x54>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	4a0b      	ldr	r2, [pc, #44]	; (800ef6c <prvCheckTasksWaitingTermination+0x54>)
 800ef3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ef40:	4b0b      	ldr	r3, [pc, #44]	; (800ef70 <prvCheckTasksWaitingTermination+0x58>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	3b01      	subs	r3, #1
 800ef46:	4a0a      	ldr	r2, [pc, #40]	; (800ef70 <prvCheckTasksWaitingTermination+0x58>)
 800ef48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ef4a:	f7fe f91b 	bl	800d184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 f810 	bl	800ef74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef54:	4b06      	ldr	r3, [pc, #24]	; (800ef70 <prvCheckTasksWaitingTermination+0x58>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d1e1      	bne.n	800ef20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ef5c:	bf00      	nop
 800ef5e:	bf00      	nop
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	20014480 	.word	0x20014480
 800ef6c:	200144ac 	.word	0x200144ac
 800ef70:	20014494 	.word	0x20014494

0800ef74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	3358      	adds	r3, #88	; 0x58
 800ef80:	4618      	mov	r0, r3
 800ef82:	f017 ffa3 	bl	8026ecc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d108      	bne.n	800efa2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7fd fdc9 	bl	800cb2c <vPortFree>
				vPortFree( pxTCB );
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f7fd fdc6 	bl	800cb2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800efa0:	e018      	b.n	800efd4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d103      	bne.n	800efb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7fd fdbd 	bl	800cb2c <vPortFree>
	}
 800efb2:	e00f      	b.n	800efd4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800efba:	2b02      	cmp	r3, #2
 800efbc:	d00a      	beq.n	800efd4 <prvDeleteTCB+0x60>
	__asm volatile
 800efbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	60fb      	str	r3, [r7, #12]
}
 800efd0:	bf00      	nop
 800efd2:	e7fe      	b.n	800efd2 <prvDeleteTCB+0x5e>
	}
 800efd4:	bf00      	nop
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800efdc:	b480      	push	{r7}
 800efde:	b083      	sub	sp, #12
 800efe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800efe2:	4b0c      	ldr	r3, [pc, #48]	; (800f014 <prvResetNextTaskUnblockTime+0x38>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d104      	bne.n	800eff6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800efec:	4b0a      	ldr	r3, [pc, #40]	; (800f018 <prvResetNextTaskUnblockTime+0x3c>)
 800efee:	f04f 32ff 	mov.w	r2, #4294967295
 800eff2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eff4:	e008      	b.n	800f008 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eff6:	4b07      	ldr	r3, [pc, #28]	; (800f014 <prvResetNextTaskUnblockTime+0x38>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	68db      	ldr	r3, [r3, #12]
 800effe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	4a04      	ldr	r2, [pc, #16]	; (800f018 <prvResetNextTaskUnblockTime+0x3c>)
 800f006:	6013      	str	r3, [r2, #0]
}
 800f008:	bf00      	nop
 800f00a:	370c      	adds	r7, #12
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr
 800f014:	20014464 	.word	0x20014464
 800f018:	200144cc 	.word	0x200144cc

0800f01c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f022:	4b0b      	ldr	r3, [pc, #44]	; (800f050 <xTaskGetSchedulerState+0x34>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d102      	bne.n	800f030 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f02a:	2301      	movs	r3, #1
 800f02c:	607b      	str	r3, [r7, #4]
 800f02e:	e008      	b.n	800f042 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f030:	4b08      	ldr	r3, [pc, #32]	; (800f054 <xTaskGetSchedulerState+0x38>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d102      	bne.n	800f03e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f038:	2302      	movs	r3, #2
 800f03a:	607b      	str	r3, [r7, #4]
 800f03c:	e001      	b.n	800f042 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f03e:	2300      	movs	r3, #0
 800f040:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f042:	687b      	ldr	r3, [r7, #4]
	}
 800f044:	4618      	mov	r0, r3
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr
 800f050:	200144b8 	.word	0x200144b8
 800f054:	200144d4 	.word	0x200144d4

0800f058 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f064:	2300      	movs	r3, #0
 800f066:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d051      	beq.n	800f112 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f072:	4b2a      	ldr	r3, [pc, #168]	; (800f11c <xTaskPriorityInherit+0xc4>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f078:	429a      	cmp	r2, r3
 800f07a:	d241      	bcs.n	800f100 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	699b      	ldr	r3, [r3, #24]
 800f080:	2b00      	cmp	r3, #0
 800f082:	db06      	blt.n	800f092 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f084:	4b25      	ldr	r3, [pc, #148]	; (800f11c <xTaskPriorityInherit+0xc4>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f08a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	6959      	ldr	r1, [r3, #20]
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f09a:	4613      	mov	r3, r2
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	4413      	add	r3, r2
 800f0a0:	009b      	lsls	r3, r3, #2
 800f0a2:	4a1f      	ldr	r2, [pc, #124]	; (800f120 <xTaskPriorityInherit+0xc8>)
 800f0a4:	4413      	add	r3, r2
 800f0a6:	4299      	cmp	r1, r3
 800f0a8:	d122      	bne.n	800f0f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	3304      	adds	r3, #4
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7fd fee4 	bl	800ce7c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f0b4:	4b19      	ldr	r3, [pc, #100]	; (800f11c <xTaskPriorityInherit+0xc4>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0c2:	4b18      	ldr	r3, [pc, #96]	; (800f124 <xTaskPriorityInherit+0xcc>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d903      	bls.n	800f0d2 <xTaskPriorityInherit+0x7a>
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ce:	4a15      	ldr	r2, [pc, #84]	; (800f124 <xTaskPriorityInherit+0xcc>)
 800f0d0:	6013      	str	r3, [r2, #0]
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	4413      	add	r3, r2
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	4a10      	ldr	r2, [pc, #64]	; (800f120 <xTaskPriorityInherit+0xc8>)
 800f0e0:	441a      	add	r2, r3
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	4610      	mov	r0, r2
 800f0ea:	f7fd fe6a 	bl	800cdc2 <vListInsertEnd>
 800f0ee:	e004      	b.n	800f0fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f0f0:	4b0a      	ldr	r3, [pc, #40]	; (800f11c <xTaskPriorityInherit+0xc4>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	60fb      	str	r3, [r7, #12]
 800f0fe:	e008      	b.n	800f112 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f104:	4b05      	ldr	r3, [pc, #20]	; (800f11c <xTaskPriorityInherit+0xc4>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d201      	bcs.n	800f112 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f10e:	2301      	movs	r3, #1
 800f110:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f112:	68fb      	ldr	r3, [r7, #12]
	}
 800f114:	4618      	mov	r0, r3
 800f116:	3710      	adds	r7, #16
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}
 800f11c:	20013fd8 	.word	0x20013fd8
 800f120:	20013fdc 	.word	0x20013fdc
 800f124:	200144b4 	.word	0x200144b4

0800f128 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b086      	sub	sp, #24
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f134:	2300      	movs	r3, #0
 800f136:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d056      	beq.n	800f1ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f13e:	4b2e      	ldr	r3, [pc, #184]	; (800f1f8 <xTaskPriorityDisinherit+0xd0>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	693a      	ldr	r2, [r7, #16]
 800f144:	429a      	cmp	r2, r3
 800f146:	d00a      	beq.n	800f15e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14c:	f383 8811 	msr	BASEPRI, r3
 800f150:	f3bf 8f6f 	isb	sy
 800f154:	f3bf 8f4f 	dsb	sy
 800f158:	60fb      	str	r3, [r7, #12]
}
 800f15a:	bf00      	nop
 800f15c:	e7fe      	b.n	800f15c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f162:	2b00      	cmp	r3, #0
 800f164:	d10a      	bne.n	800f17c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f16a:	f383 8811 	msr	BASEPRI, r3
 800f16e:	f3bf 8f6f 	isb	sy
 800f172:	f3bf 8f4f 	dsb	sy
 800f176:	60bb      	str	r3, [r7, #8]
}
 800f178:	bf00      	nop
 800f17a:	e7fe      	b.n	800f17a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f180:	1e5a      	subs	r2, r3, #1
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f18e:	429a      	cmp	r2, r3
 800f190:	d02c      	beq.n	800f1ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f196:	2b00      	cmp	r3, #0
 800f198:	d128      	bne.n	800f1ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	3304      	adds	r3, #4
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7fd fe6c 	bl	800ce7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1bc:	4b0f      	ldr	r3, [pc, #60]	; (800f1fc <xTaskPriorityDisinherit+0xd4>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d903      	bls.n	800f1cc <xTaskPriorityDisinherit+0xa4>
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c8:	4a0c      	ldr	r2, [pc, #48]	; (800f1fc <xTaskPriorityDisinherit+0xd4>)
 800f1ca:	6013      	str	r3, [r2, #0]
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1d0:	4613      	mov	r3, r2
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	4413      	add	r3, r2
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	4a09      	ldr	r2, [pc, #36]	; (800f200 <xTaskPriorityDisinherit+0xd8>)
 800f1da:	441a      	add	r2, r3
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	3304      	adds	r3, #4
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	4610      	mov	r0, r2
 800f1e4:	f7fd fded 	bl	800cdc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f1ec:	697b      	ldr	r3, [r7, #20]
	}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3718      	adds	r7, #24
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	20013fd8 	.word	0x20013fd8
 800f1fc:	200144b4 	.word	0x200144b4
 800f200:	20013fdc 	.word	0x20013fdc

0800f204 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f204:	b580      	push	{r7, lr}
 800f206:	b088      	sub	sp, #32
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f212:	2301      	movs	r3, #1
 800f214:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d06a      	beq.n	800f2f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f21c:	69bb      	ldr	r3, [r7, #24]
 800f21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10a      	bne.n	800f23a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f228:	f383 8811 	msr	BASEPRI, r3
 800f22c:	f3bf 8f6f 	isb	sy
 800f230:	f3bf 8f4f 	dsb	sy
 800f234:	60fb      	str	r3, [r7, #12]
}
 800f236:	bf00      	nop
 800f238:	e7fe      	b.n	800f238 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f23a:	69bb      	ldr	r3, [r7, #24]
 800f23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f23e:	683a      	ldr	r2, [r7, #0]
 800f240:	429a      	cmp	r2, r3
 800f242:	d902      	bls.n	800f24a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	61fb      	str	r3, [r7, #28]
 800f248:	e002      	b.n	800f250 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f24a:	69bb      	ldr	r3, [r7, #24]
 800f24c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f24e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f250:	69bb      	ldr	r3, [r7, #24]
 800f252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f254:	69fa      	ldr	r2, [r7, #28]
 800f256:	429a      	cmp	r2, r3
 800f258:	d04b      	beq.n	800f2f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f25e:	697a      	ldr	r2, [r7, #20]
 800f260:	429a      	cmp	r2, r3
 800f262:	d146      	bne.n	800f2f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f264:	4b25      	ldr	r3, [pc, #148]	; (800f2fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	69ba      	ldr	r2, [r7, #24]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d10a      	bne.n	800f284 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f272:	f383 8811 	msr	BASEPRI, r3
 800f276:	f3bf 8f6f 	isb	sy
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	60bb      	str	r3, [r7, #8]
}
 800f280:	bf00      	nop
 800f282:	e7fe      	b.n	800f282 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f284:	69bb      	ldr	r3, [r7, #24]
 800f286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f288:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	69fa      	ldr	r2, [r7, #28]
 800f28e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f290:	69bb      	ldr	r3, [r7, #24]
 800f292:	699b      	ldr	r3, [r3, #24]
 800f294:	2b00      	cmp	r3, #0
 800f296:	db04      	blt.n	800f2a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f2a2:	69bb      	ldr	r3, [r7, #24]
 800f2a4:	6959      	ldr	r1, [r3, #20]
 800f2a6:	693a      	ldr	r2, [r7, #16]
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	4413      	add	r3, r2
 800f2ae:	009b      	lsls	r3, r3, #2
 800f2b0:	4a13      	ldr	r2, [pc, #76]	; (800f300 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f2b2:	4413      	add	r3, r2
 800f2b4:	4299      	cmp	r1, r3
 800f2b6:	d11c      	bne.n	800f2f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2b8:	69bb      	ldr	r3, [r7, #24]
 800f2ba:	3304      	adds	r3, #4
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7fd fddd 	bl	800ce7c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f2c2:	69bb      	ldr	r3, [r7, #24]
 800f2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2c6:	4b0f      	ldr	r3, [pc, #60]	; (800f304 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d903      	bls.n	800f2d6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2d2:	4a0c      	ldr	r2, [pc, #48]	; (800f304 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f2d4:	6013      	str	r3, [r2, #0]
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2da:	4613      	mov	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	4413      	add	r3, r2
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	4a07      	ldr	r2, [pc, #28]	; (800f300 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f2e4:	441a      	add	r2, r3
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	3304      	adds	r3, #4
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	4610      	mov	r0, r2
 800f2ee:	f7fd fd68 	bl	800cdc2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f2f2:	bf00      	nop
 800f2f4:	3720      	adds	r7, #32
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	20013fd8 	.word	0x20013fd8
 800f300:	20013fdc 	.word	0x20013fdc
 800f304:	200144b4 	.word	0x200144b4

0800f308 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f308:	b480      	push	{r7}
 800f30a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f30c:	4b07      	ldr	r3, [pc, #28]	; (800f32c <pvTaskIncrementMutexHeldCount+0x24>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d004      	beq.n	800f31e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f314:	4b05      	ldr	r3, [pc, #20]	; (800f32c <pvTaskIncrementMutexHeldCount+0x24>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f31a:	3201      	adds	r2, #1
 800f31c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f31e:	4b03      	ldr	r3, [pc, #12]	; (800f32c <pvTaskIncrementMutexHeldCount+0x24>)
 800f320:	681b      	ldr	r3, [r3, #0]
	}
 800f322:	4618      	mov	r0, r3
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr
 800f32c:	20013fd8 	.word	0x20013fd8

0800f330 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f33a:	4b21      	ldr	r3, [pc, #132]	; (800f3c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f340:	4b20      	ldr	r3, [pc, #128]	; (800f3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	3304      	adds	r3, #4
 800f346:	4618      	mov	r0, r3
 800f348:	f7fd fd98 	bl	800ce7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f352:	d10a      	bne.n	800f36a <prvAddCurrentTaskToDelayedList+0x3a>
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d007      	beq.n	800f36a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f35a:	4b1a      	ldr	r3, [pc, #104]	; (800f3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	3304      	adds	r3, #4
 800f360:	4619      	mov	r1, r3
 800f362:	4819      	ldr	r0, [pc, #100]	; (800f3c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800f364:	f7fd fd2d 	bl	800cdc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f368:	e026      	b.n	800f3b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f36a:	68fa      	ldr	r2, [r7, #12]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4413      	add	r3, r2
 800f370:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f372:	4b14      	ldr	r3, [pc, #80]	; (800f3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	68ba      	ldr	r2, [r7, #8]
 800f378:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f37a:	68ba      	ldr	r2, [r7, #8]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d209      	bcs.n	800f396 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f382:	4b12      	ldr	r3, [pc, #72]	; (800f3cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800f384:	681a      	ldr	r2, [r3, #0]
 800f386:	4b0f      	ldr	r3, [pc, #60]	; (800f3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	3304      	adds	r3, #4
 800f38c:	4619      	mov	r1, r3
 800f38e:	4610      	mov	r0, r2
 800f390:	f7fd fd3b 	bl	800ce0a <vListInsert>
}
 800f394:	e010      	b.n	800f3b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f396:	4b0e      	ldr	r3, [pc, #56]	; (800f3d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	4b0a      	ldr	r3, [pc, #40]	; (800f3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	3304      	adds	r3, #4
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	4610      	mov	r0, r2
 800f3a4:	f7fd fd31 	bl	800ce0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f3a8:	4b0a      	ldr	r3, [pc, #40]	; (800f3d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	68ba      	ldr	r2, [r7, #8]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d202      	bcs.n	800f3b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f3b2:	4a08      	ldr	r2, [pc, #32]	; (800f3d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	6013      	str	r3, [r2, #0]
}
 800f3b8:	bf00      	nop
 800f3ba:	3710      	adds	r7, #16
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	200144b0 	.word	0x200144b0
 800f3c4:	20013fd8 	.word	0x20013fd8
 800f3c8:	20014498 	.word	0x20014498
 800f3cc:	20014468 	.word	0x20014468
 800f3d0:	20014464 	.word	0x20014464
 800f3d4:	200144cc 	.word	0x200144cc

0800f3d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b08a      	sub	sp, #40	; 0x28
 800f3dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f3e2:	f000 fb07 	bl	800f9f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f3e6:	4b1c      	ldr	r3, [pc, #112]	; (800f458 <xTimerCreateTimerTask+0x80>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d021      	beq.n	800f432 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f3f6:	1d3a      	adds	r2, r7, #4
 800f3f8:	f107 0108 	add.w	r1, r7, #8
 800f3fc:	f107 030c 	add.w	r3, r7, #12
 800f400:	4618      	mov	r0, r3
 800f402:	f7fd faad 	bl	800c960 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f406:	6879      	ldr	r1, [r7, #4]
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	68fa      	ldr	r2, [r7, #12]
 800f40c:	9202      	str	r2, [sp, #8]
 800f40e:	9301      	str	r3, [sp, #4]
 800f410:	2302      	movs	r3, #2
 800f412:	9300      	str	r3, [sp, #0]
 800f414:	2300      	movs	r3, #0
 800f416:	460a      	mov	r2, r1
 800f418:	4910      	ldr	r1, [pc, #64]	; (800f45c <xTimerCreateTimerTask+0x84>)
 800f41a:	4811      	ldr	r0, [pc, #68]	; (800f460 <xTimerCreateTimerTask+0x88>)
 800f41c:	f7fe ffb2 	bl	800e384 <xTaskCreateStatic>
 800f420:	4603      	mov	r3, r0
 800f422:	4a10      	ldr	r2, [pc, #64]	; (800f464 <xTimerCreateTimerTask+0x8c>)
 800f424:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f426:	4b0f      	ldr	r3, [pc, #60]	; (800f464 <xTimerCreateTimerTask+0x8c>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d001      	beq.n	800f432 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f42e:	2301      	movs	r3, #1
 800f430:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d10a      	bne.n	800f44e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f43c:	f383 8811 	msr	BASEPRI, r3
 800f440:	f3bf 8f6f 	isb	sy
 800f444:	f3bf 8f4f 	dsb	sy
 800f448:	613b      	str	r3, [r7, #16]
}
 800f44a:	bf00      	nop
 800f44c:	e7fe      	b.n	800f44c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f44e:	697b      	ldr	r3, [r7, #20]
}
 800f450:	4618      	mov	r0, r3
 800f452:	3718      	adds	r7, #24
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}
 800f458:	20014508 	.word	0x20014508
 800f45c:	08027b84 	.word	0x08027b84
 800f460:	0800f59d 	.word	0x0800f59d
 800f464:	2001450c 	.word	0x2001450c

0800f468 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b08a      	sub	sp, #40	; 0x28
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
 800f474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f476:	2300      	movs	r3, #0
 800f478:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d10a      	bne.n	800f496 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f484:	f383 8811 	msr	BASEPRI, r3
 800f488:	f3bf 8f6f 	isb	sy
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	623b      	str	r3, [r7, #32]
}
 800f492:	bf00      	nop
 800f494:	e7fe      	b.n	800f494 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f496:	4b1a      	ldr	r3, [pc, #104]	; (800f500 <xTimerGenericCommand+0x98>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d02a      	beq.n	800f4f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	2b05      	cmp	r3, #5
 800f4ae:	dc18      	bgt.n	800f4e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f4b0:	f7ff fdb4 	bl	800f01c <xTaskGetSchedulerState>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	d109      	bne.n	800f4ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f4ba:	4b11      	ldr	r3, [pc, #68]	; (800f500 <xTimerGenericCommand+0x98>)
 800f4bc:	6818      	ldr	r0, [r3, #0]
 800f4be:	f107 0110 	add.w	r1, r7, #16
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4c6:	f7fe f8f7 	bl	800d6b8 <xQueueGenericSend>
 800f4ca:	6278      	str	r0, [r7, #36]	; 0x24
 800f4cc:	e012      	b.n	800f4f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f4ce:	4b0c      	ldr	r3, [pc, #48]	; (800f500 <xTimerGenericCommand+0x98>)
 800f4d0:	6818      	ldr	r0, [r3, #0]
 800f4d2:	f107 0110 	add.w	r1, r7, #16
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	2200      	movs	r2, #0
 800f4da:	f7fe f8ed 	bl	800d6b8 <xQueueGenericSend>
 800f4de:	6278      	str	r0, [r7, #36]	; 0x24
 800f4e0:	e008      	b.n	800f4f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f4e2:	4b07      	ldr	r3, [pc, #28]	; (800f500 <xTimerGenericCommand+0x98>)
 800f4e4:	6818      	ldr	r0, [r3, #0]
 800f4e6:	f107 0110 	add.w	r1, r7, #16
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	683a      	ldr	r2, [r7, #0]
 800f4ee:	f7fe f9e1 	bl	800d8b4 <xQueueGenericSendFromISR>
 800f4f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3728      	adds	r7, #40	; 0x28
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	20014508 	.word	0x20014508

0800f504 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b088      	sub	sp, #32
 800f508:	af02      	add	r7, sp, #8
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f50e:	4b22      	ldr	r3, [pc, #136]	; (800f598 <prvProcessExpiredTimer+0x94>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	3304      	adds	r3, #4
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fd fcad 	bl	800ce7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f528:	f003 0304 	and.w	r3, r3, #4
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d022      	beq.n	800f576 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	699a      	ldr	r2, [r3, #24]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	18d1      	adds	r1, r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	683a      	ldr	r2, [r7, #0]
 800f53c:	6978      	ldr	r0, [r7, #20]
 800f53e:	f000 f8d1 	bl	800f6e4 <prvInsertTimerInActiveList>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d01f      	beq.n	800f588 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f548:	2300      	movs	r3, #0
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	2300      	movs	r3, #0
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	2100      	movs	r1, #0
 800f552:	6978      	ldr	r0, [r7, #20]
 800f554:	f7ff ff88 	bl	800f468 <xTimerGenericCommand>
 800f558:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d113      	bne.n	800f588 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f564:	f383 8811 	msr	BASEPRI, r3
 800f568:	f3bf 8f6f 	isb	sy
 800f56c:	f3bf 8f4f 	dsb	sy
 800f570:	60fb      	str	r3, [r7, #12]
}
 800f572:	bf00      	nop
 800f574:	e7fe      	b.n	800f574 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f57c:	f023 0301 	bic.w	r3, r3, #1
 800f580:	b2da      	uxtb	r2, r3
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	6a1b      	ldr	r3, [r3, #32]
 800f58c:	6978      	ldr	r0, [r7, #20]
 800f58e:	4798      	blx	r3
}
 800f590:	bf00      	nop
 800f592:	3718      	adds	r7, #24
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	20014500 	.word	0x20014500

0800f59c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5a4:	f107 0308 	add.w	r3, r7, #8
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f000 f857 	bl	800f65c <prvGetNextExpireTime>
 800f5ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	f000 f803 	bl	800f5c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f5ba:	f000 f8d5 	bl	800f768 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5be:	e7f1      	b.n	800f5a4 <prvTimerTask+0x8>

0800f5c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f5ca:	f7ff f93b 	bl	800e844 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f5ce:	f107 0308 	add.w	r3, r7, #8
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f000 f866 	bl	800f6a4 <prvSampleTimeNow>
 800f5d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d130      	bne.n	800f642 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d10a      	bne.n	800f5fc <prvProcessTimerOrBlockTask+0x3c>
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d806      	bhi.n	800f5fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f5ee:	f7ff f937 	bl	800e860 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f5f2:	68f9      	ldr	r1, [r7, #12]
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7ff ff85 	bl	800f504 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f5fa:	e024      	b.n	800f646 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d008      	beq.n	800f614 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f602:	4b13      	ldr	r3, [pc, #76]	; (800f650 <prvProcessTimerOrBlockTask+0x90>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d101      	bne.n	800f610 <prvProcessTimerOrBlockTask+0x50>
 800f60c:	2301      	movs	r3, #1
 800f60e:	e000      	b.n	800f612 <prvProcessTimerOrBlockTask+0x52>
 800f610:	2300      	movs	r3, #0
 800f612:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f614:	4b0f      	ldr	r3, [pc, #60]	; (800f654 <prvProcessTimerOrBlockTask+0x94>)
 800f616:	6818      	ldr	r0, [r3, #0]
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	1ad3      	subs	r3, r2, r3
 800f61e:	683a      	ldr	r2, [r7, #0]
 800f620:	4619      	mov	r1, r3
 800f622:	f7fe fe7b 	bl	800e31c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f626:	f7ff f91b 	bl	800e860 <xTaskResumeAll>
 800f62a:	4603      	mov	r3, r0
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d10a      	bne.n	800f646 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f630:	4b09      	ldr	r3, [pc, #36]	; (800f658 <prvProcessTimerOrBlockTask+0x98>)
 800f632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f636:	601a      	str	r2, [r3, #0]
 800f638:	f3bf 8f4f 	dsb	sy
 800f63c:	f3bf 8f6f 	isb	sy
}
 800f640:	e001      	b.n	800f646 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f642:	f7ff f90d 	bl	800e860 <xTaskResumeAll>
}
 800f646:	bf00      	nop
 800f648:	3710      	adds	r7, #16
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	20014504 	.word	0x20014504
 800f654:	20014508 	.word	0x20014508
 800f658:	e000ed04 	.word	0xe000ed04

0800f65c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f65c:	b480      	push	{r7}
 800f65e:	b085      	sub	sp, #20
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f664:	4b0e      	ldr	r3, [pc, #56]	; (800f6a0 <prvGetNextExpireTime+0x44>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d101      	bne.n	800f672 <prvGetNextExpireTime+0x16>
 800f66e:	2201      	movs	r2, #1
 800f670:	e000      	b.n	800f674 <prvGetNextExpireTime+0x18>
 800f672:	2200      	movs	r2, #0
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d105      	bne.n	800f68c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f680:	4b07      	ldr	r3, [pc, #28]	; (800f6a0 <prvGetNextExpireTime+0x44>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	60fb      	str	r3, [r7, #12]
 800f68a:	e001      	b.n	800f690 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f68c:	2300      	movs	r3, #0
 800f68e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f690:	68fb      	ldr	r3, [r7, #12]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	20014500 	.word	0x20014500

0800f6a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f6ac:	f7ff f976 	bl	800e99c <xTaskGetTickCount>
 800f6b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f6b2:	4b0b      	ldr	r3, [pc, #44]	; (800f6e0 <prvSampleTimeNow+0x3c>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d205      	bcs.n	800f6c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f6bc:	f000 f936 	bl	800f92c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	601a      	str	r2, [r3, #0]
 800f6c6:	e002      	b.n	800f6ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f6ce:	4a04      	ldr	r2, [pc, #16]	; (800f6e0 <prvSampleTimeNow+0x3c>)
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3710      	adds	r7, #16
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	20014510 	.word	0x20014510

0800f6e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b086      	sub	sp, #24
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	60f8      	str	r0, [r7, #12]
 800f6ec:	60b9      	str	r1, [r7, #8]
 800f6ee:	607a      	str	r2, [r7, #4]
 800f6f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	68fa      	ldr	r2, [r7, #12]
 800f700:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f702:	68ba      	ldr	r2, [r7, #8]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	429a      	cmp	r2, r3
 800f708:	d812      	bhi.n	800f730 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f70a:	687a      	ldr	r2, [r7, #4]
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	1ad2      	subs	r2, r2, r3
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	699b      	ldr	r3, [r3, #24]
 800f714:	429a      	cmp	r2, r3
 800f716:	d302      	bcc.n	800f71e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f718:	2301      	movs	r3, #1
 800f71a:	617b      	str	r3, [r7, #20]
 800f71c:	e01b      	b.n	800f756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f71e:	4b10      	ldr	r3, [pc, #64]	; (800f760 <prvInsertTimerInActiveList+0x7c>)
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	3304      	adds	r3, #4
 800f726:	4619      	mov	r1, r3
 800f728:	4610      	mov	r0, r2
 800f72a:	f7fd fb6e 	bl	800ce0a <vListInsert>
 800f72e:	e012      	b.n	800f756 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	429a      	cmp	r2, r3
 800f736:	d206      	bcs.n	800f746 <prvInsertTimerInActiveList+0x62>
 800f738:	68ba      	ldr	r2, [r7, #8]
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d302      	bcc.n	800f746 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f740:	2301      	movs	r3, #1
 800f742:	617b      	str	r3, [r7, #20]
 800f744:	e007      	b.n	800f756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f746:	4b07      	ldr	r3, [pc, #28]	; (800f764 <prvInsertTimerInActiveList+0x80>)
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	3304      	adds	r3, #4
 800f74e:	4619      	mov	r1, r3
 800f750:	4610      	mov	r0, r2
 800f752:	f7fd fb5a 	bl	800ce0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f756:	697b      	ldr	r3, [r7, #20]
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3718      	adds	r7, #24
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	20014504 	.word	0x20014504
 800f764:	20014500 	.word	0x20014500

0800f768 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b08e      	sub	sp, #56	; 0x38
 800f76c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f76e:	e0ca      	b.n	800f906 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2b00      	cmp	r3, #0
 800f774:	da18      	bge.n	800f7a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f776:	1d3b      	adds	r3, r7, #4
 800f778:	3304      	adds	r3, #4
 800f77a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d10a      	bne.n	800f798 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f786:	f383 8811 	msr	BASEPRI, r3
 800f78a:	f3bf 8f6f 	isb	sy
 800f78e:	f3bf 8f4f 	dsb	sy
 800f792:	61fb      	str	r3, [r7, #28]
}
 800f794:	bf00      	nop
 800f796:	e7fe      	b.n	800f796 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f79e:	6850      	ldr	r0, [r2, #4]
 800f7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7a2:	6892      	ldr	r2, [r2, #8]
 800f7a4:	4611      	mov	r1, r2
 800f7a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	f2c0 80ab 	blt.w	800f906 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b6:	695b      	ldr	r3, [r3, #20]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d004      	beq.n	800f7c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7be:	3304      	adds	r3, #4
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f7fd fb5b 	bl	800ce7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7c6:	463b      	mov	r3, r7
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7ff ff6b 	bl	800f6a4 <prvSampleTimeNow>
 800f7ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2b09      	cmp	r3, #9
 800f7d4:	f200 8096 	bhi.w	800f904 <prvProcessReceivedCommands+0x19c>
 800f7d8:	a201      	add	r2, pc, #4	; (adr r2, 800f7e0 <prvProcessReceivedCommands+0x78>)
 800f7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7de:	bf00      	nop
 800f7e0:	0800f809 	.word	0x0800f809
 800f7e4:	0800f809 	.word	0x0800f809
 800f7e8:	0800f809 	.word	0x0800f809
 800f7ec:	0800f87d 	.word	0x0800f87d
 800f7f0:	0800f891 	.word	0x0800f891
 800f7f4:	0800f8db 	.word	0x0800f8db
 800f7f8:	0800f809 	.word	0x0800f809
 800f7fc:	0800f809 	.word	0x0800f809
 800f800:	0800f87d 	.word	0x0800f87d
 800f804:	0800f891 	.word	0x0800f891
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f80e:	f043 0301 	orr.w	r3, r3, #1
 800f812:	b2da      	uxtb	r2, r3
 800f814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f81a:	68ba      	ldr	r2, [r7, #8]
 800f81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81e:	699b      	ldr	r3, [r3, #24]
 800f820:	18d1      	adds	r1, r2, r3
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f828:	f7ff ff5c 	bl	800f6e4 <prvInsertTimerInActiveList>
 800f82c:	4603      	mov	r3, r0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d069      	beq.n	800f906 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f834:	6a1b      	ldr	r3, [r3, #32]
 800f836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f838:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f840:	f003 0304 	and.w	r3, r3, #4
 800f844:	2b00      	cmp	r3, #0
 800f846:	d05e      	beq.n	800f906 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84c:	699b      	ldr	r3, [r3, #24]
 800f84e:	441a      	add	r2, r3
 800f850:	2300      	movs	r3, #0
 800f852:	9300      	str	r3, [sp, #0]
 800f854:	2300      	movs	r3, #0
 800f856:	2100      	movs	r1, #0
 800f858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f85a:	f7ff fe05 	bl	800f468 <xTimerGenericCommand>
 800f85e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f860:	6a3b      	ldr	r3, [r7, #32]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d14f      	bne.n	800f906 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86a:	f383 8811 	msr	BASEPRI, r3
 800f86e:	f3bf 8f6f 	isb	sy
 800f872:	f3bf 8f4f 	dsb	sy
 800f876:	61bb      	str	r3, [r7, #24]
}
 800f878:	bf00      	nop
 800f87a:	e7fe      	b.n	800f87a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f882:	f023 0301 	bic.w	r3, r3, #1
 800f886:	b2da      	uxtb	r2, r3
 800f888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f88a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f88e:	e03a      	b.n	800f906 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f896:	f043 0301 	orr.w	r3, r3, #1
 800f89a:	b2da      	uxtb	r2, r3
 800f89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f8a2:	68ba      	ldr	r2, [r7, #8]
 800f8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8aa:	699b      	ldr	r3, [r3, #24]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d10a      	bne.n	800f8c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b4:	f383 8811 	msr	BASEPRI, r3
 800f8b8:	f3bf 8f6f 	isb	sy
 800f8bc:	f3bf 8f4f 	dsb	sy
 800f8c0:	617b      	str	r3, [r7, #20]
}
 800f8c2:	bf00      	nop
 800f8c4:	e7fe      	b.n	800f8c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c8:	699a      	ldr	r2, [r3, #24]
 800f8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8cc:	18d1      	adds	r1, r2, r3
 800f8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8d4:	f7ff ff06 	bl	800f6e4 <prvInsertTimerInActiveList>
					break;
 800f8d8:	e015      	b.n	800f906 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8e0:	f003 0302 	and.w	r3, r3, #2
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d103      	bne.n	800f8f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f8e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8ea:	f7fd f91f 	bl	800cb2c <vPortFree>
 800f8ee:	e00a      	b.n	800f906 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8f6:	f023 0301 	bic.w	r3, r3, #1
 800f8fa:	b2da      	uxtb	r2, r3
 800f8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f902:	e000      	b.n	800f906 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800f904:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f906:	4b08      	ldr	r3, [pc, #32]	; (800f928 <prvProcessReceivedCommands+0x1c0>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	1d39      	adds	r1, r7, #4
 800f90c:	2200      	movs	r2, #0
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fe f8f8 	bl	800db04 <xQueueReceive>
 800f914:	4603      	mov	r3, r0
 800f916:	2b00      	cmp	r3, #0
 800f918:	f47f af2a 	bne.w	800f770 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f91c:	bf00      	nop
 800f91e:	bf00      	nop
 800f920:	3730      	adds	r7, #48	; 0x30
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	bf00      	nop
 800f928:	20014508 	.word	0x20014508

0800f92c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b088      	sub	sp, #32
 800f930:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f932:	e048      	b.n	800f9c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f934:	4b2d      	ldr	r3, [pc, #180]	; (800f9ec <prvSwitchTimerLists+0xc0>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f93e:	4b2b      	ldr	r3, [pc, #172]	; (800f9ec <prvSwitchTimerLists+0xc0>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	68db      	ldr	r3, [r3, #12]
 800f944:	68db      	ldr	r3, [r3, #12]
 800f946:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	3304      	adds	r3, #4
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fd fa95 	bl	800ce7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	6a1b      	ldr	r3, [r3, #32]
 800f956:	68f8      	ldr	r0, [r7, #12]
 800f958:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f960:	f003 0304 	and.w	r3, r3, #4
 800f964:	2b00      	cmp	r3, #0
 800f966:	d02e      	beq.n	800f9c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	699b      	ldr	r3, [r3, #24]
 800f96c:	693a      	ldr	r2, [r7, #16]
 800f96e:	4413      	add	r3, r2
 800f970:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f972:	68ba      	ldr	r2, [r7, #8]
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	429a      	cmp	r2, r3
 800f978:	d90e      	bls.n	800f998 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	68ba      	ldr	r2, [r7, #8]
 800f97e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	68fa      	ldr	r2, [r7, #12]
 800f984:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f986:	4b19      	ldr	r3, [pc, #100]	; (800f9ec <prvSwitchTimerLists+0xc0>)
 800f988:	681a      	ldr	r2, [r3, #0]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	3304      	adds	r3, #4
 800f98e:	4619      	mov	r1, r3
 800f990:	4610      	mov	r0, r2
 800f992:	f7fd fa3a 	bl	800ce0a <vListInsert>
 800f996:	e016      	b.n	800f9c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f998:	2300      	movs	r3, #0
 800f99a:	9300      	str	r3, [sp, #0]
 800f99c:	2300      	movs	r3, #0
 800f99e:	693a      	ldr	r2, [r7, #16]
 800f9a0:	2100      	movs	r1, #0
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	f7ff fd60 	bl	800f468 <xTimerGenericCommand>
 800f9a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d10a      	bne.n	800f9c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f3bf 8f6f 	isb	sy
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	603b      	str	r3, [r7, #0]
}
 800f9c2:	bf00      	nop
 800f9c4:	e7fe      	b.n	800f9c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9c6:	4b09      	ldr	r3, [pc, #36]	; (800f9ec <prvSwitchTimerLists+0xc0>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d1b1      	bne.n	800f934 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f9d0:	4b06      	ldr	r3, [pc, #24]	; (800f9ec <prvSwitchTimerLists+0xc0>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f9d6:	4b06      	ldr	r3, [pc, #24]	; (800f9f0 <prvSwitchTimerLists+0xc4>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	4a04      	ldr	r2, [pc, #16]	; (800f9ec <prvSwitchTimerLists+0xc0>)
 800f9dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f9de:	4a04      	ldr	r2, [pc, #16]	; (800f9f0 <prvSwitchTimerLists+0xc4>)
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	6013      	str	r3, [r2, #0]
}
 800f9e4:	bf00      	nop
 800f9e6:	3718      	adds	r7, #24
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}
 800f9ec:	20014500 	.word	0x20014500
 800f9f0:	20014504 	.word	0x20014504

0800f9f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f9fa:	f7fd fb93 	bl	800d124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f9fe:	4b15      	ldr	r3, [pc, #84]	; (800fa54 <prvCheckForValidListAndQueue+0x60>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d120      	bne.n	800fa48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa06:	4814      	ldr	r0, [pc, #80]	; (800fa58 <prvCheckForValidListAndQueue+0x64>)
 800fa08:	f7fd f9ae 	bl	800cd68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa0c:	4813      	ldr	r0, [pc, #76]	; (800fa5c <prvCheckForValidListAndQueue+0x68>)
 800fa0e:	f7fd f9ab 	bl	800cd68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa12:	4b13      	ldr	r3, [pc, #76]	; (800fa60 <prvCheckForValidListAndQueue+0x6c>)
 800fa14:	4a10      	ldr	r2, [pc, #64]	; (800fa58 <prvCheckForValidListAndQueue+0x64>)
 800fa16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa18:	4b12      	ldr	r3, [pc, #72]	; (800fa64 <prvCheckForValidListAndQueue+0x70>)
 800fa1a:	4a10      	ldr	r2, [pc, #64]	; (800fa5c <prvCheckForValidListAndQueue+0x68>)
 800fa1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa1e:	2300      	movs	r3, #0
 800fa20:	9300      	str	r3, [sp, #0]
 800fa22:	4b11      	ldr	r3, [pc, #68]	; (800fa68 <prvCheckForValidListAndQueue+0x74>)
 800fa24:	4a11      	ldr	r2, [pc, #68]	; (800fa6c <prvCheckForValidListAndQueue+0x78>)
 800fa26:	2110      	movs	r1, #16
 800fa28:	200a      	movs	r0, #10
 800fa2a:	f7fd fd05 	bl	800d438 <xQueueGenericCreateStatic>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	4a08      	ldr	r2, [pc, #32]	; (800fa54 <prvCheckForValidListAndQueue+0x60>)
 800fa32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa34:	4b07      	ldr	r3, [pc, #28]	; (800fa54 <prvCheckForValidListAndQueue+0x60>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d005      	beq.n	800fa48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa3c:	4b05      	ldr	r3, [pc, #20]	; (800fa54 <prvCheckForValidListAndQueue+0x60>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	490b      	ldr	r1, [pc, #44]	; (800fa70 <prvCheckForValidListAndQueue+0x7c>)
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7fe fc16 	bl	800e274 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa48:	f7fd fb9c 	bl	800d184 <vPortExitCritical>
}
 800fa4c:	bf00      	nop
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
 800fa52:	bf00      	nop
 800fa54:	20014508 	.word	0x20014508
 800fa58:	200144d8 	.word	0x200144d8
 800fa5c:	200144ec 	.word	0x200144ec
 800fa60:	20014500 	.word	0x20014500
 800fa64:	20014504 	.word	0x20014504
 800fa68:	200145b4 	.word	0x200145b4
 800fa6c:	20014514 	.word	0x20014514
 800fa70:	08027b8c 	.word	0x08027b8c

0800fa74 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800fa74:	8880      	ldrh	r0, [r0, #4]
 800fa76:	4770      	bx	lr

0800fa78 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800fa78:	b570      	push	{r4, r5, r6, lr}
 800fa7a:	6803      	ldr	r3, [r0, #0]
 800fa7c:	4605      	mov	r5, r0
 800fa7e:	460c      	mov	r4, r1
 800fa80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa82:	2100      	movs	r1, #0
 800fa84:	4798      	blx	r3
 800fa86:	682b      	ldr	r3, [r5, #0]
 800fa88:	4606      	mov	r6, r0
 800fa8a:	6a1b      	ldr	r3, [r3, #32]
 800fa8c:	4628      	mov	r0, r5
 800fa8e:	4798      	blx	r3
 800fa90:	1ba4      	subs	r4, r4, r6
 800fa92:	b2a4      	uxth	r4, r4
 800fa94:	fbb4 f0f0 	udiv	r0, r4, r0
 800fa98:	bd70      	pop	{r4, r5, r6, pc}

0800fa9a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	8083      	strh	r3, [r0, #4]
 800fa9e:	4770      	bx	lr

0800faa0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800faa0:	b510      	push	{r4, lr}
 800faa2:	6803      	ldr	r3, [r0, #0]
 800faa4:	8881      	ldrh	r1, [r0, #4]
 800faa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa8:	4604      	mov	r4, r0
 800faaa:	4798      	blx	r3
 800faac:	88a3      	ldrh	r3, [r4, #4]
 800faae:	3301      	adds	r3, #1
 800fab0:	80a3      	strh	r3, [r4, #4]
 800fab2:	bd10      	pop	{r4, pc}

0800fab4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800fab4:	6803      	ldr	r3, [r0, #0]
 800fab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab8:	4718      	bx	r3

0800faba <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800faba:	4770      	bx	lr

0800fabc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800fabc:	4a02      	ldr	r2, [pc, #8]	; (800fac8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800fabe:	6002      	str	r2, [r0, #0]
 800fac0:	2200      	movs	r2, #0
 800fac2:	8082      	strh	r2, [r0, #4]
 800fac4:	4770      	bx	lr
 800fac6:	bf00      	nop
 800fac8:	080291bc 	.word	0x080291bc

0800facc <_ZN8touchgfx9Container13getFirstChildEv>:
 800facc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800face:	4770      	bx	lr

0800fad0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800fad0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fad2:	2000      	movs	r0, #0
 800fad4:	b12b      	cbz	r3, 800fae2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800fad6:	b920      	cbnz	r0, 800fae2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800fad8:	1a5a      	subs	r2, r3, r1
 800fada:	4250      	negs	r0, r2
 800fadc:	4150      	adcs	r0, r2
 800fade:	699b      	ldr	r3, [r3, #24]
 800fae0:	e7f8      	b.n	800fad4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800fae2:	4770      	bx	lr

0800fae4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800fae4:	2300      	movs	r3, #0
 800fae6:	6148      	str	r0, [r1, #20]
 800fae8:	618b      	str	r3, [r1, #24]
 800faea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800faec:	b913      	cbnz	r3, 800faf4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800faee:	6281      	str	r1, [r0, #40]	; 0x28
 800faf0:	4770      	bx	lr
 800faf2:	4613      	mov	r3, r2
 800faf4:	699a      	ldr	r2, [r3, #24]
 800faf6:	2a00      	cmp	r2, #0
 800faf8:	d1fb      	bne.n	800faf2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800fafa:	6199      	str	r1, [r3, #24]
 800fafc:	4770      	bx	lr

0800fafe <_ZN8touchgfx9Container9removeAllEv>:
 800fafe:	2200      	movs	r2, #0
 800fb00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fb02:	b123      	cbz	r3, 800fb0e <_ZN8touchgfx9Container9removeAllEv+0x10>
 800fb04:	6999      	ldr	r1, [r3, #24]
 800fb06:	6281      	str	r1, [r0, #40]	; 0x28
 800fb08:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800fb0c:	e7f8      	b.n	800fb00 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800fb0e:	4770      	bx	lr

0800fb10 <_ZN8touchgfx9Container6unlinkEv>:
 800fb10:	2300      	movs	r3, #0
 800fb12:	6283      	str	r3, [r0, #40]	; 0x28
 800fb14:	4770      	bx	lr

0800fb16 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800fb16:	2200      	movs	r2, #0
 800fb18:	8002      	strh	r2, [r0, #0]
 800fb1a:	8042      	strh	r2, [r0, #2]
 800fb1c:	8082      	strh	r2, [r0, #4]
 800fb1e:	80c2      	strh	r2, [r0, #6]
 800fb20:	4770      	bx	lr

0800fb22 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800fb22:	b570      	push	{r4, r5, r6, lr}
 800fb24:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fb26:	460d      	mov	r5, r1
 800fb28:	4616      	mov	r6, r2
 800fb2a:	b13c      	cbz	r4, 800fb3c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800fb2c:	6823      	ldr	r3, [r4, #0]
 800fb2e:	4620      	mov	r0, r4
 800fb30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb32:	4632      	mov	r2, r6
 800fb34:	4629      	mov	r1, r5
 800fb36:	4798      	blx	r3
 800fb38:	69a4      	ldr	r4, [r4, #24]
 800fb3a:	e7f6      	b.n	800fb2a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800fb3c:	bd70      	pop	{r4, r5, r6, pc}

0800fb3e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800fb3e:	b538      	push	{r3, r4, r5, lr}
 800fb40:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fb42:	460d      	mov	r5, r1
 800fb44:	b134      	cbz	r4, 800fb54 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800fb46:	682b      	ldr	r3, [r5, #0]
 800fb48:	4621      	mov	r1, r4
 800fb4a:	689b      	ldr	r3, [r3, #8]
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	4798      	blx	r3
 800fb50:	69a4      	ldr	r4, [r4, #24]
 800fb52:	e7f7      	b.n	800fb44 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800fb54:	bd38      	pop	{r3, r4, r5, pc}

0800fb56 <_ZN8touchgfx9ContainerD1Ev>:
 800fb56:	4770      	bx	lr

0800fb58 <_ZN8touchgfx9ContainerD0Ev>:
 800fb58:	b510      	push	{r4, lr}
 800fb5a:	212c      	movs	r1, #44	; 0x2c
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	f016 ff4a 	bl	80269f6 <_ZdlPvj>
 800fb62:	4620      	mov	r0, r4
 800fb64:	bd10      	pop	{r4, pc}

0800fb66 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800fb66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fb68:	b19b      	cbz	r3, 800fb92 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800fb6a:	428b      	cmp	r3, r1
 800fb6c:	d109      	bne.n	800fb82 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800fb6e:	699a      	ldr	r2, [r3, #24]
 800fb70:	2100      	movs	r1, #0
 800fb72:	6159      	str	r1, [r3, #20]
 800fb74:	6282      	str	r2, [r0, #40]	; 0x28
 800fb76:	b902      	cbnz	r2, 800fb7a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800fb78:	4770      	bx	lr
 800fb7a:	6199      	str	r1, [r3, #24]
 800fb7c:	4770      	bx	lr
 800fb7e:	4613      	mov	r3, r2
 800fb80:	b13a      	cbz	r2, 800fb92 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800fb82:	699a      	ldr	r2, [r3, #24]
 800fb84:	428a      	cmp	r2, r1
 800fb86:	d1fa      	bne.n	800fb7e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800fb88:	698a      	ldr	r2, [r1, #24]
 800fb8a:	619a      	str	r2, [r3, #24]
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800fb92:	4770      	bx	lr

0800fb94 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800fb94:	b410      	push	{r4}
 800fb96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fb98:	4604      	mov	r4, r0
 800fb9a:	b92b      	cbnz	r3, 800fba8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800fb9c:	6803      	ldr	r3, [r0, #0]
 800fb9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fba4:	4611      	mov	r1, r2
 800fba6:	4718      	bx	r3
 800fba8:	b941      	cbnz	r1, 800fbbc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800fbaa:	6193      	str	r3, [r2, #24]
 800fbac:	6282      	str	r2, [r0, #40]	; 0x28
 800fbae:	6154      	str	r4, [r2, #20]
 800fbb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbb4:	4770      	bx	lr
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	d0f9      	beq.n	800fbb0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800fbbc:	4299      	cmp	r1, r3
 800fbbe:	6998      	ldr	r0, [r3, #24]
 800fbc0:	d1f9      	bne.n	800fbb6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800fbc2:	6190      	str	r0, [r2, #24]
 800fbc4:	618a      	str	r2, [r1, #24]
 800fbc6:	e7f2      	b.n	800fbae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800fbc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800fbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbcc:	461f      	mov	r7, r3
 800fbce:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800fbd2:	460d      	mov	r5, r1
 800fbd4:	4616      	mov	r6, r2
 800fbd6:	b103      	cbz	r3, 800fbda <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800fbd8:	6038      	str	r0, [r7, #0]
 800fbda:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fbdc:	b314      	cbz	r4, 800fc24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800fbde:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800fbe2:	b1eb      	cbz	r3, 800fc20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fbe4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800fbe8:	428d      	cmp	r5, r1
 800fbea:	db19      	blt.n	800fc20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fbec:	8923      	ldrh	r3, [r4, #8]
 800fbee:	b289      	uxth	r1, r1
 800fbf0:	440b      	add	r3, r1
 800fbf2:	b21b      	sxth	r3, r3
 800fbf4:	429d      	cmp	r5, r3
 800fbf6:	da13      	bge.n	800fc20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fbf8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800fbfc:	4296      	cmp	r6, r2
 800fbfe:	db0f      	blt.n	800fc20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fc00:	8963      	ldrh	r3, [r4, #10]
 800fc02:	b292      	uxth	r2, r2
 800fc04:	4413      	add	r3, r2
 800fc06:	b21b      	sxth	r3, r3
 800fc08:	429e      	cmp	r6, r3
 800fc0a:	da09      	bge.n	800fc20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fc0c:	6823      	ldr	r3, [r4, #0]
 800fc0e:	1ab2      	subs	r2, r6, r2
 800fc10:	1a69      	subs	r1, r5, r1
 800fc12:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800fc16:	b212      	sxth	r2, r2
 800fc18:	463b      	mov	r3, r7
 800fc1a:	b209      	sxth	r1, r1
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	47c0      	blx	r8
 800fc20:	69a4      	ldr	r4, [r4, #24]
 800fc22:	e7db      	b.n	800fbdc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800fc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fc28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800fc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2c:	4c6e      	ldr	r4, [pc, #440]	; (800fde8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800fc2e:	b0a1      	sub	sp, #132	; 0x84
 800fc30:	6824      	ldr	r4, [r4, #0]
 800fc32:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800fc34:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800fc38:	9303      	str	r3, [sp, #12]
 800fc3a:	2400      	movs	r4, #0
 800fc3c:	802c      	strh	r4, [r5, #0]
 800fc3e:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800fc40:	802c      	strh	r4, [r5, #0]
 800fc42:	601c      	str	r4, [r3, #0]
 800fc44:	4606      	mov	r6, r0
 800fc46:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800fc4a:	f7ff ffbd 	bl	800fbc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800fc4e:	f1b9 0f03 	cmp.w	r9, #3
 800fc52:	f340 80c2 	ble.w	800fdda <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 800fc56:	4631      	mov	r1, r6
 800fc58:	a80c      	add	r0, sp, #48	; 0x30
 800fc5a:	f006 ff2f 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fc5e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800fc62:	9306      	str	r3, [sp, #24]
 800fc64:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800fc68:	9307      	str	r3, [sp, #28]
 800fc6a:	9b03      	ldr	r3, [sp, #12]
 800fc6c:	f8d3 a000 	ldr.w	sl, [r3]
 800fc70:	f1ba 0f00 	cmp.w	sl, #0
 800fc74:	f000 80b4 	beq.w	800fde0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 800fc78:	4651      	mov	r1, sl
 800fc7a:	a810      	add	r0, sp, #64	; 0x40
 800fc7c:	f006 ff1e 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fc80:	9b01      	ldr	r3, [sp, #4]
 800fc82:	9a06      	ldr	r2, [sp, #24]
 800fc84:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800fc88:	189d      	adds	r5, r3, r2
 800fc8a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800fc8e:	9a07      	ldr	r2, [sp, #28]
 800fc90:	2002      	movs	r0, #2
 800fc92:	fb91 f1f0 	sdiv	r1, r1, r0
 800fc96:	4419      	add	r1, r3
 800fc98:	1a6d      	subs	r5, r5, r1
 800fc9a:	9b02      	ldr	r3, [sp, #8]
 800fc9c:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800fca0:	4413      	add	r3, r2
 800fca2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800fca6:	fb92 f2f0 	sdiv	r2, r2, r0
 800fcaa:	440a      	add	r2, r1
 800fcac:	1a9b      	subs	r3, r3, r2
 800fcae:	435b      	muls	r3, r3
 800fcb0:	fb05 3505 	mla	r5, r5, r5, r3
 800fcb4:	4f4d      	ldr	r7, [pc, #308]	; (800fdec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 800fcb6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fcb8:	ac10      	add	r4, sp, #64	; 0x40
 800fcba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcbc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fcbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcc0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fcc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcc4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800fcc8:	f1b9 0f0c 	cmp.w	r9, #12
 800fccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fcd0:	f04f 0303 	mov.w	r3, #3
 800fcd4:	bfc8      	it	gt
 800fcd6:	4698      	movgt	r8, r3
 800fcd8:	f8cd 9000 	str.w	r9, [sp]
 800fcdc:	f04f 0400 	mov.w	r4, #0
 800fce0:	bfdc      	itt	le
 800fce2:	f109 32ff 	addle.w	r2, r9, #4294967295
 800fce6:	fb92 f8f3 	sdivle	r8, r2, r3
 800fcea:	1c63      	adds	r3, r4, #1
 800fcec:	aa10      	add	r2, sp, #64	; 0x40
 800fcee:	f004 0401 	and.w	r4, r4, #1
 800fcf2:	9308      	str	r3, [sp, #32]
 800fcf4:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800fcf8:	9b00      	ldr	r3, [sp, #0]
 800fcfa:	fb93 f3f8 	sdiv	r3, r3, r8
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	3404      	adds	r4, #4
 800fd02:	f04f 0b00 	mov.w	fp, #0
 800fd06:	9304      	str	r3, [sp, #16]
 800fd08:	9a04      	ldr	r2, [sp, #16]
 800fd0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fd0e:	fb13 f302 	smulbb	r3, r3, r2
 800fd12:	9a01      	ldr	r2, [sp, #4]
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	1899      	adds	r1, r3, r2
 800fd18:	9305      	str	r3, [sp, #20]
 800fd1a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800fd1e:	b209      	sxth	r1, r1
 800fd20:	4299      	cmp	r1, r3
 800fd22:	db4d      	blt.n	800fdc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fd24:	8932      	ldrh	r2, [r6, #8]
 800fd26:	4413      	add	r3, r2
 800fd28:	b21b      	sxth	r3, r3
 800fd2a:	4299      	cmp	r1, r3
 800fd2c:	da48      	bge.n	800fdc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fd2e:	9b04      	ldr	r3, [sp, #16]
 800fd30:	6827      	ldr	r7, [r4, #0]
 800fd32:	fb17 f703 	smulbb	r7, r7, r3
 800fd36:	9b02      	ldr	r3, [sp, #8]
 800fd38:	b2bf      	uxth	r7, r7
 800fd3a:	18fa      	adds	r2, r7, r3
 800fd3c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800fd40:	b212      	sxth	r2, r2
 800fd42:	429a      	cmp	r2, r3
 800fd44:	db3c      	blt.n	800fdc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fd46:	8970      	ldrh	r0, [r6, #10]
 800fd48:	4403      	add	r3, r0
 800fd4a:	b21b      	sxth	r3, r3
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	da37      	bge.n	800fdc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fd50:	2300      	movs	r3, #0
 800fd52:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd54:	4630      	mov	r0, r6
 800fd56:	ab0b      	add	r3, sp, #44	; 0x2c
 800fd58:	f7ff ff36 	bl	800fbc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800fd5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fd5e:	b37a      	cbz	r2, 800fdc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fd60:	4552      	cmp	r2, sl
 800fd62:	d02d      	beq.n	800fdc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fd64:	4611      	mov	r1, r2
 800fd66:	a80e      	add	r0, sp, #56	; 0x38
 800fd68:	9209      	str	r2, [sp, #36]	; 0x24
 800fd6a:	f006 fea7 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fd6e:	9a06      	ldr	r2, [sp, #24]
 800fd70:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800fd74:	9b01      	ldr	r3, [sp, #4]
 800fd76:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800fd7a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800fd7e:	4413      	add	r3, r2
 800fd80:	f04f 0e02 	mov.w	lr, #2
 800fd84:	fb91 f1fe 	sdiv	r1, r1, lr
 800fd88:	4401      	add	r1, r0
 800fd8a:	1a58      	subs	r0, r3, r1
 800fd8c:	9a07      	ldr	r2, [sp, #28]
 800fd8e:	9b02      	ldr	r3, [sp, #8]
 800fd90:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800fd94:	fb9c fcfe 	sdiv	ip, ip, lr
 800fd98:	4413      	add	r3, r2
 800fd9a:	448c      	add	ip, r1
 800fd9c:	eba3 030c 	sub.w	r3, r3, ip
 800fda0:	435b      	muls	r3, r3
 800fda2:	fb00 3300 	mla	r3, r0, r0, r3
 800fda6:	42ab      	cmp	r3, r5
 800fda8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdaa:	d208      	bcs.n	800fdbe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800fdac:	9803      	ldr	r0, [sp, #12]
 800fdae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fdb0:	6001      	str	r1, [r0, #0]
 800fdb2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800fdb4:	9805      	ldr	r0, [sp, #20]
 800fdb6:	8008      	strh	r0, [r1, #0]
 800fdb8:	992b      	ldr	r1, [sp, #172]	; 0xac
 800fdba:	461d      	mov	r5, r3
 800fdbc:	800f      	strh	r7, [r1, #0]
 800fdbe:	4692      	mov	sl, r2
 800fdc0:	f10b 0b01 	add.w	fp, fp, #1
 800fdc4:	f1bb 0f04 	cmp.w	fp, #4
 800fdc8:	f104 0408 	add.w	r4, r4, #8
 800fdcc:	d19c      	bne.n	800fd08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800fdce:	9b00      	ldr	r3, [sp, #0]
 800fdd0:	9c08      	ldr	r4, [sp, #32]
 800fdd2:	444b      	add	r3, r9
 800fdd4:	4544      	cmp	r4, r8
 800fdd6:	9300      	str	r3, [sp, #0]
 800fdd8:	d187      	bne.n	800fcea <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800fdda:	b021      	add	sp, #132	; 0x84
 800fddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde0:	f04f 35ff 	mov.w	r5, #4294967295
 800fde4:	e766      	b.n	800fcb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800fde6:	bf00      	nop
 800fde8:	20014610 	.word	0x20014610
 800fdec:	08027b94 	.word	0x08027b94

0800fdf0 <_ZN8touchgfx4RectaNERKS0_>:
 800fdf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fdf4:	f9b1 7000 	ldrsh.w	r7, [r1]
 800fdf8:	888c      	ldrh	r4, [r1, #4]
 800fdfa:	f9b0 9000 	ldrsh.w	r9, [r0]
 800fdfe:	443c      	add	r4, r7
 800fe00:	b2a4      	uxth	r4, r4
 800fe02:	fa0f f884 	sxth.w	r8, r4
 800fe06:	45c1      	cmp	r9, r8
 800fe08:	da2f      	bge.n	800fe6a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800fe0a:	8882      	ldrh	r2, [r0, #4]
 800fe0c:	444a      	add	r2, r9
 800fe0e:	b292      	uxth	r2, r2
 800fe10:	fa0f fe82 	sxth.w	lr, r2
 800fe14:	4577      	cmp	r7, lr
 800fe16:	da28      	bge.n	800fe6a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800fe18:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800fe1c:	88cb      	ldrh	r3, [r1, #6]
 800fe1e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800fe22:	442b      	add	r3, r5
 800fe24:	b21b      	sxth	r3, r3
 800fe26:	429e      	cmp	r6, r3
 800fe28:	da1f      	bge.n	800fe6a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800fe2a:	88c3      	ldrh	r3, [r0, #6]
 800fe2c:	4433      	add	r3, r6
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	fa0f fc83 	sxth.w	ip, r3
 800fe34:	4565      	cmp	r5, ip
 800fe36:	da18      	bge.n	800fe6a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800fe38:	454f      	cmp	r7, r9
 800fe3a:	bfb8      	it	lt
 800fe3c:	464f      	movlt	r7, r9
 800fe3e:	42b5      	cmp	r5, r6
 800fe40:	bfb8      	it	lt
 800fe42:	4635      	movlt	r5, r6
 800fe44:	45f0      	cmp	r8, lr
 800fe46:	bfd8      	it	le
 800fe48:	4622      	movle	r2, r4
 800fe4a:	1bd2      	subs	r2, r2, r7
 800fe4c:	8082      	strh	r2, [r0, #4]
 800fe4e:	884a      	ldrh	r2, [r1, #2]
 800fe50:	88c9      	ldrh	r1, [r1, #6]
 800fe52:	8007      	strh	r7, [r0, #0]
 800fe54:	440a      	add	r2, r1
 800fe56:	b292      	uxth	r2, r2
 800fe58:	b211      	sxth	r1, r2
 800fe5a:	458c      	cmp	ip, r1
 800fe5c:	bfa8      	it	ge
 800fe5e:	4613      	movge	r3, r2
 800fe60:	1b5b      	subs	r3, r3, r5
 800fe62:	80c3      	strh	r3, [r0, #6]
 800fe64:	8045      	strh	r5, [r0, #2]
 800fe66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	8003      	strh	r3, [r0, #0]
 800fe6e:	8043      	strh	r3, [r0, #2]
 800fe70:	8083      	strh	r3, [r0, #4]
 800fe72:	80c3      	strh	r3, [r0, #6]
 800fe74:	e7f7      	b.n	800fe66 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800fe76:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	dd06      	ble.n	800fe8c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800fe7e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800fe82:	2800      	cmp	r0, #0
 800fe84:	bfcc      	ite	gt
 800fe86:	2000      	movgt	r0, #0
 800fe88:	2001      	movle	r0, #1
 800fe8a:	4770      	bx	lr
 800fe8c:	2001      	movs	r0, #1
 800fe8e:	4770      	bx	lr

0800fe90 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800fe90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe94:	2300      	movs	r3, #0
 800fe96:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800fe98:	8003      	strh	r3, [r0, #0]
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	8043      	strh	r3, [r0, #2]
 800fe9e:	8083      	strh	r3, [r0, #4]
 800fea0:	80c3      	strh	r3, [r0, #6]
 800fea2:	2d00      	cmp	r5, #0
 800fea4:	d040      	beq.n	800ff28 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800fea6:	1d28      	adds	r0, r5, #4
 800fea8:	f7ff ffe5 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800feac:	b988      	cbnz	r0, 800fed2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800feae:	4620      	mov	r0, r4
 800feb0:	f7ff ffe1 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800feb4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800feb8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800febc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800fec0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800fec4:	b138      	cbz	r0, 800fed6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800fec6:	8022      	strh	r2, [r4, #0]
 800fec8:	8063      	strh	r3, [r4, #2]
 800feca:	f8a4 e004 	strh.w	lr, [r4, #4]
 800fece:	f8a4 c006 	strh.w	ip, [r4, #6]
 800fed2:	69ad      	ldr	r5, [r5, #24]
 800fed4:	e7e5      	b.n	800fea2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800fed6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800feda:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800fede:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800fee2:	4290      	cmp	r0, r2
 800fee4:	4607      	mov	r7, r0
 800fee6:	bfa8      	it	ge
 800fee8:	4617      	movge	r7, r2
 800feea:	4472      	add	r2, lr
 800feec:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800fef0:	8027      	strh	r7, [r4, #0]
 800fef2:	4299      	cmp	r1, r3
 800fef4:	460e      	mov	r6, r1
 800fef6:	4440      	add	r0, r8
 800fef8:	bfa8      	it	ge
 800fefa:	461e      	movge	r6, r3
 800fefc:	4471      	add	r1, lr
 800fefe:	4463      	add	r3, ip
 800ff00:	b200      	sxth	r0, r0
 800ff02:	b212      	sxth	r2, r2
 800ff04:	b209      	sxth	r1, r1
 800ff06:	b21b      	sxth	r3, r3
 800ff08:	4290      	cmp	r0, r2
 800ff0a:	bfac      	ite	ge
 800ff0c:	ebc7 0200 	rsbge	r2, r7, r0
 800ff10:	ebc7 0202 	rsblt	r2, r7, r2
 800ff14:	4299      	cmp	r1, r3
 800ff16:	bfac      	ite	ge
 800ff18:	ebc6 0301 	rsbge	r3, r6, r1
 800ff1c:	ebc6 0303 	rsblt	r3, r6, r3
 800ff20:	8066      	strh	r6, [r4, #2]
 800ff22:	80a2      	strh	r2, [r4, #4]
 800ff24:	80e3      	strh	r3, [r4, #6]
 800ff26:	e7d4      	b.n	800fed2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ff28:	4620      	mov	r0, r4
 800ff2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ff2e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800ff2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ff32:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800ff36:	b383      	cbz	r3, 800ff9a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800ff38:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ff3a:	b374      	cbz	r4, 800ff9a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800ff3c:	f9b1 5000 	ldrsh.w	r5, [r1]
 800ff40:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800ff44:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800ff48:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800ff4c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ff50:	b303      	cbz	r3, 800ff94 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800ff52:	4668      	mov	r0, sp
 800ff54:	1d21      	adds	r1, r4, #4
 800ff56:	f8ad 5000 	strh.w	r5, [sp]
 800ff5a:	f8ad 6002 	strh.w	r6, [sp, #2]
 800ff5e:	f8ad 7004 	strh.w	r7, [sp, #4]
 800ff62:	f8ad 8006 	strh.w	r8, [sp, #6]
 800ff66:	f7ff ff43 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 800ff6a:	4668      	mov	r0, sp
 800ff6c:	f7ff ff83 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ff70:	b980      	cbnz	r0, 800ff94 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800ff72:	f8bd 3000 	ldrh.w	r3, [sp]
 800ff76:	88a2      	ldrh	r2, [r4, #4]
 800ff78:	1a9b      	subs	r3, r3, r2
 800ff7a:	f8ad 3000 	strh.w	r3, [sp]
 800ff7e:	88e2      	ldrh	r2, [r4, #6]
 800ff80:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ff84:	1a9b      	subs	r3, r3, r2
 800ff86:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ff8a:	6823      	ldr	r3, [r4, #0]
 800ff8c:	4669      	mov	r1, sp
 800ff8e:	689b      	ldr	r3, [r3, #8]
 800ff90:	4620      	mov	r0, r4
 800ff92:	4798      	blx	r3
 800ff94:	69a4      	ldr	r4, [r4, #24]
 800ff96:	2c00      	cmp	r4, #0
 800ff98:	d1d8      	bne.n	800ff4c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800ff9a:	b002      	add	sp, #8
 800ff9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ffa0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800ffa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ffa2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800ffa6:	460d      	mov	r5, r1
 800ffa8:	4616      	mov	r6, r2
 800ffaa:	b323      	cbz	r3, 800fff6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ffac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ffae:	b314      	cbz	r4, 800fff6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ffb0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ffb4:	b1eb      	cbz	r3, 800fff2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ffb6:	6828      	ldr	r0, [r5, #0]
 800ffb8:	6869      	ldr	r1, [r5, #4]
 800ffba:	466b      	mov	r3, sp
 800ffbc:	c303      	stmia	r3!, {r0, r1}
 800ffbe:	4668      	mov	r0, sp
 800ffc0:	1d21      	adds	r1, r4, #4
 800ffc2:	f7ff ff15 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 800ffc6:	4668      	mov	r0, sp
 800ffc8:	f7ff ff55 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ffcc:	b988      	cbnz	r0, 800fff2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ffce:	f8bd 3000 	ldrh.w	r3, [sp]
 800ffd2:	88a2      	ldrh	r2, [r4, #4]
 800ffd4:	1a9b      	subs	r3, r3, r2
 800ffd6:	f8ad 3000 	strh.w	r3, [sp]
 800ffda:	88e2      	ldrh	r2, [r4, #6]
 800ffdc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ffe0:	1a9b      	subs	r3, r3, r2
 800ffe2:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ffe6:	6823      	ldr	r3, [r4, #0]
 800ffe8:	4632      	mov	r2, r6
 800ffea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ffec:	4669      	mov	r1, sp
 800ffee:	4620      	mov	r0, r4
 800fff0:	4798      	blx	r3
 800fff2:	69a4      	ldr	r4, [r4, #24]
 800fff4:	e7db      	b.n	800ffae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800fff6:	b002      	add	sp, #8
 800fff8:	bd70      	pop	{r4, r5, r6, pc}

0800fffa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800fffa:	b513      	push	{r0, r1, r4, lr}
 800fffc:	6803      	ldr	r3, [r0, #0]
 800fffe:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8010002:	2300      	movs	r3, #0
 8010004:	e9cd 3300 	strd	r3, r3, [sp]
 8010008:	466b      	mov	r3, sp
 801000a:	47a0      	blx	r4
 801000c:	b002      	add	sp, #8
 801000e:	bd10      	pop	{r4, pc}

08010010 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8010010:	2301      	movs	r3, #1
 8010012:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8010016:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 801001a:	4770      	bx	lr

0801001c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801001c:	2301      	movs	r3, #1
 801001e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8010022:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8010026:	4770      	bx	lr

08010028 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8010028:	6843      	ldr	r3, [r0, #4]
 801002a:	2201      	movs	r2, #1
 801002c:	725a      	strb	r2, [r3, #9]
 801002e:	6840      	ldr	r0, [r0, #4]
 8010030:	6803      	ldr	r3, [r0, #0]
 8010032:	691b      	ldr	r3, [r3, #16]
 8010034:	4718      	bx	r3

08010036 <_ZN8touchgfx3HAL8flushDMAEv>:
 8010036:	6840      	ldr	r0, [r0, #4]
 8010038:	6803      	ldr	r3, [r0, #0]
 801003a:	689b      	ldr	r3, [r3, #8]
 801003c:	4718      	bx	r3

0801003e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801003e:	b530      	push	{r4, r5, lr}
 8010040:	b08b      	sub	sp, #44	; 0x2c
 8010042:	6804      	ldr	r4, [r0, #0]
 8010044:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8010048:	9509      	str	r5, [sp, #36]	; 0x24
 801004a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801004e:	9508      	str	r5, [sp, #32]
 8010050:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8010054:	9507      	str	r5, [sp, #28]
 8010056:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801005a:	9506      	str	r5, [sp, #24]
 801005c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8010060:	9505      	str	r5, [sp, #20]
 8010062:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8010066:	9504      	str	r5, [sp, #16]
 8010068:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801006c:	9503      	str	r5, [sp, #12]
 801006e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8010072:	9502      	str	r5, [sp, #8]
 8010074:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8010078:	e9cd 3500 	strd	r3, r5, [sp]
 801007c:	4613      	mov	r3, r2
 801007e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8010080:	2200      	movs	r2, #0
 8010082:	47a0      	blx	r4
 8010084:	b00b      	add	sp, #44	; 0x2c
 8010086:	bd30      	pop	{r4, r5, pc}

08010088 <_ZN8touchgfx3HAL10beginFrameEv>:
 8010088:	4b04      	ldr	r3, [pc, #16]	; (801009c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	b123      	cbz	r3, 8010098 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801008e:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 8010092:	f080 0001 	eor.w	r0, r0, #1
 8010096:	4770      	bx	lr
 8010098:	2001      	movs	r0, #1
 801009a:	4770      	bx	lr
 801009c:	2001460e 	.word	0x2001460e

080100a0 <_ZN8touchgfx3HAL8endFrameEv>:
 80100a0:	b510      	push	{r4, lr}
 80100a2:	4604      	mov	r4, r0
 80100a4:	6840      	ldr	r0, [r0, #4]
 80100a6:	6803      	ldr	r3, [r0, #0]
 80100a8:	689b      	ldr	r3, [r3, #8]
 80100aa:	4798      	blx	r3
 80100ac:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 80100b0:	b113      	cbz	r3, 80100b8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80100b2:	2301      	movs	r3, #1
 80100b4:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 80100b8:	bd10      	pop	{r4, pc}

080100ba <_ZN8touchgfx3HAL10initializeEv>:
 80100ba:	b510      	push	{r4, lr}
 80100bc:	4604      	mov	r4, r0
 80100be:	f7f2 faf3 	bl	80026a8 <_ZN8touchgfx10OSWrappers10initializeEv>
 80100c2:	f7f2 f9f3 	bl	80024ac <_ZN8touchgfx4GPIO4initEv>
 80100c6:	6860      	ldr	r0, [r4, #4]
 80100c8:	6803      	ldr	r3, [r0, #0]
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	4798      	blx	r3
 80100ce:	68e0      	ldr	r0, [r4, #12]
 80100d0:	6803      	ldr	r3, [r0, #0]
 80100d2:	689b      	ldr	r3, [r3, #8]
 80100d4:	4798      	blx	r3
 80100d6:	6823      	ldr	r3, [r4, #0]
 80100d8:	4620      	mov	r0, r4
 80100da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100e0:	4718      	bx	r3
	...

080100e4 <_ZN8touchgfx3HAL4tickEv>:
 80100e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80100e6:	6803      	ldr	r3, [r0, #0]
 80100e8:	4d5b      	ldr	r5, [pc, #364]	; (8010258 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80100ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80100ee:	4604      	mov	r4, r0
 80100f0:	4798      	blx	r3
 80100f2:	2800      	cmp	r0, #0
 80100f4:	f000 8095 	beq.w	8010222 <_ZN8touchgfx3HAL4tickEv+0x13e>
 80100f8:	2001      	movs	r0, #1
 80100fa:	f7f2 f955 	bl	80023a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80100fe:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8010102:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8010106:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 801010a:	2600      	movs	r6, #0
 801010c:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 8010110:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8010114:	b133      	cbz	r3, 8010124 <_ZN8touchgfx3HAL4tickEv+0x40>
 8010116:	6823      	ldr	r3, [r4, #0]
 8010118:	4620      	mov	r0, r4
 801011a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801011e:	4798      	blx	r3
 8010120:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 8010124:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8010128:	6862      	ldr	r2, [r4, #4]
 801012a:	f083 0301 	eor.w	r3, r3, #1
 801012e:	7253      	strb	r3, [r2, #9]
 8010130:	2601      	movs	r6, #1
 8010132:	702e      	strb	r6, [r5, #0]
 8010134:	f005 fbb0 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
 8010138:	6803      	ldr	r3, [r0, #0]
 801013a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801013c:	4798      	blx	r3
 801013e:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8010142:	b90b      	cbnz	r3, 8010148 <_ZN8touchgfx3HAL4tickEv+0x64>
 8010144:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8010148:	f005 fba6 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
 801014c:	6803      	ldr	r3, [r0, #0]
 801014e:	695b      	ldr	r3, [r3, #20]
 8010150:	4798      	blx	r3
 8010152:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8010154:	6803      	ldr	r3, [r0, #0]
 8010156:	691b      	ldr	r3, [r3, #16]
 8010158:	4798      	blx	r3
 801015a:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 801015e:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 8010162:	3b01      	subs	r3, #1
 8010164:	b2db      	uxtb	r3, r3
 8010166:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801016a:	b10a      	cbz	r2, 8010170 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801016c:	2b00      	cmp	r3, #0
 801016e:	d1eb      	bne.n	8010148 <_ZN8touchgfx3HAL4tickEv+0x64>
 8010170:	4a3a      	ldr	r2, [pc, #232]	; (801025c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8010172:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8010176:	7813      	ldrb	r3, [r2, #0]
 8010178:	3301      	adds	r3, #1
 801017a:	b25b      	sxtb	r3, r3
 801017c:	4299      	cmp	r1, r3
 801017e:	7013      	strb	r3, [r2, #0]
 8010180:	dc10      	bgt.n	80101a4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010182:	68e0      	ldr	r0, [r4, #12]
 8010184:	2300      	movs	r3, #0
 8010186:	7013      	strb	r3, [r2, #0]
 8010188:	6803      	ldr	r3, [r0, #0]
 801018a:	aa03      	add	r2, sp, #12
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	a902      	add	r1, sp, #8
 8010190:	4798      	blx	r3
 8010192:	6823      	ldr	r3, [r4, #0]
 8010194:	2800      	cmp	r0, #0
 8010196:	d050      	beq.n	801023a <_ZN8touchgfx3HAL4tickEv+0x156>
 8010198:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801019c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80101a0:	4620      	mov	r0, r4
 80101a2:	4798      	blx	r3
 80101a4:	6960      	ldr	r0, [r4, #20]
 80101a6:	2300      	movs	r3, #0
 80101a8:	f88d 3007 	strb.w	r3, [sp, #7]
 80101ac:	b158      	cbz	r0, 80101c6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80101ae:	6803      	ldr	r3, [r0, #0]
 80101b0:	f10d 0107 	add.w	r1, sp, #7
 80101b4:	68db      	ldr	r3, [r3, #12]
 80101b6:	4798      	blx	r3
 80101b8:	b128      	cbz	r0, 80101c6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80101ba:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80101bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80101c0:	6803      	ldr	r3, [r0, #0]
 80101c2:	68db      	ldr	r3, [r3, #12]
 80101c4:	4798      	blx	r3
 80101c6:	f104 001c 	add.w	r0, r4, #28
 80101ca:	f016 f835 	bl	8026238 <_ZN8touchgfx8Gestures4tickEv>
 80101ce:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80101d2:	b30b      	cbz	r3, 8010218 <_ZN8touchgfx3HAL4tickEv+0x134>
 80101d4:	6920      	ldr	r0, [r4, #16]
 80101d6:	6803      	ldr	r3, [r0, #0]
 80101d8:	691b      	ldr	r3, [r3, #16]
 80101da:	4798      	blx	r3
 80101dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80101de:	4606      	mov	r6, r0
 80101e0:	b903      	cbnz	r3, 80101e4 <_ZN8touchgfx3HAL4tickEv+0x100>
 80101e2:	6760      	str	r0, [r4, #116]	; 0x74
 80101e4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80101e6:	4a1e      	ldr	r2, [pc, #120]	; (8010260 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80101e8:	1af3      	subs	r3, r6, r3
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d914      	bls.n	8010218 <_ZN8touchgfx3HAL4tickEv+0x134>
 80101ee:	6920      	ldr	r0, [r4, #16]
 80101f0:	6803      	ldr	r3, [r0, #0]
 80101f2:	699b      	ldr	r3, [r3, #24]
 80101f4:	4798      	blx	r3
 80101f6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80101f8:	2264      	movs	r2, #100	; 0x64
 80101fa:	1af3      	subs	r3, r6, r3
 80101fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010200:	fbb0 f0f3 	udiv	r0, r0, r3
 8010204:	2800      	cmp	r0, #0
 8010206:	dc1d      	bgt.n	8010244 <_ZN8touchgfx3HAL4tickEv+0x160>
 8010208:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 801020c:	6920      	ldr	r0, [r4, #16]
 801020e:	6803      	ldr	r3, [r0, #0]
 8010210:	2100      	movs	r1, #0
 8010212:	69db      	ldr	r3, [r3, #28]
 8010214:	4798      	blx	r3
 8010216:	6766      	str	r6, [r4, #116]	; 0x74
 8010218:	f005 fb3e 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
 801021c:	6803      	ldr	r3, [r0, #0]
 801021e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010220:	4798      	blx	r3
 8010222:	6823      	ldr	r3, [r4, #0]
 8010224:	4620      	mov	r0, r4
 8010226:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801022a:	4798      	blx	r3
 801022c:	2001      	movs	r0, #1
 801022e:	f7f2 f8e5 	bl	80023fc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010232:	2300      	movs	r3, #0
 8010234:	702b      	strb	r3, [r5, #0]
 8010236:	b004      	add	sp, #16
 8010238:	bd70      	pop	{r4, r5, r6, pc}
 801023a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801023e:	4620      	mov	r0, r4
 8010240:	4798      	blx	r3
 8010242:	e7af      	b.n	80101a4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010244:	2863      	cmp	r0, #99	; 0x63
 8010246:	bfcb      	itete	gt
 8010248:	2300      	movgt	r3, #0
 801024a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801024e:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 8010252:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 8010256:	e7d9      	b.n	801020c <_ZN8touchgfx3HAL4tickEv+0x128>
 8010258:	20014614 	.word	0x20014614
 801025c:	20014615 	.word	0x20014615
 8010260:	05f5e100 	.word	0x05f5e100

08010264 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8010264:	b510      	push	{r4, lr}
 8010266:	4604      	mov	r4, r0
 8010268:	f7f2 fa4e 	bl	8002708 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 801026c:	6863      	ldr	r3, [r4, #4]
 801026e:	2200      	movs	r2, #0
 8010270:	729a      	strb	r2, [r3, #10]
 8010272:	bd10      	pop	{r4, pc}

08010274 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8010274:	65c1      	str	r1, [r0, #92]	; 0x5c
 8010276:	301c      	adds	r0, #28
 8010278:	f015 bfdc 	b.w	8026234 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801027c <_ZN8touchgfx3HAL5touchEll>:
 801027c:	b530      	push	{r4, r5, lr}
 801027e:	b087      	sub	sp, #28
 8010280:	4604      	mov	r4, r0
 8010282:	a804      	add	r0, sp, #16
 8010284:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8010288:	f005 f8d2 	bl	8015430 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801028c:	9b04      	ldr	r3, [sp, #16]
 801028e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010292:	a906      	add	r1, sp, #24
 8010294:	9b05      	ldr	r3, [sp, #20]
 8010296:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801029a:	a803      	add	r0, sp, #12
 801029c:	f005 f91a 	bl	80154d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80102a0:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 80102a4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80102a8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80102ac:	f104 001c 	add.w	r0, r4, #28
 80102b0:	b189      	cbz	r1, 80102d6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80102b2:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80102bc:	4613      	mov	r3, r2
 80102be:	462a      	mov	r2, r5
 80102c0:	f015 ffc8 	bl	8026254 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80102c4:	b128      	cbz	r0, 80102d2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80102c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80102ca:	6623      	str	r3, [r4, #96]	; 0x60
 80102cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80102d0:	6663      	str	r3, [r4, #100]	; 0x64
 80102d2:	b007      	add	sp, #28
 80102d4:	bd30      	pop	{r4, r5, pc}
 80102d6:	f015 fffd 	bl	80262d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80102da:	2301      	movs	r3, #1
 80102dc:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 80102e0:	e7f1      	b.n	80102c6 <_ZN8touchgfx3HAL5touchEll+0x4a>

080102e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80102e2:	b510      	push	{r4, lr}
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d046      	beq.n	8010376 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80102e8:	ea81 0002 	eor.w	r0, r1, r2
 80102ec:	07c4      	lsls	r4, r0, #31
 80102ee:	d508      	bpl.n	8010302 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80102f0:	440b      	add	r3, r1
 80102f2:	3a01      	subs	r2, #1
 80102f4:	428b      	cmp	r3, r1
 80102f6:	d93e      	bls.n	8010376 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80102f8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80102fc:	f801 0b01 	strb.w	r0, [r1], #1
 8010300:	e7f8      	b.n	80102f4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8010302:	07d0      	lsls	r0, r2, #31
 8010304:	bf42      	ittt	mi
 8010306:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801030a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801030e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8010312:	2b01      	cmp	r3, #1
 8010314:	d911      	bls.n	801033a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010316:	ea81 0402 	eor.w	r4, r1, r2
 801031a:	07a4      	lsls	r4, r4, #30
 801031c:	4610      	mov	r0, r2
 801031e:	d022      	beq.n	8010366 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8010320:	f023 0401 	bic.w	r4, r3, #1
 8010324:	440c      	add	r4, r1
 8010326:	428c      	cmp	r4, r1
 8010328:	4602      	mov	r2, r0
 801032a:	d904      	bls.n	8010336 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801032c:	8812      	ldrh	r2, [r2, #0]
 801032e:	f821 2b02 	strh.w	r2, [r1], #2
 8010332:	3002      	adds	r0, #2
 8010334:	e7f7      	b.n	8010326 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8010336:	f003 0301 	and.w	r3, r3, #1
 801033a:	f023 0003 	bic.w	r0, r3, #3
 801033e:	4408      	add	r0, r1
 8010340:	4288      	cmp	r0, r1
 8010342:	4614      	mov	r4, r2
 8010344:	d904      	bls.n	8010350 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8010346:	6824      	ldr	r4, [r4, #0]
 8010348:	f841 4b04 	str.w	r4, [r1], #4
 801034c:	3204      	adds	r2, #4
 801034e:	e7f7      	b.n	8010340 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8010350:	f003 0303 	and.w	r3, r3, #3
 8010354:	440b      	add	r3, r1
 8010356:	3a01      	subs	r2, #1
 8010358:	428b      	cmp	r3, r1
 801035a:	d90c      	bls.n	8010376 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801035c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010360:	f801 0b01 	strb.w	r0, [r1], #1
 8010364:	e7f8      	b.n	8010358 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8010366:	0790      	lsls	r0, r2, #30
 8010368:	d0e7      	beq.n	801033a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801036a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801036e:	f821 0b02 	strh.w	r0, [r1], #2
 8010372:	3b02      	subs	r3, #2
 8010374:	e7e1      	b.n	801033a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010376:	2001      	movs	r0, #1
 8010378:	bd10      	pop	{r4, pc}

0801037a <_ZN8touchgfx3HAL7noTouchEv>:
 801037a:	b510      	push	{r4, lr}
 801037c:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8010380:	4604      	mov	r4, r0
 8010382:	b153      	cbz	r3, 801039a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8010384:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8010388:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 801038c:	2101      	movs	r1, #1
 801038e:	301c      	adds	r0, #28
 8010390:	f015 ffa0 	bl	80262d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010394:	2300      	movs	r3, #0
 8010396:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 801039a:	bd10      	pop	{r4, pc}

0801039c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801039c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103a0:	b085      	sub	sp, #20
 80103a2:	ad04      	add	r5, sp, #16
 80103a4:	4604      	mov	r4, r0
 80103a6:	2000      	movs	r0, #0
 80103a8:	f845 0d04 	str.w	r0, [r5, #-4]!
 80103ac:	69a0      	ldr	r0, [r4, #24]
 80103ae:	6806      	ldr	r6, [r0, #0]
 80103b0:	9501      	str	r5, [sp, #4]
 80103b2:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80103b6:	9500      	str	r5, [sp, #0]
 80103b8:	6835      	ldr	r5, [r6, #0]
 80103ba:	4699      	mov	r9, r3
 80103bc:	460f      	mov	r7, r1
 80103be:	4690      	mov	r8, r2
 80103c0:	47a8      	blx	r5
 80103c2:	4d10      	ldr	r5, [pc, #64]	; (8010404 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80103c4:	4606      	mov	r6, r0
 80103c6:	f8a5 9000 	strh.w	r9, [r5]
 80103ca:	f7f3 fd87 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 80103ce:	6803      	ldr	r3, [r0, #0]
 80103d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103d2:	4798      	blx	r3
 80103d4:	b128      	cbz	r0, 80103e2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80103d6:	2801      	cmp	r0, #1
 80103d8:	d00b      	beq.n	80103f2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80103da:	4630      	mov	r0, r6
 80103dc:	b005      	add	sp, #20
 80103de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103e2:	882b      	ldrh	r3, [r5, #0]
 80103e4:	fb08 7203 	mla	r2, r8, r3, r7
 80103e8:	9b03      	ldr	r3, [sp, #12]
 80103ea:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80103ee:	63e3      	str	r3, [r4, #60]	; 0x3c
 80103f0:	e7f3      	b.n	80103da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80103f2:	882a      	ldrh	r2, [r5, #0]
 80103f4:	9b03      	ldr	r3, [sp, #12]
 80103f6:	fb08 7202 	mla	r2, r8, r2, r7
 80103fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80103fe:	1a9a      	subs	r2, r3, r2
 8010400:	63e2      	str	r2, [r4, #60]	; 0x3c
 8010402:	e7ea      	b.n	80103da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010404:	2001460a 	.word	0x2001460a

08010408 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8010408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801040a:	b08b      	sub	sp, #44	; 0x2c
 801040c:	4617      	mov	r7, r2
 801040e:	4604      	mov	r4, r0
 8010410:	460e      	mov	r6, r1
 8010412:	461d      	mov	r5, r3
 8010414:	f7f3 fd62 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 8010418:	6803      	ldr	r3, [r0, #0]
 801041a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801041c:	4798      	blx	r3
 801041e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8010422:	9007      	str	r0, [sp, #28]
 8010424:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010428:	4b0d      	ldr	r3, [pc, #52]	; (8010460 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801042a:	6822      	ldr	r2, [r4, #0]
 801042c:	881b      	ldrh	r3, [r3, #0]
 801042e:	9306      	str	r3, [sp, #24]
 8010430:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8010434:	9305      	str	r3, [sp, #20]
 8010436:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801043a:	9304      	str	r3, [sp, #16]
 801043c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010440:	9303      	str	r3, [sp, #12]
 8010442:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010446:	9302      	str	r3, [sp, #8]
 8010448:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801044c:	e9cd 5300 	strd	r5, r3, [sp]
 8010450:	4631      	mov	r1, r6
 8010452:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8010454:	463b      	mov	r3, r7
 8010456:	2200      	movs	r2, #0
 8010458:	4620      	mov	r0, r4
 801045a:	47a8      	blx	r5
 801045c:	b00b      	add	sp, #44	; 0x2c
 801045e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010460:	2001460a 	.word	0x2001460a

08010464 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8010464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010468:	4698      	mov	r8, r3
 801046a:	6803      	ldr	r3, [r0, #0]
 801046c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801046e:	4b15      	ldr	r3, [pc, #84]	; (80104c4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8010470:	b08b      	sub	sp, #44	; 0x2c
 8010472:	4617      	mov	r7, r2
 8010474:	f8b3 9000 	ldrh.w	r9, [r3]
 8010478:	460e      	mov	r6, r1
 801047a:	4604      	mov	r4, r0
 801047c:	f7f3 fd2e 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 8010480:	6803      	ldr	r3, [r0, #0]
 8010482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010484:	4798      	blx	r3
 8010486:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801048a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801048e:	2302      	movs	r3, #2
 8010490:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8010494:	2301      	movs	r3, #1
 8010496:	9305      	str	r3, [sp, #20]
 8010498:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801049c:	9304      	str	r3, [sp, #16]
 801049e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80104a2:	9303      	str	r3, [sp, #12]
 80104a4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80104a8:	9302      	str	r3, [sp, #8]
 80104aa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80104ae:	2200      	movs	r2, #0
 80104b0:	e9cd 8300 	strd	r8, r3, [sp]
 80104b4:	4631      	mov	r1, r6
 80104b6:	463b      	mov	r3, r7
 80104b8:	4620      	mov	r0, r4
 80104ba:	47a8      	blx	r5
 80104bc:	b00b      	add	sp, #44	; 0x2c
 80104be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104c2:	bf00      	nop
 80104c4:	2001460a 	.word	0x2001460a

080104c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80104c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104cc:	4698      	mov	r8, r3
 80104ce:	6803      	ldr	r3, [r0, #0]
 80104d0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80104d2:	4b11      	ldr	r3, [pc, #68]	; (8010518 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80104d4:	b087      	sub	sp, #28
 80104d6:	f8b3 9000 	ldrh.w	r9, [r3]
 80104da:	460e      	mov	r6, r1
 80104dc:	4617      	mov	r7, r2
 80104de:	4604      	mov	r4, r0
 80104e0:	f7f3 fcfc 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 80104e4:	6803      	ldr	r3, [r0, #0]
 80104e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104e8:	4798      	blx	r3
 80104ea:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80104ee:	f8cd 900c 	str.w	r9, [sp, #12]
 80104f2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80104f6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80104fa:	9302      	str	r3, [sp, #8]
 80104fc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8010500:	9301      	str	r3, [sp, #4]
 8010502:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010506:	9300      	str	r3, [sp, #0]
 8010508:	463a      	mov	r2, r7
 801050a:	4643      	mov	r3, r8
 801050c:	4631      	mov	r1, r6
 801050e:	4620      	mov	r0, r4
 8010510:	47a8      	blx	r5
 8010512:	b007      	add	sp, #28
 8010514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010518:	2001460a 	.word	0x2001460a

0801051c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801051c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010520:	4604      	mov	r4, r0
 8010522:	b08f      	sub	sp, #60	; 0x3c
 8010524:	4610      	mov	r0, r2
 8010526:	460d      	mov	r5, r1
 8010528:	4691      	mov	r9, r2
 801052a:	461e      	mov	r6, r3
 801052c:	f008 fa6c 	bl	8018a08 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010530:	2800      	cmp	r0, #0
 8010532:	f000 809d 	beq.w	8010670 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8010536:	6823      	ldr	r3, [r4, #0]
 8010538:	f8df b198 	ldr.w	fp, [pc, #408]	; 80106d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801053c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801053e:	f8df a198 	ldr.w	sl, [pc, #408]	; 80106d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8010542:	4f61      	ldr	r7, [pc, #388]	; (80106c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010544:	4620      	mov	r0, r4
 8010546:	4798      	blx	r3
 8010548:	6823      	ldr	r3, [r4, #0]
 801054a:	4620      	mov	r0, r4
 801054c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801054e:	4798      	blx	r3
 8010550:	f8bb 3000 	ldrh.w	r3, [fp]
 8010554:	9301      	str	r3, [sp, #4]
 8010556:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801055a:	f8ba 3000 	ldrh.w	r3, [sl]
 801055e:	9302      	str	r3, [sp, #8]
 8010560:	883b      	ldrh	r3, [r7, #0]
 8010562:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8010566:	9303      	str	r3, [sp, #12]
 8010568:	4b58      	ldr	r3, [pc, #352]	; (80106cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801056a:	9305      	str	r3, [sp, #20]
 801056c:	881a      	ldrh	r2, [r3, #0]
 801056e:	9204      	str	r2, [sp, #16]
 8010570:	4640      	mov	r0, r8
 8010572:	f008 fadd 	bl	8018b30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010576:	8038      	strh	r0, [r7, #0]
 8010578:	4640      	mov	r0, r8
 801057a:	f008 fb0d 	bl	8018b98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801057e:	9b05      	ldr	r3, [sp, #20]
 8010580:	b280      	uxth	r0, r0
 8010582:	8018      	strh	r0, [r3, #0]
 8010584:	4b52      	ldr	r3, [pc, #328]	; (80106d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d174      	bne.n	8010676 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801058c:	883b      	ldrh	r3, [r7, #0]
 801058e:	f8ab 3000 	strh.w	r3, [fp]
 8010592:	f8aa 0000 	strh.w	r0, [sl]
 8010596:	4648      	mov	r0, r9
 8010598:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801059c:	f008 fa34 	bl	8018a08 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80105a0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80105a4:	2200      	movs	r2, #0
 80105a6:	4611      	mov	r1, r2
 80105a8:	4628      	mov	r0, r5
 80105aa:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80105ae:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80105b2:	f7f3 f9aa 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 80105b6:	2301      	movs	r3, #1
 80105b8:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80105bc:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80105c0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	dd5c      	ble.n	8010682 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80105c8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	dd58      	ble.n	8010682 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80105d0:	462a      	mov	r2, r5
 80105d2:	ab0a      	add	r3, sp, #40	; 0x28
 80105d4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80105d8:	6851      	ldr	r1, [r2, #4]
 80105da:	c303      	stmia	r3!, {r0, r1}
 80105dc:	4631      	mov	r1, r6
 80105de:	a80a      	add	r0, sp, #40	; 0x28
 80105e0:	f7ff fc06 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 80105e4:	4b38      	ldr	r3, [pc, #224]	; (80106c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80105e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80105ea:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80105ee:	2100      	movs	r1, #0
 80105f0:	aa0a      	add	r2, sp, #40	; 0x28
 80105f2:	4b36      	ldr	r3, [pc, #216]	; (80106cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80105f4:	910c      	str	r1, [sp, #48]	; 0x30
 80105f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80105fe:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8010602:	ab08      	add	r3, sp, #32
 8010604:	e883 0003 	stmia.w	r3, {r0, r1}
 8010608:	4618      	mov	r0, r3
 801060a:	a90c      	add	r1, sp, #48	; 0x30
 801060c:	f7ff fbf0 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 8010610:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010612:	2b00      	cmp	r3, #0
 8010614:	d13c      	bne.n	8010690 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8010616:	2000      	movs	r0, #0
 8010618:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 801061c:	2600      	movs	r6, #0
 801061e:	682a      	ldr	r2, [r5, #0]
 8010620:	696b      	ldr	r3, [r5, #20]
 8010622:	616e      	str	r6, [r5, #20]
 8010624:	9305      	str	r3, [sp, #20]
 8010626:	6892      	ldr	r2, [r2, #8]
 8010628:	a908      	add	r1, sp, #32
 801062a:	4628      	mov	r0, r5
 801062c:	4790      	blx	r2
 801062e:	9b05      	ldr	r3, [sp, #20]
 8010630:	616b      	str	r3, [r5, #20]
 8010632:	4652      	mov	r2, sl
 8010634:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 8010638:	4649      	mov	r1, r9
 801063a:	4628      	mov	r0, r5
 801063c:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8010640:	f7f3 f963 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8010644:	4b23      	ldr	r3, [pc, #140]	; (80106d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8010646:	9a01      	ldr	r2, [sp, #4]
 8010648:	801a      	strh	r2, [r3, #0]
 801064a:	4b23      	ldr	r3, [pc, #140]	; (80106d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801064c:	9a02      	ldr	r2, [sp, #8]
 801064e:	801a      	strh	r2, [r3, #0]
 8010650:	4b1d      	ldr	r3, [pc, #116]	; (80106c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010652:	9a03      	ldr	r2, [sp, #12]
 8010654:	801a      	strh	r2, [r3, #0]
 8010656:	4b1d      	ldr	r3, [pc, #116]	; (80106cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010658:	9a04      	ldr	r2, [sp, #16]
 801065a:	801a      	strh	r2, [r3, #0]
 801065c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8010660:	6823      	ldr	r3, [r4, #0]
 8010662:	4620      	mov	r0, r4
 8010664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010666:	4798      	blx	r3
 8010668:	6823      	ldr	r3, [r4, #0]
 801066a:	4620      	mov	r0, r4
 801066c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801066e:	4798      	blx	r3
 8010670:	b00f      	add	sp, #60	; 0x3c
 8010672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010676:	883b      	ldrh	r3, [r7, #0]
 8010678:	f8ab 0000 	strh.w	r0, [fp]
 801067c:	f8aa 3000 	strh.w	r3, [sl]
 8010680:	e789      	b.n	8010596 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8010682:	462a      	mov	r2, r5
 8010684:	ab0a      	add	r3, sp, #40	; 0x28
 8010686:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801068a:	6851      	ldr	r1, [r2, #4]
 801068c:	c303      	stmia	r3!, {r0, r1}
 801068e:	e7a9      	b.n	80105e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8010690:	a807      	add	r0, sp, #28
 8010692:	f008 fbbd 	bl	8018e10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010696:	4606      	mov	r6, r0
 8010698:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801069a:	6803      	ldr	r3, [r0, #0]
 801069c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801069e:	4798      	blx	r3
 80106a0:	4286      	cmp	r6, r0
 80106a2:	d1b8      	bne.n	8010616 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80106a4:	f7f3 fc1a 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 80106a8:	6803      	ldr	r3, [r0, #0]
 80106aa:	4606      	mov	r6, r0
 80106ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ae:	9305      	str	r3, [sp, #20]
 80106b0:	a807      	add	r0, sp, #28
 80106b2:	f008 fbad 	bl	8018e10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80106b6:	9b05      	ldr	r3, [sp, #20]
 80106b8:	4601      	mov	r1, r0
 80106ba:	4630      	mov	r0, r6
 80106bc:	4798      	blx	r3
 80106be:	f080 0001 	eor.w	r0, r0, #1
 80106c2:	b2c0      	uxtb	r0, r0
 80106c4:	e7a8      	b.n	8010618 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80106c6:	bf00      	nop
 80106c8:	20014604 	.word	0x20014604
 80106cc:	20014606 	.word	0x20014606
 80106d0:	20014608 	.word	0x20014608
 80106d4:	2001460a 	.word	0x2001460a
 80106d8:	2001460c 	.word	0x2001460c

080106dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80106dc:	b510      	push	{r4, lr}
 80106de:	4b07      	ldr	r3, [pc, #28]	; (80106fc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	4604      	mov	r4, r0
 80106e4:	b13b      	cbz	r3, 80106f6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80106e6:	6803      	ldr	r3, [r0, #0]
 80106e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ea:	4798      	blx	r3
 80106ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80106ee:	4283      	cmp	r3, r0
 80106f0:	d101      	bne.n	80106f6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80106f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80106f4:	bd10      	pop	{r4, pc}
 80106f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80106f8:	e7fc      	b.n	80106f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80106fa:	bf00      	nop
 80106fc:	2001460e 	.word	0x2001460e

08010700 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8010700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010704:	b08a      	sub	sp, #40	; 0x28
 8010706:	461d      	mov	r5, r3
 8010708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801070c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010710:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010714:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010718:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801071c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010720:	2400      	movs	r4, #0
 8010722:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010726:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801072a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801072e:	4690      	mov	r8, r2
 8010730:	4607      	mov	r7, r0
 8010732:	9404      	str	r4, [sp, #16]
 8010734:	f88d 4020 	strb.w	r4, [sp, #32]
 8010738:	f7ff ffd0 	bl	80106dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801073c:	fb06 8505 	mla	r5, r6, r5, r8
 8010740:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	9505      	str	r5, [sp, #20]
 8010748:	f8ad 601e 	strh.w	r6, [sp, #30]
 801074c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010750:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8010754:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8010758:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801075c:	6803      	ldr	r3, [r0, #0]
 801075e:	a901      	add	r1, sp, #4
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	4798      	blx	r3
 8010764:	b00a      	add	sp, #40	; 0x28
 8010766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801076a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801076a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801076e:	b08b      	sub	sp, #44	; 0x2c
 8010770:	2400      	movs	r4, #0
 8010772:	461d      	mov	r5, r3
 8010774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010778:	4688      	mov	r8, r1
 801077a:	4691      	mov	r9, r2
 801077c:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8010780:	9404      	str	r4, [sp, #16]
 8010782:	4607      	mov	r7, r0
 8010784:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010788:	f7ff ffa8 	bl	80106dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801078c:	fb06 9505 	mla	r5, r6, r5, r9
 8010790:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010794:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010798:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801079c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	9505      	str	r5, [sp, #20]
 80107a4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80107a8:	f8ad 401c 	strh.w	r4, [sp, #28]
 80107ac:	f8ad 601e 	strh.w	r6, [sp, #30]
 80107b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80107b4:	f8ad 4020 	strh.w	r4, [sp, #32]
 80107b8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80107bc:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80107c0:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80107c4:	6803      	ldr	r3, [r0, #0]
 80107c6:	a901      	add	r1, sp, #4
 80107c8:	685b      	ldr	r3, [r3, #4]
 80107ca:	4798      	blx	r3
 80107cc:	b00b      	add	sp, #44	; 0x2c
 80107ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080107d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80107d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107d8:	b08a      	sub	sp, #40	; 0x28
 80107da:	4698      	mov	r8, r3
 80107dc:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80107e0:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80107e4:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80107e8:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80107ec:	2300      	movs	r3, #0
 80107ee:	2d0b      	cmp	r5, #11
 80107f0:	4606      	mov	r6, r0
 80107f2:	9304      	str	r3, [sp, #16]
 80107f4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80107f8:	d138      	bne.n	801086c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 80107fa:	2380      	movs	r3, #128	; 0x80
 80107fc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010800:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010804:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010808:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801080c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010810:	f88d 0020 	strb.w	r0, [sp, #32]
 8010814:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010818:	f8ad 301c 	strh.w	r3, [sp, #28]
 801081c:	4630      	mov	r0, r6
 801081e:	9203      	str	r2, [sp, #12]
 8010820:	f7ff ff5c 	bl	80106dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010824:	2c0b      	cmp	r4, #11
 8010826:	bf98      	it	ls
 8010828:	4b1b      	ldrls	r3, [pc, #108]	; (8010898 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801082a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801082e:	bf98      	it	ls
 8010830:	5d19      	ldrbls	r1, [r3, r4]
 8010832:	f8ad 701e 	strh.w	r7, [sp, #30]
 8010836:	bf88      	it	hi
 8010838:	2100      	movhi	r1, #0
 801083a:	fb02 8307 	mla	r3, r2, r7, r8
 801083e:	10c9      	asrs	r1, r1, #3
 8010840:	fb01 0003 	mla	r0, r1, r3, r0
 8010844:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8010848:	9005      	str	r0, [sp, #20]
 801084a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801084e:	6870      	ldr	r0, [r6, #4]
 8010850:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010854:	2300      	movs	r3, #0
 8010856:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801085a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801085e:	6803      	ldr	r3, [r0, #0]
 8010860:	a901      	add	r1, sp, #4
 8010862:	685b      	ldr	r3, [r3, #4]
 8010864:	4798      	blx	r3
 8010866:	b00a      	add	sp, #40	; 0x28
 8010868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801086c:	2d02      	cmp	r5, #2
 801086e:	d109      	bne.n	8010884 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8010870:	28ff      	cmp	r0, #255	; 0xff
 8010872:	d105      	bne.n	8010880 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8010874:	f1bc 0f00 	cmp.w	ip, #0
 8010878:	bf14      	ite	ne
 801087a:	2340      	movne	r3, #64	; 0x40
 801087c:	2320      	moveq	r3, #32
 801087e:	e7bd      	b.n	80107fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010880:	2340      	movs	r3, #64	; 0x40
 8010882:	e7bb      	b.n	80107fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010884:	28ff      	cmp	r0, #255	; 0xff
 8010886:	d105      	bne.n	8010894 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8010888:	f1bc 0f00 	cmp.w	ip, #0
 801088c:	bf14      	ite	ne
 801088e:	2304      	movne	r3, #4
 8010890:	2301      	moveq	r3, #1
 8010892:	e7b3      	b.n	80107fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010894:	2304      	movs	r3, #4
 8010896:	e7b1      	b.n	80107fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010898:	08029278 	.word	0x08029278

0801089c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801089c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a0:	b08b      	sub	sp, #44	; 0x2c
 80108a2:	461d      	mov	r5, r3
 80108a4:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80108a8:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80108ac:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80108b0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80108b4:	bf14      	ite	ne
 80108b6:	2308      	movne	r3, #8
 80108b8:	2302      	moveq	r3, #2
 80108ba:	2400      	movs	r4, #0
 80108bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108c0:	4688      	mov	r8, r1
 80108c2:	4693      	mov	fp, r2
 80108c4:	9404      	str	r4, [sp, #16]
 80108c6:	4607      	mov	r7, r0
 80108c8:	f7ff ff08 	bl	80106dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80108cc:	2e0b      	cmp	r6, #11
 80108ce:	bf98      	it	ls
 80108d0:	4b15      	ldrls	r3, [pc, #84]	; (8010928 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80108d2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80108d6:	bf98      	it	ls
 80108d8:	5d9c      	ldrbls	r4, [r3, r6]
 80108da:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80108de:	f8ad 3018 	strh.w	r3, [sp, #24]
 80108e2:	fb05 b50a 	mla	r5, r5, sl, fp
 80108e6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80108ea:	f8ad 301a 	strh.w	r3, [sp, #26]
 80108ee:	10e4      	asrs	r4, r4, #3
 80108f0:	fb04 0405 	mla	r4, r4, r5, r0
 80108f4:	2300      	movs	r3, #0
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	9405      	str	r4, [sp, #20]
 80108fa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80108fe:	f8ad a01e 	strh.w	sl, [sp, #30]
 8010902:	f8cd 8010 	str.w	r8, [sp, #16]
 8010906:	f88d 9020 	strb.w	r9, [sp, #32]
 801090a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801090e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010912:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8010916:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801091a:	6803      	ldr	r3, [r0, #0]
 801091c:	a901      	add	r1, sp, #4
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	4798      	blx	r3
 8010922:	b00b      	add	sp, #44	; 0x2c
 8010924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010928:	08029278 	.word	0x08029278

0801092c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801092c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010930:	461e      	mov	r6, r3
 8010932:	4b0a      	ldr	r3, [pc, #40]	; (801095c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8010934:	460f      	mov	r7, r1
 8010936:	881d      	ldrh	r5, [r3, #0]
 8010938:	4690      	mov	r8, r2
 801093a:	f7f3 facf 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 801093e:	6803      	ldr	r3, [r0, #0]
 8010940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010942:	4798      	blx	r3
 8010944:	280b      	cmp	r0, #11
 8010946:	bf9a      	itte	ls
 8010948:	4b05      	ldrls	r3, [pc, #20]	; (8010960 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801094a:	5c1c      	ldrbls	r4, [r3, r0]
 801094c:	2400      	movhi	r4, #0
 801094e:	fb08 7005 	mla	r0, r8, r5, r7
 8010952:	10e4      	asrs	r4, r4, #3
 8010954:	fb04 6000 	mla	r0, r4, r0, r6
 8010958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801095c:	2001460a 	.word	0x2001460a
 8010960:	08029278 	.word	0x08029278

08010964 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8010964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010966:	b08b      	sub	sp, #44	; 0x2c
 8010968:	461f      	mov	r7, r3
 801096a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801096e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010972:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010976:	f8ad 3018 	strh.w	r3, [sp, #24]
 801097a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801097e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010982:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010986:	f8ad 301c 	strh.w	r3, [sp, #28]
 801098a:	2500      	movs	r5, #0
 801098c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8010990:	f88d 3020 	strb.w	r3, [sp, #32]
 8010994:	4604      	mov	r4, r0
 8010996:	4616      	mov	r6, r2
 8010998:	9504      	str	r5, [sp, #16]
 801099a:	f7ff fe9f 	bl	80106dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801099e:	463a      	mov	r2, r7
 80109a0:	4631      	mov	r1, r6
 80109a2:	4603      	mov	r3, r0
 80109a4:	4620      	mov	r0, r4
 80109a6:	f7ff ffc1 	bl	801092c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80109aa:	4b0e      	ldr	r3, [pc, #56]	; (80109e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80109ac:	9005      	str	r0, [sp, #20]
 80109ae:	881b      	ldrh	r3, [r3, #0]
 80109b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80109b4:	f7f3 fa92 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 80109b8:	6803      	ldr	r3, [r0, #0]
 80109ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109bc:	4798      	blx	r3
 80109be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80109c0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80109c4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80109c8:	9304      	str	r3, [sp, #16]
 80109ca:	6860      	ldr	r0, [r4, #4]
 80109cc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80109d0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80109d4:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80109d8:	6803      	ldr	r3, [r0, #0]
 80109da:	a901      	add	r1, sp, #4
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	4798      	blx	r3
 80109e0:	b00b      	add	sp, #44	; 0x2c
 80109e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109e4:	2001460a 	.word	0x2001460a

080109e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80109e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109ea:	b08d      	sub	sp, #52	; 0x34
 80109ec:	466b      	mov	r3, sp
 80109ee:	e883 0006 	stmia.w	r3, {r1, r2}
 80109f2:	2300      	movs	r3, #0
 80109f4:	9306      	str	r3, [sp, #24]
 80109f6:	6803      	ldr	r3, [r0, #0]
 80109f8:	f8bd 6000 	ldrh.w	r6, [sp]
 80109fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109fe:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010a02:	2501      	movs	r5, #1
 8010a04:	9503      	str	r5, [sp, #12]
 8010a06:	4604      	mov	r4, r0
 8010a08:	4798      	blx	r3
 8010a0a:	463a      	mov	r2, r7
 8010a0c:	4631      	mov	r1, r6
 8010a0e:	4603      	mov	r3, r0
 8010a10:	4620      	mov	r0, r4
 8010a12:	f7ff ff8b 	bl	801092c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010a16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010a18:	9307      	str	r3, [sp, #28]
 8010a1a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010a1e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010a22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010a26:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010a2a:	4b0f      	ldr	r3, [pc, #60]	; (8010a68 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8010a2c:	9004      	str	r0, [sp, #16]
 8010a2e:	881b      	ldrh	r3, [r3, #0]
 8010a30:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010a34:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010a38:	f7f3 fa50 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 8010a3c:	6803      	ldr	r3, [r0, #0]
 8010a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a40:	4798      	blx	r3
 8010a42:	23ff      	movs	r3, #255	; 0xff
 8010a44:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8010a48:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8010a4c:	6860      	ldr	r0, [r4, #4]
 8010a4e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010a52:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8010a56:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8010a5a:	6803      	ldr	r3, [r0, #0]
 8010a5c:	a903      	add	r1, sp, #12
 8010a5e:	685b      	ldr	r3, [r3, #4]
 8010a60:	4798      	blx	r3
 8010a62:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010a64:	b00d      	add	sp, #52	; 0x34
 8010a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a68:	2001460a 	.word	0x2001460a

08010a6c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a70:	b08c      	sub	sp, #48	; 0x30
 8010a72:	461e      	mov	r6, r3
 8010a74:	466d      	mov	r5, sp
 8010a76:	2300      	movs	r3, #0
 8010a78:	e885 0006 	stmia.w	r5, {r1, r2}
 8010a7c:	9306      	str	r3, [sp, #24]
 8010a7e:	6803      	ldr	r3, [r0, #0]
 8010a80:	f8bd 7000 	ldrh.w	r7, [sp]
 8010a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a86:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8010a8a:	2501      	movs	r5, #1
 8010a8c:	9503      	str	r5, [sp, #12]
 8010a8e:	4604      	mov	r4, r0
 8010a90:	4798      	blx	r3
 8010a92:	4642      	mov	r2, r8
 8010a94:	4639      	mov	r1, r7
 8010a96:	4603      	mov	r3, r0
 8010a98:	4620      	mov	r0, r4
 8010a9a:	f7ff ff47 	bl	801092c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010a9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010aa2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010aa6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010aaa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010aae:	4b11      	ldr	r3, [pc, #68]	; (8010af4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8010ab0:	9004      	str	r0, [sp, #16]
 8010ab2:	881b      	ldrh	r3, [r3, #0]
 8010ab4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010ab8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010aba:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010abe:	9607      	str	r6, [sp, #28]
 8010ac0:	f7f3 fa0c 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 8010ac4:	6803      	ldr	r3, [r0, #0]
 8010ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ac8:	4798      	blx	r3
 8010aca:	23ff      	movs	r3, #255	; 0xff
 8010acc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8010ad0:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8010ad4:	6860      	ldr	r0, [r4, #4]
 8010ad6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010ada:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8010ade:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8010ae2:	6803      	ldr	r3, [r0, #0]
 8010ae4:	a903      	add	r1, sp, #12
 8010ae6:	685b      	ldr	r3, [r3, #4]
 8010ae8:	4798      	blx	r3
 8010aea:	4630      	mov	r0, r6
 8010aec:	b00c      	add	sp, #48	; 0x30
 8010aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010af2:	bf00      	nop
 8010af4:	2001460a 	.word	0x2001460a

08010af8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8010af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010afa:	b085      	sub	sp, #20
 8010afc:	ac02      	add	r4, sp, #8
 8010afe:	e884 0006 	stmia.w	r4, {r1, r2}
 8010b02:	4605      	mov	r5, r0
 8010b04:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8010b08:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8010b0c:	f7ff fde6 	bl	80106dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010b10:	463a      	mov	r2, r7
 8010b12:	4603      	mov	r3, r0
 8010b14:	4631      	mov	r1, r6
 8010b16:	4628      	mov	r0, r5
 8010b18:	f7ff ff08 	bl	801092c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010b1c:	4a05      	ldr	r2, [pc, #20]	; (8010b34 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8010b1e:	682b      	ldr	r3, [r5, #0]
 8010b20:	8812      	ldrh	r2, [r2, #0]
 8010b22:	9200      	str	r2, [sp, #0]
 8010b24:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8010b26:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	4628      	mov	r0, r5
 8010b2e:	47b0      	blx	r6
 8010b30:	b005      	add	sp, #20
 8010b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b34:	2001460a 	.word	0x2001460a

08010b38 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8010b38:	b570      	push	{r4, r5, r6, lr}
 8010b3a:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8010b3e:	4604      	mov	r4, r0
 8010b40:	b19b      	cbz	r3, 8010b6a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8010b42:	2002      	movs	r0, #2
 8010b44:	f7f1 fc84 	bl	8002450 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8010b48:	2300      	movs	r3, #0
 8010b4a:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8010b4e:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8010b52:	6823      	ldr	r3, [r4, #0]
 8010b54:	4620      	mov	r0, r4
 8010b56:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8010b5a:	f7ff fdbf 	bl	80106dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010b5e:	462b      	mov	r3, r5
 8010b60:	4601      	mov	r1, r0
 8010b62:	4620      	mov	r0, r4
 8010b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b68:	4718      	bx	r3
 8010b6a:	bd70      	pop	{r4, r5, r6, pc}

08010b6c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8010b6c:	b538      	push	{r3, r4, r5, lr}
 8010b6e:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8010b72:	428b      	cmp	r3, r1
 8010b74:	4604      	mov	r4, r0
 8010b76:	460d      	mov	r5, r1
 8010b78:	d006      	beq.n	8010b88 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8010b7a:	6803      	ldr	r3, [r0, #0]
 8010b7c:	b929      	cbnz	r1, 8010b8a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8010b7e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010b82:	4798      	blx	r3
 8010b84:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 8010b88:	bd38      	pop	{r3, r4, r5, pc}
 8010b8a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010b8e:	e7f8      	b.n	8010b82 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08010b90 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8010b90:	b510      	push	{r4, lr}
 8010b92:	4b0d      	ldr	r3, [pc, #52]	; (8010bc8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8010b94:	781b      	ldrb	r3, [r3, #0]
 8010b96:	4604      	mov	r4, r0
 8010b98:	b95b      	cbnz	r3, 8010bb2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010b9a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8010b9e:	2b02      	cmp	r3, #2
 8010ba0:	d007      	beq.n	8010bb2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010ba2:	6840      	ldr	r0, [r0, #4]
 8010ba4:	f000 f92c 	bl	8010e00 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8010ba8:	b118      	cbz	r0, 8010bb2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010baa:	6862      	ldr	r2, [r4, #4]
 8010bac:	7a53      	ldrb	r3, [r2, #9]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d0fc      	beq.n	8010bac <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8010bb2:	f7f1 fda1 	bl	80026f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	2100      	movs	r1, #0
 8010bba:	f7ff ffd7 	bl	8010b6c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	f7ff fd8c 	bl	80106dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010bc4:	bd10      	pop	{r4, pc}
 8010bc6:	bf00      	nop
 8010bc8:	2001460e 	.word	0x2001460e

08010bcc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8010bcc:	b570      	push	{r4, r5, r6, lr}
 8010bce:	4604      	mov	r4, r0
 8010bd0:	6803      	ldr	r3, [r0, #0]
 8010bd2:	b919      	cbnz	r1, 8010bdc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8010bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bda:	4718      	bx	r3
 8010bdc:	2200      	movs	r2, #0
 8010bde:	f890 607b 	ldrb.w	r6, [r0, #123]	; 0x7b
 8010be2:	f880 207b 	strb.w	r2, [r0, #123]	; 0x7b
 8010be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010be8:	4798      	blx	r3
 8010bea:	6863      	ldr	r3, [r4, #4]
 8010bec:	2101      	movs	r1, #1
 8010bee:	4605      	mov	r5, r0
 8010bf0:	7299      	strb	r1, [r3, #10]
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	f884 607b 	strb.w	r6, [r4, #123]	; 0x7b
 8010bf8:	f7ff ffb8 	bl	8010b6c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010bfc:	4628      	mov	r0, r5
 8010bfe:	bd70      	pop	{r4, r5, r6, pc}

08010c00 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8010c00:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8010c04:	1a13      	subs	r3, r2, r0
 8010c06:	4258      	negs	r0, r3
 8010c08:	4158      	adcs	r0, r3
 8010c0a:	4770      	bx	lr

08010c0c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8010c0c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8010c10:	1a9b      	subs	r3, r3, r2
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	bfdc      	itt	le
 8010c16:	6882      	ldrle	r2, [r0, #8]
 8010c18:	189b      	addle	r3, r3, r2
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	bfcc      	ite	gt
 8010c1e:	2000      	movgt	r0, #0
 8010c20:	2001      	movle	r0, #1
 8010c22:	4770      	bx	lr

08010c24 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8010c24:	6902      	ldr	r2, [r0, #16]
 8010c26:	6843      	ldr	r3, [r0, #4]
 8010c28:	2024      	movs	r0, #36	; 0x24
 8010c2a:	fb00 3002 	mla	r0, r0, r2, r3
 8010c2e:	4770      	bx	lr

08010c30 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8010c30:	6803      	ldr	r3, [r0, #0]
 8010c32:	691b      	ldr	r3, [r3, #16]
 8010c34:	4718      	bx	r3

08010c36 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8010c36:	b570      	push	{r4, r5, r6, lr}
 8010c38:	2301      	movs	r3, #1
 8010c3a:	7203      	strb	r3, [r0, #8]
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	6840      	ldr	r0, [r0, #4]
 8010c40:	6803      	ldr	r3, [r0, #0]
 8010c42:	699b      	ldr	r3, [r3, #24]
 8010c44:	4798      	blx	r3
 8010c46:	6803      	ldr	r3, [r0, #0]
 8010c48:	2b40      	cmp	r3, #64	; 0x40
 8010c4a:	4605      	mov	r5, r0
 8010c4c:	d00c      	beq.n	8010c68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010c4e:	d810      	bhi.n	8010c72 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8010c50:	2b04      	cmp	r3, #4
 8010c52:	d01d      	beq.n	8010c90 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8010c54:	d804      	bhi.n	8010c60 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d006      	beq.n	8010c68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010c5a:	2b02      	cmp	r3, #2
 8010c5c:	d02c      	beq.n	8010cb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8010c5e:	bd70      	pop	{r4, r5, r6, pc}
 8010c60:	2b08      	cmp	r3, #8
 8010c62:	d01d      	beq.n	8010ca0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8010c64:	2b20      	cmp	r3, #32
 8010c66:	d1fa      	bne.n	8010c5e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8010c68:	6823      	ldr	r3, [r4, #0]
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c6e:	4798      	blx	r3
 8010c70:	e013      	b.n	8010c9a <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8010c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c76:	d0f7      	beq.n	8010c68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010c78:	d804      	bhi.n	8010c84 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8010c7a:	2b80      	cmp	r3, #128	; 0x80
 8010c7c:	d0f4      	beq.n	8010c68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c82:	e7f0      	b.n	8010c66 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8010c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c88:	d0ee      	beq.n	8010c68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c8e:	e7e5      	b.n	8010c5c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8010c90:	6823      	ldr	r3, [r4, #0]
 8010c92:	7f01      	ldrb	r1, [r0, #28]
 8010c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c96:	4620      	mov	r0, r4
 8010c98:	4798      	blx	r3
 8010c9a:	6823      	ldr	r3, [r4, #0]
 8010c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c9e:	e006      	b.n	8010cae <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010ca0:	6823      	ldr	r3, [r4, #0]
 8010ca2:	7f01      	ldrb	r1, [r0, #28]
 8010ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	4798      	blx	r3
 8010caa:	6823      	ldr	r3, [r4, #0]
 8010cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cae:	4629      	mov	r1, r5
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cb6:	4718      	bx	r3
 8010cb8:	6823      	ldr	r3, [r4, #0]
 8010cba:	4620      	mov	r0, r4
 8010cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cbe:	4798      	blx	r3
 8010cc0:	e7f3      	b.n	8010caa <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08010cc2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8010cc2:	4770      	bx	lr

08010cc4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8010cc4:	4770      	bx	lr

08010cc6 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8010cc6:	4770      	bx	lr

08010cc8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8010cc8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8010ccc:	1ad2      	subs	r2, r2, r3
 8010cce:	2a00      	cmp	r2, #0
 8010cd0:	b510      	push	{r4, lr}
 8010cd2:	bfdc      	itt	le
 8010cd4:	6884      	ldrle	r4, [r0, #8]
 8010cd6:	1912      	addle	r2, r2, r4
 8010cd8:	2a01      	cmp	r2, #1
 8010cda:	dd16      	ble.n	8010d0a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8010cdc:	6842      	ldr	r2, [r0, #4]
 8010cde:	2424      	movs	r4, #36	; 0x24
 8010ce0:	fb04 2303 	mla	r3, r4, r3, r2
 8010ce4:	f101 0220 	add.w	r2, r1, #32
 8010ce8:	f851 4b04 	ldr.w	r4, [r1], #4
 8010cec:	f843 4b04 	str.w	r4, [r3], #4
 8010cf0:	4291      	cmp	r1, r2
 8010cf2:	d1f9      	bne.n	8010ce8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8010cf4:	780a      	ldrb	r2, [r1, #0]
 8010cf6:	701a      	strb	r2, [r3, #0]
 8010cf8:	68c3      	ldr	r3, [r0, #12]
 8010cfa:	6882      	ldr	r2, [r0, #8]
 8010cfc:	f3bf 8f5b 	dmb	ish
 8010d00:	3301      	adds	r3, #1
 8010d02:	429a      	cmp	r2, r3
 8010d04:	bfd8      	it	le
 8010d06:	1a9b      	suble	r3, r3, r2
 8010d08:	60c3      	str	r3, [r0, #12]
 8010d0a:	bd10      	pop	{r4, pc}

08010d0c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8010d0c:	6903      	ldr	r3, [r0, #16]
 8010d0e:	6882      	ldr	r2, [r0, #8]
 8010d10:	f3bf 8f5b 	dmb	ish
 8010d14:	3301      	adds	r3, #1
 8010d16:	429a      	cmp	r2, r3
 8010d18:	bfd8      	it	le
 8010d1a:	1a9b      	suble	r3, r3, r2
 8010d1c:	6103      	str	r3, [r0, #16]
 8010d1e:	4770      	bx	lr

08010d20 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8010d20:	b570      	push	{r4, r5, r6, lr}
 8010d22:	4604      	mov	r4, r0
 8010d24:	460e      	mov	r6, r1
 8010d26:	6860      	ldr	r0, [r4, #4]
 8010d28:	6803      	ldr	r3, [r0, #0]
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	4798      	blx	r3
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	d1f9      	bne.n	8010d26 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8010d32:	4d0d      	ldr	r5, [pc, #52]	; (8010d68 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8010d34:	6828      	ldr	r0, [r5, #0]
 8010d36:	6803      	ldr	r3, [r0, #0]
 8010d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d3a:	4798      	blx	r3
 8010d3c:	f7f1 fcea 	bl	8002714 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8010d40:	6828      	ldr	r0, [r5, #0]
 8010d42:	2101      	movs	r1, #1
 8010d44:	f7ff ff12 	bl	8010b6c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010d48:	6860      	ldr	r0, [r4, #4]
 8010d4a:	6803      	ldr	r3, [r0, #0]
 8010d4c:	4631      	mov	r1, r6
 8010d4e:	689b      	ldr	r3, [r3, #8]
 8010d50:	4798      	blx	r3
 8010d52:	6823      	ldr	r3, [r4, #0]
 8010d54:	4620      	mov	r0, r4
 8010d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d58:	4798      	blx	r3
 8010d5a:	6828      	ldr	r0, [r5, #0]
 8010d5c:	6803      	ldr	r3, [r0, #0]
 8010d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d64:	4718      	bx	r3
 8010d66:	bf00      	nop
 8010d68:	20014610 	.word	0x20014610

08010d6c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8010d6c:	b508      	push	{r3, lr}
 8010d6e:	f7f1 fcc3 	bl	80026f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010d76:	f7f1 bcc7 	b.w	8002708 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010d7a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8010d7a:	b510      	push	{r4, lr}
 8010d7c:	2114      	movs	r1, #20
 8010d7e:	4604      	mov	r4, r0
 8010d80:	f015 fe39 	bl	80269f6 <_ZdlPvj>
 8010d84:	4620      	mov	r0, r4
 8010d86:	bd10      	pop	{r4, pc}

08010d88 <_ZN8touchgfx13DMA_Interface5startEv>:
 8010d88:	b510      	push	{r4, lr}
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	6840      	ldr	r0, [r0, #4]
 8010d8e:	6803      	ldr	r3, [r0, #0]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	4798      	blx	r3
 8010d94:	b948      	cbnz	r0, 8010daa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010d96:	7a63      	ldrb	r3, [r4, #9]
 8010d98:	b13b      	cbz	r3, 8010daa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010d9a:	7a23      	ldrb	r3, [r4, #8]
 8010d9c:	b92b      	cbnz	r3, 8010daa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010d9e:	6823      	ldr	r3, [r4, #0]
 8010da0:	4620      	mov	r0, r4
 8010da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010da8:	4718      	bx	r3
 8010daa:	bd10      	pop	{r4, pc}

08010dac <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8010dac:	b570      	push	{r4, r5, r6, lr}
 8010dae:	4604      	mov	r4, r0
 8010db0:	6840      	ldr	r0, [r0, #4]
 8010db2:	6803      	ldr	r3, [r0, #0]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	4798      	blx	r3
 8010db8:	4605      	mov	r5, r0
 8010dba:	b930      	cbnz	r0, 8010dca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010dbc:	7a23      	ldrb	r3, [r4, #8]
 8010dbe:	b123      	cbz	r3, 8010dca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010dc0:	6860      	ldr	r0, [r4, #4]
 8010dc2:	6803      	ldr	r3, [r0, #0]
 8010dc4:	695b      	ldr	r3, [r3, #20]
 8010dc6:	4798      	blx	r3
 8010dc8:	7225      	strb	r5, [r4, #8]
 8010dca:	6860      	ldr	r0, [r4, #4]
 8010dcc:	6803      	ldr	r3, [r0, #0]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4798      	blx	r3
 8010dd2:	b928      	cbnz	r0, 8010de0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8010dd4:	6823      	ldr	r3, [r4, #0]
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010dde:	4718      	bx	r3
 8010de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010de4:	f7f1 bc9e 	b.w	8002724 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08010de8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8010de8:	b510      	push	{r4, lr}
 8010dea:	4c04      	ldr	r4, [pc, #16]	; (8010dfc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8010dec:	6082      	str	r2, [r0, #8]
 8010dee:	2200      	movs	r2, #0
 8010df0:	e9c0 4100 	strd	r4, r1, [r0]
 8010df4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8010df8:	bd10      	pop	{r4, pc}
 8010dfa:	bf00      	nop
 8010dfc:	0802928c 	.word	0x0802928c

08010e00 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8010e00:	6840      	ldr	r0, [r0, #4]
 8010e02:	6803      	ldr	r3, [r0, #0]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4718      	bx	r3

08010e08 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8010e08:	4b06      	ldr	r3, [pc, #24]	; (8010e24 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 8010e0a:	60c1      	str	r1, [r0, #12]
 8010e0c:	094a      	lsrs	r2, r1, #5
 8010e0e:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8010e12:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8010e16:	4313      	orrs	r3, r2
 8010e18:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8010e1c:	4319      	orrs	r1, r3
 8010e1e:	8201      	strh	r1, [r0, #16]
 8010e20:	4770      	bx	lr
 8010e22:	bf00      	nop
 8010e24:	fffff800 	.word	0xfffff800

08010e28 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8010e28:	f1a0 0008 	sub.w	r0, r0, #8
 8010e2c:	e7ec      	b.n	8010e08 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 8010e2e:	bf00      	nop

08010e30 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8010e30:	b508      	push	{r3, lr}
 8010e32:	4b05      	ldr	r3, [pc, #20]	; (8010e48 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8010e34:	6818      	ldr	r0, [r3, #0]
 8010e36:	6803      	ldr	r3, [r0, #0]
 8010e38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010e3c:	4798      	blx	r3
 8010e3e:	1e43      	subs	r3, r0, #1
 8010e40:	4258      	negs	r0, r3
 8010e42:	4158      	adcs	r0, r3
 8010e44:	bd08      	pop	{r3, pc}
 8010e46:	bf00      	nop
 8010e48:	20014610 	.word	0x20014610

08010e4c <_ZN8touchgfx13PainterRGB565D1Ev>:
 8010e4c:	4770      	bx	lr

08010e4e <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 8010e4e:	3808      	subs	r0, #8
 8010e50:	4770      	bx	lr

08010e52 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8010e52:	b430      	push	{r4, r5}
 8010e54:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8010e58:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8010e5c:	8a02      	ldrh	r2, [r0, #16]
 8010e5e:	9202      	str	r2, [sp, #8]
 8010e60:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010e64:	68c2      	ldr	r2, [r0, #12]
 8010e66:	4629      	mov	r1, r5
 8010e68:	4620      	mov	r0, r4
 8010e6a:	bc30      	pop	{r4, r5}
 8010e6c:	f7f1 be1e 	b.w	8002aac <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08010e70 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8010e70:	f7f1 be12 	b.w	8002a98 <_ZN8touchgfx5paint8tearDownEv>

08010e74 <_ZN8touchgfx13PainterRGB565D0Ev>:
 8010e74:	b510      	push	{r4, lr}
 8010e76:	2114      	movs	r1, #20
 8010e78:	4604      	mov	r4, r0
 8010e7a:	f015 fdbc 	bl	80269f6 <_ZdlPvj>
 8010e7e:	4620      	mov	r0, r4
 8010e80:	bd10      	pop	{r4, pc}

08010e82 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8010e82:	f1a0 0008 	sub.w	r0, r0, #8
 8010e86:	e7f5      	b.n	8010e74 <_ZN8touchgfx13PainterRGB565D0Ev>

08010e88 <_ZNK8touchgfx13AbstractShape14getMinimalRectEv>:
 8010e88:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8010e8c:	4602      	mov	r2, r0
 8010e8e:	cb03      	ldmia	r3!, {r0, r1}
 8010e90:	6010      	str	r0, [r2, #0]
 8010e92:	6051      	str	r1, [r2, #4]
 8010e94:	4610      	mov	r0, r2
 8010e96:	4770      	bx	lr

08010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8010e98:	b507      	push	{r0, r1, r2, lr}
 8010e9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010e9e:	ab01      	add	r3, sp, #4
 8010ea0:	6809      	ldr	r1, [r1, #0]
 8010ea2:	6800      	ldr	r0, [r0, #0]
 8010ea4:	f005 ff3c 	bl	8016d20 <_ZN8touchgfx6muldivElllRl>
 8010ea8:	b003      	add	sp, #12
 8010eaa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010eb0 <_ZN8touchgfx7CWRUtil4sineEi>:
 8010eb0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8010eb4:	fb90 f2f3 	sdiv	r2, r0, r3
 8010eb8:	fb02 0013 	mls	r0, r2, r3, r0
 8010ebc:	2800      	cmp	r0, #0
 8010ebe:	bfb8      	it	lt
 8010ec0:	18c0      	addlt	r0, r0, r3
 8010ec2:	285a      	cmp	r0, #90	; 0x5a
 8010ec4:	4b09      	ldr	r3, [pc, #36]	; (8010eec <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8010ec6:	dc02      	bgt.n	8010ece <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8010ec8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8010ecc:	4770      	bx	lr
 8010ece:	28b4      	cmp	r0, #180	; 0xb4
 8010ed0:	dc02      	bgt.n	8010ed8 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8010ed2:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8010ed6:	e7f7      	b.n	8010ec8 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8010ed8:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8010edc:	bfd4      	ite	le
 8010ede:	38b4      	suble	r0, #180	; 0xb4
 8010ee0:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8010ee4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8010ee8:	4240      	negs	r0, r0
 8010eea:	4770      	bx	lr
 8010eec:	080292e0 	.word	0x080292e0

08010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8010ef0:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 8010ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ef6:	fb90 f2f3 	sdiv	r2, r0, r3
 8010efa:	fb02 0013 	mls	r0, r2, r3, r0
 8010efe:	2800      	cmp	r0, #0
 8010f00:	bfb8      	it	lt
 8010f02:	18c0      	addlt	r0, r0, r3
 8010f04:	1144      	asrs	r4, r0, #5
 8010f06:	f000 061f 	and.w	r6, r0, #31
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	f7ff ffd0 	bl	8010eb0 <_ZN8touchgfx7CWRUtil4sineEi>
 8010f10:	4605      	mov	r5, r0
 8010f12:	b90e      	cbnz	r6, 8010f18 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 8010f14:	b002      	add	sp, #8
 8010f16:	bd70      	pop	{r4, r5, r6, pc}
 8010f18:	1c60      	adds	r0, r4, #1
 8010f1a:	f7ff ffc9 	bl	8010eb0 <_ZN8touchgfx7CWRUtil4sineEi>
 8010f1e:	ab01      	add	r3, sp, #4
 8010f20:	2220      	movs	r2, #32
 8010f22:	4631      	mov	r1, r6
 8010f24:	1b40      	subs	r0, r0, r5
 8010f26:	f005 fefb 	bl	8016d20 <_ZN8touchgfx6muldivElllRl>
 8010f2a:	4428      	add	r0, r5
 8010f2c:	e7f2      	b.n	8010f14 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

08010f2e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>:
 8010f2e:	b507      	push	{r0, r1, r2, lr}
 8010f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010f34:	ab01      	add	r3, sp, #4
 8010f36:	0140      	lsls	r0, r0, #5
 8010f38:	f005 fef2 	bl	8016d20 <_ZN8touchgfx6muldivElllRl>
 8010f3c:	2320      	movs	r3, #32
 8010f3e:	fb90 f0f3 	sdiv	r0, r0, r3
 8010f42:	b003      	add	sp, #12
 8010f44:	f85d fb04 	ldr.w	pc, [sp], #4

08010f48 <_ZN8touchgfx13AbstractShapeC1Ev>:
 8010f48:	b510      	push	{r4, lr}
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	f000 fe14 	bl	8011b78 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8010f50:	4b08      	ldr	r3, [pc, #32]	; (8010f74 <_ZN8touchgfx13AbstractShapeC1Ev+0x2c>)
 8010f52:	6023      	str	r3, [r4, #0]
 8010f54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010f58:	2300      	movs	r3, #0
 8010f5a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8010f5e:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8010f62:	63a3      	str	r3, [r4, #56]	; 0x38
 8010f64:	e9c4 220f 	strd	r2, r2, [r4, #60]	; 0x3c
 8010f68:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8010f6c:	60a3      	str	r3, [r4, #8]
 8010f6e:	4620      	mov	r0, r4
 8010f70:	bd10      	pop	{r4, pc}
 8010f72:	bf00      	nop
 8010f74:	080293a0 	.word	0x080293a0

08010f78 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>:
 8010f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f7c:	6803      	ldr	r3, [r0, #0]
 8010f7e:	b087      	sub	sp, #28
 8010f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f82:	4604      	mov	r4, r0
 8010f84:	4798      	blx	r3
 8010f86:	9000      	str	r0, [sp, #0]
 8010f88:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010f8a:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8010f8e:	f7ff ffaf 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8010f92:	9002      	str	r0, [sp, #8]
 8010f94:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010f96:	f7ff ffab 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8010f9a:	2500      	movs	r5, #0
 8010f9c:	9003      	str	r0, [sp, #12]
 8010f9e:	462e      	mov	r6, r5
 8010fa0:	46a8      	mov	r8, r5
 8010fa2:	462f      	mov	r7, r5
 8010fa4:	46a9      	mov	r9, r5
 8010fa6:	9b00      	ldr	r3, [sp, #0]
 8010fa8:	429d      	cmp	r5, r3
 8010faa:	da6d      	bge.n	8011088 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x110>
 8010fac:	6823      	ldr	r3, [r4, #0]
 8010fae:	4629      	mov	r1, r5
 8010fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	4798      	blx	r3
 8010fb6:	6823      	ldr	r3, [r4, #0]
 8010fb8:	4682      	mov	sl, r0
 8010fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010fbc:	4629      	mov	r1, r5
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	4798      	blx	r3
 8010fc2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010fc4:	4683      	mov	fp, r0
 8010fc6:	4650      	mov	r0, sl
 8010fc8:	f7ff ffb1 	bl	8010f2e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8010fcc:	a902      	add	r1, sp, #8
 8010fce:	9004      	str	r0, [sp, #16]
 8010fd0:	a804      	add	r0, sp, #16
 8010fd2:	f7ff ff61 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8010fd6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010fd8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010fda:	4402      	add	r2, r0
 8010fdc:	4658      	mov	r0, fp
 8010fde:	9201      	str	r2, [sp, #4]
 8010fe0:	f7ff ffa5 	bl	8010f2e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8010fe4:	ab06      	add	r3, sp, #24
 8010fe6:	a903      	add	r1, sp, #12
 8010fe8:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7ff ff53 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8010ff2:	9a01      	ldr	r2, [sp, #4]
 8010ff4:	1a12      	subs	r2, r2, r0
 8010ff6:	b125      	cbz	r5, 8011002 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x8a>
 8010ff8:	2320      	movs	r3, #32
 8010ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8010ffe:	429f      	cmp	r7, r3
 8011000:	da03      	bge.n	801100a <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x92>
 8011002:	2720      	movs	r7, #32
 8011004:	fb92 f7f7 	sdiv	r7, r2, r7
 8011008:	b125      	cbz	r5, 8011014 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x9c>
 801100a:	2320      	movs	r3, #32
 801100c:	fb92 f3f3 	sdiv	r3, r2, r3
 8011010:	4599      	cmp	r9, r3
 8011012:	dd03      	ble.n	801101c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xa4>
 8011014:	f04f 0920 	mov.w	r9, #32
 8011018:	fb92 f9f9 	sdiv	r9, r2, r9
 801101c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801101e:	9201      	str	r2, [sp, #4]
 8011020:	4658      	mov	r0, fp
 8011022:	f7ff ff84 	bl	8010f2e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8011026:	a902      	add	r1, sp, #8
 8011028:	9004      	str	r0, [sp, #16]
 801102a:	a804      	add	r0, sp, #16
 801102c:	f7ff ff34 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011030:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011032:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011034:	eb00 0b03 	add.w	fp, r0, r3
 8011038:	4650      	mov	r0, sl
 801103a:	f7ff ff78 	bl	8010f2e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 801103e:	ab06      	add	r3, sp, #24
 8011040:	a903      	add	r1, sp, #12
 8011042:	f843 0d04 	str.w	r0, [r3, #-4]!
 8011046:	4618      	mov	r0, r3
 8011048:	f7ff ff26 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801104c:	9a01      	ldr	r2, [sp, #4]
 801104e:	eb00 030b 	add.w	r3, r0, fp
 8011052:	b125      	cbz	r5, 801105e <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xe6>
 8011054:	2120      	movs	r1, #32
 8011056:	fb93 f1f1 	sdiv	r1, r3, r1
 801105a:	428e      	cmp	r6, r1
 801105c:	da03      	bge.n	8011066 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xee>
 801105e:	2620      	movs	r6, #32
 8011060:	fb93 f6f6 	sdiv	r6, r3, r6
 8011064:	b125      	cbz	r5, 8011070 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xf8>
 8011066:	2120      	movs	r1, #32
 8011068:	fb93 f1f1 	sdiv	r1, r3, r1
 801106c:	4588      	cmp	r8, r1
 801106e:	dd03      	ble.n	8011078 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x100>
 8011070:	f04f 0820 	mov.w	r8, #32
 8011074:	fb93 f8f8 	sdiv	r8, r3, r8
 8011078:	6821      	ldr	r1, [r4, #0]
 801107a:	4620      	mov	r0, r4
 801107c:	f8d1 a080 	ldr.w	sl, [r1, #128]	; 0x80
 8011080:	4629      	mov	r1, r5
 8011082:	47d0      	blx	sl
 8011084:	3501      	adds	r5, #1
 8011086:	e78e      	b.n	8010fa6 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x2e>
 8011088:	3701      	adds	r7, #1
 801108a:	3601      	adds	r6, #1
 801108c:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
 8011090:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
 8011094:	eba7 0909 	sub.w	r9, r7, r9
 8011098:	eba6 0808 	sub.w	r8, r6, r8
 801109c:	f8a4 9048 	strh.w	r9, [r4, #72]	; 0x48
 80110a0:	f8a4 804a 	strh.w	r8, [r4, #74]	; 0x4a
 80110a4:	b007      	add	sp, #28
 80110a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080110ac <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE>:
 80110ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ae:	6803      	ldr	r3, [r0, #0]
 80110b0:	b09d      	sub	sp, #116	; 0x74
 80110b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110b4:	4604      	mov	r4, r0
 80110b6:	460d      	mov	r5, r1
 80110b8:	4798      	blx	r3
 80110ba:	4606      	mov	r6, r0
 80110bc:	2800      	cmp	r0, #0
 80110be:	d044      	beq.n	801114a <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x9e>
 80110c0:	462a      	mov	r2, r5
 80110c2:	4621      	mov	r1, r4
 80110c4:	4668      	mov	r0, sp
 80110c6:	f015 fa55 	bl	8026574 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80110ca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80110ce:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 80110d2:	6823      	ldr	r3, [r4, #0]
 80110d4:	2100      	movs	r1, #0
 80110d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110da:	4620      	mov	r0, r4
 80110dc:	4798      	blx	r3
 80110de:	6823      	ldr	r3, [r4, #0]
 80110e0:	4605      	mov	r5, r0
 80110e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110e6:	2100      	movs	r1, #0
 80110e8:	4620      	mov	r0, r4
 80110ea:	4798      	blx	r3
 80110ec:	4629      	mov	r1, r5
 80110ee:	4602      	mov	r2, r0
 80110f0:	4668      	mov	r0, sp
 80110f2:	f015 fbbf 	bl	8026874 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80110f6:	2501      	movs	r5, #1
 80110f8:	42b5      	cmp	r5, r6
 80110fa:	da17      	bge.n	801112c <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x80>
 80110fc:	6823      	ldr	r3, [r4, #0]
 80110fe:	4629      	mov	r1, r5
 8011100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011104:	4620      	mov	r0, r4
 8011106:	4798      	blx	r3
 8011108:	6823      	ldr	r3, [r4, #0]
 801110a:	4607      	mov	r7, r0
 801110c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011110:	4629      	mov	r1, r5
 8011112:	4620      	mov	r0, r4
 8011114:	4798      	blx	r3
 8011116:	4639      	mov	r1, r7
 8011118:	4602      	mov	r2, r0
 801111a:	4668      	mov	r0, sp
 801111c:	f015 fbf7 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011120:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011124:	429a      	cmp	r2, r3
 8011126:	d80e      	bhi.n	8011146 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x9a>
 8011128:	3501      	adds	r5, #1
 801112a:	e7e5      	b.n	80110f8 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x4c>
 801112c:	21ff      	movs	r1, #255	; 0xff
 801112e:	4668      	mov	r0, sp
 8011130:	f015 fadc 	bl	80266ec <_ZN8touchgfx6Canvas6renderEh>
 8011134:	4604      	mov	r4, r0
 8011136:	4b06      	ldr	r3, [pc, #24]	; (8011150 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0xa4>)
 8011138:	9300      	str	r3, [sp, #0]
 801113a:	a808      	add	r0, sp, #32
 801113c:	f002 f812 	bl	8013164 <_ZN8touchgfx7OutlineD1Ev>
 8011140:	4620      	mov	r0, r4
 8011142:	b01d      	add	sp, #116	; 0x74
 8011144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011146:	2400      	movs	r4, #0
 8011148:	e7f5      	b.n	8011136 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x8a>
 801114a:	2401      	movs	r4, #1
 801114c:	e7f8      	b.n	8011140 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x94>
 801114e:	bf00      	nop
 8011150:	08029c48 	.word	0x08029c48

08011154 <_ZN8touchgfx6CircleD1Ev>:
 8011154:	4770      	bx	lr

08011156 <_ZN8touchgfx6CircleD0Ev>:
 8011156:	b510      	push	{r4, lr}
 8011158:	2148      	movs	r1, #72	; 0x48
 801115a:	4604      	mov	r4, r0
 801115c:	f015 fc4b 	bl	80269f6 <_ZdlPvj>
 8011160:	4620      	mov	r0, r4
 8011162:	bd10      	pop	{r4, pc}

08011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8011164:	b508      	push	{r3, lr}
 8011166:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 801116a:	f7ff fec1 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801116e:	bd08      	pop	{r3, pc}

08011170 <_ZN8touchgfx6CircleC1Ev>:
 8011170:	b510      	push	{r4, lr}
 8011172:	4604      	mov	r4, r0
 8011174:	f000 fd00 	bl	8011b78 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8011178:	4b08      	ldr	r3, [pc, #32]	; (801119c <_ZN8touchgfx6CircleC1Ev+0x2c>)
 801117a:	6023      	str	r3, [r4, #0]
 801117c:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8011180:	2300      	movs	r3, #0
 8011182:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
 8011186:	f24b 4205 	movw	r2, #46085	; 0xb405
 801118a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 801118e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8011192:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 8011196:	60a3      	str	r3, [r4, #8]
 8011198:	4620      	mov	r0, r4
 801119a:	bd10      	pop	{r4, pc}
 801119c:	08029434 	.word	0x08029434

080111a0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80111a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a4:	428a      	cmp	r2, r1
 80111a6:	4680      	mov	r8, r0
 80111a8:	4610      	mov	r0, r2
 80111aa:	4699      	mov	r9, r3
 80111ac:	bfa6      	itte	ge
 80111ae:	460a      	movge	r2, r1
 80111b0:	4603      	movge	r3, r0
 80111b2:	460b      	movlt	r3, r1
 80111b4:	1a99      	subs	r1, r3, r2
 80111b6:	b085      	sub	sp, #20
 80111b8:	f5b1 5f34 	cmp.w	r1, #11520	; 0x2d00
 80111bc:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
 80111c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80111c2:	bfa4      	itt	ge
 80111c4:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80111c8:	2200      	movge	r2, #0
 80111ca:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
 80111ce:	9300      	str	r3, [sp, #0]
 80111d0:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 80111d4:	f102 0b01 	add.w	fp, r2, #1
 80111d8:	2c00      	cmp	r4, #0
 80111da:	f040 80af 	bne.w	801133c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19c>
 80111de:	4610      	mov	r0, r2
 80111e0:	9201      	str	r2, [sp, #4]
 80111e2:	f7ff fe85 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80111e6:	a903      	add	r1, sp, #12
 80111e8:	9003      	str	r0, [sp, #12]
 80111ea:	4650      	mov	r0, sl
 80111ec:	f7ff fe54 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80111f0:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 80111f4:	9a01      	ldr	r2, [sp, #4]
 80111f6:	4408      	add	r0, r1
 80111f8:	f8d9 1000 	ldr.w	r1, [r9]
 80111fc:	4281      	cmp	r1, r0
 80111fe:	bfc8      	it	gt
 8011200:	f8c9 0000 	strgt.w	r0, [r9]
 8011204:	6839      	ldr	r1, [r7, #0]
 8011206:	4288      	cmp	r0, r1
 8011208:	bfc8      	it	gt
 801120a:	6038      	strgt	r0, [r7, #0]
 801120c:	4610      	mov	r0, r2
 801120e:	f7ff ffa9 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8011212:	a903      	add	r1, sp, #12
 8011214:	9003      	str	r0, [sp, #12]
 8011216:	4650      	mov	r0, sl
 8011218:	f7ff fe3e 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801121c:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8011220:	1a10      	subs	r0, r2, r0
 8011222:	6832      	ldr	r2, [r6, #0]
 8011224:	4282      	cmp	r2, r0
 8011226:	bfc8      	it	gt
 8011228:	6030      	strgt	r0, [r6, #0]
 801122a:	682a      	ldr	r2, [r5, #0]
 801122c:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8011230:	4290      	cmp	r0, r2
 8011232:	fb9b f2f1 	sdiv	r2, fp, r1
 8011236:	fb01 b212 	mls	r2, r1, r2, fp
 801123a:	eba1 0202 	sub.w	r2, r1, r2
 801123e:	bfc8      	it	gt
 8011240:	6028      	strgt	r0, [r5, #0]
 8011242:	fb92 f0f1 	sdiv	r0, r2, r1
 8011246:	fb01 2210 	mls	r2, r1, r0, r2
 801124a:	4493      	add	fp, r2
 801124c:	9b00      	ldr	r3, [sp, #0]
 801124e:	455b      	cmp	r3, fp
 8011250:	db2a      	blt.n	80112a8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x108>
 8011252:	4658      	mov	r0, fp
 8011254:	f7ff fe4c 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8011258:	a903      	add	r1, sp, #12
 801125a:	9003      	str	r0, [sp, #12]
 801125c:	4650      	mov	r0, sl
 801125e:	f7ff fe1b 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011262:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8011266:	4410      	add	r0, r2
 8011268:	f8d9 2000 	ldr.w	r2, [r9]
 801126c:	4282      	cmp	r2, r0
 801126e:	bfc8      	it	gt
 8011270:	f8c9 0000 	strgt.w	r0, [r9]
 8011274:	683a      	ldr	r2, [r7, #0]
 8011276:	4290      	cmp	r0, r2
 8011278:	bfc8      	it	gt
 801127a:	6038      	strgt	r0, [r7, #0]
 801127c:	4658      	mov	r0, fp
 801127e:	f7ff ff71 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8011282:	a903      	add	r1, sp, #12
 8011284:	9003      	str	r0, [sp, #12]
 8011286:	4650      	mov	r0, sl
 8011288:	f7ff fe06 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801128c:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8011290:	1a10      	subs	r0, r2, r0
 8011292:	6832      	ldr	r2, [r6, #0]
 8011294:	4282      	cmp	r2, r0
 8011296:	bfc8      	it	gt
 8011298:	6030      	strgt	r0, [r6, #0]
 801129a:	682a      	ldr	r2, [r5, #0]
 801129c:	4290      	cmp	r0, r2
 801129e:	bfc8      	it	gt
 80112a0:	6028      	strgt	r0, [r5, #0]
 80112a2:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 80112a6:	e7d1      	b.n	801124c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xac>
 80112a8:	9b00      	ldr	r3, [sp, #0]
 80112aa:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 80112ae:	455b      	cmp	r3, fp
 80112b0:	dd27      	ble.n	8011302 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x162>
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7ff fe1c 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80112b8:	a903      	add	r1, sp, #12
 80112ba:	9003      	str	r0, [sp, #12]
 80112bc:	4650      	mov	r0, sl
 80112be:	f7ff fdeb 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80112c2:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80112c6:	4410      	add	r0, r2
 80112c8:	f8d9 2000 	ldr.w	r2, [r9]
 80112cc:	4282      	cmp	r2, r0
 80112ce:	bfc8      	it	gt
 80112d0:	f8c9 0000 	strgt.w	r0, [r9]
 80112d4:	683a      	ldr	r2, [r7, #0]
 80112d6:	4290      	cmp	r0, r2
 80112d8:	bfc8      	it	gt
 80112da:	6038      	strgt	r0, [r7, #0]
 80112dc:	9800      	ldr	r0, [sp, #0]
 80112de:	f7ff ff41 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80112e2:	a903      	add	r1, sp, #12
 80112e4:	9003      	str	r0, [sp, #12]
 80112e6:	4650      	mov	r0, sl
 80112e8:	f7ff fdd6 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80112ec:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80112f0:	1a10      	subs	r0, r2, r0
 80112f2:	6832      	ldr	r2, [r6, #0]
 80112f4:	4282      	cmp	r2, r0
 80112f6:	bfc8      	it	gt
 80112f8:	6030      	strgt	r0, [r6, #0]
 80112fa:	682a      	ldr	r2, [r5, #0]
 80112fc:	4290      	cmp	r0, r2
 80112fe:	bfc8      	it	gt
 8011300:	6028      	strgt	r0, [r5, #0]
 8011302:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8011306:	f8d9 1000 	ldr.w	r1, [r9]
 801130a:	4291      	cmp	r1, r2
 801130c:	bfc8      	it	gt
 801130e:	f8c9 2000 	strgt.w	r2, [r9]
 8011312:	683a      	ldr	r2, [r7, #0]
 8011314:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8011318:	429a      	cmp	r2, r3
 801131a:	bfb8      	it	lt
 801131c:	603b      	strlt	r3, [r7, #0]
 801131e:	6832      	ldr	r2, [r6, #0]
 8011320:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8011324:	429a      	cmp	r2, r3
 8011326:	bfc8      	it	gt
 8011328:	6033      	strgt	r3, [r6, #0]
 801132a:	682a      	ldr	r2, [r5, #0]
 801132c:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8011330:	429a      	cmp	r2, r3
 8011332:	da00      	bge.n	8011336 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x196>
 8011334:	602b      	str	r3, [r5, #0]
 8011336:	b005      	add	sp, #20
 8011338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801133c:	2002      	movs	r0, #2
 801133e:	3401      	adds	r4, #1
 8011340:	fb94 f4f0 	sdiv	r4, r4, r0
 8011344:	4610      	mov	r0, r2
 8011346:	9201      	str	r2, [sp, #4]
 8011348:	f7ff fdd2 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801134c:	a903      	add	r1, sp, #12
 801134e:	9003      	str	r0, [sp, #12]
 8011350:	4650      	mov	r0, sl
 8011352:	f7ff fda1 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011356:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 801135a:	9a01      	ldr	r2, [sp, #4]
 801135c:	4408      	add	r0, r1
 801135e:	f8d9 1000 	ldr.w	r1, [r9]
 8011362:	1b03      	subs	r3, r0, r4
 8011364:	4299      	cmp	r1, r3
 8011366:	bfc8      	it	gt
 8011368:	f8c9 3000 	strgt.w	r3, [r9]
 801136c:	6839      	ldr	r1, [r7, #0]
 801136e:	428b      	cmp	r3, r1
 8011370:	bfc8      	it	gt
 8011372:	603b      	strgt	r3, [r7, #0]
 8011374:	f8d9 1000 	ldr.w	r1, [r9]
 8011378:	4420      	add	r0, r4
 801137a:	4281      	cmp	r1, r0
 801137c:	bfc8      	it	gt
 801137e:	f8c9 0000 	strgt.w	r0, [r9]
 8011382:	6839      	ldr	r1, [r7, #0]
 8011384:	4288      	cmp	r0, r1
 8011386:	bfc8      	it	gt
 8011388:	6038      	strgt	r0, [r7, #0]
 801138a:	4610      	mov	r0, r2
 801138c:	f7ff feea 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8011390:	a903      	add	r1, sp, #12
 8011392:	9003      	str	r0, [sp, #12]
 8011394:	4650      	mov	r0, sl
 8011396:	f7ff fd7f 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801139a:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 801139e:	1a10      	subs	r0, r2, r0
 80113a0:	6832      	ldr	r2, [r6, #0]
 80113a2:	1b01      	subs	r1, r0, r4
 80113a4:	428a      	cmp	r2, r1
 80113a6:	bfc8      	it	gt
 80113a8:	6031      	strgt	r1, [r6, #0]
 80113aa:	682a      	ldr	r2, [r5, #0]
 80113ac:	4291      	cmp	r1, r2
 80113ae:	bfc8      	it	gt
 80113b0:	6029      	strgt	r1, [r5, #0]
 80113b2:	6832      	ldr	r2, [r6, #0]
 80113b4:	4420      	add	r0, r4
 80113b6:	4282      	cmp	r2, r0
 80113b8:	bfc8      	it	gt
 80113ba:	6030      	strgt	r0, [r6, #0]
 80113bc:	682a      	ldr	r2, [r5, #0]
 80113be:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 80113c2:	4290      	cmp	r0, r2
 80113c4:	fb9b f2f1 	sdiv	r2, fp, r1
 80113c8:	fb01 b212 	mls	r2, r1, r2, fp
 80113cc:	eba1 0202 	sub.w	r2, r1, r2
 80113d0:	bfc8      	it	gt
 80113d2:	6028      	strgt	r0, [r5, #0]
 80113d4:	fb92 f0f1 	sdiv	r0, r2, r1
 80113d8:	fb01 2210 	mls	r2, r1, r0, r2
 80113dc:	4493      	add	fp, r2
 80113de:	9b00      	ldr	r3, [sp, #0]
 80113e0:	455b      	cmp	r3, fp
 80113e2:	db40      	blt.n	8011466 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c6>
 80113e4:	4658      	mov	r0, fp
 80113e6:	f7ff fd83 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80113ea:	a903      	add	r1, sp, #12
 80113ec:	9003      	str	r0, [sp, #12]
 80113ee:	4650      	mov	r0, sl
 80113f0:	f7ff fd52 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80113f4:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80113f8:	4410      	add	r0, r2
 80113fa:	f8d9 2000 	ldr.w	r2, [r9]
 80113fe:	1b01      	subs	r1, r0, r4
 8011400:	428a      	cmp	r2, r1
 8011402:	bfc8      	it	gt
 8011404:	f8c9 1000 	strgt.w	r1, [r9]
 8011408:	683a      	ldr	r2, [r7, #0]
 801140a:	4291      	cmp	r1, r2
 801140c:	bfc8      	it	gt
 801140e:	6039      	strgt	r1, [r7, #0]
 8011410:	f8d9 2000 	ldr.w	r2, [r9]
 8011414:	4420      	add	r0, r4
 8011416:	4282      	cmp	r2, r0
 8011418:	bfc8      	it	gt
 801141a:	f8c9 0000 	strgt.w	r0, [r9]
 801141e:	683a      	ldr	r2, [r7, #0]
 8011420:	4290      	cmp	r0, r2
 8011422:	bfc8      	it	gt
 8011424:	6038      	strgt	r0, [r7, #0]
 8011426:	4658      	mov	r0, fp
 8011428:	f7ff fe9c 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801142c:	a903      	add	r1, sp, #12
 801142e:	9003      	str	r0, [sp, #12]
 8011430:	4650      	mov	r0, sl
 8011432:	f7ff fd31 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011436:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 801143a:	1a10      	subs	r0, r2, r0
 801143c:	6832      	ldr	r2, [r6, #0]
 801143e:	1b01      	subs	r1, r0, r4
 8011440:	428a      	cmp	r2, r1
 8011442:	bfc8      	it	gt
 8011444:	6031      	strgt	r1, [r6, #0]
 8011446:	682a      	ldr	r2, [r5, #0]
 8011448:	4291      	cmp	r1, r2
 801144a:	bfc8      	it	gt
 801144c:	6029      	strgt	r1, [r5, #0]
 801144e:	6832      	ldr	r2, [r6, #0]
 8011450:	4420      	add	r0, r4
 8011452:	4282      	cmp	r2, r0
 8011454:	bfc8      	it	gt
 8011456:	6030      	strgt	r0, [r6, #0]
 8011458:	682a      	ldr	r2, [r5, #0]
 801145a:	4290      	cmp	r0, r2
 801145c:	bfc8      	it	gt
 801145e:	6028      	strgt	r0, [r5, #0]
 8011460:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 8011464:	e7bb      	b.n	80113de <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x23e>
 8011466:	9b00      	ldr	r3, [sp, #0]
 8011468:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 801146c:	455b      	cmp	r3, fp
 801146e:	f77f af62 	ble.w	8011336 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x196>
 8011472:	4618      	mov	r0, r3
 8011474:	f7ff fd3c 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8011478:	a903      	add	r1, sp, #12
 801147a:	9003      	str	r0, [sp, #12]
 801147c:	4650      	mov	r0, sl
 801147e:	f7ff fd0b 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011482:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8011486:	4410      	add	r0, r2
 8011488:	f8d9 2000 	ldr.w	r2, [r9]
 801148c:	1b01      	subs	r1, r0, r4
 801148e:	428a      	cmp	r2, r1
 8011490:	bfc8      	it	gt
 8011492:	f8c9 1000 	strgt.w	r1, [r9]
 8011496:	683a      	ldr	r2, [r7, #0]
 8011498:	4291      	cmp	r1, r2
 801149a:	bfc8      	it	gt
 801149c:	6039      	strgt	r1, [r7, #0]
 801149e:	f8d9 2000 	ldr.w	r2, [r9]
 80114a2:	4420      	add	r0, r4
 80114a4:	4282      	cmp	r2, r0
 80114a6:	bfc8      	it	gt
 80114a8:	f8c9 0000 	strgt.w	r0, [r9]
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	4298      	cmp	r0, r3
 80114b0:	bfc8      	it	gt
 80114b2:	6038      	strgt	r0, [r7, #0]
 80114b4:	9800      	ldr	r0, [sp, #0]
 80114b6:	f7ff fe55 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80114ba:	a903      	add	r1, sp, #12
 80114bc:	9003      	str	r0, [sp, #12]
 80114be:	4650      	mov	r0, sl
 80114c0:	f7ff fcea 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80114c4:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80114c8:	6832      	ldr	r2, [r6, #0]
 80114ca:	1a18      	subs	r0, r3, r0
 80114cc:	1b03      	subs	r3, r0, r4
 80114ce:	429a      	cmp	r2, r3
 80114d0:	bfc8      	it	gt
 80114d2:	6033      	strgt	r3, [r6, #0]
 80114d4:	682a      	ldr	r2, [r5, #0]
 80114d6:	4293      	cmp	r3, r2
 80114d8:	bfc8      	it	gt
 80114da:	602b      	strgt	r3, [r5, #0]
 80114dc:	6833      	ldr	r3, [r6, #0]
 80114de:	4404      	add	r4, r0
 80114e0:	42a3      	cmp	r3, r4
 80114e2:	bfc8      	it	gt
 80114e4:	6034      	strgt	r4, [r6, #0]
 80114e6:	682b      	ldr	r3, [r5, #0]
 80114e8:	429c      	cmp	r4, r3
 80114ea:	bfc8      	it	gt
 80114ec:	602c      	strgt	r4, [r5, #0]
 80114ee:	e722      	b.n	8011336 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x196>

080114f0 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 80114f0:	b530      	push	{r4, r5, lr}
 80114f2:	4604      	mov	r4, r0
 80114f4:	4608      	mov	r0, r1
 80114f6:	4611      	mov	r1, r2
 80114f8:	461a      	mov	r2, r3
 80114fa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80114fe:	b089      	sub	sp, #36	; 0x24
 8011500:	015b      	lsls	r3, r3, #5
 8011502:	9304      	str	r3, [sp, #16]
 8011504:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8011508:	2500      	movs	r5, #0
 801150a:	015b      	lsls	r3, r3, #5
 801150c:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8011510:	ab07      	add	r3, sp, #28
 8011512:	9302      	str	r3, [sp, #8]
 8011514:	ab06      	add	r3, sp, #24
 8011516:	9301      	str	r3, [sp, #4]
 8011518:	ab05      	add	r3, sp, #20
 801151a:	9300      	str	r3, [sp, #0]
 801151c:	ab04      	add	r3, sp, #16
 801151e:	9505      	str	r5, [sp, #20]
 8011520:	f7ff fe3e 	bl	80111a0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8011524:	2520      	movs	r5, #32
 8011526:	9a04      	ldr	r2, [sp, #16]
 8011528:	9805      	ldr	r0, [sp, #20]
 801152a:	fb92 f2f5 	sdiv	r2, r2, r5
 801152e:	fb90 f0f5 	sdiv	r0, r0, r5
 8011532:	b292      	uxth	r2, r2
 8011534:	3002      	adds	r0, #2
 8011536:	1a80      	subs	r0, r0, r2
 8011538:	9b06      	ldr	r3, [sp, #24]
 801153a:	9907      	ldr	r1, [sp, #28]
 801153c:	fb93 f3f5 	sdiv	r3, r3, r5
 8011540:	fb91 f1f5 	sdiv	r1, r1, r5
 8011544:	b29b      	uxth	r3, r3
 8011546:	3102      	adds	r1, #2
 8011548:	1ac9      	subs	r1, r1, r3
 801154a:	3a01      	subs	r2, #1
 801154c:	3b01      	subs	r3, #1
 801154e:	80a0      	strh	r0, [r4, #4]
 8011550:	4620      	mov	r0, r4
 8011552:	8022      	strh	r2, [r4, #0]
 8011554:	8063      	strh	r3, [r4, #2]
 8011556:	80e1      	strh	r1, [r4, #6]
 8011558:	b009      	add	sp, #36	; 0x24
 801155a:	bd30      	pop	{r4, r5, pc}

0801155c <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 801155c:	b510      	push	{r4, lr}
 801155e:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 8011562:	4604      	mov	r4, r0
 8011564:	f7ff ffc4 	bl	80114f0 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8011568:	4620      	mov	r0, r4
 801156a:	bd10      	pop	{r4, pc}

0801156c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 801156c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011570:	e9d0 560e 	ldrd	r5, r6, [r0, #56]	; 0x38
 8011574:	42ae      	cmp	r6, r5
 8011576:	bfa2      	ittt	ge
 8011578:	4633      	movge	r3, r6
 801157a:	462e      	movge	r6, r5
 801157c:	461d      	movge	r5, r3
 801157e:	1bab      	subs	r3, r5, r6
 8011580:	468b      	mov	fp, r1
 8011582:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8011584:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	; 0x2c
 8011588:	f9b0 a030 	ldrsh.w	sl, [r0, #48]	; 0x30
 801158c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8011590:	f04f 0220 	mov.w	r2, #32
 8011594:	b0ab      	sub	sp, #172	; 0xac
 8011596:	4604      	mov	r4, r0
 8011598:	bfa4      	itt	ge
 801159a:	f44f 5534 	movge.w	r5, #11520	; 0x2d00
 801159e:	2600      	movge	r6, #0
 80115a0:	fb99 f9f2 	sdiv	r9, r9, r2
 80115a4:	fb9a faf2 	sdiv	sl, sl, r2
 80115a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80115aa:	2900      	cmp	r1, #0
 80115ac:	f000 80f5 	beq.w	801179a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 80115b0:	f9bb 0000 	ldrsh.w	r0, [fp]
 80115b4:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 80115b8:	eba9 0700 	sub.w	r7, r9, r0
 80115bc:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 80115c0:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 80115c4:	f8bb 7004 	ldrh.w	r7, [fp, #4]
 80115c8:	ebaa 0802 	sub.w	r8, sl, r2
 80115cc:	4407      	add	r7, r0
 80115ce:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 80115d2:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 80115d6:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 80115da:	b23f      	sxth	r7, r7
 80115dc:	4490      	add	r8, r2
 80115de:	eba9 0707 	sub.w	r7, r9, r7
 80115e2:	fa0f f888 	sxth.w	r8, r8
 80115e6:	ebaa 0808 	sub.w	r8, sl, r8
 80115ea:	2f00      	cmp	r7, #0
 80115ec:	bfb8      	it	lt
 80115ee:	427f      	neglt	r7, r7
 80115f0:	f1b8 0f00 	cmp.w	r8, #0
 80115f4:	bfb8      	it	lt
 80115f6:	f1c8 0800 	rsblt	r8, r8, #0
 80115fa:	45bc      	cmp	ip, r7
 80115fc:	bfcc      	ite	gt
 80115fe:	f10c 0701 	addgt.w	r7, ip, #1
 8011602:	3701      	addle	r7, #1
 8011604:	4540      	cmp	r0, r8
 8011606:	bfc8      	it	gt
 8011608:	f100 0801 	addgt.w	r8, r0, #1
 801160c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8011610:	f100 0001 	add.w	r0, r0, #1
 8011614:	ea4f 0060 	mov.w	r0, r0, asr #1
 8011618:	f04f 0202 	mov.w	r2, #2
 801161c:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8011620:	fb91 f1f2 	sdiv	r1, r1, r2
 8011624:	eba3 0301 	sub.w	r3, r3, r1
 8011628:	bfd8      	it	le
 801162a:	f108 0801 	addle.w	r8, r8, #1
 801162e:	9201      	str	r2, [sp, #4]
 8011630:	930d      	str	r3, [sp, #52]	; 0x34
 8011632:	f7ff fc3d 	bl	8010eb0 <_ZN8touchgfx7CWRUtil4sineEi>
 8011636:	a92a      	add	r1, sp, #168	; 0xa8
 8011638:	fb08 f808 	mul.w	r8, r8, r8
 801163c:	f841 0d70 	str.w	r0, [r1, #-112]!
 8011640:	a80d      	add	r0, sp, #52	; 0x34
 8011642:	f7ff fc29 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011646:	fb07 8707 	mla	r7, r7, r7, r8
 801164a:	f04f 0c20 	mov.w	ip, #32
 801164e:	fb90 f0fc 	sdiv	r0, r0, ip
 8011652:	4340      	muls	r0, r0
 8011654:	4287      	cmp	r7, r0
 8011656:	9a01      	ldr	r2, [sp, #4]
 8011658:	da04      	bge.n	8011664 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf8>
 801165a:	2401      	movs	r4, #1
 801165c:	4620      	mov	r0, r4
 801165e:	b02b      	add	sp, #172	; 0xac
 8011660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011664:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011666:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011668:	fb91 f3f2 	sdiv	r3, r1, r2
 801166c:	4403      	add	r3, r0
 801166e:	fb93 f3fc 	sdiv	r3, r3, ip
 8011672:	f9bb 1000 	ldrsh.w	r1, [fp]
 8011676:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 801167a:	440a      	add	r2, r1
 801167c:	b212      	sxth	r2, r2
 801167e:	454a      	cmp	r2, r9
 8011680:	bfa8      	it	ge
 8011682:	464a      	movge	r2, r9
 8011684:	428a      	cmp	r2, r1
 8011686:	bfac      	ite	ge
 8011688:	eba9 0902 	subge.w	r9, r9, r2
 801168c:	eba9 0901 	sublt.w	r9, r9, r1
 8011690:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8011694:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8011698:	440a      	add	r2, r1
 801169a:	b212      	sxth	r2, r2
 801169c:	4552      	cmp	r2, sl
 801169e:	bfa8      	it	ge
 80116a0:	4652      	movge	r2, sl
 80116a2:	428a      	cmp	r2, r1
 80116a4:	bfac      	ite	ge
 80116a6:	ebaa 0a02 	subge.w	sl, sl, r2
 80116aa:	ebaa 0a01 	sublt.w	sl, sl, r1
 80116ae:	3301      	adds	r3, #1
 80116b0:	fb0a fa0a 	mul.w	sl, sl, sl
 80116b4:	fb09 a909 	mla	r9, r9, r9, sl
 80116b8:	435b      	muls	r3, r3
 80116ba:	4599      	cmp	r9, r3
 80116bc:	dccd      	bgt.n	801165a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xee>
 80116be:	465a      	mov	r2, fp
 80116c0:	4621      	mov	r1, r4
 80116c2:	a80e      	add	r0, sp, #56	; 0x38
 80116c4:	f014 ff56 	bl	8026574 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80116c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80116ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80116cc:	9209      	str	r2, [sp, #36]	; 0x24
 80116ce:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80116d2:	930a      	str	r3, [sp, #40]	; 0x28
 80116d4:	dd07      	ble.n	80116e6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x17a>
 80116d6:	2102      	movs	r1, #2
 80116d8:	fb93 f3f1 	sdiv	r3, r3, r1
 80116dc:	4413      	add	r3, r2
 80116de:	930a      	str	r3, [sp, #40]	; 0x28
 80116e0:	fb93 f3f1 	sdiv	r3, r3, r1
 80116e4:	9309      	str	r3, [sp, #36]	; 0x24
 80116e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80116ea:	4630      	mov	r0, r6
 80116ec:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80116f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80116f2:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 80116f6:	f7ff fbfb 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80116fa:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 80116fe:	f04f 0a02 	mov.w	sl, #2
 8011702:	f849 0d74 	str.w	r0, [r9, #-116]!
 8011706:	a80b      	add	r0, sp, #44	; 0x2c
 8011708:	4649      	mov	r1, r9
 801170a:	f7ff fbc5 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801170e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011710:	fb90 f0fa 	sdiv	r0, r0, sl
 8011714:	eb00 0b03 	add.w	fp, r0, r3
 8011718:	4630      	mov	r0, r6
 801171a:	f7ff fd23 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801171e:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8011722:	017f      	lsls	r7, r7, #5
 8011724:	f848 0d78 	str.w	r0, [r8, #-120]!
 8011728:	a80b      	add	r0, sp, #44	; 0x2c
 801172a:	4641      	mov	r1, r8
 801172c:	f7ff fbb4 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011730:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011732:	fb90 f0fa 	sdiv	r0, r0, sl
 8011736:	4659      	mov	r1, fp
 8011738:	1a12      	subs	r2, r2, r0
 801173a:	a80e      	add	r0, sp, #56	; 0x38
 801173c:	f015 f89a 	bl	8026874 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8011740:	f106 0a20 	add.w	sl, r6, #32
 8011744:	bb67      	cbnz	r7, 80117a0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x234>
 8011746:	46b3      	mov	fp, r6
 8011748:	45aa      	cmp	sl, r5
 801174a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801174c:	dc33      	bgt.n	80117b6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x24a>
 801174e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011750:	4650      	mov	r0, sl
 8011752:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8011756:	920b      	str	r2, [sp, #44]	; 0x2c
 8011758:	f7ff fbca 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801175c:	4641      	mov	r1, r8
 801175e:	900c      	str	r0, [sp, #48]	; 0x30
 8011760:	a80b      	add	r0, sp, #44	; 0x2c
 8011762:	f7ff fb99 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011766:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011768:	2302      	movs	r3, #2
 801176a:	fb90 f0f3 	sdiv	r0, r0, r3
 801176e:	eb00 0b02 	add.w	fp, r0, r2
 8011772:	4650      	mov	r0, sl
 8011774:	f7ff fcf6 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8011778:	4649      	mov	r1, r9
 801177a:	900d      	str	r0, [sp, #52]	; 0x34
 801177c:	a80b      	add	r0, sp, #44	; 0x2c
 801177e:	f7ff fb8b 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011782:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011784:	2302      	movs	r3, #2
 8011786:	4659      	mov	r1, fp
 8011788:	fb90 f0f3 	sdiv	r0, r0, r3
 801178c:	1a12      	subs	r2, r2, r0
 801178e:	a80e      	add	r0, sp, #56	; 0x38
 8011790:	46d3      	mov	fp, sl
 8011792:	f015 f8bc 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011796:	44ba      	add	sl, r7
 8011798:	e7d6      	b.n	8011748 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1dc>
 801179a:	fb93 f3f2 	sdiv	r3, r3, r2
 801179e:	e768      	b.n	8011672 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x106>
 80117a0:	fb9a f2f7 	sdiv	r2, sl, r7
 80117a4:	fb07 a212 	mls	r2, r7, r2, sl
 80117a8:	1aba      	subs	r2, r7, r2
 80117aa:	fb92 f1f7 	sdiv	r1, r2, r7
 80117ae:	fb07 2211 	mls	r2, r7, r1, r2
 80117b2:	4492      	add	sl, r2
 80117b4:	e7c7      	b.n	8011746 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1da>
 80117b6:	45ab      	cmp	fp, r5
 80117b8:	da23      	bge.n	8011802 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x296>
 80117ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117bc:	4628      	mov	r0, r5
 80117be:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80117c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80117c4:	f7ff fb94 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80117c8:	4641      	mov	r1, r8
 80117ca:	900c      	str	r0, [sp, #48]	; 0x30
 80117cc:	a80b      	add	r0, sp, #44	; 0x2c
 80117ce:	f7ff fb63 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80117d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80117d4:	f04f 0a02 	mov.w	sl, #2
 80117d8:	fb90 f0fa 	sdiv	r0, r0, sl
 80117dc:	4403      	add	r3, r0
 80117de:	4628      	mov	r0, r5
 80117e0:	9301      	str	r3, [sp, #4]
 80117e2:	f7ff fcbf 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80117e6:	4649      	mov	r1, r9
 80117e8:	900d      	str	r0, [sp, #52]	; 0x34
 80117ea:	a80b      	add	r0, sp, #44	; 0x2c
 80117ec:	f7ff fb54 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80117f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80117f2:	9b01      	ldr	r3, [sp, #4]
 80117f4:	fb90 f0fa 	sdiv	r0, r0, sl
 80117f8:	4619      	mov	r1, r3
 80117fa:	1a12      	subs	r2, r2, r0
 80117fc:	a80e      	add	r0, sp, #56	; 0x38
 80117fe:	f015 f886 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011804:	b99b      	cbnz	r3, 801182e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2c2>
 8011806:	1bad      	subs	r5, r5, r6
 8011808:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 801180c:	da04      	bge.n	8011818 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ac>
 801180e:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	; 0x2c
 8011812:	a80e      	add	r0, sp, #56	; 0x38
 8011814:	f015 f87b 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011818:	21ff      	movs	r1, #255	; 0xff
 801181a:	a80e      	add	r0, sp, #56	; 0x38
 801181c:	f014 ff66 	bl	80266ec <_ZN8touchgfx6Canvas6renderEh>
 8011820:	4604      	mov	r4, r0
 8011822:	4b8a      	ldr	r3, [pc, #552]	; (8011a4c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4e0>)
 8011824:	930e      	str	r3, [sp, #56]	; 0x38
 8011826:	a816      	add	r0, sp, #88	; 0x58
 8011828:	f001 fc9c 	bl	8013164 <_ZN8touchgfx7OutlineD1Ev>
 801182c:	e716      	b.n	801165c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf0>
 801182e:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8011832:	429a      	cmp	r2, r3
 8011834:	f0c0 8107 	bcc.w	8011a46 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4da>
 8011838:	1bab      	subs	r3, r5, r6
 801183a:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 801183e:	9301      	str	r3, [sp, #4]
 8011840:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8011844:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 8011848:	da43      	bge.n	80118d2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x366>
 801184a:	4628      	mov	r0, r5
 801184c:	f7ff fb50 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8011850:	4649      	mov	r1, r9
 8011852:	900d      	str	r0, [sp, #52]	; 0x34
 8011854:	a809      	add	r0, sp, #36	; 0x24
 8011856:	f7ff fb1f 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801185a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801185c:	18c3      	adds	r3, r0, r3
 801185e:	4628      	mov	r0, r5
 8011860:	9303      	str	r3, [sp, #12]
 8011862:	f7ff fc7f 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8011866:	4649      	mov	r1, r9
 8011868:	900d      	str	r0, [sp, #52]	; 0x34
 801186a:	a809      	add	r0, sp, #36	; 0x24
 801186c:	f7ff fb14 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011870:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011872:	f505 52b4 	add.w	r2, r5, #5760	; 0x1680
 8011876:	1a1b      	subs	r3, r3, r0
 8011878:	9302      	str	r3, [sp, #8]
 801187a:	9204      	str	r2, [sp, #16]
 801187c:	eb0a 0305 	add.w	r3, sl, r5
 8011880:	9a04      	ldr	r2, [sp, #16]
 8011882:	4293      	cmp	r3, r2
 8011884:	da25      	bge.n	80118d2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x366>
 8011886:	4618      	mov	r0, r3
 8011888:	9306      	str	r3, [sp, #24]
 801188a:	f7ff fb31 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801188e:	4649      	mov	r1, r9
 8011890:	900d      	str	r0, [sp, #52]	; 0x34
 8011892:	a80a      	add	r0, sp, #40	; 0x28
 8011894:	f7ff fb00 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011898:	9b03      	ldr	r3, [sp, #12]
 801189a:	2202      	movs	r2, #2
 801189c:	fb90 f0f2 	sdiv	r0, r0, r2
 80118a0:	18c3      	adds	r3, r0, r3
 80118a2:	9305      	str	r3, [sp, #20]
 80118a4:	9b06      	ldr	r3, [sp, #24]
 80118a6:	9207      	str	r2, [sp, #28]
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7ff fc5b 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80118ae:	a92a      	add	r1, sp, #168	; 0xa8
 80118b0:	f841 0d78 	str.w	r0, [r1, #-120]!
 80118b4:	a80a      	add	r0, sp, #40	; 0x28
 80118b6:	f7ff faef 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80118ba:	9b02      	ldr	r3, [sp, #8]
 80118bc:	9a07      	ldr	r2, [sp, #28]
 80118be:	9905      	ldr	r1, [sp, #20]
 80118c0:	fb90 f2f2 	sdiv	r2, r0, r2
 80118c4:	a80e      	add	r0, sp, #56	; 0x38
 80118c6:	1a9a      	subs	r2, r3, r2
 80118c8:	f015 f821 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80118cc:	9b06      	ldr	r3, [sp, #24]
 80118ce:	4453      	add	r3, sl
 80118d0:	e7d6      	b.n	8011880 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x314>
 80118d2:	45ab      	cmp	fp, r5
 80118d4:	da25      	bge.n	8011922 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3b6>
 80118d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80118da:	4628      	mov	r0, r5
 80118dc:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80118e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80118e2:	f7ff fb05 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80118e6:	4641      	mov	r1, r8
 80118e8:	900c      	str	r0, [sp, #48]	; 0x30
 80118ea:	a80b      	add	r0, sp, #44	; 0x2c
 80118ec:	f7ff fad4 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80118f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80118f2:	2202      	movs	r2, #2
 80118f4:	fb90 f0f2 	sdiv	r0, r0, r2
 80118f8:	eb00 0903 	add.w	r9, r0, r3
 80118fc:	4628      	mov	r0, r5
 80118fe:	9202      	str	r2, [sp, #8]
 8011900:	f7ff fc30 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8011904:	a92a      	add	r1, sp, #168	; 0xa8
 8011906:	f841 0d74 	str.w	r0, [r1, #-116]!
 801190a:	a80b      	add	r0, sp, #44	; 0x2c
 801190c:	f7ff fac4 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011910:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011912:	9a02      	ldr	r2, [sp, #8]
 8011914:	fb90 f2f2 	sdiv	r2, r0, r2
 8011918:	4649      	mov	r1, r9
 801191a:	1a9a      	subs	r2, r3, r2
 801191c:	a80e      	add	r0, sp, #56	; 0x38
 801191e:	f014 fff6 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011922:	46d9      	mov	r9, fp
 8011924:	2502      	movs	r5, #2
 8011926:	45b1      	cmp	r9, r6
 8011928:	db25      	blt.n	8011976 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x40a>
 801192a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801192e:	4648      	mov	r0, r9
 8011930:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8011934:	930b      	str	r3, [sp, #44]	; 0x2c
 8011936:	f7ff fadb 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801193a:	4641      	mov	r1, r8
 801193c:	900c      	str	r0, [sp, #48]	; 0x30
 801193e:	a80b      	add	r0, sp, #44	; 0x2c
 8011940:	f7ff faaa 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011944:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011946:	fb90 f0f5 	sdiv	r0, r0, r5
 801194a:	eb00 0b03 	add.w	fp, r0, r3
 801194e:	4648      	mov	r0, r9
 8011950:	f7ff fc08 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8011954:	a90d      	add	r1, sp, #52	; 0x34
 8011956:	900d      	str	r0, [sp, #52]	; 0x34
 8011958:	a80b      	add	r0, sp, #44	; 0x2c
 801195a:	f7ff fa9d 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801195e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011960:	fb90 f0f5 	sdiv	r0, r0, r5
 8011964:	4659      	mov	r1, fp
 8011966:	1a12      	subs	r2, r2, r0
 8011968:	a80e      	add	r0, sp, #56	; 0x38
 801196a:	46cb      	mov	fp, r9
 801196c:	f014 ffcf 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011970:	eba9 0907 	sub.w	r9, r9, r7
 8011974:	e7d7      	b.n	8011926 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3ba>
 8011976:	455e      	cmp	r6, fp
 8011978:	da22      	bge.n	80119c0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x454>
 801197a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801197e:	4630      	mov	r0, r6
 8011980:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8011984:	930b      	str	r3, [sp, #44]	; 0x2c
 8011986:	f7ff fab3 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801198a:	4641      	mov	r1, r8
 801198c:	900c      	str	r0, [sp, #48]	; 0x30
 801198e:	a80b      	add	r0, sp, #44	; 0x2c
 8011990:	f7ff fa82 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011994:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8011996:	2502      	movs	r5, #2
 8011998:	fb90 f0f5 	sdiv	r0, r0, r5
 801199c:	4407      	add	r7, r0
 801199e:	4630      	mov	r0, r6
 80119a0:	f7ff fbe0 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80119a4:	a92a      	add	r1, sp, #168	; 0xa8
 80119a6:	f841 0d74 	str.w	r0, [r1, #-116]!
 80119aa:	a80b      	add	r0, sp, #44	; 0x2c
 80119ac:	f7ff fa74 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80119b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80119b2:	fb90 f0f5 	sdiv	r0, r0, r5
 80119b6:	4639      	mov	r1, r7
 80119b8:	1a12      	subs	r2, r2, r0
 80119ba:	a80e      	add	r0, sp, #56	; 0x38
 80119bc:	f014 ffa7 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80119c0:	9b01      	ldr	r3, [sp, #4]
 80119c2:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80119c6:	f6bf af27 	bge.w	8011818 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ac>
 80119ca:	4630      	mov	r0, r6
 80119cc:	f7ff fa90 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80119d0:	ad2a      	add	r5, sp, #168	; 0xa8
 80119d2:	f04f 0b02 	mov.w	fp, #2
 80119d6:	f845 0d74 	str.w	r0, [r5, #-116]!
 80119da:	a809      	add	r0, sp, #36	; 0x24
 80119dc:	4629      	mov	r1, r5
 80119de:	f7ff fa5b 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80119e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80119e4:	eb00 0903 	add.w	r9, r0, r3
 80119e8:	4630      	mov	r0, r6
 80119ea:	f7ff fbbb 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80119ee:	4629      	mov	r1, r5
 80119f0:	900d      	str	r0, [sp, #52]	; 0x34
 80119f2:	a809      	add	r0, sp, #36	; 0x24
 80119f4:	f7ff fa50 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80119f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80119fa:	f5a6 54b4 	sub.w	r4, r6, #5760	; 0x1680
 80119fe:	eba3 0800 	sub.w	r8, r3, r0
 8011a02:	4454      	add	r4, sl
 8011a04:	42a6      	cmp	r6, r4
 8011a06:	f77f af07 	ble.w	8011818 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ac>
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	f7ff fa70 	bl	8010ef0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8011a10:	4629      	mov	r1, r5
 8011a12:	900d      	str	r0, [sp, #52]	; 0x34
 8011a14:	a80a      	add	r0, sp, #40	; 0x28
 8011a16:	f7ff fa3f 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011a1a:	fb90 f0fb 	sdiv	r0, r0, fp
 8011a1e:	eb00 0709 	add.w	r7, r0, r9
 8011a22:	4620      	mov	r0, r4
 8011a24:	f7ff fb9e 	bl	8011164 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8011a28:	a90c      	add	r1, sp, #48	; 0x30
 8011a2a:	900c      	str	r0, [sp, #48]	; 0x30
 8011a2c:	a80a      	add	r0, sp, #40	; 0x28
 8011a2e:	f7ff fa33 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8011a32:	4639      	mov	r1, r7
 8011a34:	fb90 f2fb 	sdiv	r2, r0, fp
 8011a38:	a80e      	add	r0, sp, #56	; 0x38
 8011a3a:	eba8 0202 	sub.w	r2, r8, r2
 8011a3e:	f014 ff66 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8011a42:	4454      	add	r4, sl
 8011a44:	e7de      	b.n	8011a04 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x498>
 8011a46:	2400      	movs	r4, #0
 8011a48:	e6eb      	b.n	8011822 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b6>
 8011a4a:	bf00      	nop
 8011a4c:	08029c48 	.word	0x08029c48

08011a50 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8011a50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011a52:	6803      	ldr	r3, [r0, #0]
 8011a54:	460d      	mov	r5, r1
 8011a56:	4604      	mov	r4, r0
 8011a58:	4601      	mov	r1, r0
 8011a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a5c:	a802      	add	r0, sp, #8
 8011a5e:	4798      	blx	r3
 8011a60:	6828      	ldr	r0, [r5, #0]
 8011a62:	6869      	ldr	r1, [r5, #4]
 8011a64:	466b      	mov	r3, sp
 8011a66:	c303      	stmia	r3!, {r0, r1}
 8011a68:	4668      	mov	r0, sp
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	f7fe f9c0 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 8011a70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011a72:	b188      	cbz	r0, 8011a98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011a74:	6803      	ldr	r3, [r0, #0]
 8011a76:	1d21      	adds	r1, r4, #4
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	4798      	blx	r3
 8011a7c:	b160      	cbz	r0, 8011a98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011a7e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	dd08      	ble.n	8011a98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011a86:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8011a8a:	2d00      	cmp	r5, #0
 8011a8c:	dd04      	ble.n	8011a98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011a8e:	4a2b      	ldr	r2, [pc, #172]	; (8011b3c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8011a90:	7812      	ldrb	r2, [r2, #0]
 8011a92:	b11a      	cbz	r2, 8011a9c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8011a94:	2a01      	cmp	r2, #1
 8011a96:	d029      	beq.n	8011aec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8011a98:	b004      	add	sp, #16
 8011a9a:	bd70      	pop	{r4, r5, r6, pc}
 8011a9c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011aa0:	441d      	add	r5, r3
 8011aa2:	b2ad      	uxth	r5, r5
 8011aa4:	b22e      	sxth	r6, r5
 8011aa6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8011aaa:	42b3      	cmp	r3, r6
 8011aac:	daf4      	bge.n	8011a98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011aae:	6823      	ldr	r3, [r4, #0]
 8011ab0:	4669      	mov	r1, sp
 8011ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ab4:	4620      	mov	r0, r4
 8011ab6:	4798      	blx	r3
 8011ab8:	b940      	cbnz	r0, 8011acc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8011aba:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8011abe:	2b01      	cmp	r3, #1
 8011ac0:	d004      	beq.n	8011acc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	105b      	asrs	r3, r3, #1
 8011ac6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011aca:	e7f0      	b.n	8011aae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8011acc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011ad0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011ad4:	4413      	add	r3, r2
 8011ad6:	b29b      	uxth	r3, r3
 8011ad8:	441a      	add	r2, r3
 8011ada:	b212      	sxth	r2, r2
 8011adc:	4296      	cmp	r6, r2
 8011ade:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011ae2:	dae0      	bge.n	8011aa6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8011ae4:	1aeb      	subs	r3, r5, r3
 8011ae6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011aea:	e7dc      	b.n	8011aa6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8011aec:	f8bd 5000 	ldrh.w	r5, [sp]
 8011af0:	441d      	add	r5, r3
 8011af2:	b2ad      	uxth	r5, r5
 8011af4:	b22e      	sxth	r6, r5
 8011af6:	f9bd 3000 	ldrsh.w	r3, [sp]
 8011afa:	42b3      	cmp	r3, r6
 8011afc:	dacc      	bge.n	8011a98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011afe:	6823      	ldr	r3, [r4, #0]
 8011b00:	4669      	mov	r1, sp
 8011b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b04:	4620      	mov	r0, r4
 8011b06:	4798      	blx	r3
 8011b08:	b940      	cbnz	r0, 8011b1c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8011b0a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011b0e:	2b01      	cmp	r3, #1
 8011b10:	d004      	beq.n	8011b1c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8011b12:	3301      	adds	r3, #1
 8011b14:	105b      	asrs	r3, r3, #1
 8011b16:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011b1a:	e7f0      	b.n	8011afe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8011b1c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011b20:	f8bd 3000 	ldrh.w	r3, [sp]
 8011b24:	4413      	add	r3, r2
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	441a      	add	r2, r3
 8011b2a:	b212      	sxth	r2, r2
 8011b2c:	4296      	cmp	r6, r2
 8011b2e:	f8ad 3000 	strh.w	r3, [sp]
 8011b32:	dae0      	bge.n	8011af6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8011b34:	1aeb      	subs	r3, r5, r3
 8011b36:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011b3a:	e7dc      	b.n	8011af6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8011b3c:	20014608 	.word	0x20014608

08011b40 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8011b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b42:	6803      	ldr	r3, [r0, #0]
 8011b44:	4604      	mov	r4, r0
 8011b46:	4601      	mov	r1, r0
 8011b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b4a:	4668      	mov	r0, sp
 8011b4c:	4798      	blx	r3
 8011b4e:	2100      	movs	r1, #0
 8011b50:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8011b54:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8011b58:	9102      	str	r1, [sp, #8]
 8011b5a:	4668      	mov	r0, sp
 8011b5c:	a902      	add	r1, sp, #8
 8011b5e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8011b62:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011b66:	f7fe f943 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 8011b6a:	6823      	ldr	r3, [r4, #0]
 8011b6c:	4669      	mov	r1, sp
 8011b6e:	691b      	ldr	r3, [r3, #16]
 8011b70:	4620      	mov	r0, r4
 8011b72:	4798      	blx	r3
 8011b74:	b004      	add	sp, #16
 8011b76:	bd10      	pop	{r4, pc}

08011b78 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8011b78:	2101      	movs	r1, #1
 8011b7a:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8011b7e:	490b      	ldr	r1, [pc, #44]	; (8011bac <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8011b80:	6001      	str	r1, [r0, #0]
 8011b82:	2200      	movs	r2, #0
 8011b84:	21ff      	movs	r1, #255	; 0xff
 8011b86:	8082      	strh	r2, [r0, #4]
 8011b88:	80c2      	strh	r2, [r0, #6]
 8011b8a:	8102      	strh	r2, [r0, #8]
 8011b8c:	8142      	strh	r2, [r0, #10]
 8011b8e:	8182      	strh	r2, [r0, #12]
 8011b90:	81c2      	strh	r2, [r0, #14]
 8011b92:	8202      	strh	r2, [r0, #16]
 8011b94:	8242      	strh	r2, [r0, #18]
 8011b96:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8011b9a:	61c2      	str	r2, [r0, #28]
 8011b9c:	8402      	strh	r2, [r0, #32]
 8011b9e:	8442      	strh	r2, [r0, #34]	; 0x22
 8011ba0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8011ba4:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8011ba8:	6282      	str	r2, [r0, #40]	; 0x28
 8011baa:	4770      	bx	lr
 8011bac:	080294ac 	.word	0x080294ac

08011bb0 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8011bb0:	f101 0364 	add.w	r3, r1, #100	; 0x64
 8011bb4:	4602      	mov	r2, r0
 8011bb6:	cb03      	ldmia	r3!, {r0, r1}
 8011bb8:	6010      	str	r0, [r2, #0]
 8011bba:	6051      	str	r1, [r2, #4]
 8011bbc:	4610      	mov	r0, r2
 8011bbe:	4770      	bx	lr

08011bc0 <_ZN8touchgfx4LineD1Ev>:
 8011bc0:	4770      	bx	lr

08011bc2 <_ZN8touchgfx4LineD0Ev>:
 8011bc2:	b510      	push	{r4, lr}
 8011bc4:	2170      	movs	r1, #112	; 0x70
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	f014 ff15 	bl	80269f6 <_ZdlPvj>
 8011bcc:	4620      	mov	r0, r4
 8011bce:	bd10      	pop	{r4, pc}

08011bd0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8011bd0:	6800      	ldr	r0, [r0, #0]
 8011bd2:	2800      	cmp	r0, #0
 8011bd4:	bfb9      	ittee	lt
 8011bd6:	2320      	movlt	r3, #32
 8011bd8:	fb90 f0f3 	sdivlt	r0, r0, r3
 8011bdc:	301f      	addge	r0, #31
 8011bde:	1140      	asrge	r0, r0, #5
 8011be0:	4770      	bx	lr

08011be2 <_ZNK8touchgfx4Line17invalidateContentEv>:
 8011be2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be6:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8011bea:	b089      	sub	sp, #36	; 0x24
 8011bec:	4604      	mov	r4, r0
 8011bee:	b353      	cbz	r3, 8011c46 <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 8011bf0:	6803      	ldr	r3, [r0, #0]
 8011bf2:	4601      	mov	r1, r0
 8011bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011bf6:	a802      	add	r0, sp, #8
 8011bf8:	4798      	blx	r3
 8011bfa:	2220      	movs	r2, #32
 8011bfc:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 8011c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c02:	fb9a f0f2 	sdiv	r0, sl, r2
 8011c06:	fb91 f5f2 	sdiv	r5, r1, r2
 8011c0a:	1b40      	subs	r0, r0, r5
 8011c0c:	2800      	cmp	r0, #0
 8011c0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011c10:	fb93 f6f2 	sdiv	r6, r3, r2
 8011c14:	bfb8      	it	lt
 8011c16:	4240      	neglt	r0, r0
 8011c18:	0076      	lsls	r6, r6, #1
 8011c1a:	4286      	cmp	r6, r0
 8011c1c:	f8d4 b000 	ldr.w	fp, [r4]
 8011c20:	dc0c      	bgt.n	8011c3c <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 8011c22:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011c24:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 8011c28:	fb95 f0f2 	sdiv	r0, r5, r2
 8011c2c:	fb98 f7f2 	sdiv	r7, r8, r2
 8011c30:	1bc0      	subs	r0, r0, r7
 8011c32:	2800      	cmp	r0, #0
 8011c34:	bfb8      	it	lt
 8011c36:	4240      	neglt	r0, r0
 8011c38:	4286      	cmp	r6, r0
 8011c3a:	dd07      	ble.n	8011c4c <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 8011c3c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011c40:	a902      	add	r1, sp, #8
 8011c42:	4620      	mov	r0, r4
 8011c44:	4798      	blx	r3
 8011c46:	b009      	add	sp, #36	; 0x24
 8011c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	2002      	movs	r0, #2
 8011c50:	f10d 0920 	add.w	r9, sp, #32
 8011c54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011c58:	4103      	asrs	r3, r0
 8011c5a:	f849 3d08 	str.w	r3, [r9, #-8]!
 8011c5e:	eb01 060a 	add.w	r6, r1, sl
 8011c62:	eb08 0705 	add.w	r7, r8, r5
 8011c66:	fb96 f6f0 	sdiv	r6, r6, r0
 8011c6a:	fb97 f7f0 	sdiv	r7, r7, r0
 8011c6e:	4648      	mov	r0, r9
 8011c70:	9101      	str	r1, [sp, #4]
 8011c72:	b236      	sxth	r6, r6
 8011c74:	b23f      	sxth	r7, r7
 8011c76:	fb96 f6f2 	sdiv	r6, r6, r2
 8011c7a:	fb97 f7f2 	sdiv	r7, r7, r2
 8011c7e:	f7ff ffa7 	bl	8011bd0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8011c82:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011c86:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8011c8a:	9901      	ldr	r1, [sp, #4]
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	fa1f fe87 	uxth.w	lr, r7
 8011c92:	fa1f fc86 	uxth.w	ip, r6
 8011c96:	eba1 0a0a 	sub.w	sl, r1, sl
 8011c9a:	b280      	uxth	r0, r0
 8011c9c:	da54      	bge.n	8011d48 <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 8011c9e:	ebac 0100 	sub.w	r1, ip, r0
 8011ca2:	b289      	uxth	r1, r1
 8011ca4:	4460      	add	r0, ip
 8011ca6:	f1ba 0f00 	cmp.w	sl, #0
 8011caa:	b20e      	sxth	r6, r1
 8011cac:	b280      	uxth	r0, r0
 8011cae:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8011cb2:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 8011cb6:	da29      	bge.n	8011d0c <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 8011cb8:	eba8 0505 	sub.w	r5, r8, r5
 8011cbc:	2d00      	cmp	r5, #0
 8011cbe:	da2a      	bge.n	8011d16 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8011cc0:	fa1f f88a 	uxth.w	r8, sl
 8011cc4:	eba0 0008 	sub.w	r0, r0, r8
 8011cc8:	fa1f f58c 	uxth.w	r5, ip
 8011ccc:	4443      	add	r3, r8
 8011cce:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011cd2:	1a59      	subs	r1, r3, r1
 8011cd4:	ebae 0005 	sub.w	r0, lr, r5
 8011cd8:	f8ad a010 	strh.w	sl, [sp, #16]
 8011cdc:	f8ad c012 	strh.w	ip, [sp, #18]
 8011ce0:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011ce4:	f8ad 6018 	strh.w	r6, [sp, #24]
 8011ce8:	f8ad 701a 	strh.w	r7, [sp, #26]
 8011cec:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011cf0:	442a      	add	r2, r5
 8011cf2:	eba2 0e0e 	sub.w	lr, r2, lr
 8011cf6:	f8ad e01e 	strh.w	lr, [sp, #30]
 8011cfa:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011cfe:	a904      	add	r1, sp, #16
 8011d00:	4620      	mov	r0, r4
 8011d02:	4798      	blx	r3
 8011d04:	6823      	ldr	r3, [r4, #0]
 8011d06:	4649      	mov	r1, r9
 8011d08:	691b      	ldr	r3, [r3, #16]
 8011d0a:	e79a      	b.n	8011c42 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 8011d0c:	d003      	beq.n	8011d16 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8011d0e:	eba8 0505 	sub.w	r5, r8, r5
 8011d12:	2d00      	cmp	r5, #0
 8011d14:	dcd4      	bgt.n	8011cc0 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 8011d16:	fa1f f88a 	uxth.w	r8, sl
 8011d1a:	4443      	add	r3, r8
 8011d1c:	fa1f f58c 	uxth.w	r5, ip
 8011d20:	1a59      	subs	r1, r3, r1
 8011d22:	eba0 0008 	sub.w	r0, r0, r8
 8011d26:	ebae 0305 	sub.w	r3, lr, r5
 8011d2a:	f8ad 6010 	strh.w	r6, [sp, #16]
 8011d2e:	f8ad c012 	strh.w	ip, [sp, #18]
 8011d32:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011d36:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011d3a:	f8ad a018 	strh.w	sl, [sp, #24]
 8011d3e:	f8ad 701a 	strh.w	r7, [sp, #26]
 8011d42:	f8ad 001c 	strh.w	r0, [sp, #28]
 8011d46:	e7d3      	b.n	8011cf0 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 8011d48:	ebae 0100 	sub.w	r1, lr, r0
 8011d4c:	b289      	uxth	r1, r1
 8011d4e:	4470      	add	r0, lr
 8011d50:	f1ba 0f00 	cmp.w	sl, #0
 8011d54:	b20f      	sxth	r7, r1
 8011d56:	b280      	uxth	r0, r0
 8011d58:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 8011d5c:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8011d60:	da20      	bge.n	8011da4 <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 8011d62:	eba8 0505 	sub.w	r5, r8, r5
 8011d66:	2d00      	cmp	r5, #0
 8011d68:	da21      	bge.n	8011dae <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 8011d6a:	fa1f f88e 	uxth.w	r8, lr
 8011d6e:	fa1f f58a 	uxth.w	r5, sl
 8011d72:	4443      	add	r3, r8
 8011d74:	442a      	add	r2, r5
 8011d76:	f8ad e010 	strh.w	lr, [sp, #16]
 8011d7a:	1b40      	subs	r0, r0, r5
 8011d7c:	ebac 0e08 	sub.w	lr, ip, r8
 8011d80:	1a51      	subs	r1, r2, r1
 8011d82:	eba3 0c0c 	sub.w	ip, r3, ip
 8011d86:	f8ad a012 	strh.w	sl, [sp, #18]
 8011d8a:	f8ad e014 	strh.w	lr, [sp, #20]
 8011d8e:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011d92:	f8ad 6018 	strh.w	r6, [sp, #24]
 8011d96:	f8ad 701a 	strh.w	r7, [sp, #26]
 8011d9a:	f8ad c01c 	strh.w	ip, [sp, #28]
 8011d9e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8011da2:	e7aa      	b.n	8011cfa <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 8011da4:	d003      	beq.n	8011dae <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 8011da6:	eba8 0505 	sub.w	r5, r8, r5
 8011daa:	2d00      	cmp	r5, #0
 8011dac:	dcdd      	bgt.n	8011d6a <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 8011dae:	fa1f f58e 	uxth.w	r5, lr
 8011db2:	fa1f f88a 	uxth.w	r8, sl
 8011db6:	4442      	add	r2, r8
 8011db8:	442b      	add	r3, r5
 8011dba:	f8ad 7012 	strh.w	r7, [sp, #18]
 8011dbe:	1a51      	subs	r1, r2, r1
 8011dc0:	ebac 0705 	sub.w	r7, ip, r5
 8011dc4:	eba0 0008 	sub.w	r0, r0, r8
 8011dc8:	eba3 0c0c 	sub.w	ip, r3, ip
 8011dcc:	f8ad e010 	strh.w	lr, [sp, #16]
 8011dd0:	f8ad 7014 	strh.w	r7, [sp, #20]
 8011dd4:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011dd8:	f8ad 6018 	strh.w	r6, [sp, #24]
 8011ddc:	f8ad a01a 	strh.w	sl, [sp, #26]
 8011de0:	f8ad c01c 	strh.w	ip, [sp, #28]
 8011de4:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011de8:	e787      	b.n	8011cfa <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

08011dea <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8011dea:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8011dee:	bf2c      	ite	cs
 8011df0:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8011df4:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8011df8:	2300      	movs	r3, #0
 8011dfa:	1899      	adds	r1, r3, r2
 8011dfc:	4288      	cmp	r0, r1
 8011dfe:	bf24      	itt	cs
 8011e00:	1853      	addcs	r3, r2, r1
 8011e02:	1a40      	subcs	r0, r0, r1
 8011e04:	0892      	lsrs	r2, r2, #2
 8011e06:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8011e0a:	d1f6      	bne.n	8011dfa <_ZN8touchgfx7CWRUtil5isqrtEm+0x10>
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	4770      	bx	lr

08011e10 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8011e10:	b510      	push	{r4, lr}
 8011e12:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8011e16:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8011e1a:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8011e1e:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8011e22:	13a4      	asrs	r4, r4, #14
 8011e24:	139b      	asrs	r3, r3, #14
 8011e26:	429c      	cmp	r4, r3
 8011e28:	bfb8      	it	lt
 8011e2a:	461c      	movlt	r4, r3
 8011e2c:	2c01      	cmp	r4, #1
 8011e2e:	dd07      	ble.n	8011e40 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8011e30:	fb91 f1f4 	sdiv	r1, r1, r4
 8011e34:	fb90 f0f4 	sdiv	r0, r0, r4
 8011e38:	f7ff ffea 	bl	8011e10 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8011e3c:	4360      	muls	r0, r4
 8011e3e:	bd10      	pop	{r4, pc}
 8011e40:	4340      	muls	r0, r0
 8011e42:	fb01 0001 	mla	r0, r1, r1, r0
 8011e46:	f7ff ffd0 	bl	8011dea <_ZN8touchgfx7CWRUtil5isqrtEm>
 8011e4a:	e7f8      	b.n	8011e3e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08011e4c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8011e4c:	2800      	cmp	r0, #0
 8011e4e:	b508      	push	{r3, lr}
 8011e50:	da05      	bge.n	8011e5e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8011e52:	4240      	negs	r0, r0
 8011e54:	f7ff fffa 	bl	8011e4c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8011e58:	4240      	negs	r0, r0
 8011e5a:	b240      	sxtb	r0, r0
 8011e5c:	bd08      	pop	{r3, pc}
 8011e5e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8011e62:	dc11      	bgt.n	8011e88 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8011e64:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8011e68:	dd09      	ble.n	8011e7e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8011e6a:	4340      	muls	r0, r0
 8011e6c:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8011e70:	f7ff ffbb 	bl	8011dea <_ZN8touchgfx7CWRUtil5isqrtEm>
 8011e74:	f7ff ffea 	bl	8011e4c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8011e78:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8011e7c:	e7ed      	b.n	8011e5a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8011e7e:	3003      	adds	r0, #3
 8011e80:	10c0      	asrs	r0, r0, #3
 8011e82:	4b02      	ldr	r3, [pc, #8]	; (8011e8c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8011e84:	5618      	ldrsb	r0, [r3, r0]
 8011e86:	e7e9      	b.n	8011e5c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8011e88:	2000      	movs	r0, #0
 8011e8a:	e7e7      	b.n	8011e5c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8011e8c:	0802951c 	.word	0x0802951c

08011e90 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8011e90:	4281      	cmp	r1, r0
 8011e92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e94:	460c      	mov	r4, r1
 8011e96:	4615      	mov	r5, r2
 8011e98:	dd07      	ble.n	8011eaa <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 8011e9a:	4601      	mov	r1, r0
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	f7ff fff7 	bl	8011e90 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8011ea2:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8011ea6:	b003      	add	sp, #12
 8011ea8:	bd30      	pop	{r4, r5, pc}
 8011eaa:	f7ff ffb1 	bl	8011e10 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8011eae:	6028      	str	r0, [r5, #0]
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	d0f8      	beq.n	8011ea6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 8011eb4:	4602      	mov	r2, r0
 8011eb6:	ab01      	add	r3, sp, #4
 8011eb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	f004 ff2f 	bl	8016d20 <_ZN8touchgfx6muldivElllRl>
 8011ec2:	f7ff ffc3 	bl	8011e4c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8011ec6:	e7ee      	b.n	8011ea6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

08011ec8 <_ZN8touchgfx4LineC1Ev>:
 8011ec8:	b510      	push	{r4, lr}
 8011eca:	4604      	mov	r4, r0
 8011ecc:	f7ff fe54 	bl	8011b78 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8011ed0:	4b0c      	ldr	r3, [pc, #48]	; (8011f04 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8011ed2:	6023      	str	r3, [r4, #0]
 8011ed4:	2220      	movs	r2, #32
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	63e2      	str	r2, [r4, #60]	; 0x3c
 8011eda:	2212      	movs	r2, #18
 8011edc:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8011ee0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8011ee4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8011ee8:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8011eec:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8011ef0:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8011ef4:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8011ef8:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8011efc:	66e2      	str	r2, [r4, #108]	; 0x6c
 8011efe:	60a3      	str	r3, [r4, #8]
 8011f00:	4620      	mov	r0, r4
 8011f02:	bd10      	pop	{r4, pc}
 8011f04:	08029580 	.word	0x08029580

08011f08 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8011f08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f0c:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8011f0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011f10:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8011f12:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8011f14:	1aff      	subs	r7, r7, r3
 8011f16:	4604      	mov	r4, r0
 8011f18:	eba5 0502 	sub.w	r5, r5, r2
 8011f1c:	d142      	bne.n	8011fa4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 8011f1e:	b955      	cbnz	r5, 8011f36 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 8011f20:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
 8011f24:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8011f28:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
 8011f2c:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
 8011f30:	b002      	add	sp, #8
 8011f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f36:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 8011f3a:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 8011f3e:	4629      	mov	r1, r5
 8011f40:	4642      	mov	r2, r8
 8011f42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011f44:	f004 ff0b 	bl	8016d5e <_ZN8touchgfx6muldivElll>
 8011f48:	2502      	movs	r5, #2
 8011f4a:	4642      	mov	r2, r8
 8011f4c:	fb90 f6f5 	sdiv	r6, r0, r5
 8011f50:	4639      	mov	r1, r7
 8011f52:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011f54:	f004 ff03 	bl	8016d5e <_ZN8touchgfx6muldivElll>
 8011f58:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 8011f5c:	fb90 f5f5 	sdiv	r5, r0, r5
 8011f60:	f1b9 0f00 	cmp.w	r9, #0
 8011f64:	d067      	beq.n	8012036 <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 8011f66:	f1b9 0f02 	cmp.w	r9, #2
 8011f6a:	d878      	bhi.n	801205e <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 8011f6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011f6e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011f70:	1b93      	subs	r3, r2, r6
 8011f72:	1b5b      	subs	r3, r3, r5
 8011f74:	6463      	str	r3, [r4, #68]	; 0x44
 8011f76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011f78:	18e9      	adds	r1, r5, r3
 8011f7a:	1b89      	subs	r1, r1, r6
 8011f7c:	6561      	str	r1, [r4, #84]	; 0x54
 8011f7e:	1b81      	subs	r1, r0, r6
 8011f80:	4429      	add	r1, r5
 8011f82:	64a1      	str	r1, [r4, #72]	; 0x48
 8011f84:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011f86:	4430      	add	r0, r6
 8011f88:	186f      	adds	r7, r5, r1
 8011f8a:	4432      	add	r2, r6
 8011f8c:	1b49      	subs	r1, r1, r5
 8011f8e:	4437      	add	r7, r6
 8011f90:	4428      	add	r0, r5
 8011f92:	4431      	add	r1, r6
 8011f94:	1b52      	subs	r2, r2, r5
 8011f96:	1b5b      	subs	r3, r3, r5
 8011f98:	65a7      	str	r7, [r4, #88]	; 0x58
 8011f9a:	64e0      	str	r0, [r4, #76]	; 0x4c
 8011f9c:	65e1      	str	r1, [r4, #92]	; 0x5c
 8011f9e:	6522      	str	r2, [r4, #80]	; 0x50
 8011fa0:	1b9b      	subs	r3, r3, r6
 8011fa2:	e05b      	b.n	801205c <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 8011fa4:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8011fa8:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8011fac:	2d00      	cmp	r5, #0
 8011fae:	d0c6      	beq.n	8011f3e <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8011fb0:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8011fb4:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8011fb8:	fb93 f2f8 	sdiv	r2, r3, r8
 8011fbc:	fb08 3312 	mls	r3, r8, r2, r3
 8011fc0:	b353      	cbz	r3, 8012018 <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 8011fc2:	fb98 f2f3 	sdiv	r2, r8, r3
 8011fc6:	fb03 8812 	mls	r8, r3, r2, r8
 8011fca:	f1b8 0f00 	cmp.w	r8, #0
 8011fce:	d1f3      	bne.n	8011fb8 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 8011fd0:	2b01      	cmp	r3, #1
 8011fd2:	bf1c      	itt	ne
 8011fd4:	fb95 f5f3 	sdivne	r5, r5, r3
 8011fd8:	fb97 f7f3 	sdivne	r7, r7, r3
 8011fdc:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 8011fe0:	f24b 5104 	movw	r1, #46340	; 0xb504
 8011fe4:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 8011fe8:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8011fec:	428b      	cmp	r3, r1
 8011fee:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8011ff2:	4608      	mov	r0, r1
 8011ff4:	dd01      	ble.n	8011ffa <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 8011ff6:	428a      	cmp	r2, r1
 8011ff8:	dc10      	bgt.n	801201c <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 8011ffa:	fb90 f3f3 	sdiv	r3, r0, r3
 8011ffe:	fb90 f2f2 	sdiv	r2, r0, r2
 8012002:	4293      	cmp	r3, r2
 8012004:	bfa8      	it	ge
 8012006:	4613      	movge	r3, r2
 8012008:	435f      	muls	r7, r3
 801200a:	435d      	muls	r5, r3
 801200c:	4629      	mov	r1, r5
 801200e:	4638      	mov	r0, r7
 8012010:	f7ff fefe 	bl	8011e10 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8012014:	4680      	mov	r8, r0
 8012016:	e792      	b.n	8011f3e <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8012018:	4643      	mov	r3, r8
 801201a:	e7d9      	b.n	8011fd0 <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 801201c:	fb93 f3f1 	sdiv	r3, r3, r1
 8012020:	fb92 f2f1 	sdiv	r2, r2, r1
 8012024:	4293      	cmp	r3, r2
 8012026:	bfcc      	ite	gt
 8012028:	3301      	addgt	r3, #1
 801202a:	1c53      	addle	r3, r2, #1
 801202c:	fb97 f7f3 	sdiv	r7, r7, r3
 8012030:	fb95 f5f3 	sdiv	r5, r5, r3
 8012034:	e7ea      	b.n	801200c <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 8012036:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012038:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801203a:	1b93      	subs	r3, r2, r6
 801203c:	6463      	str	r3, [r4, #68]	; 0x44
 801203e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012040:	18e9      	adds	r1, r5, r3
 8012042:	6561      	str	r1, [r4, #84]	; 0x54
 8012044:	1b81      	subs	r1, r0, r6
 8012046:	64a1      	str	r1, [r4, #72]	; 0x48
 8012048:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801204a:	4430      	add	r0, r6
 801204c:	186f      	adds	r7, r5, r1
 801204e:	4432      	add	r2, r6
 8012050:	1b49      	subs	r1, r1, r5
 8012052:	65a7      	str	r7, [r4, #88]	; 0x58
 8012054:	64e0      	str	r0, [r4, #76]	; 0x4c
 8012056:	65e1      	str	r1, [r4, #92]	; 0x5c
 8012058:	6522      	str	r2, [r4, #80]	; 0x50
 801205a:	1b5b      	subs	r3, r3, r5
 801205c:	6623      	str	r3, [r4, #96]	; 0x60
 801205e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8012060:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012062:	9200      	str	r2, [sp, #0]
 8012064:	9301      	str	r3, [sp, #4]
 8012066:	f104 0148 	add.w	r1, r4, #72	; 0x48
 801206a:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 801206e:	680f      	ldr	r7, [r1, #0]
 8012070:	9800      	ldr	r0, [sp, #0]
 8012072:	42ba      	cmp	r2, r7
 8012074:	bfa8      	it	ge
 8012076:	463a      	movge	r2, r7
 8012078:	4287      	cmp	r7, r0
 801207a:	bfc8      	it	gt
 801207c:	9700      	strgt	r7, [sp, #0]
 801207e:	690f      	ldr	r7, [r1, #16]
 8012080:	9801      	ldr	r0, [sp, #4]
 8012082:	42bb      	cmp	r3, r7
 8012084:	bfa8      	it	ge
 8012086:	463b      	movge	r3, r7
 8012088:	3104      	adds	r1, #4
 801208a:	4287      	cmp	r7, r0
 801208c:	bfc8      	it	gt
 801208e:	9701      	strgt	r7, [sp, #4]
 8012090:	458c      	cmp	ip, r1
 8012092:	d1ec      	bne.n	801206e <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8012094:	4668      	mov	r0, sp
 8012096:	2720      	movs	r7, #32
 8012098:	fb92 f8f7 	sdiv	r8, r2, r7
 801209c:	fb93 f7f7 	sdiv	r7, r3, r7
 80120a0:	f7ff fd96 	bl	8011bd0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80120a4:	4682      	mov	sl, r0
 80120a6:	a801      	add	r0, sp, #4
 80120a8:	f7ff fd92 	bl	8011bd0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80120ac:	ebaa 0208 	sub.w	r2, sl, r8
 80120b0:	1bc0      	subs	r0, r0, r7
 80120b2:	f1b9 0f01 	cmp.w	r9, #1
 80120b6:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
 80120ba:	f8a4 7066 	strh.w	r7, [r4, #102]	; 0x66
 80120be:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
 80120c2:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 80120c6:	f47f af33 	bne.w	8011f30 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 80120ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80120cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80120ce:	1b83      	subs	r3, r0, r6
 80120d0:	6463      	str	r3, [r4, #68]	; 0x44
 80120d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80120d4:	18ea      	adds	r2, r5, r3
 80120d6:	6562      	str	r2, [r4, #84]	; 0x54
 80120d8:	1b8a      	subs	r2, r1, r6
 80120da:	64a2      	str	r2, [r4, #72]	; 0x48
 80120dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80120de:	4431      	add	r1, r6
 80120e0:	18af      	adds	r7, r5, r2
 80120e2:	4406      	add	r6, r0
 80120e4:	1b52      	subs	r2, r2, r5
 80120e6:	1b5d      	subs	r5, r3, r5
 80120e8:	65a7      	str	r7, [r4, #88]	; 0x58
 80120ea:	64e1      	str	r1, [r4, #76]	; 0x4c
 80120ec:	65e2      	str	r2, [r4, #92]	; 0x5c
 80120ee:	6526      	str	r6, [r4, #80]	; 0x50
 80120f0:	6625      	str	r5, [r4, #96]	; 0x60
 80120f2:	e71d      	b.n	8011f30 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

080120f4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 80120f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80120f6:	428b      	cmp	r3, r1
 80120f8:	d102      	bne.n	8012100 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 80120fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80120fc:	4293      	cmp	r3, r2
 80120fe:	d003      	beq.n	8012108 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8012100:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
 8012104:	f7ff bf00 	b.w	8011f08 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8012108:	4770      	bx	lr

0801210a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801210a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801210c:	428b      	cmp	r3, r1
 801210e:	d102      	bne.n	8012116 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8012110:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8012112:	4293      	cmp	r3, r2
 8012114:	d003      	beq.n	801211e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8012116:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 801211a:	f7ff bef5 	b.w	8011f08 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801211e:	4770      	bx	lr

08012120 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8012120:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 8012124:	f7ff bef0 	b.w	8011f08 <_ZN8touchgfx4Line17updateCachedShapeEv>

08012128 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8012128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801212c:	b0a0      	sub	sp, #128	; 0x80
 801212e:	4604      	mov	r4, r0
 8012130:	460a      	mov	r2, r1
 8012132:	4601      	mov	r1, r0
 8012134:	a804      	add	r0, sp, #16
 8012136:	f014 fa1d 	bl	8026574 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801213a:	2300      	movs	r3, #0
 801213c:	9301      	str	r3, [sp, #4]
 801213e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8012142:	2b01      	cmp	r3, #1
 8012144:	d17c      	bne.n	8012240 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 8012146:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012148:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801214a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801214c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801214e:	1ac0      	subs	r0, r0, r3
 8012150:	eba1 0102 	sub.w	r1, r1, r2
 8012154:	d437      	bmi.n	80121c6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 8012156:	2900      	cmp	r1, #0
 8012158:	aa01      	add	r2, sp, #4
 801215a:	db2e      	blt.n	80121ba <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 801215c:	f7ff fe98 	bl	8011e90 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8012160:	f100 065a 	add.w	r6, r0, #90	; 0x5a
 8012164:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8012166:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012168:	a804      	add	r0, sp, #16
 801216a:	f014 fb83 	bl	8026874 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801216e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8012170:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012172:	a804      	add	r0, sp, #16
 8012174:	f014 fbcb 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8012178:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 801217a:	2db3      	cmp	r5, #179	; 0xb3
 801217c:	dc33      	bgt.n	80121e6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 801217e:	eba6 0805 	sub.w	r8, r6, r5
 8012182:	4640      	mov	r0, r8
 8012184:	f7fe fe94 	bl	8010eb0 <_ZN8touchgfx7CWRUtil4sineEi>
 8012188:	a902      	add	r1, sp, #8
 801218a:	9002      	str	r0, [sp, #8]
 801218c:	a801      	add	r0, sp, #4
 801218e:	f7fe fe83 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8012192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012194:	1847      	adds	r7, r0, r1
 8012196:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 801219a:	f7fe fe89 	bl	8010eb0 <_ZN8touchgfx7CWRUtil4sineEi>
 801219e:	a903      	add	r1, sp, #12
 80121a0:	9003      	str	r0, [sp, #12]
 80121a2:	a801      	add	r0, sp, #4
 80121a4:	f7fe fe78 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80121a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80121aa:	4639      	mov	r1, r7
 80121ac:	1a12      	subs	r2, r2, r0
 80121ae:	a804      	add	r0, sp, #16
 80121b0:	f014 fbad 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80121b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80121b6:	441d      	add	r5, r3
 80121b8:	e7df      	b.n	801217a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 80121ba:	4249      	negs	r1, r1
 80121bc:	f7ff fe68 	bl	8011e90 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80121c0:	f1c0 065a 	rsb	r6, r0, #90	; 0x5a
 80121c4:	e7ce      	b.n	8012164 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 80121c6:	2900      	cmp	r1, #0
 80121c8:	f1c0 0000 	rsb	r0, r0, #0
 80121cc:	aa01      	add	r2, sp, #4
 80121ce:	db04      	blt.n	80121da <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 80121d0:	f7ff fe5e 	bl	8011e90 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80121d4:	f5c0 7687 	rsb	r6, r0, #270	; 0x10e
 80121d8:	e7c4      	b.n	8012164 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 80121da:	4249      	negs	r1, r1
 80121dc:	f7ff fe58 	bl	8011e90 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80121e0:	f500 7687 	add.w	r6, r0, #270	; 0x10e
 80121e4:	e7be      	b.n	8012164 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 80121e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80121e8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80121ea:	a804      	add	r0, sp, #16
 80121ec:	f014 fb8f 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80121f0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80121f2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80121f4:	a804      	add	r0, sp, #16
 80121f6:	f014 fb8a 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80121fa:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80121fc:	f1c5 05b4 	rsb	r5, r5, #180	; 0xb4
 8012200:	2d00      	cmp	r5, #0
 8012202:	dd31      	ble.n	8012268 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 8012204:	eb05 0806 	add.w	r8, r5, r6
 8012208:	4640      	mov	r0, r8
 801220a:	f7fe fe51 	bl	8010eb0 <_ZN8touchgfx7CWRUtil4sineEi>
 801220e:	a902      	add	r1, sp, #8
 8012210:	9002      	str	r0, [sp, #8]
 8012212:	a801      	add	r0, sp, #4
 8012214:	f7fe fe40 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8012218:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801221a:	1847      	adds	r7, r0, r1
 801221c:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8012220:	f7fe fe46 	bl	8010eb0 <_ZN8touchgfx7CWRUtil4sineEi>
 8012224:	a903      	add	r1, sp, #12
 8012226:	9003      	str	r0, [sp, #12]
 8012228:	a801      	add	r0, sp, #4
 801222a:	f7fe fe35 	bl	8010e98 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801222e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012230:	4639      	mov	r1, r7
 8012232:	1a12      	subs	r2, r2, r0
 8012234:	a804      	add	r0, sp, #16
 8012236:	f014 fb6a 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801223a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801223c:	1aed      	subs	r5, r5, r3
 801223e:	e7df      	b.n	8012200 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 8012240:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8012242:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012244:	a804      	add	r0, sp, #16
 8012246:	f014 fb15 	bl	8026874 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801224a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801224c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801224e:	a804      	add	r0, sp, #16
 8012250:	f014 fb5d 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8012254:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012256:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8012258:	a804      	add	r0, sp, #16
 801225a:	f014 fb58 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801225e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012260:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8012262:	a804      	add	r0, sp, #16
 8012264:	f014 fb53 	bl	802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8012268:	21ff      	movs	r1, #255	; 0xff
 801226a:	a804      	add	r0, sp, #16
 801226c:	f014 fa3e 	bl	80266ec <_ZN8touchgfx6Canvas6renderEh>
 8012270:	4b04      	ldr	r3, [pc, #16]	; (8012284 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x15c>)
 8012272:	9304      	str	r3, [sp, #16]
 8012274:	4604      	mov	r4, r0
 8012276:	a80c      	add	r0, sp, #48	; 0x30
 8012278:	f000 ff74 	bl	8013164 <_ZN8touchgfx7OutlineD1Ev>
 801227c:	4620      	mov	r0, r4
 801227e:	b020      	add	sp, #128	; 0x80
 8012280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012284:	08029c48 	.word	0x08029c48

08012288 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8012288:	b508      	push	{r3, lr}
 801228a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801228e:	b10b      	cbz	r3, 8012294 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 8012290:	f7f0 fe4e 	bl	8002f30 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8012294:	bd08      	pop	{r3, pc}

08012296 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 8012296:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801229a:	4770      	bx	lr

0801229c <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 801229c:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80122a0:	4770      	bx	lr

080122a2 <_ZN8touchgfx13ScalableImageD1Ev>:
 80122a2:	4770      	bx	lr

080122a4 <_ZN8touchgfx13ScalableImageD0Ev>:
 80122a4:	b510      	push	{r4, lr}
 80122a6:	212c      	movs	r1, #44	; 0x2c
 80122a8:	4604      	mov	r4, r0
 80122aa:	f014 fba4 	bl	80269f6 <_ZdlPvj>
 80122ae:	4620      	mov	r0, r4
 80122b0:	bd10      	pop	{r4, pc}

080122b2 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 80122b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122b4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80122b8:	2bff      	cmp	r3, #255	; 0xff
 80122ba:	b085      	sub	sp, #20
 80122bc:	4604      	mov	r4, r0
 80122be:	460d      	mov	r5, r1
 80122c0:	d128      	bne.n	8012314 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 80122c2:	f101 0626 	add.w	r6, r1, #38	; 0x26
 80122c6:	4631      	mov	r1, r6
 80122c8:	4668      	mov	r0, sp
 80122ca:	f006 fc99 	bl	8018c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80122ce:	4630      	mov	r0, r6
 80122d0:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80122d4:	f006 fc2c 	bl	8018b30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80122d8:	4287      	cmp	r7, r0
 80122da:	d11b      	bne.n	8012314 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 80122dc:	4630      	mov	r0, r6
 80122de:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80122e2:	f006 fc59 	bl	8018b98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80122e6:	4287      	cmp	r7, r0
 80122e8:	d114      	bne.n	8012314 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 80122ea:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80122ee:	f8ad 300e 	strh.w	r3, [sp, #14]
 80122f2:	2100      	movs	r1, #0
 80122f4:	466b      	mov	r3, sp
 80122f6:	9102      	str	r1, [sp, #8]
 80122f8:	cb03      	ldmia	r3!, {r0, r1}
 80122fa:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80122fe:	6020      	str	r0, [r4, #0]
 8012300:	6061      	str	r1, [r4, #4]
 8012302:	4620      	mov	r0, r4
 8012304:	4619      	mov	r1, r3
 8012306:	f8ad 200c 	strh.w	r2, [sp, #12]
 801230a:	f7fd fd71 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 801230e:	4620      	mov	r0, r4
 8012310:	b005      	add	sp, #20
 8012312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012314:	2300      	movs	r3, #0
 8012316:	8023      	strh	r3, [r4, #0]
 8012318:	8063      	strh	r3, [r4, #2]
 801231a:	80a3      	strh	r3, [r4, #4]
 801231c:	80e3      	strh	r3, [r4, #6]
 801231e:	e7f6      	b.n	801230e <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x5c>

08012320 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 8012320:	b538      	push	{r3, r4, r5, lr}
 8012322:	2300      	movs	r3, #0
 8012324:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8012328:	8083      	strh	r3, [r0, #4]
 801232a:	80c3      	strh	r3, [r0, #6]
 801232c:	8103      	strh	r3, [r0, #8]
 801232e:	8143      	strh	r3, [r0, #10]
 8012330:	8183      	strh	r3, [r0, #12]
 8012332:	81c3      	strh	r3, [r0, #14]
 8012334:	8203      	strh	r3, [r0, #16]
 8012336:	8243      	strh	r3, [r0, #18]
 8012338:	61c3      	str	r3, [r0, #28]
 801233a:	8403      	strh	r3, [r0, #32]
 801233c:	8443      	strh	r3, [r0, #34]	; 0x22
 801233e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8012342:	2501      	movs	r5, #1
 8012344:	4b08      	ldr	r3, [pc, #32]	; (8012368 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 8012346:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 801234a:	6003      	str	r3, [r0, #0]
 801234c:	880b      	ldrh	r3, [r1, #0]
 801234e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8012350:	23ff      	movs	r3, #255	; 0xff
 8012352:	4604      	mov	r4, r0
 8012354:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8012358:	f000 fe90 	bl	801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801235c:	4b03      	ldr	r3, [pc, #12]	; (801236c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 801235e:	6023      	str	r3, [r4, #0]
 8012360:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 8012364:	4620      	mov	r0, r4
 8012366:	bd38      	pop	{r3, r4, r5, pc}
 8012368:	080297cc 	.word	0x080297cc
 801236c:	080295f8 	.word	0x080295f8

08012370 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8012370:	4603      	mov	r3, r0
 8012372:	3026      	adds	r0, #38	; 0x26
 8012374:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8012378:	b90b      	cbnz	r3, 801237e <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 801237a:	f004 bc43 	b.w	8016c04 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801237e:	f004 bc51 	b.w	8016c24 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08012384 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8012384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012388:	4604      	mov	r4, r0
 801238a:	b0b3      	sub	sp, #204	; 0xcc
 801238c:	469b      	mov	fp, r3
 801238e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012392:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8012396:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 801239a:	ab11      	add	r3, sp, #68	; 0x44
 801239c:	2500      	movs	r5, #0
 801239e:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 80123a2:	4618      	mov	r0, r3
 80123a4:	9206      	str	r2, [sp, #24]
 80123a6:	9511      	str	r5, [sp, #68]	; 0x44
 80123a8:	9307      	str	r3, [sp, #28]
 80123aa:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 80123ae:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 80123b2:	f7fd fd1d 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 80123b6:	9b07      	ldr	r3, [sp, #28]
 80123b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80123bc:	ad13      	add	r5, sp, #76	; 0x4c
 80123be:	e885 0003 	stmia.w	r5, {r0, r1}
 80123c2:	6821      	ldr	r1, [r4, #0]
 80123c4:	4620      	mov	r0, r4
 80123c6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80123c8:	4629      	mov	r1, r5
 80123ca:	47b0      	blx	r6
 80123cc:	4621      	mov	r1, r4
 80123ce:	a815      	add	r0, sp, #84	; 0x54
 80123d0:	f004 fb74 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80123d4:	a815      	add	r0, sp, #84	; 0x54
 80123d6:	f003 f8ab 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80123da:	9b07      	ldr	r3, [sp, #28]
 80123dc:	1d26      	adds	r6, r4, #4
 80123de:	4618      	mov	r0, r3
 80123e0:	4631      	mov	r1, r6
 80123e2:	f003 f8e9 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80123e6:	4628      	mov	r0, r5
 80123e8:	f104 0526 	add.w	r5, r4, #38	; 0x26
 80123ec:	f003 f8a0 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80123f0:	4628      	mov	r0, r5
 80123f2:	f006 fc89 	bl	8018d08 <_ZNK8touchgfx6Bitmap7getDataEv>
 80123f6:	9007      	str	r0, [sp, #28]
 80123f8:	2800      	cmp	r0, #0
 80123fa:	f000 80ce 	beq.w	801259a <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x216>
 80123fe:	f8db 200c 	ldr.w	r2, [fp, #12]
 8012402:	920c      	str	r2, [sp, #48]	; 0x30
 8012404:	f8da 2000 	ldr.w	r2, [sl]
 8012408:	f8db 1000 	ldr.w	r1, [fp]
 801240c:	920d      	str	r2, [sp, #52]	; 0x34
 801240e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8012412:	9109      	str	r1, [sp, #36]	; 0x24
 8012414:	920e      	str	r2, [sp, #56]	; 0x38
 8012416:	f8db 1004 	ldr.w	r1, [fp, #4]
 801241a:	f8da 2008 	ldr.w	r2, [sl, #8]
 801241e:	910a      	str	r1, [sp, #40]	; 0x28
 8012420:	920f      	str	r2, [sp, #60]	; 0x3c
 8012422:	f8db 1008 	ldr.w	r1, [fp, #8]
 8012426:	f8da 200c 	ldr.w	r2, [sl, #12]
 801242a:	910b      	str	r1, [sp, #44]	; 0x2c
 801242c:	9210      	str	r2, [sp, #64]	; 0x40
 801242e:	a90d      	add	r1, sp, #52	; 0x34
 8012430:	4632      	mov	r2, r6
 8012432:	a809      	add	r0, sp, #36	; 0x24
 8012434:	f003 f8a4 	bl	8015580 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8012438:	4632      	mov	r2, r6
 801243a:	a90e      	add	r1, sp, #56	; 0x38
 801243c:	a80a      	add	r0, sp, #40	; 0x28
 801243e:	f003 f89f 	bl	8015580 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8012442:	4632      	mov	r2, r6
 8012444:	a90f      	add	r1, sp, #60	; 0x3c
 8012446:	a80b      	add	r0, sp, #44	; 0x2c
 8012448:	f003 f89a 	bl	8015580 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801244c:	4632      	mov	r2, r6
 801244e:	a910      	add	r1, sp, #64	; 0x40
 8012450:	a80c      	add	r0, sp, #48	; 0x30
 8012452:	f003 f895 	bl	8015580 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8012456:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801245a:	ed97 3a00 	vldr	s6, [r7]
 801245e:	edd7 4a01 	vldr	s9, [r7, #4]
 8012462:	ed99 2a00 	vldr	s4, [r9]
 8012466:	edd8 2a00 	vldr	s5, [r8]
 801246a:	edd9 3a01 	vldr	s7, [r9, #4]
 801246e:	ed98 4a01 	vldr	s8, [r8, #4]
 8012472:	ed99 5a02 	vldr	s10, [r9, #8]
 8012476:	edd8 5a02 	vldr	s11, [r8, #8]
 801247a:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801247e:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8012482:	ed8d 2a20 	vstr	s4, [sp, #128]	; 0x80
 8012486:	eef0 6a67 	vmov.f32	s13, s15
 801248a:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801248e:	edcd 2a21 	vstr	s5, [sp, #132]	; 0x84
 8012492:	eeb0 7a67 	vmov.f32	s14, s15
 8012496:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801249a:	ed8d 3a22 	vstr	s6, [sp, #136]	; 0x88
 801249e:	eeb0 6a67 	vmov.f32	s12, s15
 80124a2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80124a6:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 80124aa:	edcd 3a25 	vstr	s7, [sp, #148]	; 0x94
 80124ae:	ee16 6a10 	vmov	r6, s12
 80124b2:	eeb0 6a67 	vmov.f32	s12, s15
 80124b6:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80124ba:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80124be:	ed8d 4a26 	vstr	s8, [sp, #152]	; 0x98
 80124c2:	ee16 0a10 	vmov	r0, s12
 80124c6:	eeb0 6a67 	vmov.f32	s12, s15
 80124ca:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80124ce:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80124d2:	edcd 4a27 	vstr	s9, [sp, #156]	; 0x9c
 80124d6:	ee16 1a10 	vmov	r1, s12
 80124da:	eeb0 6a67 	vmov.f32	s12, s15
 80124de:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80124e2:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 80124e6:	ee16 2a10 	vmov	r2, s12
 80124ea:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 80124ee:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80124f2:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 80124f6:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 80124fa:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80124fe:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8012502:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 8012506:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801250a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801250e:	9624      	str	r6, [sp, #144]	; 0x90
 8012510:	68ff      	ldr	r7, [r7, #12]
 8012512:	ed8d 5a2a 	vstr	s10, [sp, #168]	; 0xa8
 8012516:	922d      	str	r2, [sp, #180]	; 0xb4
 8012518:	4a21      	ldr	r2, [pc, #132]	; (80125a0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>)
 801251a:	9b06      	ldr	r3, [sp, #24]
 801251c:	8812      	ldrh	r2, [r2, #0]
 801251e:	9317      	str	r3, [sp, #92]	; 0x5c
 8012520:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8012524:	9b07      	ldr	r3, [sp, #28]
 8012526:	9218      	str	r2, [sp, #96]	; 0x60
 8012528:	4628      	mov	r0, r5
 801252a:	9319      	str	r3, [sp, #100]	; 0x64
 801252c:	edcd 5a2b 	vstr	s11, [sp, #172]	; 0xac
 8012530:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 8012534:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 8012538:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 801253c:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8012540:	9731      	str	r7, [sp, #196]	; 0xc4
 8012542:	f006 fc11 	bl	8018d68 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8012546:	901a      	str	r0, [sp, #104]	; 0x68
 8012548:	4628      	mov	r0, r5
 801254a:	f006 faf1 	bl	8018b30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801254e:	901b      	str	r0, [sp, #108]	; 0x6c
 8012550:	4628      	mov	r0, r5
 8012552:	f006 fb21 	bl	8018b98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012556:	901c      	str	r0, [sp, #112]	; 0x70
 8012558:	4628      	mov	r0, r5
 801255a:	f006 fae9 	bl	8018b30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801255e:	4b11      	ldr	r3, [pc, #68]	; (80125a4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 8012560:	901d      	str	r0, [sp, #116]	; 0x74
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8012568:	b10a      	cbz	r2, 801256e <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 801256a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801256c:	b905      	cbnz	r5, 8012570 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ec>
 801256e:	689d      	ldr	r5, [r3, #8]
 8012570:	682b      	ldr	r3, [r5, #0]
 8012572:	4620      	mov	r0, r4
 8012574:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8012576:	f7ff fefb 	bl	8012370 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 801257a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801257e:	9304      	str	r3, [sp, #16]
 8012580:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012584:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012588:	ab13      	add	r3, sp, #76	; 0x4c
 801258a:	9301      	str	r3, [sp, #4]
 801258c:	ab15      	add	r3, sp, #84	; 0x54
 801258e:	9300      	str	r3, [sp, #0]
 8012590:	aa1e      	add	r2, sp, #120	; 0x78
 8012592:	ab19      	add	r3, sp, #100	; 0x64
 8012594:	a917      	add	r1, sp, #92	; 0x5c
 8012596:	4628      	mov	r0, r5
 8012598:	47b0      	blx	r6
 801259a:	b033      	add	sp, #204	; 0xcc
 801259c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125a0:	2001460a 	.word	0x2001460a
 80125a4:	20014610 	.word	0x20014610

080125a8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 80125a8:	b570      	push	{r4, r5, r6, lr}
 80125aa:	ed2d 8b04 	vpush	{d8-d9}
 80125ae:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80125b2:	b098      	sub	sp, #96	; 0x60
 80125b4:	4604      	mov	r4, r0
 80125b6:	460e      	mov	r6, r1
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d065      	beq.n	8012688 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 80125bc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80125c0:	ed9f 8a38 	vldr	s16, [pc, #224]	; 80126a4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 80125c4:	ee09 3a10 	vmov	s18, r3
 80125c8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80125cc:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80125d0:	ee08 3a90 	vmov	s17, r3
 80125d4:	4628      	mov	r0, r5
 80125d6:	4b34      	ldr	r3, [pc, #208]	; (80126a8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 80125d8:	930c      	str	r3, [sp, #48]	; 0x30
 80125da:	930d      	str	r3, [sp, #52]	; 0x34
 80125dc:	930e      	str	r3, [sp, #56]	; 0x38
 80125de:	930f      	str	r3, [sp, #60]	; 0x3c
 80125e0:	f006 faa6 	bl	8018b30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80125e4:	ee07 0a90 	vmov	s15, r0
 80125e8:	4628      	mov	r0, r5
 80125ea:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 80125ee:	f006 fad3 	bl	8018b98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80125f2:	4b2e      	ldr	r3, [pc, #184]	; (80126ac <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	ee07 0a90 	vmov	s15, r0
 80125fa:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80125fe:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8012602:	2b01      	cmp	r3, #1
 8012604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012608:	ee39 9a08 	vadd.f32	s18, s18, s16
 801260c:	ee78 8a88 	vadd.f32	s17, s17, s16
 8012610:	eef0 7a48 	vmov.f32	s15, s16
 8012614:	d13c      	bne.n	8012690 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 8012616:	eef0 6a69 	vmov.f32	s13, s19
 801261a:	eeb0 6a47 	vmov.f32	s12, s14
 801261e:	eef0 5a47 	vmov.f32	s11, s14
 8012622:	ee19 3a90 	vmov	r3, s19
 8012626:	eeb0 7a48 	vmov.f32	s14, s16
 801262a:	eef0 9a48 	vmov.f32	s19, s16
 801262e:	9314      	str	r3, [sp, #80]	; 0x50
 8012630:	ab14      	add	r3, sp, #80	; 0x50
 8012632:	9303      	str	r3, [sp, #12]
 8012634:	ab10      	add	r3, sp, #64	; 0x40
 8012636:	9302      	str	r3, [sp, #8]
 8012638:	ab0c      	add	r3, sp, #48	; 0x30
 801263a:	9301      	str	r3, [sp, #4]
 801263c:	ab08      	add	r3, sp, #32
 801263e:	9300      	str	r3, [sp, #0]
 8012640:	2200      	movs	r2, #0
 8012642:	ab04      	add	r3, sp, #16
 8012644:	4631      	mov	r1, r6
 8012646:	4620      	mov	r0, r4
 8012648:	edcd 7a04 	vstr	s15, [sp, #16]
 801264c:	ed8d 9a05 	vstr	s18, [sp, #20]
 8012650:	ed8d 9a06 	vstr	s18, [sp, #24]
 8012654:	edcd 7a07 	vstr	s15, [sp, #28]
 8012658:	edcd 7a08 	vstr	s15, [sp, #32]
 801265c:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8012660:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 8012664:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 8012668:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801266c:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 8012670:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 8012674:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8012678:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 801267c:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 8012680:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 8012684:	f7ff fe7e 	bl	8012384 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8012688:	b018      	add	sp, #96	; 0x60
 801268a:	ecbd 8b04 	vpop	{d8-d9}
 801268e:	bd70      	pop	{r4, r5, r6, pc}
 8012690:	eef0 6a47 	vmov.f32	s13, s14
 8012694:	eef0 5a69 	vmov.f32	s11, s19
 8012698:	eeb0 6a48 	vmov.f32	s12, s16
 801269c:	ee18 3a10 	vmov	r3, s16
 80126a0:	e7c5      	b.n	801262e <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 80126a2:	bf00      	nop
 80126a4:	00000000 	.word	0x00000000
 80126a8:	42c80000 	.word	0x42c80000
 80126ac:	20014608 	.word	0x20014608

080126b0 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 80126b0:	2000      	movs	r0, #0
 80126b2:	4770      	bx	lr

080126b4 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80126b4:	4b07      	ldr	r3, [pc, #28]	; (80126d4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80126b6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80126b8:	881b      	ldrh	r3, [r3, #0]
 80126ba:	4293      	cmp	r3, r2
 80126bc:	bf81      	itttt	hi
 80126be:	4b06      	ldrhi	r3, [pc, #24]	; (80126d8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80126c0:	681b      	ldrhi	r3, [r3, #0]
 80126c2:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 80126c6:	7858      	ldrbhi	r0, [r3, #1]
 80126c8:	bf8c      	ite	hi
 80126ca:	f000 0003 	andhi.w	r0, r0, #3
 80126ce:	2000      	movls	r0, #0
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop
 80126d4:	2001466c 	.word	0x2001466c
 80126d8:	20014668 	.word	0x20014668

080126dc <_ZN8touchgfx8TextAreaD1Ev>:
 80126dc:	4770      	bx	lr
	...

080126e0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80126e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126e4:	4b10      	ldr	r3, [pc, #64]	; (8012728 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80126e6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80126e8:	881b      	ldrh	r3, [r3, #0]
 80126ea:	428b      	cmp	r3, r1
 80126ec:	4604      	mov	r4, r0
 80126ee:	d918      	bls.n	8012722 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80126f0:	6803      	ldr	r3, [r0, #0]
 80126f2:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 80126f4:	4b0d      	ldr	r3, [pc, #52]	; (801272c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80126f6:	6818      	ldr	r0, [r3, #0]
 80126f8:	f7f4 f862 	bl	80067c0 <_ZNK8touchgfx5Texts7getTextEt>
 80126fc:	6823      	ldr	r3, [r4, #0]
 80126fe:	4606      	mov	r6, r0
 8012700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012702:	4620      	mov	r0, r4
 8012704:	4798      	blx	r3
 8012706:	6823      	ldr	r3, [r4, #0]
 8012708:	4607      	mov	r7, r0
 801270a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801270e:	4620      	mov	r0, r4
 8012710:	4798      	blx	r3
 8012712:	463a      	mov	r2, r7
 8012714:	4603      	mov	r3, r0
 8012716:	4631      	mov	r1, r6
 8012718:	4620      	mov	r0, r4
 801271a:	46ac      	mov	ip, r5
 801271c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012720:	4760      	bx	ip
 8012722:	2000      	movs	r0, #0
 8012724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012728:	2001466c 	.word	0x2001466c
 801272c:	20014674 	.word	0x20014674

08012730 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8012730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012734:	4b17      	ldr	r3, [pc, #92]	; (8012794 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8012736:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8012738:	881b      	ldrh	r3, [r3, #0]
 801273a:	428b      	cmp	r3, r1
 801273c:	4604      	mov	r4, r0
 801273e:	d926      	bls.n	801278e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8012740:	4b15      	ldr	r3, [pc, #84]	; (8012798 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8012748:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801274c:	4b13      	ldr	r3, [pc, #76]	; (801279c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801274e:	7855      	ldrb	r5, [r2, #1]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8012756:	6833      	ldr	r3, [r6, #0]
 8012758:	69df      	ldr	r7, [r3, #28]
 801275a:	4b11      	ldr	r3, [pc, #68]	; (80127a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801275c:	6818      	ldr	r0, [r3, #0]
 801275e:	f7f4 f82f 	bl	80067c0 <_ZNK8touchgfx5Texts7getTextEt>
 8012762:	6823      	ldr	r3, [r4, #0]
 8012764:	4680      	mov	r8, r0
 8012766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012768:	4620      	mov	r0, r4
 801276a:	4798      	blx	r3
 801276c:	6823      	ldr	r3, [r4, #0]
 801276e:	4681      	mov	r9, r0
 8012770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012774:	4620      	mov	r0, r4
 8012776:	4798      	blx	r3
 8012778:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801277c:	9000      	str	r0, [sp, #0]
 801277e:	464b      	mov	r3, r9
 8012780:	4642      	mov	r2, r8
 8012782:	4629      	mov	r1, r5
 8012784:	4630      	mov	r0, r6
 8012786:	47b8      	blx	r7
 8012788:	b003      	add	sp, #12
 801278a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801278e:	2000      	movs	r0, #0
 8012790:	e7fa      	b.n	8012788 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8012792:	bf00      	nop
 8012794:	2001466c 	.word	0x2001466c
 8012798:	20014668 	.word	0x20014668
 801279c:	20014670 	.word	0x20014670
 80127a0:	20014674 	.word	0x20014674

080127a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80127a4:	b40e      	push	{r1, r2, r3}
 80127a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127aa:	4b2f      	ldr	r3, [pc, #188]	; (8012868 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80127ac:	881a      	ldrh	r2, [r3, #0]
 80127ae:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80127b0:	429a      	cmp	r2, r3
 80127b2:	b09d      	sub	sp, #116	; 0x74
 80127b4:	4604      	mov	r4, r0
 80127b6:	d954      	bls.n	8012862 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80127b8:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801286c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80127bc:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8012870 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80127c0:	aa26      	add	r2, sp, #152	; 0x98
 80127c2:	9202      	str	r2, [sp, #8]
 80127c4:	f8d9 2000 	ldr.w	r2, [r9]
 80127c8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80127cc:	f8d8 3000 	ldr.w	r3, [r8]
 80127d0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80127d4:	682b      	ldr	r3, [r5, #0]
 80127d6:	4628      	mov	r0, r5
 80127d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127da:	4798      	blx	r3
 80127dc:	b207      	sxth	r7, r0
 80127de:	4606      	mov	r6, r0
 80127e0:	a803      	add	r0, sp, #12
 80127e2:	f004 fe19 	bl	8017418 <_ZN8touchgfx12TextProviderC1Ev>
 80127e6:	682b      	ldr	r3, [r5, #0]
 80127e8:	4628      	mov	r0, r5
 80127ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80127ec:	4798      	blx	r3
 80127ee:	682b      	ldr	r3, [r5, #0]
 80127f0:	4682      	mov	sl, r0
 80127f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127f4:	4628      	mov	r0, r5
 80127f6:	4798      	blx	r3
 80127f8:	4653      	mov	r3, sl
 80127fa:	9000      	str	r0, [sp, #0]
 80127fc:	9a02      	ldr	r2, [sp, #8]
 80127fe:	9925      	ldr	r1, [sp, #148]	; 0x94
 8012800:	a803      	add	r0, sp, #12
 8012802:	f004 fe64 	bl	80174ce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012806:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8012808:	f8d9 3000 	ldr.w	r3, [r9]
 801280c:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8012810:	8925      	ldrh	r5, [r4, #8]
 8012812:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8012816:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801281a:	eba5 050c 	sub.w	r5, r5, ip
 801281e:	784a      	ldrb	r2, [r1, #1]
 8012820:	f8d8 3000 	ldr.w	r3, [r8]
 8012824:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8012828:	b22d      	sxth	r5, r5
 801282a:	9500      	str	r5, [sp, #0]
 801282c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012830:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8012834:	a803      	add	r0, sp, #12
 8012836:	f002 fb81 	bl	8014f3c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801283a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801283e:	18b9      	adds	r1, r7, r2
 8012840:	2900      	cmp	r1, #0
 8012842:	b203      	sxth	r3, r0
 8012844:	dd0b      	ble.n	801285e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8012846:	3b01      	subs	r3, #1
 8012848:	fb13 f302 	smulbb	r3, r3, r2
 801284c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8012850:	b21f      	sxth	r7, r3
 8012852:	4638      	mov	r0, r7
 8012854:	b01d      	add	sp, #116	; 0x74
 8012856:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801285a:	b003      	add	sp, #12
 801285c:	4770      	bx	lr
 801285e:	2b00      	cmp	r3, #0
 8012860:	dcf7      	bgt.n	8012852 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8012862:	2700      	movs	r7, #0
 8012864:	e7f5      	b.n	8012852 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8012866:	bf00      	nop
 8012868:	2001466c 	.word	0x2001466c
 801286c:	20014668 	.word	0x20014668
 8012870:	20014670 	.word	0x20014670

08012874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8012874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012878:	4bbc      	ldr	r3, [pc, #752]	; (8012b6c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801287a:	460c      	mov	r4, r1
 801287c:	881b      	ldrh	r3, [r3, #0]
 801287e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8012880:	428b      	cmp	r3, r1
 8012882:	b0a9      	sub	sp, #164	; 0xa4
 8012884:	4680      	mov	r8, r0
 8012886:	d809      	bhi.n	801289c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8012888:	2300      	movs	r3, #0
 801288a:	f04f 32ff 	mov.w	r2, #4294967295
 801288e:	e9c0 3200 	strd	r3, r2, [r0]
 8012892:	6083      	str	r3, [r0, #8]
 8012894:	4640      	mov	r0, r8
 8012896:	b029      	add	sp, #164	; 0xa4
 8012898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801289c:	4eb4      	ldr	r6, [pc, #720]	; (8012b70 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 801289e:	6833      	ldr	r3, [r6, #0]
 80128a0:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80128a4:	4bb3      	ldr	r3, [pc, #716]	; (8012b74 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80128ac:	4bb2      	ldr	r3, [pc, #712]	; (8012b78 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80128ae:	6818      	ldr	r0, [r3, #0]
 80128b0:	f7f3 ff86 	bl	80067c0 <_ZNK8touchgfx5Texts7getTextEt>
 80128b4:	682b      	ldr	r3, [r5, #0]
 80128b6:	4681      	mov	r9, r0
 80128b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128ba:	4628      	mov	r0, r5
 80128bc:	4798      	blx	r3
 80128be:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 80128c0:	b203      	sxth	r3, r0
 80128c2:	4407      	add	r7, r0
 80128c4:	9304      	str	r3, [sp, #16]
 80128c6:	b2bb      	uxth	r3, r7
 80128c8:	9303      	str	r3, [sp, #12]
 80128ca:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80128ce:	4682      	mov	sl, r0
 80128d0:	a80f      	add	r0, sp, #60	; 0x3c
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	f040 80a6 	bne.w	8012a24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 80128d8:	f004 fd9e 	bl	8017418 <_ZN8touchgfx12TextProviderC1Ev>
 80128dc:	682b      	ldr	r3, [r5, #0]
 80128de:	4628      	mov	r0, r5
 80128e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80128e2:	4798      	blx	r3
 80128e4:	682b      	ldr	r3, [r5, #0]
 80128e6:	4606      	mov	r6, r0
 80128e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128ea:	4628      	mov	r0, r5
 80128ec:	4798      	blx	r3
 80128ee:	6823      	ldr	r3, [r4, #0]
 80128f0:	4607      	mov	r7, r0
 80128f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128f4:	4620      	mov	r0, r4
 80128f6:	4798      	blx	r3
 80128f8:	6823      	ldr	r3, [r4, #0]
 80128fa:	4683      	mov	fp, r0
 80128fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012900:	4620      	mov	r0, r4
 8012902:	4798      	blx	r3
 8012904:	463b      	mov	r3, r7
 8012906:	e9cd b000 	strd	fp, r0, [sp]
 801290a:	4649      	mov	r1, r9
 801290c:	4632      	mov	r2, r6
 801290e:	a80f      	add	r0, sp, #60	; 0x3c
 8012910:	f004 fdf2 	bl	80174f8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8012914:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012918:	f8df b254 	ldr.w	fp, [pc, #596]	; 8012b70 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 801291c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8012920:	f04f 0600 	mov.w	r6, #0
 8012924:	bf0c      	ite	eq
 8012926:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 801292a:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 801292e:	4637      	mov	r7, r6
 8012930:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8012932:	f8db 3000 	ldr.w	r3, [fp]
 8012936:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801293a:	4629      	mov	r1, r5
 801293c:	785b      	ldrb	r3, [r3, #1]
 801293e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012942:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8012946:	a80f      	add	r0, sp, #60	; 0x3c
 8012948:	f002 f813 	bl	8014972 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801294c:	9b03      	ldr	r3, [sp, #12]
 801294e:	4286      	cmp	r6, r0
 8012950:	bfb8      	it	lt
 8012952:	4606      	movlt	r6, r0
 8012954:	3701      	adds	r7, #1
 8012956:	eba9 0903 	sub.w	r9, r9, r3
 801295a:	a80f      	add	r0, sp, #60	; 0x3c
 801295c:	b236      	sxth	r6, r6
 801295e:	b2bf      	uxth	r7, r7
 8012960:	fa0f f989 	sxth.w	r9, r9
 8012964:	f004 fd7f 	bl	8017466 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8012968:	b918      	cbnz	r0, 8012972 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 801296a:	7a2b      	ldrb	r3, [r5, #8]
 801296c:	444b      	add	r3, r9
 801296e:	2b00      	cmp	r3, #0
 8012970:	dcde      	bgt.n	8012930 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 8012972:	9b03      	ldr	r3, [sp, #12]
 8012974:	9a04      	ldr	r2, [sp, #16]
 8012976:	f895 9009 	ldrb.w	r9, [r5, #9]
 801297a:	fb13 f707 	smulbb	r7, r3, r7
 801297e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8012980:	1aff      	subs	r7, r7, r3
 8012982:	b2bf      	uxth	r7, r7
 8012984:	b23b      	sxth	r3, r7
 8012986:	429a      	cmp	r2, r3
 8012988:	bfa8      	it	ge
 801298a:	4657      	movge	r7, sl
 801298c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012990:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8012994:	6823      	ldr	r3, [r4, #0]
 8012996:	bf08      	it	eq
 8012998:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 801299c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801299e:	bf18      	it	ne
 80129a0:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 80129a4:	4620      	mov	r0, r4
 80129a6:	4798      	blx	r3
 80129a8:	444f      	add	r7, r9
 80129aa:	fa1f f987 	uxth.w	r9, r7
 80129ae:	2801      	cmp	r0, #1
 80129b0:	fa0f f789 	sxth.w	r7, r9
 80129b4:	b2b3      	uxth	r3, r6
 80129b6:	f000 80e1 	beq.w	8012b7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 80129ba:	2802      	cmp	r0, #2
 80129bc:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 80129c0:	f000 80e2 	beq.w	8012b88 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 80129c4:	7aea      	ldrb	r2, [r5, #11]
 80129c6:	7b2d      	ldrb	r5, [r5, #12]
 80129c8:	b236      	sxth	r6, r6
 80129ca:	1ab6      	subs	r6, r6, r2
 80129cc:	442a      	add	r2, r5
 80129ce:	4413      	add	r3, r2
 80129d0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80129d4:	fa1f fa86 	uxth.w	sl, r6
 80129d8:	b29b      	uxth	r3, r3
 80129da:	2a02      	cmp	r2, #2
 80129dc:	fa0f fb8a 	sxth.w	fp, sl
 80129e0:	b21e      	sxth	r6, r3
 80129e2:	f000 80d5 	beq.w	8012b90 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 80129e6:	2a03      	cmp	r2, #3
 80129e8:	f000 80dd 	beq.w	8012ba6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80129ec:	2a01      	cmp	r2, #1
 80129ee:	f040 80e5 	bne.w	8012bbc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80129f2:	8925      	ldrh	r5, [r4, #8]
 80129f4:	4633      	mov	r3, r6
 80129f6:	eba5 0909 	sub.w	r9, r5, r9
 80129fa:	463e      	mov	r6, r7
 80129fc:	465d      	mov	r5, fp
 80129fe:	461f      	mov	r7, r3
 8012a00:	fa0f fb89 	sxth.w	fp, r9
 8012a04:	4b5c      	ldr	r3, [pc, #368]	; (8012b78 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8012a06:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8012a08:	6818      	ldr	r0, [r3, #0]
 8012a0a:	f7f3 fed9 	bl	80067c0 <_ZNK8touchgfx5Texts7getTextEt>
 8012a0e:	f8a8 b000 	strh.w	fp, [r8]
 8012a12:	f8a8 5002 	strh.w	r5, [r8, #2]
 8012a16:	f8a8 6004 	strh.w	r6, [r8, #4]
 8012a1a:	f8a8 7006 	strh.w	r7, [r8, #6]
 8012a1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012a22:	e737      	b.n	8012894 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8012a24:	f004 fcf8 	bl	8017418 <_ZN8touchgfx12TextProviderC1Ev>
 8012a28:	682b      	ldr	r3, [r5, #0]
 8012a2a:	4628      	mov	r0, r5
 8012a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a2e:	4798      	blx	r3
 8012a30:	682b      	ldr	r3, [r5, #0]
 8012a32:	4607      	mov	r7, r0
 8012a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a36:	4628      	mov	r0, r5
 8012a38:	4798      	blx	r3
 8012a3a:	6823      	ldr	r3, [r4, #0]
 8012a3c:	4683      	mov	fp, r0
 8012a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a40:	4620      	mov	r0, r4
 8012a42:	4798      	blx	r3
 8012a44:	6822      	ldr	r2, [r4, #0]
 8012a46:	9005      	str	r0, [sp, #20]
 8012a48:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	4790      	blx	r2
 8012a50:	9b05      	ldr	r3, [sp, #20]
 8012a52:	9001      	str	r0, [sp, #4]
 8012a54:	463a      	mov	r2, r7
 8012a56:	4649      	mov	r1, r9
 8012a58:	9300      	str	r3, [sp, #0]
 8012a5a:	a80f      	add	r0, sp, #60	; 0x3c
 8012a5c:	465b      	mov	r3, fp
 8012a5e:	f004 fd4b 	bl	80174f8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8012a62:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012a66:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8012a6a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8012a6c:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8012a70:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8012a74:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012a78:	bf0a      	itet	eq
 8012a7a:	464a      	moveq	r2, r9
 8012a7c:	461a      	movne	r2, r3
 8012a7e:	4699      	moveq	r9, r3
 8012a80:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8012a84:	1ad2      	subs	r2, r2, r3
 8012a86:	6833      	ldr	r3, [r6, #0]
 8012a88:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8012a8c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8012a90:	af0f      	add	r7, sp, #60	; 0x3c
 8012a92:	7859      	ldrb	r1, [r3, #1]
 8012a94:	9707      	str	r7, [sp, #28]
 8012a96:	2300      	movs	r3, #0
 8012a98:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8012a9c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012aa0:	f88d 1020 	strb.w	r1, [sp, #32]
 8012aa4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8012aa8:	9509      	str	r5, [sp, #36]	; 0x24
 8012aaa:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8012aae:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8012ab2:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8012ab6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8012aba:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8012abe:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8012ac2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8012ac6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012aca:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8012ace:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8012ad2:	b350      	cbz	r0, 8012b2a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8012ad4:	682b      	ldr	r3, [r5, #0]
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	695b      	ldr	r3, [r3, #20]
 8012ada:	4798      	blx	r3
 8012adc:	4607      	mov	r7, r0
 8012ade:	b320      	cbz	r0, 8012b2a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8012ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ae2:	6803      	ldr	r3, [r0, #0]
 8012ae4:	4639      	mov	r1, r7
 8012ae6:	68db      	ldr	r3, [r3, #12]
 8012ae8:	4798      	blx	r3
 8012aea:	4606      	mov	r6, r0
 8012aec:	b1e8      	cbz	r0, 8012b2a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8012aee:	7b43      	ldrb	r3, [r0, #13]
 8012af0:	7a82      	ldrb	r2, [r0, #10]
 8012af2:	005b      	lsls	r3, r3, #1
 8012af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012af8:	4313      	orrs	r3, r2
 8012afa:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8012afe:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8012b02:	2b06      	cmp	r3, #6
 8012b04:	d111      	bne.n	8012b2a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8012b06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b08:	6803      	ldr	r3, [r0, #0]
 8012b0a:	4632      	mov	r2, r6
 8012b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b0e:	4639      	mov	r1, r7
 8012b10:	4798      	blx	r3
 8012b12:	7b73      	ldrb	r3, [r6, #13]
 8012b14:	005b      	lsls	r3, r3, #1
 8012b16:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012b1a:	7ab3      	ldrb	r3, [r6, #10]
 8012b1c:	4313      	orrs	r3, r2
 8012b1e:	4418      	add	r0, r3
 8012b20:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012b24:	4418      	add	r0, r3
 8012b26:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8012b2a:	2600      	movs	r6, #0
 8012b2c:	4637      	mov	r7, r6
 8012b2e:	a806      	add	r0, sp, #24
 8012b30:	f002 f900 	bl	8014d34 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012b34:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8012b38:	9b03      	ldr	r3, [sp, #12]
 8012b3a:	4286      	cmp	r6, r0
 8012b3c:	eba9 0903 	sub.w	r9, r9, r3
 8012b40:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8012b44:	bfb8      	it	lt
 8012b46:	4606      	movlt	r6, r0
 8012b48:	3701      	adds	r7, #1
 8012b4a:	b236      	sxth	r6, r6
 8012b4c:	b2bf      	uxth	r7, r7
 8012b4e:	fa0f f989 	sxth.w	r9, r9
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	f43f af0d 	beq.w	8012972 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8012b58:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f47f af08 	bne.w	8012972 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8012b62:	7a2b      	ldrb	r3, [r5, #8]
 8012b64:	444b      	add	r3, r9
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	dce1      	bgt.n	8012b2e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 8012b6a:	e702      	b.n	8012972 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8012b6c:	2001466c 	.word	0x2001466c
 8012b70:	20014668 	.word	0x20014668
 8012b74:	20014670 	.word	0x20014670
 8012b78:	20014674 	.word	0x20014674
 8012b7c:	ebaa 0606 	sub.w	r6, sl, r6
 8012b80:	2002      	movs	r0, #2
 8012b82:	fb96 f6f0 	sdiv	r6, r6, r0
 8012b86:	e71d      	b.n	80129c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 8012b88:	441e      	add	r6, r3
 8012b8a:	ebaa 0606 	sub.w	r6, sl, r6
 8012b8e:	e719      	b.n	80129c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 8012b90:	8925      	ldrh	r5, [r4, #8]
 8012b92:	1aed      	subs	r5, r5, r3
 8012b94:	eba5 050a 	sub.w	r5, r5, sl
 8012b98:	fa0f fb85 	sxth.w	fp, r5
 8012b9c:	8965      	ldrh	r5, [r4, #10]
 8012b9e:	eba5 0509 	sub.w	r5, r5, r9
 8012ba2:	b22d      	sxth	r5, r5
 8012ba4:	e72e      	b.n	8012a04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 8012ba6:	8965      	ldrh	r5, [r4, #10]
 8012ba8:	1aed      	subs	r5, r5, r3
 8012baa:	eba5 050a 	sub.w	r5, r5, sl
 8012bae:	4633      	mov	r3, r6
 8012bb0:	b22d      	sxth	r5, r5
 8012bb2:	463e      	mov	r6, r7
 8012bb4:	f04f 0b00 	mov.w	fp, #0
 8012bb8:	461f      	mov	r7, r3
 8012bba:	e723      	b.n	8012a04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 8012bbc:	2500      	movs	r5, #0
 8012bbe:	e721      	b.n	8012a04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

08012bc0 <_ZN8touchgfx8TextAreaD0Ev>:
 8012bc0:	b510      	push	{r4, lr}
 8012bc2:	2148      	movs	r1, #72	; 0x48
 8012bc4:	4604      	mov	r4, r0
 8012bc6:	f013 ff16 	bl	80269f6 <_ZdlPvj>
 8012bca:	4620      	mov	r0, r4
 8012bcc:	bd10      	pop	{r4, pc}
	...

08012bd0 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8012bd0:	b513      	push	{r0, r1, r4, lr}
 8012bd2:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8012bd6:	4604      	mov	r4, r0
 8012bd8:	b1fb      	cbz	r3, 8012c1a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012bda:	4b16      	ldr	r3, [pc, #88]	; (8012c34 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8012bdc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8012bde:	881b      	ldrh	r3, [r3, #0]
 8012be0:	428b      	cmp	r3, r1
 8012be2:	d91a      	bls.n	8012c1a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012be4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	dd16      	ble.n	8012c1a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012bec:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	dd12      	ble.n	8012c1a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012bf4:	4b10      	ldr	r3, [pc, #64]	; (8012c38 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8012bf6:	6818      	ldr	r0, [r3, #0]
 8012bf8:	f7f3 fde2 	bl	80067c0 <_ZNK8touchgfx5Texts7getTextEt>
 8012bfc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8012c00:	6822      	ldr	r2, [r4, #0]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	db06      	blt.n	8012c14 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8012c06:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	db02      	blt.n	8012c14 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8012c0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012c10:	4298      	cmp	r0, r3
 8012c12:	d004      	beq.n	8012c1e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8012c14:	6953      	ldr	r3, [r2, #20]
 8012c16:	4620      	mov	r0, r4
 8012c18:	4798      	blx	r3
 8012c1a:	b002      	add	sp, #8
 8012c1c:	bd10      	pop	{r4, pc}
 8012c1e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8012c22:	c903      	ldmia	r1, {r0, r1}
 8012c24:	466b      	mov	r3, sp
 8012c26:	e883 0003 	stmia.w	r3, {r0, r1}
 8012c2a:	6912      	ldr	r2, [r2, #16]
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	4620      	mov	r0, r4
 8012c30:	4790      	blx	r2
 8012c32:	e7f2      	b.n	8012c1a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012c34:	2001466c 	.word	0x2001466c
 8012c38:	20014674 	.word	0x20014674

08012c3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8012c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c40:	4b44      	ldr	r3, [pc, #272]	; (8012d54 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8012c42:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8012c44:	881b      	ldrh	r3, [r3, #0]
 8012c46:	4293      	cmp	r3, r2
 8012c48:	b08e      	sub	sp, #56	; 0x38
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	d97e      	bls.n	8012d4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8012c4e:	6808      	ldr	r0, [r1, #0]
 8012c50:	4d41      	ldr	r5, [pc, #260]	; (8012d58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8012c52:	6849      	ldr	r1, [r1, #4]
 8012c54:	ab05      	add	r3, sp, #20
 8012c56:	c303      	stmia	r3!, {r0, r1}
 8012c58:	4611      	mov	r1, r2
 8012c5a:	6828      	ldr	r0, [r5, #0]
 8012c5c:	f7f3 fdb0 	bl	80067c0 <_ZNK8touchgfx5Texts7getTextEt>
 8012c60:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	db11      	blt.n	8012c8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8012c68:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	db0d      	blt.n	8012c8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8012c70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012c72:	4298      	cmp	r0, r3
 8012c74:	d10a      	bne.n	8012c8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8012c76:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8012c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012c7e:	ab09      	add	r3, sp, #36	; 0x24
 8012c80:	e883 0003 	stmia.w	r3, {r0, r1}
 8012c84:	4619      	mov	r1, r3
 8012c86:	a805      	add	r0, sp, #20
 8012c88:	f7fd f8b2 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 8012c8c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	dd5b      	ble.n	8012d4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8012c94:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	dd57      	ble.n	8012d4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8012c9c:	4f2f      	ldr	r7, [pc, #188]	; (8012d5c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8012c9e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8012ca6:	4b2e      	ldr	r3, [pc, #184]	; (8012d60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8012cae:	2e00      	cmp	r6, #0
 8012cb0:	d04c      	beq.n	8012d4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8012cb2:	6823      	ldr	r3, [r4, #0]
 8012cb4:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8012cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cba:	4620      	mov	r0, r4
 8012cbc:	4798      	blx	r3
 8012cbe:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8012cc6:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8012cca:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8012cce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012cd0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8012cd4:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8012cd8:	785b      	ldrb	r3, [r3, #1]
 8012cda:	9609      	str	r6, [sp, #36]	; 0x24
 8012cdc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8012ce0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ce4:	4b1f      	ldr	r3, [pc, #124]	; (8012d64 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8012ce6:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8012cf0:	910b      	str	r1, [sp, #44]	; 0x2c
 8012cf2:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8012cf6:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8012cfa:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8012cfe:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8012d02:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8012d06:	b10a      	cbz	r2, 8012d0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8012d08:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8012d0a:	b906      	cbnz	r6, 8012d0e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8012d0c:	689e      	ldr	r6, [r3, #8]
 8012d0e:	af07      	add	r7, sp, #28
 8012d10:	4621      	mov	r1, r4
 8012d12:	4638      	mov	r0, r7
 8012d14:	f003 fed2 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012d18:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8012d1a:	6828      	ldr	r0, [r5, #0]
 8012d1c:	f7f3 fd50 	bl	80067c0 <_ZNK8touchgfx5Texts7getTextEt>
 8012d20:	6823      	ldr	r3, [r4, #0]
 8012d22:	4605      	mov	r5, r0
 8012d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d26:	4620      	mov	r0, r4
 8012d28:	4798      	blx	r3
 8012d2a:	6823      	ldr	r3, [r4, #0]
 8012d2c:	4680      	mov	r8, r0
 8012d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d32:	4620      	mov	r0, r4
 8012d34:	4798      	blx	r3
 8012d36:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8012d3a:	ab09      	add	r3, sp, #36	; 0x24
 8012d3c:	9300      	str	r3, [sp, #0]
 8012d3e:	9501      	str	r5, [sp, #4]
 8012d40:	ab05      	add	r3, sp, #20
 8012d42:	e897 0006 	ldmia.w	r7, {r1, r2}
 8012d46:	4630      	mov	r0, r6
 8012d48:	f7f3 fcec 	bl	8006724 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8012d4c:	b00e      	add	sp, #56	; 0x38
 8012d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d52:	bf00      	nop
 8012d54:	2001466c 	.word	0x2001466c
 8012d58:	20014674 	.word	0x20014674
 8012d5c:	20014668 	.word	0x20014668
 8012d60:	20014670 	.word	0x20014670
 8012d64:	20014610 	.word	0x20014610

08012d68 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8012d68:	b570      	push	{r4, r5, r6, lr}
 8012d6a:	6803      	ldr	r3, [r0, #0]
 8012d6c:	4604      	mov	r4, r0
 8012d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d70:	4615      	mov	r5, r2
 8012d72:	4798      	blx	r3
 8012d74:	6823      	ldr	r3, [r4, #0]
 8012d76:	4629      	mov	r1, r5
 8012d78:	4620      	mov	r0, r4
 8012d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d80:	4718      	bx	r3
	...

08012d84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8012d84:	b538      	push	{r3, r4, r5, lr}
 8012d86:	4b0e      	ldr	r3, [pc, #56]	; (8012dc0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8012d88:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8012d8a:	881b      	ldrh	r3, [r3, #0]
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	4604      	mov	r4, r0
 8012d90:	d214      	bcs.n	8012dbc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8012d92:	6803      	ldr	r3, [r0, #0]
 8012d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d96:	4798      	blx	r3
 8012d98:	6823      	ldr	r3, [r4, #0]
 8012d9a:	4605      	mov	r5, r0
 8012d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d9e:	4620      	mov	r0, r4
 8012da0:	4798      	blx	r3
 8012da2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012da6:	b22d      	sxth	r5, r5
 8012da8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8012dac:	4601      	mov	r1, r0
 8012dae:	bf06      	itte	eq
 8012db0:	4602      	moveq	r2, r0
 8012db2:	4629      	moveq	r1, r5
 8012db4:	462a      	movne	r2, r5
 8012db6:	4620      	mov	r0, r4
 8012db8:	f7ff ffd6 	bl	8012d68 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8012dbc:	bd38      	pop	{r3, r4, r5, pc}
 8012dbe:	bf00      	nop
 8012dc0:	2001466c 	.word	0x2001466c

08012dc4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8012dc4:	b530      	push	{r4, r5, lr}
 8012dc6:	888b      	ldrh	r3, [r1, #4]
 8012dc8:	8583      	strh	r3, [r0, #44]	; 0x2c
 8012dca:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8012dce:	b085      	sub	sp, #20
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	b923      	cbnz	r3, 8012dde <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8012dd4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8012dd8:	b90b      	cbnz	r3, 8012dde <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8012dda:	f7ff ffd3 	bl	8012d84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8012dde:	6823      	ldr	r3, [r4, #0]
 8012de0:	466d      	mov	r5, sp
 8012de2:	4621      	mov	r1, r4
 8012de4:	4628      	mov	r0, r5
 8012de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012dea:	4798      	blx	r3
 8012dec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012df0:	343c      	adds	r4, #60	; 0x3c
 8012df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012df6:	b005      	add	sp, #20
 8012df8:	bd30      	pop	{r4, r5, pc}

08012dfa <_ZNK8touchgfx3Box12getSolidRectEv>:
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	8083      	strh	r3, [r0, #4]
 8012dfe:	80c3      	strh	r3, [r0, #6]
 8012e00:	8003      	strh	r3, [r0, #0]
 8012e02:	8043      	strh	r3, [r0, #2]
 8012e04:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8012e08:	2bff      	cmp	r3, #255	; 0xff
 8012e0a:	bf01      	itttt	eq
 8012e0c:	890b      	ldrheq	r3, [r1, #8]
 8012e0e:	8083      	strheq	r3, [r0, #4]
 8012e10:	894b      	ldrheq	r3, [r1, #10]
 8012e12:	80c3      	strheq	r3, [r0, #6]
 8012e14:	4770      	bx	lr
	...

08012e18 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8012e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e1a:	4604      	mov	r4, r0
 8012e1c:	6808      	ldr	r0, [r1, #0]
 8012e1e:	6849      	ldr	r1, [r1, #4]
 8012e20:	466b      	mov	r3, sp
 8012e22:	c303      	stmia	r3!, {r0, r1}
 8012e24:	6823      	ldr	r3, [r4, #0]
 8012e26:	4669      	mov	r1, sp
 8012e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	4798      	blx	r3
 8012e2e:	4b08      	ldr	r3, [pc, #32]	; (8012e50 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8012e36:	b10a      	cbz	r2, 8012e3c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8012e38:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012e3a:	b900      	cbnz	r0, 8012e3e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8012e3c:	6898      	ldr	r0, [r3, #8]
 8012e3e:	6803      	ldr	r3, [r0, #0]
 8012e40:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012e42:	6a1d      	ldr	r5, [r3, #32]
 8012e44:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8012e48:	4669      	mov	r1, sp
 8012e4a:	47a8      	blx	r5
 8012e4c:	b003      	add	sp, #12
 8012e4e:	bd30      	pop	{r4, r5, pc}
 8012e50:	20014610 	.word	0x20014610

08012e54 <_ZN8touchgfx3BoxD1Ev>:
 8012e54:	4770      	bx	lr

08012e56 <_ZN8touchgfx3BoxD0Ev>:
 8012e56:	b510      	push	{r4, lr}
 8012e58:	212c      	movs	r1, #44	; 0x2c
 8012e5a:	4604      	mov	r4, r0
 8012e5c:	f013 fdcb 	bl	80269f6 <_ZdlPvj>
 8012e60:	4620      	mov	r0, r4
 8012e62:	bd10      	pop	{r4, pc}

08012e64 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8012e64:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8012e68:	b12a      	cbz	r2, 8012e76 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8012e6a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8012e6e:	b112      	cbz	r2, 8012e76 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8012e70:	6803      	ldr	r3, [r0, #0]
 8012e72:	695b      	ldr	r3, [r3, #20]
 8012e74:	4718      	bx	r3
 8012e76:	4770      	bx	lr

08012e78 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8012e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e7c:	4b2f      	ldr	r3, [pc, #188]	; (8012f3c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8012e7e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8012e80:	881b      	ldrh	r3, [r3, #0]
 8012e82:	4293      	cmp	r3, r2
 8012e84:	b08d      	sub	sp, #52	; 0x34
 8012e86:	4604      	mov	r4, r0
 8012e88:	460f      	mov	r7, r1
 8012e8a:	d954      	bls.n	8012f36 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8012e8c:	4b2c      	ldr	r3, [pc, #176]	; (8012f40 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8012e8e:	6819      	ldr	r1, [r3, #0]
 8012e90:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8012e94:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8012e98:	4a2a      	ldr	r2, [pc, #168]	; (8012f44 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8012e9a:	6812      	ldr	r2, [r2, #0]
 8012e9c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8012ea0:	2900      	cmp	r1, #0
 8012ea2:	d048      	beq.n	8012f36 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8012ea4:	785a      	ldrb	r2, [r3, #1]
 8012ea6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8012eaa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8012eae:	4b26      	ldr	r3, [pc, #152]	; (8012f48 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8012eb0:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8012eb4:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8012eb8:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8012ebc:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8012ebe:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8012ec2:	9107      	str	r1, [sp, #28]
 8012ec4:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8012ec8:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8012ecc:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8012ed0:	681a      	ldr	r2, [r3, #0]
 8012ed2:	f88d 8020 	strb.w	r8, [sp, #32]
 8012ed6:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8012eda:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8012ede:	9609      	str	r6, [sp, #36]	; 0x24
 8012ee0:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8012ee4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8012ee8:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8012eec:	b10b      	cbz	r3, 8012ef2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8012eee:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8012ef0:	b905      	cbnz	r5, 8012ef4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8012ef2:	6895      	ldr	r5, [r2, #8]
 8012ef4:	ae05      	add	r6, sp, #20
 8012ef6:	4621      	mov	r1, r4
 8012ef8:	4630      	mov	r0, r6
 8012efa:	f003 fddf 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012efe:	4b13      	ldr	r3, [pc, #76]	; (8012f4c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8012f00:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8012f02:	6818      	ldr	r0, [r3, #0]
 8012f04:	f7f3 fc5c 	bl	80067c0 <_ZNK8touchgfx5Texts7getTextEt>
 8012f08:	6823      	ldr	r3, [r4, #0]
 8012f0a:	4680      	mov	r8, r0
 8012f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f0e:	4620      	mov	r0, r4
 8012f10:	4798      	blx	r3
 8012f12:	6823      	ldr	r3, [r4, #0]
 8012f14:	4681      	mov	r9, r0
 8012f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	4798      	blx	r3
 8012f1e:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8012f22:	ab07      	add	r3, sp, #28
 8012f24:	9300      	str	r3, [sp, #0]
 8012f26:	f8cd 8004 	str.w	r8, [sp, #4]
 8012f2a:	463b      	mov	r3, r7
 8012f2c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8012f30:	4628      	mov	r0, r5
 8012f32:	f7f3 fbf7 	bl	8006724 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8012f36:	b00d      	add	sp, #52	; 0x34
 8012f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f3c:	2001466c 	.word	0x2001466c
 8012f40:	20014668 	.word	0x20014668
 8012f44:	20014670 	.word	0x20014670
 8012f48:	20014610 	.word	0x20014610
 8012f4c:	20014674 	.word	0x20014674

08012f50 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 8012f50:	4770      	bx	lr

08012f52 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8012f52:	b510      	push	{r4, lr}
 8012f54:	2134      	movs	r1, #52	; 0x34
 8012f56:	4604      	mov	r4, r0
 8012f58:	f013 fd4d 	bl	80269f6 <_ZdlPvj>
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	bd10      	pop	{r4, pc}

08012f60 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8012f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f64:	4604      	mov	r4, r0
 8012f66:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8012f68:	8962      	ldrh	r2, [r4, #10]
 8012f6a:	b218      	sxth	r0, r3
 8012f6c:	460e      	mov	r6, r1
 8012f6e:	005b      	lsls	r3, r3, #1
 8012f70:	8921      	ldrh	r1, [r4, #8]
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	1ac9      	subs	r1, r1, r3
 8012f76:	b08e      	sub	sp, #56	; 0x38
 8012f78:	b209      	sxth	r1, r1
 8012f7a:	1ad3      	subs	r3, r2, r3
 8012f7c:	b21b      	sxth	r3, r3
 8012f7e:	2900      	cmp	r1, #0
 8012f80:	f8ad 0000 	strh.w	r0, [sp]
 8012f84:	f8ad 0002 	strh.w	r0, [sp, #2]
 8012f88:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012f8c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012f90:	dd5e      	ble.n	8013050 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	dd5c      	ble.n	8013050 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8012f96:	6830      	ldr	r0, [r6, #0]
 8012f98:	6871      	ldr	r1, [r6, #4]
 8012f9a:	ab02      	add	r3, sp, #8
 8012f9c:	c303      	stmia	r3!, {r0, r1}
 8012f9e:	4669      	mov	r1, sp
 8012fa0:	a802      	add	r0, sp, #8
 8012fa2:	f7fc ff25 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 8012fa6:	4620      	mov	r0, r4
 8012fa8:	a902      	add	r1, sp, #8
 8012faa:	f7ff ff35 	bl	8012e18 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8012fae:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8012fb0:	2800      	cmp	r0, #0
 8012fb2:	d05f      	beq.n	8013074 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8012fb4:	8963      	ldrh	r3, [r4, #10]
 8012fb6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8012fba:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012fbe:	1a1f      	subs	r7, r3, r0
 8012fc0:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8012fc4:	b202      	sxth	r2, r0
 8012fc6:	2500      	movs	r5, #0
 8012fc8:	b21b      	sxth	r3, r3
 8012fca:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8012fce:	1a09      	subs	r1, r1, r0
 8012fd0:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8012fd4:	9506      	str	r5, [sp, #24]
 8012fd6:	f8ad 201e 	strh.w	r2, [sp, #30]
 8012fda:	f8ad 5020 	strh.w	r5, [sp, #32]
 8012fde:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8012fe2:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8012fe6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8012fea:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8012fee:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8012ff2:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8012ff6:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8012ffa:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8012ffe:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013002:	af04      	add	r7, sp, #16
 8013004:	ab06      	add	r3, sp, #24
 8013006:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801300a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801300e:	e887 0003 	stmia.w	r7, {r0, r1}
 8013012:	4631      	mov	r1, r6
 8013014:	4638      	mov	r0, r7
 8013016:	f7fc feeb 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 801301a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801301e:	2b00      	cmp	r3, #0
 8013020:	dd12      	ble.n	8013048 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8013022:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8013026:	2b00      	cmp	r3, #0
 8013028:	dd0e      	ble.n	8013048 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801302a:	6823      	ldr	r3, [r4, #0]
 801302c:	4639      	mov	r1, r7
 801302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013030:	4620      	mov	r0, r4
 8013032:	4798      	blx	r3
 8013034:	f7f0 ff52 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 8013038:	6803      	ldr	r3, [r0, #0]
 801303a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801303c:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8013040:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013044:	4639      	mov	r1, r7
 8013046:	47c0      	blx	r8
 8013048:	3501      	adds	r5, #1
 801304a:	2d04      	cmp	r5, #4
 801304c:	d1da      	bne.n	8013004 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 801304e:	e011      	b.n	8013074 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8013050:	6830      	ldr	r0, [r6, #0]
 8013052:	6871      	ldr	r1, [r6, #4]
 8013054:	ab06      	add	r3, sp, #24
 8013056:	c303      	stmia	r3!, {r0, r1}
 8013058:	6823      	ldr	r3, [r4, #0]
 801305a:	a906      	add	r1, sp, #24
 801305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801305e:	4620      	mov	r0, r4
 8013060:	4798      	blx	r3
 8013062:	f7f0 ff3b 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 8013066:	6803      	ldr	r3, [r0, #0]
 8013068:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801306a:	6a1d      	ldr	r5, [r3, #32]
 801306c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013070:	a906      	add	r1, sp, #24
 8013072:	47a8      	blx	r5
 8013074:	b00e      	add	sp, #56	; 0x38
 8013076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801307a <_ZN8touchgfx5ImageD1Ev>:
 801307a:	4770      	bx	lr

0801307c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801307c:	b570      	push	{r4, r5, r6, lr}
 801307e:	880b      	ldrh	r3, [r1, #0]
 8013080:	84c3      	strh	r3, [r0, #38]	; 0x26
 8013082:	4604      	mov	r4, r0
 8013084:	4608      	mov	r0, r1
 8013086:	460d      	mov	r5, r1
 8013088:	f005 fd52 	bl	8018b30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801308c:	4606      	mov	r6, r0
 801308e:	4628      	mov	r0, r5
 8013090:	f005 fd82 	bl	8018b98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013094:	6823      	ldr	r3, [r4, #0]
 8013096:	4605      	mov	r5, r0
 8013098:	4631      	mov	r1, r6
 801309a:	4620      	mov	r0, r4
 801309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801309e:	4798      	blx	r3
 80130a0:	6823      	ldr	r3, [r4, #0]
 80130a2:	4629      	mov	r1, r5
 80130a4:	4620      	mov	r0, r4
 80130a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130ac:	4718      	bx	r3

080130ae <_ZN8touchgfx5ImageD0Ev>:
 80130ae:	b510      	push	{r4, lr}
 80130b0:	212c      	movs	r1, #44	; 0x2c
 80130b2:	4604      	mov	r4, r0
 80130b4:	f013 fc9f 	bl	80269f6 <_ZdlPvj>
 80130b8:	4620      	mov	r0, r4
 80130ba:	bd10      	pop	{r4, pc}

080130bc <_ZNK8touchgfx5Image12getSolidRectEv>:
 80130bc:	b510      	push	{r4, lr}
 80130be:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80130c2:	2bff      	cmp	r3, #255	; 0xff
 80130c4:	4604      	mov	r4, r0
 80130c6:	d006      	beq.n	80130d6 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80130c8:	2300      	movs	r3, #0
 80130ca:	8003      	strh	r3, [r0, #0]
 80130cc:	8043      	strh	r3, [r0, #2]
 80130ce:	8083      	strh	r3, [r0, #4]
 80130d0:	80c3      	strh	r3, [r0, #6]
 80130d2:	4620      	mov	r0, r4
 80130d4:	bd10      	pop	{r4, pc}
 80130d6:	3126      	adds	r1, #38	; 0x26
 80130d8:	f005 fd92 	bl	8018c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80130dc:	e7f9      	b.n	80130d2 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

080130e0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80130e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130e4:	4604      	mov	r4, r0
 80130e6:	b088      	sub	sp, #32
 80130e8:	f854 3b26 	ldr.w	r3, [r4], #38
 80130ec:	2500      	movs	r5, #0
 80130ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130f0:	460f      	mov	r7, r1
 80130f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80130f6:	a904      	add	r1, sp, #16
 80130f8:	4606      	mov	r6, r0
 80130fa:	4798      	blx	r3
 80130fc:	4620      	mov	r0, r4
 80130fe:	f005 fd17 	bl	8018b30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013102:	4680      	mov	r8, r0
 8013104:	4620      	mov	r0, r4
 8013106:	f005 fd47 	bl	8018b98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801310a:	9506      	str	r5, [sp, #24]
 801310c:	ad06      	add	r5, sp, #24
 801310e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8013112:	4639      	mov	r1, r7
 8013114:	4628      	mov	r0, r5
 8013116:	f8ad 801c 	strh.w	r8, [sp, #28]
 801311a:	f7fc fe69 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 801311e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013122:	2b00      	cmp	r3, #0
 8013124:	dd19      	ble.n	801315a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013126:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801312a:	2b00      	cmp	r3, #0
 801312c:	dd15      	ble.n	801315a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801312e:	4b0c      	ldr	r3, [pc, #48]	; (8013160 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8013136:	b10a      	cbz	r2, 801313c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8013138:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801313a:	b900      	cbnz	r0, 801313e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801313c:	6898      	ldr	r0, [r3, #8]
 801313e:	6801      	ldr	r1, [r0, #0]
 8013140:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8013144:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8013148:	2701      	movs	r7, #1
 801314a:	9702      	str	r7, [sp, #8]
 801314c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8013150:	e9cd 5600 	strd	r5, r6, [sp]
 8013154:	688d      	ldr	r5, [r1, #8]
 8013156:	4621      	mov	r1, r4
 8013158:	47a8      	blx	r5
 801315a:	b008      	add	sp, #32
 801315c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013160:	20014610 	.word	0x20014610

08013164 <_ZN8touchgfx7OutlineD1Ev>:
 8013164:	4770      	bx	lr

08013166 <_ZN8touchgfx7OutlineD0Ev>:
 8013166:	b510      	push	{r4, lr}
 8013168:	2130      	movs	r1, #48	; 0x30
 801316a:	4604      	mov	r4, r0
 801316c:	f013 fc43 	bl	80269f6 <_ZdlPvj>
 8013170:	4620      	mov	r0, r4
 8013172:	bd10      	pop	{r4, pc}

08013174 <_ZN8touchgfx7Outline5resetEv>:
 8013174:	b510      	push	{r4, lr}
 8013176:	4604      	mov	r4, r0
 8013178:	f000 fe96 	bl	8013ea8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801317c:	60e0      	str	r0, [r4, #12]
 801317e:	f000 fe99 	bl	8013eb4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8013182:	68e3      	ldr	r3, [r4, #12]
 8013184:	6123      	str	r3, [r4, #16]
 8013186:	08c0      	lsrs	r0, r0, #3
 8013188:	2200      	movs	r2, #0
 801318a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801318e:	3801      	subs	r0, #1
 8013190:	6060      	str	r0, [r4, #4]
 8013192:	60a2      	str	r2, [r4, #8]
 8013194:	8019      	strh	r1, [r3, #0]
 8013196:	8059      	strh	r1, [r3, #2]
 8013198:	809a      	strh	r2, [r3, #4]
 801319a:	80da      	strh	r2, [r3, #6]
 801319c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801319e:	f023 0301 	bic.w	r3, r3, #1
 80131a2:	f043 0302 	orr.w	r3, r3, #2
 80131a6:	6263      	str	r3, [r4, #36]	; 0x24
 80131a8:	bd10      	pop	{r4, pc}
	...

080131ac <_ZN8touchgfx7OutlineC1Ev>:
 80131ac:	b510      	push	{r4, lr}
 80131ae:	4b0a      	ldr	r3, [pc, #40]	; (80131d8 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80131b0:	6003      	str	r3, [r0, #0]
 80131b2:	2300      	movs	r3, #0
 80131b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80131b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80131bc:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80131c0:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80131c4:	6243      	str	r3, [r0, #36]	; 0x24
 80131c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80131ca:	4604      	mov	r4, r0
 80131cc:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80131d0:	f7ff ffd0 	bl	8013174 <_ZN8touchgfx7Outline5resetEv>
 80131d4:	4620      	mov	r0, r4
 80131d6:	bd10      	pop	{r4, pc}
 80131d8:	08029838 	.word	0x08029838

080131dc <_ZN8touchgfx7Outline10renderLineEiiii>:
 80131dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131e0:	b093      	sub	sp, #76	; 0x4c
 80131e2:	1156      	asrs	r6, r2, #5
 80131e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80131e6:	9305      	str	r3, [sp, #20]
 80131e8:	f004 051f 	and.w	r5, r4, #31
 80131ec:	1153      	asrs	r3, r2, #5
 80131ee:	9504      	str	r5, [sp, #16]
 80131f0:	1165      	asrs	r5, r4, #5
 80131f2:	9303      	str	r3, [sp, #12]
 80131f4:	42ae      	cmp	r6, r5
 80131f6:	ea4f 1364 	mov.w	r3, r4, asr #5
 80131fa:	9306      	str	r3, [sp, #24]
 80131fc:	f002 031f 	and.w	r3, r2, #31
 8013200:	f040 80f8 	bne.w	80133f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8013204:	9c04      	ldr	r4, [sp, #16]
 8013206:	9a05      	ldr	r2, [sp, #20]
 8013208:	42a3      	cmp	r3, r4
 801320a:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801320e:	6902      	ldr	r2, [r0, #16]
 8013210:	d125      	bne.n	801325e <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 8013212:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013216:	459e      	cmp	lr, r3
 8013218:	d103      	bne.n	8013222 <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 801321a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801321e:	429e      	cmp	r6, r3
 8013220:	d035      	beq.n	801328e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8013222:	88d1      	ldrh	r1, [r2, #6]
 8013224:	8893      	ldrh	r3, [r2, #4]
 8013226:	430b      	orrs	r3, r1
 8013228:	d010      	beq.n	801324c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801322a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801322e:	2b00      	cmp	r3, #0
 8013230:	db0c      	blt.n	801324c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8013232:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013234:	428b      	cmp	r3, r1
 8013236:	da09      	bge.n	801324c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8013238:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801323c:	428b      	cmp	r3, r1
 801323e:	bf38      	it	cc
 8013240:	3208      	addcc	r2, #8
 8013242:	f103 0301 	add.w	r3, r3, #1
 8013246:	bf38      	it	cc
 8013248:	6102      	strcc	r2, [r0, #16]
 801324a:	6083      	str	r3, [r0, #8]
 801324c:	6903      	ldr	r3, [r0, #16]
 801324e:	9a03      	ldr	r2, [sp, #12]
 8013250:	f8a3 e000 	strh.w	lr, [r3]
 8013254:	805a      	strh	r2, [r3, #2]
 8013256:	2200      	movs	r2, #0
 8013258:	809a      	strh	r2, [r3, #4]
 801325a:	80da      	strh	r2, [r3, #6]
 801325c:	e017      	b.n	801328e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801325e:	9c05      	ldr	r4, [sp, #20]
 8013260:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8013264:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8013268:	f004 041f 	and.w	r4, r4, #31
 801326c:	114e      	asrs	r6, r1, #5
 801326e:	9402      	str	r4, [sp, #8]
 8013270:	9c04      	ldr	r4, [sp, #16]
 8013272:	4576      	cmp	r6, lr
 8013274:	f001 0c1f 	and.w	ip, r1, #31
 8013278:	eba4 0403 	sub.w	r4, r4, r3
 801327c:	d10a      	bne.n	8013294 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 801327e:	9b02      	ldr	r3, [sp, #8]
 8013280:	449c      	add	ip, r3
 8013282:	44a0      	add	r8, r4
 8013284:	fb04 a40c 	mla	r4, r4, ip, sl
 8013288:	f8a2 8004 	strh.w	r8, [r2, #4]
 801328c:	80d4      	strh	r4, [r2, #6]
 801328e:	b013      	add	sp, #76	; 0x4c
 8013290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013294:	9d05      	ldr	r5, [sp, #20]
 8013296:	1a69      	subs	r1, r5, r1
 8013298:	bf5b      	ittet	pl
 801329a:	f1cc 0520 	rsbpl	r5, ip, #32
 801329e:	436c      	mulpl	r4, r5
 80132a0:	2500      	movmi	r5, #0
 80132a2:	2520      	movpl	r5, #32
 80132a4:	bf44      	itt	mi
 80132a6:	fb04 f40c 	mulmi.w	r4, r4, ip
 80132aa:	4249      	negmi	r1, r1
 80132ac:	9501      	str	r5, [sp, #4]
 80132ae:	9f01      	ldr	r7, [sp, #4]
 80132b0:	fb94 f5f1 	sdiv	r5, r4, r1
 80132b4:	fb01 4415 	mls	r4, r1, r5, r4
 80132b8:	bf54      	ite	pl
 80132ba:	f04f 0901 	movpl.w	r9, #1
 80132be:	f04f 39ff 	movmi.w	r9, #4294967295
 80132c2:	2c00      	cmp	r4, #0
 80132c4:	bfb8      	it	lt
 80132c6:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80132ca:	44bc      	add	ip, r7
 80132cc:	44a8      	add	r8, r5
 80132ce:	fb05 ac0c 	mla	ip, r5, ip, sl
 80132d2:	f8a2 8004 	strh.w	r8, [r2, #4]
 80132d6:	f8a2 c006 	strh.w	ip, [r2, #6]
 80132da:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80132de:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80132e2:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80132e6:	bfb8      	it	lt
 80132e8:	1864      	addlt	r4, r4, r1
 80132ea:	ea58 0202 	orrs.w	r2, r8, r2
 80132ee:	444e      	add	r6, r9
 80132f0:	d011      	beq.n	8013316 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 80132f2:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80132f6:	f1b8 0f00 	cmp.w	r8, #0
 80132fa:	db0c      	blt.n	8013316 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 80132fc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80132fe:	4590      	cmp	r8, r2
 8013300:	da09      	bge.n	8013316 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8013302:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8013306:	4590      	cmp	r8, r2
 8013308:	bf3c      	itt	cc
 801330a:	f10c 0208 	addcc.w	r2, ip, #8
 801330e:	6102      	strcc	r2, [r0, #16]
 8013310:	f108 0201 	add.w	r2, r8, #1
 8013314:	6082      	str	r2, [r0, #8]
 8013316:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801331a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801331e:	f8ac 6000 	strh.w	r6, [ip]
 8013322:	2700      	movs	r7, #0
 8013324:	45b6      	cmp	lr, r6
 8013326:	f8ac 2002 	strh.w	r2, [ip, #2]
 801332a:	f8ac 7004 	strh.w	r7, [ip, #4]
 801332e:	f8ac 7006 	strh.w	r7, [ip, #6]
 8013332:	442b      	add	r3, r5
 8013334:	d04d      	beq.n	80133d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 8013336:	9f04      	ldr	r7, [sp, #16]
 8013338:	1aff      	subs	r7, r7, r3
 801333a:	443d      	add	r5, r7
 801333c:	016d      	lsls	r5, r5, #5
 801333e:	fb95 f8f1 	sdiv	r8, r5, r1
 8013342:	fb01 5518 	mls	r5, r1, r8, r5
 8013346:	2d00      	cmp	r5, #0
 8013348:	bfb8      	it	lt
 801334a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801334e:	f108 0701 	add.w	r7, r8, #1
 8013352:	bfb8      	it	lt
 8013354:	186d      	addlt	r5, r5, r1
 8013356:	1a64      	subs	r4, r4, r1
 8013358:	9703      	str	r7, [sp, #12]
 801335a:	f04f 0a00 	mov.w	sl, #0
 801335e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013362:	1964      	adds	r4, r4, r5
 8013364:	bf58      	it	pl
 8013366:	9f03      	ldrpl	r7, [sp, #12]
 8013368:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801336c:	bf48      	it	mi
 801336e:	4647      	movmi	r7, r8
 8013370:	44bb      	add	fp, r7
 8013372:	f8ac b004 	strh.w	fp, [ip, #4]
 8013376:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801337a:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801337e:	f8ac b006 	strh.w	fp, [ip, #6]
 8013382:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013386:	443b      	add	r3, r7
 8013388:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801338c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8013390:	bf58      	it	pl
 8013392:	1a64      	subpl	r4, r4, r1
 8013394:	ea5b 0707 	orrs.w	r7, fp, r7
 8013398:	444e      	add	r6, r9
 801339a:	d011      	beq.n	80133c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801339c:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80133a0:	f1bb 0f00 	cmp.w	fp, #0
 80133a4:	db0c      	blt.n	80133c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 80133a6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80133a8:	45bb      	cmp	fp, r7
 80133aa:	da09      	bge.n	80133c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 80133ac:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80133b0:	45bb      	cmp	fp, r7
 80133b2:	bf3c      	itt	cc
 80133b4:	f10c 0708 	addcc.w	r7, ip, #8
 80133b8:	6107      	strcc	r7, [r0, #16]
 80133ba:	f10b 0701 	add.w	r7, fp, #1
 80133be:	6087      	str	r7, [r0, #8]
 80133c0:	6907      	ldr	r7, [r0, #16]
 80133c2:	45b6      	cmp	lr, r6
 80133c4:	803e      	strh	r6, [r7, #0]
 80133c6:	807a      	strh	r2, [r7, #2]
 80133c8:	f8a7 a004 	strh.w	sl, [r7, #4]
 80133cc:	f8a7 a006 	strh.w	sl, [r7, #6]
 80133d0:	d1c5      	bne.n	801335e <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 80133d2:	9a04      	ldr	r2, [sp, #16]
 80133d4:	1ad3      	subs	r3, r2, r3
 80133d6:	6902      	ldr	r2, [r0, #16]
 80133d8:	8891      	ldrh	r1, [r2, #4]
 80133da:	88d6      	ldrh	r6, [r2, #6]
 80133dc:	4419      	add	r1, r3
 80133de:	8091      	strh	r1, [r2, #4]
 80133e0:	9902      	ldr	r1, [sp, #8]
 80133e2:	f101 0c20 	add.w	ip, r1, #32
 80133e6:	9901      	ldr	r1, [sp, #4]
 80133e8:	ebac 0c01 	sub.w	ip, ip, r1
 80133ec:	fb03 630c 	mla	r3, r3, ip, r6
 80133f0:	80d3      	strh	r3, [r2, #6]
 80133f2:	e74c      	b.n	801328e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80133f4:	9d05      	ldr	r5, [sp, #20]
 80133f6:	1aa2      	subs	r2, r4, r2
 80133f8:	eba5 0501 	sub.w	r5, r5, r1
 80133fc:	9508      	str	r5, [sp, #32]
 80133fe:	9202      	str	r2, [sp, #8]
 8013400:	f140 8128 	bpl.w	8013654 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 8013404:	9a03      	ldr	r2, [sp, #12]
 8013406:	2a00      	cmp	r2, #0
 8013408:	f6ff af41 	blt.w	801328e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801340c:	9a02      	ldr	r2, [sp, #8]
 801340e:	4252      	negs	r2, r2
 8013410:	9202      	str	r2, [sp, #8]
 8013412:	9a06      	ldr	r2, [sp, #24]
 8013414:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8013418:	f04f 34ff 	mov.w	r4, #4294967295
 801341c:	9206      	str	r2, [sp, #24]
 801341e:	462a      	mov	r2, r5
 8013420:	940b      	str	r4, [sp, #44]	; 0x2c
 8013422:	435a      	muls	r2, r3
 8013424:	2400      	movs	r4, #0
 8013426:	9d02      	ldr	r5, [sp, #8]
 8013428:	9401      	str	r4, [sp, #4]
 801342a:	9c02      	ldr	r4, [sp, #8]
 801342c:	fb92 f4f4 	sdiv	r4, r2, r4
 8013430:	fb05 2214 	mls	r2, r5, r4, r2
 8013434:	2a00      	cmp	r2, #0
 8013436:	9207      	str	r2, [sp, #28]
 8013438:	bfbc      	itt	lt
 801343a:	1952      	addlt	r2, r2, r5
 801343c:	9207      	strlt	r2, [sp, #28]
 801343e:	9a01      	ldr	r2, [sp, #4]
 8013440:	6905      	ldr	r5, [r0, #16]
 8013442:	bfb8      	it	lt
 8013444:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8013448:	eb04 0901 	add.w	r9, r4, r1
 801344c:	429a      	cmp	r2, r3
 801344e:	ea4f 1669 	mov.w	r6, r9, asr #5
 8013452:	f040 8112 	bne.w	801367a <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 8013456:	f9b5 3000 	ldrsh.w	r3, [r5]
 801345a:	429e      	cmp	r6, r3
 801345c:	d104      	bne.n	8013468 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 801345e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013462:	9a03      	ldr	r2, [sp, #12]
 8013464:	429a      	cmp	r2, r3
 8013466:	d01b      	beq.n	80134a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8013468:	88ea      	ldrh	r2, [r5, #6]
 801346a:	88ab      	ldrh	r3, [r5, #4]
 801346c:	4313      	orrs	r3, r2
 801346e:	d010      	beq.n	8013492 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8013470:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013474:	2a00      	cmp	r2, #0
 8013476:	db0c      	blt.n	8013492 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8013478:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801347a:	429a      	cmp	r2, r3
 801347c:	da09      	bge.n	8013492 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 801347e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013482:	429a      	cmp	r2, r3
 8013484:	bf38      	it	cc
 8013486:	3508      	addcc	r5, #8
 8013488:	f102 0201 	add.w	r2, r2, #1
 801348c:	bf38      	it	cc
 801348e:	6105      	strcc	r5, [r0, #16]
 8013490:	6082      	str	r2, [r0, #8]
 8013492:	6903      	ldr	r3, [r0, #16]
 8013494:	9a03      	ldr	r2, [sp, #12]
 8013496:	805a      	strh	r2, [r3, #2]
 8013498:	2200      	movs	r2, #0
 801349a:	801e      	strh	r6, [r3, #0]
 801349c:	809a      	strh	r2, [r3, #4]
 801349e:	80da      	strh	r2, [r3, #6]
 80134a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134a2:	9a03      	ldr	r2, [sp, #12]
 80134a4:	6901      	ldr	r1, [r0, #16]
 80134a6:	441a      	add	r2, r3
 80134a8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80134ac:	42b3      	cmp	r3, r6
 80134ae:	d103      	bne.n	80134b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 80134b0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d01a      	beq.n	80134ee <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 80134b8:	88cc      	ldrh	r4, [r1, #6]
 80134ba:	888b      	ldrh	r3, [r1, #4]
 80134bc:	4323      	orrs	r3, r4
 80134be:	d010      	beq.n	80134e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80134c0:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80134c4:	2c00      	cmp	r4, #0
 80134c6:	db0c      	blt.n	80134e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80134c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80134ca:	429c      	cmp	r4, r3
 80134cc:	da09      	bge.n	80134e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80134ce:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80134d2:	429c      	cmp	r4, r3
 80134d4:	bf38      	it	cc
 80134d6:	3108      	addcc	r1, #8
 80134d8:	f104 0401 	add.w	r4, r4, #1
 80134dc:	bf38      	it	cc
 80134de:	6101      	strcc	r1, [r0, #16]
 80134e0:	6084      	str	r4, [r0, #8]
 80134e2:	6903      	ldr	r3, [r0, #16]
 80134e4:	2100      	movs	r1, #0
 80134e6:	801e      	strh	r6, [r3, #0]
 80134e8:	805a      	strh	r2, [r3, #2]
 80134ea:	8099      	strh	r1, [r3, #4]
 80134ec:	80d9      	strh	r1, [r3, #6]
 80134ee:	9b06      	ldr	r3, [sp, #24]
 80134f0:	4293      	cmp	r3, r2
 80134f2:	f000 8082 	beq.w	80135fa <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 80134f6:	9b08      	ldr	r3, [sp, #32]
 80134f8:	9c02      	ldr	r4, [sp, #8]
 80134fa:	9902      	ldr	r1, [sp, #8]
 80134fc:	015b      	lsls	r3, r3, #5
 80134fe:	fb93 f1f1 	sdiv	r1, r3, r1
 8013502:	fb04 3311 	mls	r3, r4, r1, r3
 8013506:	2b00      	cmp	r3, #0
 8013508:	9103      	str	r1, [sp, #12]
 801350a:	9308      	str	r3, [sp, #32]
 801350c:	da04      	bge.n	8013518 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 801350e:	1e4b      	subs	r3, r1, #1
 8013510:	9303      	str	r3, [sp, #12]
 8013512:	9b08      	ldr	r3, [sp, #32]
 8013514:	4423      	add	r3, r4
 8013516:	9308      	str	r3, [sp, #32]
 8013518:	9b07      	ldr	r3, [sp, #28]
 801351a:	9902      	ldr	r1, [sp, #8]
 801351c:	1a5b      	subs	r3, r3, r1
 801351e:	9307      	str	r3, [sp, #28]
 8013520:	9b01      	ldr	r3, [sp, #4]
 8013522:	f1c3 0320 	rsb	r3, r3, #32
 8013526:	930e      	str	r3, [sp, #56]	; 0x38
 8013528:	990e      	ldr	r1, [sp, #56]	; 0x38
 801352a:	9b01      	ldr	r3, [sp, #4]
 801352c:	1a5b      	subs	r3, r3, r1
 801352e:	464f      	mov	r7, r9
 8013530:	930a      	str	r3, [sp, #40]	; 0x28
 8013532:	2600      	movs	r6, #0
 8013534:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8013538:	185b      	adds	r3, r3, r1
 801353a:	bf58      	it	pl
 801353c:	9902      	ldrpl	r1, [sp, #8]
 801353e:	9307      	str	r3, [sp, #28]
 8013540:	bf5d      	ittte	pl
 8013542:	1a5b      	subpl	r3, r3, r1
 8013544:	9307      	strpl	r3, [sp, #28]
 8013546:	9b03      	ldrpl	r3, [sp, #12]
 8013548:	9903      	ldrmi	r1, [sp, #12]
 801354a:	bf58      	it	pl
 801354c:	1c59      	addpl	r1, r3, #1
 801354e:	4489      	add	r9, r1
 8013550:	2a00      	cmp	r2, #0
 8013552:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8013556:	db2e      	blt.n	80135b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8013558:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801355a:	4293      	cmp	r3, r2
 801355c:	dd2b      	ble.n	80135b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801355e:	9c01      	ldr	r4, [sp, #4]
 8013560:	6905      	ldr	r5, [r0, #16]
 8013562:	46a0      	mov	r8, r4
 8013564:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013566:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801356a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801356e:	45a0      	cmp	r8, r4
 8013570:	f040 814f 	bne.w	8013812 <_ZN8touchgfx7Outline10renderLineEiiii+0x636>
 8013574:	f9b5 1000 	ldrsh.w	r1, [r5]
 8013578:	4551      	cmp	r1, sl
 801357a:	d103      	bne.n	8013584 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 801357c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8013580:	4291      	cmp	r1, r2
 8013582:	d018      	beq.n	80135b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8013584:	ea5c 010e 	orrs.w	r1, ip, lr
 8013588:	d00f      	beq.n	80135aa <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 801358a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801358e:	2900      	cmp	r1, #0
 8013590:	db0b      	blt.n	80135aa <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8013592:	428b      	cmp	r3, r1
 8013594:	dd09      	ble.n	80135aa <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8013596:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801359a:	4299      	cmp	r1, r3
 801359c:	bf38      	it	cc
 801359e:	3508      	addcc	r5, #8
 80135a0:	f101 0101 	add.w	r1, r1, #1
 80135a4:	bf38      	it	cc
 80135a6:	6105      	strcc	r5, [r0, #16]
 80135a8:	6081      	str	r1, [r0, #8]
 80135aa:	6903      	ldr	r3, [r0, #16]
 80135ac:	f8a3 a000 	strh.w	sl, [r3]
 80135b0:	805a      	strh	r2, [r3, #2]
 80135b2:	809e      	strh	r6, [r3, #4]
 80135b4:	80de      	strh	r6, [r3, #6]
 80135b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135b8:	6901      	ldr	r1, [r0, #16]
 80135ba:	441a      	add	r2, r3
 80135bc:	88cc      	ldrh	r4, [r1, #6]
 80135be:	888b      	ldrh	r3, [r1, #4]
 80135c0:	4323      	orrs	r3, r4
 80135c2:	d010      	beq.n	80135e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 80135c4:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80135c8:	2c00      	cmp	r4, #0
 80135ca:	db0c      	blt.n	80135e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 80135cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80135ce:	429c      	cmp	r4, r3
 80135d0:	da09      	bge.n	80135e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 80135d2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80135d6:	429c      	cmp	r4, r3
 80135d8:	bf38      	it	cc
 80135da:	3108      	addcc	r1, #8
 80135dc:	f104 0401 	add.w	r4, r4, #1
 80135e0:	bf38      	it	cc
 80135e2:	6101      	strcc	r1, [r0, #16]
 80135e4:	6084      	str	r4, [r0, #8]
 80135e6:	6903      	ldr	r3, [r0, #16]
 80135e8:	f8a3 a000 	strh.w	sl, [r3]
 80135ec:	805a      	strh	r2, [r3, #2]
 80135ee:	809e      	strh	r6, [r3, #4]
 80135f0:	80de      	strh	r6, [r3, #6]
 80135f2:	9b06      	ldr	r3, [sp, #24]
 80135f4:	4293      	cmp	r3, r2
 80135f6:	464f      	mov	r7, r9
 80135f8:	d19c      	bne.n	8013534 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 80135fa:	9b01      	ldr	r3, [sp, #4]
 80135fc:	6907      	ldr	r7, [r0, #16]
 80135fe:	f1c3 0620 	rsb	r6, r3, #32
 8013602:	9b05      	ldr	r3, [sp, #20]
 8013604:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8013608:	9b04      	ldr	r3, [sp, #16]
 801360a:	429e      	cmp	r6, r3
 801360c:	f040 81cc 	bne.w	80139a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8013610:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013614:	459e      	cmp	lr, r3
 8013616:	d104      	bne.n	8013622 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8013618:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801361c:	429a      	cmp	r2, r3
 801361e:	f43f ae36 	beq.w	801328e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8013622:	88f9      	ldrh	r1, [r7, #6]
 8013624:	88bb      	ldrh	r3, [r7, #4]
 8013626:	430b      	orrs	r3, r1
 8013628:	d010      	beq.n	801364c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 801362a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801362e:	2b00      	cmp	r3, #0
 8013630:	db0c      	blt.n	801364c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8013632:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013634:	428b      	cmp	r3, r1
 8013636:	da09      	bge.n	801364c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8013638:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801363c:	428b      	cmp	r3, r1
 801363e:	bf38      	it	cc
 8013640:	3708      	addcc	r7, #8
 8013642:	f103 0301 	add.w	r3, r3, #1
 8013646:	bf38      	it	cc
 8013648:	6107      	strcc	r7, [r0, #16]
 801364a:	6083      	str	r3, [r0, #8]
 801364c:	6903      	ldr	r3, [r0, #16]
 801364e:	f8a3 e000 	strh.w	lr, [r3]
 8013652:	e5ff      	b.n	8013254 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8013654:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8013656:	9c03      	ldr	r4, [sp, #12]
 8013658:	42a2      	cmp	r2, r4
 801365a:	f6ff ae18 	blt.w	801328e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801365e:	9c06      	ldr	r4, [sp, #24]
 8013660:	42a2      	cmp	r2, r4
 8013662:	bfb8      	it	lt
 8013664:	3201      	addlt	r2, #1
 8013666:	9c08      	ldr	r4, [sp, #32]
 8013668:	bfb8      	it	lt
 801366a:	9206      	strlt	r2, [sp, #24]
 801366c:	f1c3 0220 	rsb	r2, r3, #32
 8013670:	4362      	muls	r2, r4
 8013672:	2401      	movs	r4, #1
 8013674:	940b      	str	r4, [sp, #44]	; 0x2c
 8013676:	2420      	movs	r4, #32
 8013678:	e6d5      	b.n	8013426 <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 801367a:	f009 021f 	and.w	r2, r9, #31
 801367e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8013682:	920c      	str	r2, [sp, #48]	; 0x30
 8013684:	9a01      	ldr	r2, [sp, #4]
 8013686:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801368a:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 801368e:	45b0      	cmp	r8, r6
 8013690:	f001 011f 	and.w	r1, r1, #31
 8013694:	eba2 0203 	sub.w	r2, r2, r3
 8013698:	d108      	bne.n	80136ac <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 801369a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801369c:	4419      	add	r1, r3
 801369e:	4496      	add	lr, r2
 80136a0:	fb02 a101 	mla	r1, r2, r1, sl
 80136a4:	f8a5 e004 	strh.w	lr, [r5, #4]
 80136a8:	80e9      	strh	r1, [r5, #6]
 80136aa:	e6f9      	b.n	80134a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 80136ac:	2c00      	cmp	r4, #0
 80136ae:	f2c0 80a9 	blt.w	8013804 <_ZN8touchgfx7Outline10renderLineEiiii+0x628>
 80136b2:	2701      	movs	r7, #1
 80136b4:	f1c1 0c20 	rsb	ip, r1, #32
 80136b8:	970a      	str	r7, [sp, #40]	; 0x28
 80136ba:	fb02 f20c 	mul.w	r2, r2, ip
 80136be:	2720      	movs	r7, #32
 80136c0:	9709      	str	r7, [sp, #36]	; 0x24
 80136c2:	fb92 fcf4 	sdiv	ip, r2, r4
 80136c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80136c8:	fb04 221c 	mls	r2, r4, ip, r2
 80136cc:	2a00      	cmp	r2, #0
 80136ce:	bfb8      	it	lt
 80136d0:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80136d4:	4439      	add	r1, r7
 80136d6:	fb0c a101 	mla	r1, ip, r1, sl
 80136da:	80e9      	strh	r1, [r5, #6]
 80136dc:	44e6      	add	lr, ip
 80136de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80136e0:	f8a5 e004 	strh.w	lr, [r5, #4]
 80136e4:	eb08 0501 	add.w	r5, r8, r1
 80136e8:	6901      	ldr	r1, [r0, #16]
 80136ea:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80136ee:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80136f2:	bfb8      	it	lt
 80136f4:	1912      	addlt	r2, r2, r4
 80136f6:	ea58 070e 	orrs.w	r7, r8, lr
 80136fa:	d010      	beq.n	801371e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80136fc:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8013700:	f1be 0f00 	cmp.w	lr, #0
 8013704:	db0b      	blt.n	801371e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8013706:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8013708:	45be      	cmp	lr, r7
 801370a:	da08      	bge.n	801371e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 801370c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8013710:	45be      	cmp	lr, r7
 8013712:	bf3c      	itt	cc
 8013714:	3108      	addcc	r1, #8
 8013716:	6101      	strcc	r1, [r0, #16]
 8013718:	f10e 0101 	add.w	r1, lr, #1
 801371c:	6081      	str	r1, [r0, #8]
 801371e:	6901      	ldr	r1, [r0, #16]
 8013720:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8013724:	800d      	strh	r5, [r1, #0]
 8013726:	f04f 0e00 	mov.w	lr, #0
 801372a:	42ae      	cmp	r6, r5
 801372c:	f8a1 8002 	strh.w	r8, [r1, #2]
 8013730:	f8a1 e004 	strh.w	lr, [r1, #4]
 8013734:	f8a1 e006 	strh.w	lr, [r1, #6]
 8013738:	4463      	add	r3, ip
 801373a:	d054      	beq.n	80137e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x60a>
 801373c:	9901      	ldr	r1, [sp, #4]
 801373e:	1ac9      	subs	r1, r1, r3
 8013740:	4461      	add	r1, ip
 8013742:	0149      	lsls	r1, r1, #5
 8013744:	fb91 fef4 	sdiv	lr, r1, r4
 8013748:	fb04 111e 	mls	r1, r4, lr, r1
 801374c:	2900      	cmp	r1, #0
 801374e:	bfb8      	it	lt
 8013750:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8013754:	f10e 0701 	add.w	r7, lr, #1
 8013758:	bfb8      	it	lt
 801375a:	1909      	addlt	r1, r1, r4
 801375c:	1b12      	subs	r2, r2, r4
 801375e:	970d      	str	r7, [sp, #52]	; 0x34
 8013760:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8013764:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013766:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801376a:	1852      	adds	r2, r2, r1
 801376c:	bf54      	ite	pl
 801376e:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8013772:	46f4      	movmi	ip, lr
 8013774:	44e3      	add	fp, ip
 8013776:	f8aa b004 	strh.w	fp, [sl, #4]
 801377a:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801377e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8013782:	f8aa b006 	strh.w	fp, [sl, #6]
 8013786:	4463      	add	r3, ip
 8013788:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801378c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013790:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8013794:	bf58      	it	pl
 8013796:	1b12      	subpl	r2, r2, r4
 8013798:	443d      	add	r5, r7
 801379a:	ea5b 070a 	orrs.w	r7, fp, sl
 801379e:	d014      	beq.n	80137ca <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 80137a0:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80137a4:	f1ba 0f00 	cmp.w	sl, #0
 80137a8:	db0f      	blt.n	80137ca <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 80137aa:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80137ac:	45ba      	cmp	sl, r7
 80137ae:	da0c      	bge.n	80137ca <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 80137b0:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80137b4:	45ba      	cmp	sl, r7
 80137b6:	bf38      	it	cc
 80137b8:	f10c 0c08 	addcc.w	ip, ip, #8
 80137bc:	f10a 0a01 	add.w	sl, sl, #1
 80137c0:	bf38      	it	cc
 80137c2:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80137c6:	f8c0 a008 	str.w	sl, [r0, #8]
 80137ca:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80137ce:	f04f 0700 	mov.w	r7, #0
 80137d2:	42ae      	cmp	r6, r5
 80137d4:	f8ac 5000 	strh.w	r5, [ip]
 80137d8:	f8ac 8002 	strh.w	r8, [ip, #2]
 80137dc:	f8ac 7004 	strh.w	r7, [ip, #4]
 80137e0:	f8ac 7006 	strh.w	r7, [ip, #6]
 80137e4:	d1bc      	bne.n	8013760 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 80137e6:	6904      	ldr	r4, [r0, #16]
 80137e8:	9a01      	ldr	r2, [sp, #4]
 80137ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80137ec:	1ad3      	subs	r3, r2, r3
 80137ee:	88a2      	ldrh	r2, [r4, #4]
 80137f0:	441a      	add	r2, r3
 80137f2:	80a2      	strh	r2, [r4, #4]
 80137f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137f6:	3120      	adds	r1, #32
 80137f8:	1a89      	subs	r1, r1, r2
 80137fa:	88e2      	ldrh	r2, [r4, #6]
 80137fc:	fb03 2301 	mla	r3, r3, r1, r2
 8013800:	80e3      	strh	r3, [r4, #6]
 8013802:	e64d      	b.n	80134a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8013804:	f04f 37ff 	mov.w	r7, #4294967295
 8013808:	970a      	str	r7, [sp, #40]	; 0x28
 801380a:	434a      	muls	r2, r1
 801380c:	4264      	negs	r4, r4
 801380e:	2700      	movs	r7, #0
 8013810:	e756      	b.n	80136c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 8013812:	ea4f 1867 	mov.w	r8, r7, asr #5
 8013816:	f009 031f 	and.w	r3, r9, #31
 801381a:	45d0      	cmp	r8, sl
 801381c:	f007 071f 	and.w	r7, r7, #31
 8013820:	930f      	str	r3, [sp, #60]	; 0x3c
 8013822:	fa1f fc8c 	uxth.w	ip, ip
 8013826:	fa1f fe8e 	uxth.w	lr, lr
 801382a:	d10a      	bne.n	8013842 <_ZN8touchgfx7Outline10renderLineEiiii+0x666>
 801382c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801382e:	449c      	add	ip, r3
 8013830:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013832:	f8a5 c004 	strh.w	ip, [r5, #4]
 8013836:	441f      	add	r7, r3
 8013838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801383a:	fb03 e707 	mla	r7, r3, r7, lr
 801383e:	80ef      	strh	r7, [r5, #6]
 8013840:	e6b9      	b.n	80135b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8013842:	2900      	cmp	r1, #0
 8013844:	f2c0 80a8 	blt.w	8013998 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 8013848:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801384a:	f1c7 0320 	rsb	r3, r7, #32
 801384e:	4363      	muls	r3, r4
 8013850:	2401      	movs	r4, #1
 8013852:	940d      	str	r4, [sp, #52]	; 0x34
 8013854:	2420      	movs	r4, #32
 8013856:	940c      	str	r4, [sp, #48]	; 0x30
 8013858:	fb93 f4f1 	sdiv	r4, r3, r1
 801385c:	fb01 3b14 	mls	fp, r1, r4, r3
 8013860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013862:	f1bb 0f00 	cmp.w	fp, #0
 8013866:	bfb8      	it	lt
 8013868:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801386c:	441f      	add	r7, r3
 801386e:	fb04 e707 	mla	r7, r4, r7, lr
 8013872:	44a4      	add	ip, r4
 8013874:	f8a5 c004 	strh.w	ip, [r5, #4]
 8013878:	80ef      	strh	r7, [r5, #6]
 801387a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801387e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013880:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8013884:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8013888:	bfb8      	it	lt
 801388a:	448b      	addlt	fp, r1
 801388c:	eb08 0503 	add.w	r5, r8, r3
 8013890:	ea5e 0307 	orrs.w	r3, lr, r7
 8013894:	d011      	beq.n	80138ba <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 8013896:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801389a:	f1be 0f00 	cmp.w	lr, #0
 801389e:	db0c      	blt.n	80138ba <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 80138a0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80138a2:	45be      	cmp	lr, r7
 80138a4:	da09      	bge.n	80138ba <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 80138a6:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80138aa:	45be      	cmp	lr, r7
 80138ac:	bf3c      	itt	cc
 80138ae:	f10c 0708 	addcc.w	r7, ip, #8
 80138b2:	6107      	strcc	r7, [r0, #16]
 80138b4:	f10e 0701 	add.w	r7, lr, #1
 80138b8:	6087      	str	r7, [r0, #8]
 80138ba:	6907      	ldr	r7, [r0, #16]
 80138bc:	b213      	sxth	r3, r2
 80138be:	9310      	str	r3, [sp, #64]	; 0x40
 80138c0:	807b      	strh	r3, [r7, #2]
 80138c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138c4:	803d      	strh	r5, [r7, #0]
 80138c6:	4555      	cmp	r5, sl
 80138c8:	80be      	strh	r6, [r7, #4]
 80138ca:	80fe      	strh	r6, [r7, #6]
 80138cc:	eb04 0c03 	add.w	ip, r4, r3
 80138d0:	d051      	beq.n	8013976 <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 80138d2:	9b01      	ldr	r3, [sp, #4]
 80138d4:	eba3 070c 	sub.w	r7, r3, ip
 80138d8:	443c      	add	r4, r7
 80138da:	0164      	lsls	r4, r4, #5
 80138dc:	fb94 f8f1 	sdiv	r8, r4, r1
 80138e0:	fb01 4418 	mls	r4, r1, r8, r4
 80138e4:	2c00      	cmp	r4, #0
 80138e6:	bfb8      	it	lt
 80138e8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80138ec:	ebab 0301 	sub.w	r3, fp, r1
 80138f0:	f108 0701 	add.w	r7, r8, #1
 80138f4:	bfb8      	it	lt
 80138f6:	1864      	addlt	r4, r4, r1
 80138f8:	9309      	str	r3, [sp, #36]	; 0x24
 80138fa:	9711      	str	r7, [sp, #68]	; 0x44
 80138fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138fe:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8013902:	191b      	adds	r3, r3, r4
 8013904:	bf58      	it	pl
 8013906:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8013908:	f8be b004 	ldrh.w	fp, [lr, #4]
 801390c:	9309      	str	r3, [sp, #36]	; 0x24
 801390e:	bf48      	it	mi
 8013910:	4647      	movmi	r7, r8
 8013912:	44bb      	add	fp, r7
 8013914:	f8ae b004 	strh.w	fp, [lr, #4]
 8013918:	f8be b006 	ldrh.w	fp, [lr, #6]
 801391c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8013920:	f8ae b006 	strh.w	fp, [lr, #6]
 8013924:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8013928:	44bc      	add	ip, r7
 801392a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801392c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8013930:	443d      	add	r5, r7
 8013932:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8013936:	bf5c      	itt	pl
 8013938:	1a5b      	subpl	r3, r3, r1
 801393a:	9309      	strpl	r3, [sp, #36]	; 0x24
 801393c:	ea5b 0307 	orrs.w	r3, fp, r7
 8013940:	d011      	beq.n	8013966 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8013942:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8013946:	f1bb 0f00 	cmp.w	fp, #0
 801394a:	db0c      	blt.n	8013966 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801394c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801394e:	45bb      	cmp	fp, r7
 8013950:	da09      	bge.n	8013966 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8013952:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8013956:	45bb      	cmp	fp, r7
 8013958:	bf3c      	itt	cc
 801395a:	f10e 0708 	addcc.w	r7, lr, #8
 801395e:	6107      	strcc	r7, [r0, #16]
 8013960:	f10b 0701 	add.w	r7, fp, #1
 8013964:	6087      	str	r7, [r0, #8]
 8013966:	6907      	ldr	r7, [r0, #16]
 8013968:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801396a:	803d      	strh	r5, [r7, #0]
 801396c:	4555      	cmp	r5, sl
 801396e:	807b      	strh	r3, [r7, #2]
 8013970:	80be      	strh	r6, [r7, #4]
 8013972:	80fe      	strh	r6, [r7, #6]
 8013974:	d1c2      	bne.n	80138fc <_ZN8touchgfx7Outline10renderLineEiiii+0x720>
 8013976:	9b01      	ldr	r3, [sp, #4]
 8013978:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801397a:	eba3 0c0c 	sub.w	ip, r3, ip
 801397e:	6903      	ldr	r3, [r0, #16]
 8013980:	8899      	ldrh	r1, [r3, #4]
 8013982:	4461      	add	r1, ip
 8013984:	8099      	strh	r1, [r3, #4]
 8013986:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013988:	3720      	adds	r7, #32
 801398a:	1a7f      	subs	r7, r7, r1
 801398c:	88d9      	ldrh	r1, [r3, #6]
 801398e:	fb0c 1c07 	mla	ip, ip, r7, r1
 8013992:	f8a3 c006 	strh.w	ip, [r3, #6]
 8013996:	e60e      	b.n	80135b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8013998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801399a:	f04f 34ff 	mov.w	r4, #4294967295
 801399e:	940d      	str	r4, [sp, #52]	; 0x34
 80139a0:	437b      	muls	r3, r7
 80139a2:	4249      	negs	r1, r1
 80139a4:	2400      	movs	r4, #0
 80139a6:	e756      	b.n	8013856 <_ZN8touchgfx7Outline10renderLineEiiii+0x67a>
 80139a8:	9905      	ldr	r1, [sp, #20]
 80139aa:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80139ae:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80139b2:	f001 011f 	and.w	r1, r1, #31
 80139b6:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80139ba:	9102      	str	r1, [sp, #8]
 80139bc:	9904      	ldr	r1, [sp, #16]
 80139be:	45f3      	cmp	fp, lr
 80139c0:	f009 0c1f 	and.w	ip, r9, #31
 80139c4:	eba1 0406 	sub.w	r4, r1, r6
 80139c8:	d108      	bne.n	80139dc <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 80139ca:	9b02      	ldr	r3, [sp, #8]
 80139cc:	449c      	add	ip, r3
 80139ce:	44a0      	add	r8, r4
 80139d0:	fb04 a40c 	mla	r4, r4, ip, sl
 80139d4:	f8a7 8004 	strh.w	r8, [r7, #4]
 80139d8:	80fc      	strh	r4, [r7, #6]
 80139da:	e458      	b.n	801328e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80139dc:	9905      	ldr	r1, [sp, #20]
 80139de:	ebb1 0109 	subs.w	r1, r1, r9
 80139e2:	bf5b      	ittet	pl
 80139e4:	f1cc 0520 	rsbpl	r5, ip, #32
 80139e8:	436c      	mulpl	r4, r5
 80139ea:	2500      	movmi	r5, #0
 80139ec:	2520      	movpl	r5, #32
 80139ee:	bf44      	itt	mi
 80139f0:	fb04 f40c 	mulmi.w	r4, r4, ip
 80139f4:	4249      	negmi	r1, r1
 80139f6:	9501      	str	r5, [sp, #4]
 80139f8:	9b01      	ldr	r3, [sp, #4]
 80139fa:	fb94 f5f1 	sdiv	r5, r4, r1
 80139fe:	fb01 4415 	mls	r4, r1, r5, r4
 8013a02:	bf54      	ite	pl
 8013a04:	f04f 0901 	movpl.w	r9, #1
 8013a08:	f04f 39ff 	movmi.w	r9, #4294967295
 8013a0c:	2c00      	cmp	r4, #0
 8013a0e:	bfb8      	it	lt
 8013a10:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8013a14:	449c      	add	ip, r3
 8013a16:	44a8      	add	r8, r5
 8013a18:	fb05 ac0c 	mla	ip, r5, ip, sl
 8013a1c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8013a20:	f8a7 c006 	strh.w	ip, [r7, #6]
 8013a24:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013a28:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8013a2c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8013a30:	bfb8      	it	lt
 8013a32:	1864      	addlt	r4, r4, r1
 8013a34:	ea58 0707 	orrs.w	r7, r8, r7
 8013a38:	eb0b 0309 	add.w	r3, fp, r9
 8013a3c:	d011      	beq.n	8013a62 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8013a3e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8013a42:	f1b8 0f00 	cmp.w	r8, #0
 8013a46:	db0c      	blt.n	8013a62 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8013a48:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8013a4a:	45b8      	cmp	r8, r7
 8013a4c:	da09      	bge.n	8013a62 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8013a4e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8013a52:	45b8      	cmp	r8, r7
 8013a54:	bf3c      	itt	cc
 8013a56:	f10c 0708 	addcc.w	r7, ip, #8
 8013a5a:	6107      	strcc	r7, [r0, #16]
 8013a5c:	f108 0701 	add.w	r7, r8, #1
 8013a60:	6087      	str	r7, [r0, #8]
 8013a62:	6907      	ldr	r7, [r0, #16]
 8013a64:	f04f 0c00 	mov.w	ip, #0
 8013a68:	b212      	sxth	r2, r2
 8013a6a:	459e      	cmp	lr, r3
 8013a6c:	803b      	strh	r3, [r7, #0]
 8013a6e:	807a      	strh	r2, [r7, #2]
 8013a70:	f8a7 c004 	strh.w	ip, [r7, #4]
 8013a74:	f8a7 c006 	strh.w	ip, [r7, #6]
 8013a78:	442e      	add	r6, r5
 8013a7a:	d04d      	beq.n	8013b18 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 8013a7c:	9f04      	ldr	r7, [sp, #16]
 8013a7e:	1bbf      	subs	r7, r7, r6
 8013a80:	443d      	add	r5, r7
 8013a82:	016d      	lsls	r5, r5, #5
 8013a84:	fb95 f8f1 	sdiv	r8, r5, r1
 8013a88:	fb01 5518 	mls	r5, r1, r8, r5
 8013a8c:	4565      	cmp	r5, ip
 8013a8e:	bfb8      	it	lt
 8013a90:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8013a94:	f108 0701 	add.w	r7, r8, #1
 8013a98:	bfb8      	it	lt
 8013a9a:	186d      	addlt	r5, r5, r1
 8013a9c:	1a64      	subs	r4, r4, r1
 8013a9e:	9703      	str	r7, [sp, #12]
 8013aa0:	f04f 0a00 	mov.w	sl, #0
 8013aa4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013aa8:	1964      	adds	r4, r4, r5
 8013aaa:	bf58      	it	pl
 8013aac:	9f03      	ldrpl	r7, [sp, #12]
 8013aae:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8013ab2:	bf48      	it	mi
 8013ab4:	4647      	movmi	r7, r8
 8013ab6:	44bb      	add	fp, r7
 8013ab8:	f8ac b004 	strh.w	fp, [ip, #4]
 8013abc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013ac0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8013ac4:	f8ac b006 	strh.w	fp, [ip, #6]
 8013ac8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013acc:	443e      	add	r6, r7
 8013ace:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013ad2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8013ad6:	bf58      	it	pl
 8013ad8:	1a64      	subpl	r4, r4, r1
 8013ada:	ea5b 0707 	orrs.w	r7, fp, r7
 8013ade:	444b      	add	r3, r9
 8013ae0:	d011      	beq.n	8013b06 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8013ae2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8013ae6:	f1bb 0f00 	cmp.w	fp, #0
 8013aea:	db0c      	blt.n	8013b06 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8013aec:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8013aee:	45bb      	cmp	fp, r7
 8013af0:	da09      	bge.n	8013b06 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8013af2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8013af6:	45bb      	cmp	fp, r7
 8013af8:	bf3c      	itt	cc
 8013afa:	f10c 0708 	addcc.w	r7, ip, #8
 8013afe:	6107      	strcc	r7, [r0, #16]
 8013b00:	f10b 0701 	add.w	r7, fp, #1
 8013b04:	6087      	str	r7, [r0, #8]
 8013b06:	6907      	ldr	r7, [r0, #16]
 8013b08:	459e      	cmp	lr, r3
 8013b0a:	803b      	strh	r3, [r7, #0]
 8013b0c:	807a      	strh	r2, [r7, #2]
 8013b0e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8013b12:	f8a7 a006 	strh.w	sl, [r7, #6]
 8013b16:	d1c5      	bne.n	8013aa4 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 8013b18:	9b04      	ldr	r3, [sp, #16]
 8013b1a:	1b9e      	subs	r6, r3, r6
 8013b1c:	6903      	ldr	r3, [r0, #16]
 8013b1e:	889a      	ldrh	r2, [r3, #4]
 8013b20:	4432      	add	r2, r6
 8013b22:	809a      	strh	r2, [r3, #4]
 8013b24:	9a02      	ldr	r2, [sp, #8]
 8013b26:	f102 0c20 	add.w	ip, r2, #32
 8013b2a:	9a01      	ldr	r2, [sp, #4]
 8013b2c:	ebac 0c02 	sub.w	ip, ip, r2
 8013b30:	88da      	ldrh	r2, [r3, #6]
 8013b32:	fb06 260c 	mla	r6, r6, ip, r2
 8013b36:	80de      	strh	r6, [r3, #6]
 8013b38:	f7ff bba9 	b.w	801328e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

08013b3c <_ZN8touchgfx7Outline6lineToEii>:
 8013b3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013b3e:	079b      	lsls	r3, r3, #30
 8013b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b42:	460e      	mov	r6, r1
 8013b44:	4615      	mov	r5, r2
 8013b46:	d511      	bpl.n	8013b6c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8013b48:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8013b4c:	ea86 0701 	eor.w	r7, r6, r1
 8013b50:	ea85 0302 	eor.w	r3, r5, r2
 8013b54:	433b      	orrs	r3, r7
 8013b56:	d009      	beq.n	8013b6c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8013b58:	4633      	mov	r3, r6
 8013b5a:	9500      	str	r5, [sp, #0]
 8013b5c:	f7ff fb3e 	bl	80131dc <_ZN8touchgfx7Outline10renderLineEiiii>
 8013b60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013b62:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8013b66:	f043 0301 	orr.w	r3, r3, #1
 8013b6a:	6243      	str	r3, [r0, #36]	; 0x24
 8013b6c:	b003      	add	sp, #12
 8013b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013b70 <_ZN8touchgfx7Outline6moveToEii>:
 8013b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013b74:	4615      	mov	r5, r2
 8013b76:	079a      	lsls	r2, r3, #30
 8013b78:	4604      	mov	r4, r0
 8013b7a:	460e      	mov	r6, r1
 8013b7c:	d401      	bmi.n	8013b82 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8013b7e:	f7ff faf9 	bl	8013174 <_ZN8touchgfx7Outline5resetEv>
 8013b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b84:	07db      	lsls	r3, r3, #31
 8013b86:	d504      	bpl.n	8013b92 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8013b88:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8013b8c:	4620      	mov	r0, r4
 8013b8e:	f7ff ffd5 	bl	8013b3c <_ZN8touchgfx7Outline6lineToEii>
 8013b92:	6923      	ldr	r3, [r4, #16]
 8013b94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013b98:	1170      	asrs	r0, r6, #5
 8013b9a:	4290      	cmp	r0, r2
 8013b9c:	ea4f 1165 	mov.w	r1, r5, asr #5
 8013ba0:	d103      	bne.n	8013baa <_ZN8touchgfx7Outline6moveToEii+0x3a>
 8013ba2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013ba6:	4291      	cmp	r1, r2
 8013ba8:	d01a      	beq.n	8013be0 <_ZN8touchgfx7Outline6moveToEii+0x70>
 8013baa:	88df      	ldrh	r7, [r3, #6]
 8013bac:	889a      	ldrh	r2, [r3, #4]
 8013bae:	433a      	orrs	r2, r7
 8013bb0:	d010      	beq.n	8013bd4 <_ZN8touchgfx7Outline6moveToEii+0x64>
 8013bb2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013bb6:	2a00      	cmp	r2, #0
 8013bb8:	db0c      	blt.n	8013bd4 <_ZN8touchgfx7Outline6moveToEii+0x64>
 8013bba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8013bbc:	42ba      	cmp	r2, r7
 8013bbe:	da09      	bge.n	8013bd4 <_ZN8touchgfx7Outline6moveToEii+0x64>
 8013bc0:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8013bc4:	42ba      	cmp	r2, r7
 8013bc6:	bf38      	it	cc
 8013bc8:	3308      	addcc	r3, #8
 8013bca:	f102 0201 	add.w	r2, r2, #1
 8013bce:	bf38      	it	cc
 8013bd0:	6123      	strcc	r3, [r4, #16]
 8013bd2:	60a2      	str	r2, [r4, #8]
 8013bd4:	6923      	ldr	r3, [r4, #16]
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	8018      	strh	r0, [r3, #0]
 8013bda:	8059      	strh	r1, [r3, #2]
 8013bdc:	809a      	strh	r2, [r3, #4]
 8013bde:	80da      	strh	r2, [r3, #6]
 8013be0:	6166      	str	r6, [r4, #20]
 8013be2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8013be6:	6225      	str	r5, [r4, #32]
 8013be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013bea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8013bea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bee:	b0d0      	sub	sp, #320	; 0x140
 8013bf0:	466c      	mov	r4, sp
 8013bf2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013bf6:	4627      	mov	r7, r4
 8013bf8:	1a0d      	subs	r5, r1, r0
 8013bfa:	2d48      	cmp	r5, #72	; 0x48
 8013bfc:	f100 0308 	add.w	r3, r0, #8
 8013c00:	f340 80d5 	ble.w	8013dae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8013c04:	112d      	asrs	r5, r5, #4
 8013c06:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8013c0a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013c0e:	6816      	ldr	r6, [r2, #0]
 8013c10:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8013c14:	6006      	str	r6, [r0, #0]
 8013c16:	6856      	ldr	r6, [r2, #4]
 8013c18:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8013c1c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8013c20:	6046      	str	r6, [r0, #4]
 8013c22:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8013c26:	f8a2 8002 	strh.w	r8, [r2, #2]
 8013c2a:	f8a2 e004 	strh.w	lr, [r2, #4]
 8013c2e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013c32:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8013c36:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8013c3a:	4565      	cmp	r5, ip
 8013c3c:	f1a1 0208 	sub.w	r2, r1, #8
 8013c40:	db06      	blt.n	8013c50 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8013c42:	d119      	bne.n	8013c78 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8013c44:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8013c48:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8013c4c:	42ae      	cmp	r6, r5
 8013c4e:	dd13      	ble.n	8013c78 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8013c50:	460e      	mov	r6, r1
 8013c52:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8013c56:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8013c5a:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8013c5e:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8013c62:	601d      	str	r5, [r3, #0]
 8013c64:	6875      	ldr	r5, [r6, #4]
 8013c66:	605d      	str	r5, [r3, #4]
 8013c68:	f821 9c08 	strh.w	r9, [r1, #-8]
 8013c6c:	f821 cc06 	strh.w	ip, [r1, #-6]
 8013c70:	f821 8c04 	strh.w	r8, [r1, #-4]
 8013c74:	f821 ec02 	strh.w	lr, [r1, #-2]
 8013c78:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8013c7c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8013c80:	42ae      	cmp	r6, r5
 8013c82:	db06      	blt.n	8013c92 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8013c84:	d116      	bne.n	8013cb4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8013c86:	f9b0 c000 	ldrsh.w	ip, [r0]
 8013c8a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8013c8e:	45ac      	cmp	ip, r5
 8013c90:	da10      	bge.n	8013cb4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8013c92:	681d      	ldr	r5, [r3, #0]
 8013c94:	f9b0 8000 	ldrsh.w	r8, [r0]
 8013c98:	6005      	str	r5, [r0, #0]
 8013c9a:	685d      	ldr	r5, [r3, #4]
 8013c9c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8013ca0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8013ca4:	f8a0 8008 	strh.w	r8, [r0, #8]
 8013ca8:	6045      	str	r5, [r0, #4]
 8013caa:	8146      	strh	r6, [r0, #10]
 8013cac:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8013cb0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8013cb4:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8013cb8:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8013cbc:	4565      	cmp	r5, ip
 8013cbe:	db06      	blt.n	8013cce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8013cc0:	d119      	bne.n	8013cf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8013cc2:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8013cc6:	f9b0 5000 	ldrsh.w	r5, [r0]
 8013cca:	42ae      	cmp	r6, r5
 8013ccc:	da13      	bge.n	8013cf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8013cce:	460e      	mov	r6, r1
 8013cd0:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013cd4:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8013cd8:	6005      	str	r5, [r0, #0]
 8013cda:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8013cde:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8013ce2:	6875      	ldr	r5, [r6, #4]
 8013ce4:	6045      	str	r5, [r0, #4]
 8013ce6:	f821 9c08 	strh.w	r9, [r1, #-8]
 8013cea:	f821 cc06 	strh.w	ip, [r1, #-6]
 8013cee:	f821 8c04 	strh.w	r8, [r1, #-4]
 8013cf2:	f821 ec02 	strh.w	lr, [r1, #-2]
 8013cf6:	3308      	adds	r3, #8
 8013cf8:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8013cfc:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8013d00:	45e6      	cmp	lr, ip
 8013d02:	dbf8      	blt.n	8013cf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8013d04:	d105      	bne.n	8013d12 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8013d06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013d0a:	f9b0 5000 	ldrsh.w	r5, [r0]
 8013d0e:	42ae      	cmp	r6, r5
 8013d10:	dbf1      	blt.n	8013cf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8013d12:	4615      	mov	r5, r2
 8013d14:	3a08      	subs	r2, #8
 8013d16:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8013d1a:	45b4      	cmp	ip, r6
 8013d1c:	dbf9      	blt.n	8013d12 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8013d1e:	d105      	bne.n	8013d2c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8013d20:	f9b0 8000 	ldrsh.w	r8, [r0]
 8013d24:	f9b2 6000 	ldrsh.w	r6, [r2]
 8013d28:	45b0      	cmp	r8, r6
 8013d2a:	dbf2      	blt.n	8013d12 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8013d2c:	4293      	cmp	r3, r2
 8013d2e:	f1a5 0608 	sub.w	r6, r5, #8
 8013d32:	d816      	bhi.n	8013d62 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8013d34:	f8d6 c000 	ldr.w	ip, [r6]
 8013d38:	f9b3 a000 	ldrsh.w	sl, [r3]
 8013d3c:	f8c3 c000 	str.w	ip, [r3]
 8013d40:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8013d44:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8013d48:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8013d4c:	f8c3 c004 	str.w	ip, [r3, #4]
 8013d50:	f825 ac08 	strh.w	sl, [r5, #-8]
 8013d54:	f825 ec06 	strh.w	lr, [r5, #-6]
 8013d58:	f825 9c04 	strh.w	r9, [r5, #-4]
 8013d5c:	f825 8c02 	strh.w	r8, [r5, #-2]
 8013d60:	e7c9      	b.n	8013cf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8013d62:	f8d6 e000 	ldr.w	lr, [r6]
 8013d66:	f9b0 a000 	ldrsh.w	sl, [r0]
 8013d6a:	f8c0 e000 	str.w	lr, [r0]
 8013d6e:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8013d72:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8013d76:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8013d7a:	f8c0 e004 	str.w	lr, [r0, #4]
 8013d7e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8013d82:	f825 cc06 	strh.w	ip, [r5, #-6]
 8013d86:	f825 9c04 	strh.w	r9, [r5, #-4]
 8013d8a:	f825 8c02 	strh.w	r8, [r5, #-2]
 8013d8e:	1acd      	subs	r5, r1, r3
 8013d90:	1a16      	subs	r6, r2, r0
 8013d92:	10ed      	asrs	r5, r5, #3
 8013d94:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8013d98:	bfb5      	itete	lt
 8013d9a:	e9c4 0200 	strdlt	r0, r2, [r4]
 8013d9e:	e9c4 3100 	strdge	r3, r1, [r4]
 8013da2:	460a      	movlt	r2, r1
 8013da4:	4603      	movge	r3, r0
 8013da6:	3408      	adds	r4, #8
 8013da8:	4618      	mov	r0, r3
 8013daa:	4611      	mov	r1, r2
 8013dac:	e724      	b.n	8013bf8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8013dae:	4299      	cmp	r1, r3
 8013db0:	d928      	bls.n	8013e04 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 8013db2:	f1a3 0210 	sub.w	r2, r3, #16
 8013db6:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8013dba:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8013dbe:	45ac      	cmp	ip, r5
 8013dc0:	db06      	blt.n	8013dd0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8013dc2:	d11d      	bne.n	8013e00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8013dc4:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8013dc8:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8013dcc:	42ae      	cmp	r6, r5
 8013dce:	da17      	bge.n	8013e00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8013dd0:	4615      	mov	r5, r2
 8013dd2:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8013dd6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8013dda:	6116      	str	r6, [r2, #16]
 8013ddc:	686e      	ldr	r6, [r5, #4]
 8013dde:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8013de2:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 8013de6:	f8a2 9008 	strh.w	r9, [r2, #8]
 8013dea:	42a8      	cmp	r0, r5
 8013dec:	6156      	str	r6, [r2, #20]
 8013dee:	f8a2 c00a 	strh.w	ip, [r2, #10]
 8013df2:	f8a2 800c 	strh.w	r8, [r2, #12]
 8013df6:	f8a2 e00e 	strh.w	lr, [r2, #14]
 8013dfa:	f1a2 0208 	sub.w	r2, r2, #8
 8013dfe:	d1da      	bne.n	8013db6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8013e00:	3308      	adds	r3, #8
 8013e02:	e7d4      	b.n	8013dae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8013e04:	42bc      	cmp	r4, r7
 8013e06:	d903      	bls.n	8013e10 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 8013e08:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8013e0c:	3c08      	subs	r4, #8
 8013e0e:	e6f3      	b.n	8013bf8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8013e10:	b050      	add	sp, #320	; 0x140
 8013e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013e16 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8013e16:	b510      	push	{r4, lr}
 8013e18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013e1a:	07da      	lsls	r2, r3, #31
 8013e1c:	4604      	mov	r4, r0
 8013e1e:	d507      	bpl.n	8013e30 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8013e20:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8013e24:	f7ff fe8a 	bl	8013b3c <_ZN8touchgfx7Outline6lineToEii>
 8013e28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013e2a:	f023 0301 	bic.w	r3, r3, #1
 8013e2e:	6243      	str	r3, [r0, #36]	; 0x24
 8013e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e32:	079b      	lsls	r3, r3, #30
 8013e34:	d521      	bpl.n	8013e7a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8013e36:	6923      	ldr	r3, [r4, #16]
 8013e38:	88d9      	ldrh	r1, [r3, #6]
 8013e3a:	889a      	ldrh	r2, [r3, #4]
 8013e3c:	430a      	orrs	r2, r1
 8013e3e:	d010      	beq.n	8013e62 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8013e40:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013e44:	2a00      	cmp	r2, #0
 8013e46:	db0c      	blt.n	8013e62 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8013e48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013e4a:	428a      	cmp	r2, r1
 8013e4c:	da09      	bge.n	8013e62 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8013e4e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8013e52:	4291      	cmp	r1, r2
 8013e54:	bf88      	it	hi
 8013e56:	3308      	addhi	r3, #8
 8013e58:	f102 0201 	add.w	r2, r2, #1
 8013e5c:	bf88      	it	hi
 8013e5e:	6123      	strhi	r3, [r4, #16]
 8013e60:	60a2      	str	r2, [r4, #8]
 8013e62:	68a1      	ldr	r1, [r4, #8]
 8013e64:	b129      	cbz	r1, 8013e72 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8013e66:	6863      	ldr	r3, [r4, #4]
 8013e68:	4299      	cmp	r1, r3
 8013e6a:	d802      	bhi.n	8013e72 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8013e6c:	68e0      	ldr	r0, [r4, #12]
 8013e6e:	f7ff febc 	bl	8013bea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8013e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e74:	f023 0302 	bic.w	r3, r3, #2
 8013e78:	6263      	str	r3, [r4, #36]	; 0x24
 8013e7a:	68e0      	ldr	r0, [r4, #12]
 8013e7c:	bd10      	pop	{r4, pc}
	...

08013e80 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8013e80:	4b02      	ldr	r3, [pc, #8]	; (8013e8c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8013e82:	6018      	str	r0, [r3, #0]
 8013e84:	4b02      	ldr	r3, [pc, #8]	; (8013e90 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8013e86:	6019      	str	r1, [r3, #0]
 8013e88:	4770      	bx	lr
 8013e8a:	bf00      	nop
 8013e8c:	20014618 	.word	0x20014618
 8013e90:	2001461c 	.word	0x2001461c

08013e94 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8013e94:	4a02      	ldr	r2, [pc, #8]	; (8013ea0 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8013e96:	2300      	movs	r3, #0
 8013e98:	6013      	str	r3, [r2, #0]
 8013e9a:	4a02      	ldr	r2, [pc, #8]	; (8013ea4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8013e9c:	6013      	str	r3, [r2, #0]
 8013e9e:	4770      	bx	lr
 8013ea0:	20014618 	.word	0x20014618
 8013ea4:	2001461c 	.word	0x2001461c

08013ea8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8013ea8:	4b01      	ldr	r3, [pc, #4]	; (8013eb0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8013eaa:	6818      	ldr	r0, [r3, #0]
 8013eac:	4770      	bx	lr
 8013eae:	bf00      	nop
 8013eb0:	20014618 	.word	0x20014618

08013eb4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8013eb4:	4b01      	ldr	r3, [pc, #4]	; (8013ebc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8013eb6:	6818      	ldr	r0, [r3, #0]
 8013eb8:	4770      	bx	lr
 8013eba:	bf00      	nop
 8013ebc:	2001461c 	.word	0x2001461c

08013ec0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8013ec0:	b510      	push	{r4, lr}
 8013ec2:	6803      	ldr	r3, [r0, #0]
 8013ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ec6:	460c      	mov	r4, r1
 8013ec8:	4798      	blx	r3
 8013eca:	1b03      	subs	r3, r0, r4
 8013ecc:	4258      	negs	r0, r3
 8013ece:	4158      	adcs	r0, r3
 8013ed0:	bd10      	pop	{r4, pc}
	...

08013ed4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8013ed4:	4b01      	ldr	r3, [pc, #4]	; (8013edc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8013ed6:	6019      	str	r1, [r3, #0]
 8013ed8:	4770      	bx	lr
 8013eda:	bf00      	nop
 8013edc:	20014620 	.word	0x20014620

08013ee0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8013ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ee4:	4696      	mov	lr, r2
 8013ee6:	4605      	mov	r5, r0
 8013ee8:	4614      	mov	r4, r2
 8013eea:	460e      	mov	r6, r1
 8013eec:	461f      	mov	r7, r3
 8013eee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ef2:	b097      	sub	sp, #92	; 0x5c
 8013ef4:	f10d 0c1c 	add.w	ip, sp, #28
 8013ef8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013efc:	f8de 3000 	ldr.w	r3, [lr]
 8013f00:	f8cc 3000 	str.w	r3, [ip]
 8013f04:	f104 0e14 	add.w	lr, r4, #20
 8013f08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f0c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013f10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f14:	f8de 3000 	ldr.w	r3, [lr]
 8013f18:	f8cc 3000 	str.w	r3, [ip]
 8013f1c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013f20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f24:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013f28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f2c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8013f30:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8013f34:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8013f38:	f8de 3000 	ldr.w	r3, [lr]
 8013f3c:	f8cc 3000 	str.w	r3, [ip]
 8013f40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013f42:	682b      	ldr	r3, [r5, #0]
 8013f44:	9201      	str	r2, [sp, #4]
 8013f46:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013f4a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013f4c:	9200      	str	r2, [sp, #0]
 8013f4e:	f8cd 8008 	str.w	r8, [sp, #8]
 8013f52:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8013f56:	aa07      	add	r2, sp, #28
 8013f58:	463b      	mov	r3, r7
 8013f5a:	4631      	mov	r1, r6
 8013f5c:	4628      	mov	r0, r5
 8013f5e:	47d8      	blx	fp
 8013f60:	46a6      	mov	lr, r4
 8013f62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f66:	f10d 0c1c 	add.w	ip, sp, #28
 8013f6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f6e:	f8de 3000 	ldr.w	r3, [lr]
 8013f72:	f8cc 3000 	str.w	r3, [ip]
 8013f76:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013f7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f7e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013f82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f86:	343c      	adds	r4, #60	; 0x3c
 8013f88:	f8de 3000 	ldr.w	r3, [lr]
 8013f8c:	f8cc 3000 	str.w	r3, [ip]
 8013f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f92:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013f96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f9a:	6823      	ldr	r3, [r4, #0]
 8013f9c:	f8cc 3000 	str.w	r3, [ip]
 8013fa0:	682b      	ldr	r3, [r5, #0]
 8013fa2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013fa6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013fa8:	9201      	str	r2, [sp, #4]
 8013faa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013fac:	9200      	str	r2, [sp, #0]
 8013fae:	f8cd 8008 	str.w	r8, [sp, #8]
 8013fb2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8013fb4:	aa07      	add	r2, sp, #28
 8013fb6:	463b      	mov	r3, r7
 8013fb8:	4631      	mov	r1, r6
 8013fba:	4628      	mov	r0, r5
 8013fbc:	47a0      	blx	r4
 8013fbe:	b017      	add	sp, #92	; 0x5c
 8013fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013fc4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8013fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc8:	b08d      	sub	sp, #52	; 0x34
 8013fca:	4688      	mov	r8, r1
 8013fcc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013fce:	f8d3 c000 	ldr.w	ip, [r3]
 8013fd2:	680f      	ldr	r7, [r1, #0]
 8013fd4:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8013fd8:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8013fdc:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8013fe0:	edd3 6a07 	vldr	s13, [r3, #28]
 8013fe4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013fe6:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8013fea:	f9b1 9000 	ldrsh.w	r9, [r1]
 8013fee:	f9ba 1000 	ldrsh.w	r1, [sl]
 8013ff2:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8013ff6:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8013ffa:	eba7 070c 	sub.w	r7, r7, ip
 8013ffe:	42bc      	cmp	r4, r7
 8014000:	bfa8      	it	ge
 8014002:	463c      	movge	r4, r7
 8014004:	ee07 4a90 	vmov	s15, r4
 8014008:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801400c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8014010:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014014:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014018:	ee25 5a27 	vmul.f32	s10, s10, s15
 801401c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014020:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014024:	eb09 0e0c 	add.w	lr, r9, ip
 8014028:	4571      	cmp	r1, lr
 801402a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801402e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014032:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014036:	ee61 1a87 	vmul.f32	s3, s3, s14
 801403a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801403e:	f340 808d 	ble.w	801415c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 8014042:	eba1 060e 	sub.w	r6, r1, lr
 8014046:	fb96 f5f4 	sdiv	r5, r6, r4
 801404a:	ee07 5a10 	vmov	s14, r5
 801404e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014052:	2d00      	cmp	r5, #0
 8014054:	fb04 6615 	mls	r6, r4, r5, r6
 8014058:	eea7 0a04 	vfma.f32	s0, s14, s8
 801405c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014060:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014064:	dd13      	ble.n	801408e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 8014066:	ee70 6a44 	vsub.f32	s13, s0, s8
 801406a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801406e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014076:	bf18      	it	ne
 8014078:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801407c:	ee31 2a45 	vsub.f32	s4, s2, s10
 8014080:	bf08      	it	eq
 8014082:	eeb0 7a67 	vmoveq.f32	s14, s15
 8014086:	ee61 1a87 	vmul.f32	s3, s3, s14
 801408a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801408e:	fb05 f204 	mul.w	r2, r5, r4
 8014092:	1abf      	subs	r7, r7, r2
 8014094:	4494      	add	ip, r2
 8014096:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801409a:	4411      	add	r1, r2
 801409c:	eb09 020c 	add.w	r2, r9, ip
 80140a0:	443a      	add	r2, r7
 80140a2:	b209      	sxth	r1, r1
 80140a4:	428a      	cmp	r2, r1
 80140a6:	bfc4      	itt	gt
 80140a8:	eba1 0209 	subgt.w	r2, r1, r9
 80140ac:	eba2 070c 	subgt.w	r7, r2, ip
 80140b0:	2f00      	cmp	r7, #0
 80140b2:	dd50      	ble.n	8014156 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 80140b4:	fb97 f1f4 	sdiv	r1, r7, r4
 80140b8:	fb04 7211 	mls	r2, r4, r1, r7
 80140bc:	b90a      	cbnz	r2, 80140c2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 80140be:	3901      	subs	r1, #1
 80140c0:	4622      	mov	r2, r4
 80140c2:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80140c6:	6840      	ldr	r0, [r0, #4]
 80140c8:	900b      	str	r0, [sp, #44]	; 0x2c
 80140ca:	f8d0 a000 	ldr.w	sl, [r0]
 80140ce:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80140d0:	9008      	str	r0, [sp, #32]
 80140d2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80140d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80140d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80140dc:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80140e0:	695b      	ldr	r3, [r3, #20]
 80140e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80140e4:	445b      	add	r3, fp
 80140e6:	eef0 6a42 	vmov.f32	s13, s4
 80140ea:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80140ee:	ee21 3a23 	vmul.f32	s6, s2, s7
 80140f2:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80140f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80140fa:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80140fe:	9307      	str	r3, [sp, #28]
 8014100:	ee17 7a90 	vmov	r7, s15
 8014104:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014108:	eeb0 7a61 	vmov.f32	s14, s3
 801410c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014110:	ee16 3a90 	vmov	r3, s13
 8014114:	fb97 f7f4 	sdiv	r7, r7, r4
 8014118:	ee17 ca90 	vmov	ip, s15
 801411c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014120:	fb9c fcf4 	sdiv	ip, ip, r4
 8014124:	fb0c 3306 	mla	r3, ip, r6, r3
 8014128:	9302      	str	r3, [sp, #8]
 801412a:	ee17 3a10 	vmov	r3, s14
 801412e:	44b6      	add	lr, r6
 8014130:	fb04 e505 	mla	r5, r4, r5, lr
 8014134:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8014138:	fb07 3706 	mla	r7, r7, r6, r3
 801413c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014140:	e9cd 4700 	strd	r4, r7, [sp]
 8014144:	2900      	cmp	r1, #0
 8014146:	bfcc      	ite	gt
 8014148:	46a1      	movgt	r9, r4
 801414a:	4691      	movle	r9, r2
 801414c:	eba9 0306 	sub.w	r3, r9, r6
 8014150:	f8da 4008 	ldr.w	r4, [sl, #8]
 8014154:	47a0      	blx	r4
 8014156:	b00d      	add	sp, #52	; 0x34
 8014158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801415c:	2500      	movs	r5, #0
 801415e:	462e      	mov	r6, r5
 8014160:	e799      	b.n	8014096 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

08014164 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014168:	b0db      	sub	sp, #364	; 0x16c
 801416a:	461d      	mov	r5, r3
 801416c:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8014170:	930a      	str	r3, [sp, #40]	; 0x28
 8014172:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8014176:	930b      	str	r3, [sp, #44]	; 0x2c
 8014178:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801417c:	9310      	str	r3, [sp, #64]	; 0x40
 801417e:	6803      	ldr	r3, [r0, #0]
 8014180:	910f      	str	r1, [sp, #60]	; 0x3c
 8014182:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8014184:	9009      	str	r0, [sp, #36]	; 0x24
 8014186:	4614      	mov	r4, r2
 8014188:	4629      	mov	r1, r5
 801418a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801418e:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8014192:	47b8      	blx	r7
 8014194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014196:	6058      	str	r0, [r3, #4]
 8014198:	2800      	cmp	r0, #0
 801419a:	f000 83a1 	beq.w	80148e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801419e:	682b      	ldr	r3, [r5, #0]
 80141a0:	9314      	str	r3, [sp, #80]	; 0x50
 80141a2:	686b      	ldr	r3, [r5, #4]
 80141a4:	9315      	str	r3, [sp, #84]	; 0x54
 80141a6:	4bc4      	ldr	r3, [pc, #784]	; (80144b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80141a8:	ed94 7a02 	vldr	s14, [r4, #8]
 80141ac:	7819      	ldrb	r1, [r3, #0]
 80141ae:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80141b2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80141b6:	2900      	cmp	r1, #0
 80141b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141bc:	bf16      	itet	ne
 80141be:	4619      	movne	r1, r3
 80141c0:	4611      	moveq	r1, r2
 80141c2:	4613      	movne	r3, r2
 80141c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141c8:	9116      	str	r1, [sp, #88]	; 0x58
 80141ca:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80141ce:	f240 8387 	bls.w	80148e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141d2:	ed94 7a07 	vldr	s14, [r4, #28]
 80141d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141de:	f240 837f 	bls.w	80148e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141e2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80141e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ee:	f240 8377 	bls.w	80148e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141f2:	6822      	ldr	r2, [r4, #0]
 80141f4:	4bb1      	ldr	r3, [pc, #708]	; (80144bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80141f6:	429a      	cmp	r2, r3
 80141f8:	f2c0 8372 	blt.w	80148e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141fc:	49b0      	ldr	r1, [pc, #704]	; (80144c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80141fe:	6963      	ldr	r3, [r4, #20]
 8014200:	428a      	cmp	r2, r1
 8014202:	f300 836d 	bgt.w	80148e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014206:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801420a:	48ae      	ldr	r0, [pc, #696]	; (80144c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801420c:	33ff      	adds	r3, #255	; 0xff
 801420e:	4283      	cmp	r3, r0
 8014210:	f200 8366 	bhi.w	80148e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014214:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014216:	4dac      	ldr	r5, [pc, #688]	; (80144c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014218:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801421c:	33ff      	adds	r3, #255	; 0xff
 801421e:	42ab      	cmp	r3, r5
 8014220:	f200 835e 	bhi.w	80148e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014224:	6862      	ldr	r2, [r4, #4]
 8014226:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801422a:	33ff      	adds	r3, #255	; 0xff
 801422c:	4283      	cmp	r3, r0
 801422e:	f200 8357 	bhi.w	80148e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014232:	69a1      	ldr	r1, [r4, #24]
 8014234:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8014238:	33ff      	adds	r3, #255	; 0xff
 801423a:	4283      	cmp	r3, r0
 801423c:	f200 8350 	bhi.w	80148e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014240:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014242:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8014246:	30ff      	adds	r0, #255	; 0xff
 8014248:	42a8      	cmp	r0, r5
 801424a:	f200 8349 	bhi.w	80148e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801424e:	428a      	cmp	r2, r1
 8014250:	f280 8110 	bge.w	8014474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014254:	429a      	cmp	r2, r3
 8014256:	f300 8119 	bgt.w	801448c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801425a:	4299      	cmp	r1, r3
 801425c:	f280 811d 	bge.w	801449a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014260:	2502      	movs	r5, #2
 8014262:	2701      	movs	r7, #1
 8014264:	46a9      	mov	r9, r5
 8014266:	46b8      	mov	r8, r7
 8014268:	f04f 0a00 	mov.w	sl, #0
 801426c:	4621      	mov	r1, r4
 801426e:	a849      	add	r0, sp, #292	; 0x124
 8014270:	f003 fe1a 	bl	8017ea8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8014274:	4622      	mov	r2, r4
 8014276:	4653      	mov	r3, sl
 8014278:	a949      	add	r1, sp, #292	; 0x124
 801427a:	f8cd 9000 	str.w	r9, [sp]
 801427e:	a819      	add	r0, sp, #100	; 0x64
 8014280:	f003 ff42 	bl	8018108 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014284:	4622      	mov	r2, r4
 8014286:	4653      	mov	r3, sl
 8014288:	a949      	add	r1, sp, #292	; 0x124
 801428a:	f8cd 8000 	str.w	r8, [sp]
 801428e:	a829      	add	r0, sp, #164	; 0xa4
 8014290:	f003 ff3a 	bl	8018108 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014294:	4643      	mov	r3, r8
 8014296:	4622      	mov	r2, r4
 8014298:	a949      	add	r1, sp, #292	; 0x124
 801429a:	f8cd 9000 	str.w	r9, [sp]
 801429e:	a839      	add	r0, sp, #228	; 0xe4
 80142a0:	f003 ff32 	bl	8018108 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80142a4:	42af      	cmp	r7, r5
 80142a6:	bfb5      	itete	lt
 80142a8:	2300      	movlt	r3, #0
 80142aa:	2301      	movge	r3, #1
 80142ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80142ae:	930e      	strge	r3, [sp, #56]	; 0x38
 80142b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80142b6:	af12      	add	r7, sp, #72	; 0x48
 80142b8:	bfb9      	ittee	lt
 80142ba:	ad29      	addlt	r5, sp, #164	; 0xa4
 80142bc:	ac19      	addlt	r4, sp, #100	; 0x64
 80142be:	ad19      	addge	r5, sp, #100	; 0x64
 80142c0:	ac29      	addge	r4, sp, #164	; 0xa4
 80142c2:	e887 0003 	stmia.w	r7, {r0, r1}
 80142c6:	b928      	cbnz	r0, 80142d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80142c8:	4b80      	ldr	r3, [pc, #512]	; (80144cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80142ca:	6818      	ldr	r0, [r3, #0]
 80142cc:	6803      	ldr	r3, [r0, #0]
 80142ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142d0:	4798      	blx	r3
 80142d2:	6038      	str	r0, [r7, #0]
 80142d4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80142d6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80142da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80142de:	930c      	str	r3, [sp, #48]	; 0x30
 80142e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80142e2:	6963      	ldr	r3, [r4, #20]
 80142e4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80142e6:	440b      	add	r3, r1
 80142e8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80142ec:	4408      	add	r0, r1
 80142ee:	b200      	sxth	r0, r0
 80142f0:	4283      	cmp	r3, r0
 80142f2:	900d      	str	r0, [sp, #52]	; 0x34
 80142f4:	f280 80dd 	bge.w	80144b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80142f8:	428b      	cmp	r3, r1
 80142fa:	da08      	bge.n	801430e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80142fc:	2a00      	cmp	r2, #0
 80142fe:	dd06      	ble.n	801430e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014300:	1acb      	subs	r3, r1, r3
 8014302:	429a      	cmp	r2, r3
 8014304:	f2c0 80e4 	blt.w	80144d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8014308:	2b00      	cmp	r3, #0
 801430a:	f300 80e2 	bgt.w	80144d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801430e:	6967      	ldr	r7, [r4, #20]
 8014310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014312:	443b      	add	r3, r7
 8014314:	461f      	mov	r7, r3
 8014316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014318:	1bdf      	subs	r7, r3, r7
 801431a:	4297      	cmp	r7, r2
 801431c:	bfa8      	it	ge
 801431e:	4617      	movge	r7, r2
 8014320:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014324:	2f00      	cmp	r7, #0
 8014326:	f340 8166 	ble.w	80145f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801432a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801432c:	6829      	ldr	r1, [r5, #0]
 801432e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014332:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014336:	6820      	ldr	r0, [r4, #0]
 8014338:	4411      	add	r1, r2
 801433a:	4299      	cmp	r1, r3
 801433c:	dd1a      	ble.n	8014374 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801433e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014342:	440b      	add	r3, r1
 8014344:	4402      	add	r2, r0
 8014346:	b21b      	sxth	r3, r3
 8014348:	429a      	cmp	r2, r3
 801434a:	dc13      	bgt.n	8014374 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801434c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801434e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	9206      	str	r2, [sp, #24]
 8014354:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014356:	9205      	str	r2, [sp, #20]
 8014358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801435a:	9500      	str	r5, [sp, #0]
 801435c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014360:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014362:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014364:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014368:	a912      	add	r1, sp, #72	; 0x48
 801436a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801436e:	aa49      	add	r2, sp, #292	; 0x124
 8014370:	4623      	mov	r3, r4
 8014372:	47c8      	blx	r9
 8014374:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014378:	441a      	add	r2, r3
 801437a:	6963      	ldr	r3, [r4, #20]
 801437c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8014380:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014384:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014388:	68a1      	ldr	r1, [r4, #8]
 801438a:	ed94 6a08 	vldr	s12, [r4, #32]
 801438e:	6022      	str	r2, [r4, #0]
 8014390:	3301      	adds	r3, #1
 8014392:	6163      	str	r3, [r4, #20]
 8014394:	69a3      	ldr	r3, [r4, #24]
 8014396:	ee37 7a27 	vadd.f32	s14, s14, s15
 801439a:	3b01      	subs	r3, #1
 801439c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80143a0:	61a3      	str	r3, [r4, #24]
 80143a2:	6923      	ldr	r3, [r4, #16]
 80143a4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80143a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80143ac:	edd4 6a07 	vldr	s13, [r4, #28]
 80143b0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80143b4:	440b      	add	r3, r1
 80143b6:	68e1      	ldr	r1, [r4, #12]
 80143b8:	6123      	str	r3, [r4, #16]
 80143ba:	ee76 6a86 	vadd.f32	s13, s13, s12
 80143be:	428b      	cmp	r3, r1
 80143c0:	edc4 6a07 	vstr	s13, [r4, #28]
 80143c4:	db15      	blt.n	80143f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80143c6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80143ca:	ee76 6a26 	vadd.f32	s13, s12, s13
 80143ce:	3201      	adds	r2, #1
 80143d0:	edc4 6a07 	vstr	s13, [r4, #28]
 80143d4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80143d8:	6022      	str	r2, [r4, #0]
 80143da:	ee36 7a87 	vadd.f32	s14, s13, s14
 80143de:	1a5b      	subs	r3, r3, r1
 80143e0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80143e4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80143e8:	6123      	str	r3, [r4, #16]
 80143ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80143ee:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80143f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80143f6:	441a      	add	r2, r3
 80143f8:	696b      	ldr	r3, [r5, #20]
 80143fa:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80143fe:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014402:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014406:	68a9      	ldr	r1, [r5, #8]
 8014408:	ed95 6a08 	vldr	s12, [r5, #32]
 801440c:	602a      	str	r2, [r5, #0]
 801440e:	3301      	adds	r3, #1
 8014410:	616b      	str	r3, [r5, #20]
 8014412:	69ab      	ldr	r3, [r5, #24]
 8014414:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014418:	3b01      	subs	r3, #1
 801441a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801441e:	61ab      	str	r3, [r5, #24]
 8014420:	692b      	ldr	r3, [r5, #16]
 8014422:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801442a:	edd5 6a07 	vldr	s13, [r5, #28]
 801442e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014432:	440b      	add	r3, r1
 8014434:	68e9      	ldr	r1, [r5, #12]
 8014436:	612b      	str	r3, [r5, #16]
 8014438:	ee76 6a86 	vadd.f32	s13, s13, s12
 801443c:	428b      	cmp	r3, r1
 801443e:	edc5 6a07 	vstr	s13, [r5, #28]
 8014442:	db15      	blt.n	8014470 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8014444:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014448:	ee76 6a26 	vadd.f32	s13, s12, s13
 801444c:	3201      	adds	r2, #1
 801444e:	edc5 6a07 	vstr	s13, [r5, #28]
 8014452:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8014456:	602a      	str	r2, [r5, #0]
 8014458:	ee36 7a87 	vadd.f32	s14, s13, s14
 801445c:	1a5b      	subs	r3, r3, r1
 801445e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014462:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8014466:	612b      	str	r3, [r5, #16]
 8014468:	ee77 7a27 	vadd.f32	s15, s14, s15
 801446c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014470:	3f01      	subs	r7, #1
 8014472:	e757      	b.n	8014324 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8014474:	4299      	cmp	r1, r3
 8014476:	dc13      	bgt.n	80144a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8014478:	429a      	cmp	r2, r3
 801447a:	da14      	bge.n	80144a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801447c:	2502      	movs	r5, #2
 801447e:	2703      	movs	r7, #3
 8014480:	46a9      	mov	r9, r5
 8014482:	f04f 0800 	mov.w	r8, #0
 8014486:	f04f 0a01 	mov.w	sl, #1
 801448a:	e6ef      	b.n	801426c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801448c:	2501      	movs	r5, #1
 801448e:	2700      	movs	r7, #0
 8014490:	46a9      	mov	r9, r5
 8014492:	46b8      	mov	r8, r7
 8014494:	f04f 0a02 	mov.w	sl, #2
 8014498:	e6e8      	b.n	801426c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801449a:	2501      	movs	r5, #1
 801449c:	2702      	movs	r7, #2
 801449e:	e6e1      	b.n	8014264 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80144a0:	2500      	movs	r5, #0
 80144a2:	2701      	movs	r7, #1
 80144a4:	e7f4      	b.n	8014490 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80144a6:	2702      	movs	r7, #2
 80144a8:	2503      	movs	r5, #3
 80144aa:	f04f 0900 	mov.w	r9, #0
 80144ae:	46b8      	mov	r8, r7
 80144b0:	e7e9      	b.n	8014486 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80144b2:	4613      	mov	r3, r2
 80144b4:	e728      	b.n	8014308 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80144b6:	bf00      	nop
 80144b8:	20014608 	.word	0x20014608
 80144bc:	fffd8f01 	.word	0xfffd8f01
 80144c0:	00027100 	.word	0x00027100
 80144c4:	0004e1ff 	.word	0x0004e1ff
 80144c8:	0004e1fe 	.word	0x0004e1fe
 80144cc:	20014610 	.word	0x20014610
 80144d0:	4613      	mov	r3, r2
 80144d2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80144d4:	9111      	str	r1, [sp, #68]	; 0x44
 80144d6:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80144da:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80144de:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80144e0:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80144e4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80144e8:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80144ec:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80144f0:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80144f4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80144f8:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80144fc:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8014500:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8014504:	469e      	mov	lr, r3
 8014506:	469c      	mov	ip, r3
 8014508:	f04f 0900 	mov.w	r9, #0
 801450c:	f1bc 0f00 	cmp.w	ip, #0
 8014510:	d147      	bne.n	80145a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8014512:	eb03 0c07 	add.w	ip, r3, r7
 8014516:	1ad7      	subs	r7, r2, r3
 8014518:	f1b9 0f00 	cmp.w	r9, #0
 801451c:	d009      	beq.n	8014532 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801451e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8014522:	9029      	str	r0, [sp, #164]	; 0xa4
 8014524:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8014528:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801452c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8014530:	912d      	str	r1, [sp, #180]	; 0xb4
 8014532:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014534:	9111      	str	r1, [sp, #68]	; 0x44
 8014536:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801453a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801453e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8014542:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014546:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801454a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801454e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8014552:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8014556:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801455a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801455e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8014562:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8014566:	f04f 0800 	mov.w	r8, #0
 801456a:	f1be 0f00 	cmp.w	lr, #0
 801456e:	d031      	beq.n	80145d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8014570:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014572:	4431      	add	r1, r6
 8014574:	4549      	cmp	r1, r9
 8014576:	4450      	add	r0, sl
 8014578:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801457c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014580:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014584:	db08      	blt.n	8014598 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8014586:	ee77 7a85 	vadd.f32	s15, s15, s10
 801458a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801458e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014592:	3001      	adds	r0, #1
 8014594:	eba1 0109 	sub.w	r1, r1, r9
 8014598:	f10e 3eff 	add.w	lr, lr, #4294967295
 801459c:	f04f 0801 	mov.w	r8, #1
 80145a0:	e7e3      	b.n	801456a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80145a2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80145a4:	4431      	add	r1, r6
 80145a6:	4541      	cmp	r1, r8
 80145a8:	4450      	add	r0, sl
 80145aa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80145ae:	ee77 7a84 	vadd.f32	s15, s15, s8
 80145b2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80145b6:	db08      	blt.n	80145ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80145b8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80145bc:	ee37 7a25 	vadd.f32	s14, s14, s11
 80145c0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80145c4:	3001      	adds	r0, #1
 80145c6:	eba1 0108 	sub.w	r1, r1, r8
 80145ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80145ce:	f04f 0901 	mov.w	r9, #1
 80145d2:	e79b      	b.n	801450c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80145d4:	449c      	add	ip, r3
 80145d6:	1aff      	subs	r7, r7, r3
 80145d8:	f1b8 0f00 	cmp.w	r8, #0
 80145dc:	d009      	beq.n	80145f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80145de:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80145e2:	9019      	str	r0, [sp, #100]	; 0x64
 80145e4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80145e8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80145ec:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80145f0:	911d      	str	r1, [sp, #116]	; 0x74
 80145f2:	1ad2      	subs	r2, r2, r3
 80145f4:	e68b      	b.n	801430e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80145f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145f8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	f000 80d1 	beq.w	80147a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8014600:	ad19      	add	r5, sp, #100	; 0x64
 8014602:	ac39      	add	r4, sp, #228	; 0xe4
 8014604:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014606:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801460a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801460e:	930c      	str	r3, [sp, #48]	; 0x30
 8014610:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014612:	6963      	ldr	r3, [r4, #20]
 8014614:	440b      	add	r3, r1
 8014616:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801461a:	4408      	add	r0, r1
 801461c:	b200      	sxth	r0, r0
 801461e:	4283      	cmp	r3, r0
 8014620:	900d      	str	r0, [sp, #52]	; 0x34
 8014622:	f280 80c1 	bge.w	80147a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8014626:	428b      	cmp	r3, r1
 8014628:	da08      	bge.n	801463c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801462a:	2a00      	cmp	r2, #0
 801462c:	dd06      	ble.n	801463c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801462e:	1acb      	subs	r3, r1, r3
 8014630:	429a      	cmp	r2, r3
 8014632:	f2c0 80bb 	blt.w	80147ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8014636:	2b00      	cmp	r3, #0
 8014638:	f300 80b9 	bgt.w	80147ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801463c:	6967      	ldr	r7, [r4, #20]
 801463e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014640:	443b      	add	r3, r7
 8014642:	461f      	mov	r7, r3
 8014644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014646:	1bdf      	subs	r7, r3, r7
 8014648:	4297      	cmp	r7, r2
 801464a:	bfa8      	it	ge
 801464c:	4617      	movge	r7, r2
 801464e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014652:	2f00      	cmp	r7, #0
 8014654:	f340 813c 	ble.w	80148d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8014658:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801465a:	6829      	ldr	r1, [r5, #0]
 801465c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014660:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014664:	6820      	ldr	r0, [r4, #0]
 8014666:	4411      	add	r1, r2
 8014668:	4299      	cmp	r1, r3
 801466a:	dd1a      	ble.n	80146a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801466c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014670:	440b      	add	r3, r1
 8014672:	4402      	add	r2, r0
 8014674:	b21b      	sxth	r3, r3
 8014676:	429a      	cmp	r2, r3
 8014678:	dc13      	bgt.n	80146a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801467a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801467c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	9206      	str	r2, [sp, #24]
 8014682:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014684:	9205      	str	r2, [sp, #20]
 8014686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014688:	9500      	str	r5, [sp, #0]
 801468a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801468e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014692:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014696:	a912      	add	r1, sp, #72	; 0x48
 8014698:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801469c:	aa49      	add	r2, sp, #292	; 0x124
 801469e:	4623      	mov	r3, r4
 80146a0:	47c8      	blx	r9
 80146a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80146a6:	441a      	add	r2, r3
 80146a8:	6963      	ldr	r3, [r4, #20]
 80146aa:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80146ae:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80146b2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80146b6:	68a1      	ldr	r1, [r4, #8]
 80146b8:	ed94 6a08 	vldr	s12, [r4, #32]
 80146bc:	6022      	str	r2, [r4, #0]
 80146be:	3301      	adds	r3, #1
 80146c0:	6163      	str	r3, [r4, #20]
 80146c2:	69a3      	ldr	r3, [r4, #24]
 80146c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80146c8:	3b01      	subs	r3, #1
 80146ca:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80146ce:	61a3      	str	r3, [r4, #24]
 80146d0:	6923      	ldr	r3, [r4, #16]
 80146d2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80146d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146da:	edd4 6a07 	vldr	s13, [r4, #28]
 80146de:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80146e2:	440b      	add	r3, r1
 80146e4:	68e1      	ldr	r1, [r4, #12]
 80146e6:	6123      	str	r3, [r4, #16]
 80146e8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80146ec:	428b      	cmp	r3, r1
 80146ee:	edc4 6a07 	vstr	s13, [r4, #28]
 80146f2:	db15      	blt.n	8014720 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80146f4:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80146f8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80146fc:	3201      	adds	r2, #1
 80146fe:	edc4 6a07 	vstr	s13, [r4, #28]
 8014702:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014706:	6022      	str	r2, [r4, #0]
 8014708:	ee36 7a87 	vadd.f32	s14, s13, s14
 801470c:	1a5b      	subs	r3, r3, r1
 801470e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014712:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014716:	6123      	str	r3, [r4, #16]
 8014718:	ee77 7a27 	vadd.f32	s15, s14, s15
 801471c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014720:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014724:	441a      	add	r2, r3
 8014726:	696b      	ldr	r3, [r5, #20]
 8014728:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801472c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014730:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8014734:	68a9      	ldr	r1, [r5, #8]
 8014736:	ed95 6a08 	vldr	s12, [r5, #32]
 801473a:	602a      	str	r2, [r5, #0]
 801473c:	3301      	adds	r3, #1
 801473e:	616b      	str	r3, [r5, #20]
 8014740:	69ab      	ldr	r3, [r5, #24]
 8014742:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014746:	3b01      	subs	r3, #1
 8014748:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801474c:	61ab      	str	r3, [r5, #24]
 801474e:	692b      	ldr	r3, [r5, #16]
 8014750:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014754:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014758:	edd5 6a07 	vldr	s13, [r5, #28]
 801475c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014760:	440b      	add	r3, r1
 8014762:	68e9      	ldr	r1, [r5, #12]
 8014764:	612b      	str	r3, [r5, #16]
 8014766:	ee76 6a86 	vadd.f32	s13, s13, s12
 801476a:	428b      	cmp	r3, r1
 801476c:	edc5 6a07 	vstr	s13, [r5, #28]
 8014770:	db15      	blt.n	801479e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8014772:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8014776:	ee76 6a26 	vadd.f32	s13, s12, s13
 801477a:	3201      	adds	r2, #1
 801477c:	edc5 6a07 	vstr	s13, [r5, #28]
 8014780:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8014784:	602a      	str	r2, [r5, #0]
 8014786:	ee36 7a87 	vadd.f32	s14, s13, s14
 801478a:	1a5b      	subs	r3, r3, r1
 801478c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014790:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8014794:	612b      	str	r3, [r5, #16]
 8014796:	ee77 7a27 	vadd.f32	s15, s14, s15
 801479a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801479e:	3f01      	subs	r7, #1
 80147a0:	e757      	b.n	8014652 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80147a2:	ad39      	add	r5, sp, #228	; 0xe4
 80147a4:	ac19      	add	r4, sp, #100	; 0x64
 80147a6:	e72d      	b.n	8014604 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80147a8:	4613      	mov	r3, r2
 80147aa:	e744      	b.n	8014636 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80147ac:	4613      	mov	r3, r2
 80147ae:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80147b2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80147b4:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80147b8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80147bc:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80147c0:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80147c4:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80147c8:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80147cc:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80147d0:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80147d2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80147d6:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80147da:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80147de:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80147e2:	960e      	str	r6, [sp, #56]	; 0x38
 80147e4:	469e      	mov	lr, r3
 80147e6:	461f      	mov	r7, r3
 80147e8:	f04f 0900 	mov.w	r9, #0
 80147ec:	2f00      	cmp	r7, #0
 80147ee:	d146      	bne.n	801487e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80147f0:	449c      	add	ip, r3
 80147f2:	1ad7      	subs	r7, r2, r3
 80147f4:	f1b9 0f00 	cmp.w	r9, #0
 80147f8:	d009      	beq.n	801480e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80147fa:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80147fe:	9039      	str	r0, [sp, #228]	; 0xe4
 8014800:	913d      	str	r1, [sp, #244]	; 0xf4
 8014802:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8014806:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801480a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801480e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014810:	910e      	str	r1, [sp, #56]	; 0x38
 8014812:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014816:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801481a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801481e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014822:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8014826:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801482a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801482e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8014832:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8014836:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801483a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801483e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8014842:	f04f 0800 	mov.w	r8, #0
 8014846:	f1be 0f00 	cmp.w	lr, #0
 801484a:	d030      	beq.n	80148ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801484c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801484e:	4431      	add	r1, r6
 8014850:	4549      	cmp	r1, r9
 8014852:	4450      	add	r0, sl
 8014854:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014858:	ee37 7a04 	vadd.f32	s14, s14, s8
 801485c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014860:	db08      	blt.n	8014874 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8014862:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014866:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801486a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801486e:	3001      	adds	r0, #1
 8014870:	eba1 0109 	sub.w	r1, r1, r9
 8014874:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014878:	f04f 0801 	mov.w	r8, #1
 801487c:	e7e3      	b.n	8014846 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801487e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014880:	4431      	add	r1, r6
 8014882:	4541      	cmp	r1, r8
 8014884:	4450      	add	r0, sl
 8014886:	ee37 7a24 	vadd.f32	s14, s14, s9
 801488a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801488e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014892:	db08      	blt.n	80148a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8014894:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014898:	ee37 7a25 	vadd.f32	s14, s14, s11
 801489c:	ee77 7a86 	vadd.f32	s15, s15, s12
 80148a0:	3001      	adds	r0, #1
 80148a2:	eba1 0108 	sub.w	r1, r1, r8
 80148a6:	3f01      	subs	r7, #1
 80148a8:	f04f 0901 	mov.w	r9, #1
 80148ac:	e79e      	b.n	80147ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80148ae:	449c      	add	ip, r3
 80148b0:	1aff      	subs	r7, r7, r3
 80148b2:	f1b8 0f00 	cmp.w	r8, #0
 80148b6:	d009      	beq.n	80148cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80148b8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80148bc:	9019      	str	r0, [sp, #100]	; 0x64
 80148be:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80148c2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80148c6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80148ca:	911d      	str	r1, [sp, #116]	; 0x74
 80148cc:	1ad2      	subs	r2, r2, r3
 80148ce:	e6b5      	b.n	801463c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80148d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	b923      	cbnz	r3, 80148e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80148d6:	4b04      	ldr	r3, [pc, #16]	; (80148e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80148d8:	6818      	ldr	r0, [r3, #0]
 80148da:	6803      	ldr	r3, [r0, #0]
 80148dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148de:	4798      	blx	r3
 80148e0:	b05b      	add	sp, #364	; 0x16c
 80148e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148e6:	bf00      	nop
 80148e8:	20014610 	.word	0x20014610

080148ec <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 80148ec:	b570      	push	{r4, r5, r6, lr}
 80148ee:	4604      	mov	r4, r0
 80148f0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 80148f4:	9805      	ldr	r0, [sp, #20]
 80148f6:	6061      	str	r1, [r4, #4]
 80148f8:	2500      	movs	r5, #0
 80148fa:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80148fe:	8263      	strh	r3, [r4, #18]
 8014900:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014904:	8025      	strh	r5, [r4, #0]
 8014906:	7221      	strb	r1, [r4, #8]
 8014908:	7266      	strb	r6, [r4, #9]
 801490a:	60e0      	str	r0, [r4, #12]
 801490c:	8222      	strh	r2, [r4, #16]
 801490e:	82a3      	strh	r3, [r4, #20]
 8014910:	82e5      	strh	r5, [r4, #22]
 8014912:	8325      	strh	r5, [r4, #24]
 8014914:	8365      	strh	r5, [r4, #26]
 8014916:	83a5      	strh	r5, [r4, #28]
 8014918:	83e5      	strh	r5, [r4, #30]
 801491a:	8425      	strh	r5, [r4, #32]
 801491c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8014920:	b32e      	cbz	r6, 801496e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014922:	6803      	ldr	r3, [r0, #0]
 8014924:	695b      	ldr	r3, [r3, #20]
 8014926:	4798      	blx	r3
 8014928:	4606      	mov	r6, r0
 801492a:	b300      	cbz	r0, 801496e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801492c:	68e0      	ldr	r0, [r4, #12]
 801492e:	6803      	ldr	r3, [r0, #0]
 8014930:	4631      	mov	r1, r6
 8014932:	68db      	ldr	r3, [r3, #12]
 8014934:	4798      	blx	r3
 8014936:	4605      	mov	r5, r0
 8014938:	b1c8      	cbz	r0, 801496e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801493a:	7b43      	ldrb	r3, [r0, #13]
 801493c:	7a82      	ldrb	r2, [r0, #10]
 801493e:	005b      	lsls	r3, r3, #1
 8014940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014944:	4313      	orrs	r3, r2
 8014946:	8423      	strh	r3, [r4, #32]
 8014948:	7a63      	ldrb	r3, [r4, #9]
 801494a:	2b06      	cmp	r3, #6
 801494c:	d10f      	bne.n	801496e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801494e:	68e0      	ldr	r0, [r4, #12]
 8014950:	6803      	ldr	r3, [r0, #0]
 8014952:	462a      	mov	r2, r5
 8014954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014956:	4631      	mov	r1, r6
 8014958:	4798      	blx	r3
 801495a:	7b6b      	ldrb	r3, [r5, #13]
 801495c:	005b      	lsls	r3, r3, #1
 801495e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014962:	7aab      	ldrb	r3, [r5, #10]
 8014964:	4313      	orrs	r3, r2
 8014966:	4418      	add	r0, r3
 8014968:	8c23      	ldrh	r3, [r4, #32]
 801496a:	4418      	add	r0, r3
 801496c:	8420      	strh	r0, [r4, #32]
 801496e:	4620      	mov	r0, r4
 8014970:	bd70      	pop	{r4, r5, r6, pc}

08014972 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8014972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014976:	2400      	movs	r4, #0
 8014978:	b085      	sub	sp, #20
 801497a:	4681      	mov	r9, r0
 801497c:	4688      	mov	r8, r1
 801497e:	4692      	mov	sl, r2
 8014980:	469b      	mov	fp, r3
 8014982:	4627      	mov	r7, r4
 8014984:	4625      	mov	r5, r4
 8014986:	4626      	mov	r6, r4
 8014988:	4554      	cmp	r4, sl
 801498a:	da2a      	bge.n	80149e2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801498c:	2300      	movs	r3, #0
 801498e:	9303      	str	r3, [sp, #12]
 8014990:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014994:	429d      	cmp	r5, r3
 8014996:	d004      	beq.n	80149a2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8014998:	f242 030b 	movw	r3, #8203	; 0x200b
 801499c:	429d      	cmp	r5, r3
 801499e:	bf18      	it	ne
 80149a0:	462f      	movne	r7, r5
 80149a2:	ab03      	add	r3, sp, #12
 80149a4:	4642      	mov	r2, r8
 80149a6:	4659      	mov	r1, fp
 80149a8:	4648      	mov	r0, r9
 80149aa:	f003 f893 	bl	8017ad4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80149ae:	4605      	mov	r5, r0
 80149b0:	b1b8      	cbz	r0, 80149e2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80149b2:	280a      	cmp	r0, #10
 80149b4:	d015      	beq.n	80149e2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80149b6:	9a03      	ldr	r2, [sp, #12]
 80149b8:	b18a      	cbz	r2, 80149de <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80149ba:	7b50      	ldrb	r0, [r2, #13]
 80149bc:	7a93      	ldrb	r3, [r2, #10]
 80149be:	8895      	ldrh	r5, [r2, #4]
 80149c0:	0040      	lsls	r0, r0, #1
 80149c2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80149c6:	4303      	orrs	r3, r0
 80149c8:	9301      	str	r3, [sp, #4]
 80149ca:	f8d8 3000 	ldr.w	r3, [r8]
 80149ce:	4639      	mov	r1, r7
 80149d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149d2:	4640      	mov	r0, r8
 80149d4:	4798      	blx	r3
 80149d6:	9b01      	ldr	r3, [sp, #4]
 80149d8:	4418      	add	r0, r3
 80149da:	4406      	add	r6, r0
 80149dc:	b2b6      	uxth	r6, r6
 80149de:	3401      	adds	r4, #1
 80149e0:	e7d2      	b.n	8014988 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80149e2:	4630      	mov	r0, r6
 80149e4:	b005      	add	sp, #20
 80149e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080149ea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80149ea:	2a02      	cmp	r2, #2
 80149ec:	b530      	push	{r4, r5, lr}
 80149ee:	d011      	beq.n	8014a14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80149f0:	2a03      	cmp	r2, #3
 80149f2:	d01c      	beq.n	8014a2e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80149f4:	2a01      	cmp	r2, #1
 80149f6:	d10c      	bne.n	8014a12 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80149f8:	888b      	ldrh	r3, [r1, #4]
 80149fa:	8801      	ldrh	r1, [r0, #0]
 80149fc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8014a00:	8844      	ldrh	r4, [r0, #2]
 8014a02:	8004      	strh	r4, [r0, #0]
 8014a04:	1a5b      	subs	r3, r3, r1
 8014a06:	1a9b      	subs	r3, r3, r2
 8014a08:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014a0c:	8043      	strh	r3, [r0, #2]
 8014a0e:	8081      	strh	r1, [r0, #4]
 8014a10:	80c2      	strh	r2, [r0, #6]
 8014a12:	bd30      	pop	{r4, r5, pc}
 8014a14:	88cb      	ldrh	r3, [r1, #6]
 8014a16:	8842      	ldrh	r2, [r0, #2]
 8014a18:	1a9b      	subs	r3, r3, r2
 8014a1a:	88c2      	ldrh	r2, [r0, #6]
 8014a1c:	1a9b      	subs	r3, r3, r2
 8014a1e:	888a      	ldrh	r2, [r1, #4]
 8014a20:	8801      	ldrh	r1, [r0, #0]
 8014a22:	8043      	strh	r3, [r0, #2]
 8014a24:	1a52      	subs	r2, r2, r1
 8014a26:	8881      	ldrh	r1, [r0, #4]
 8014a28:	1a52      	subs	r2, r2, r1
 8014a2a:	8002      	strh	r2, [r0, #0]
 8014a2c:	e7f1      	b.n	8014a12 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014a2e:	88cb      	ldrh	r3, [r1, #6]
 8014a30:	8841      	ldrh	r1, [r0, #2]
 8014a32:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014a36:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014a3a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014a3e:	8045      	strh	r5, [r0, #2]
 8014a40:	1a5b      	subs	r3, r3, r1
 8014a42:	1a9b      	subs	r3, r3, r2
 8014a44:	8003      	strh	r3, [r0, #0]
 8014a46:	8082      	strh	r2, [r0, #4]
 8014a48:	80c4      	strh	r4, [r0, #6]
 8014a4a:	e7e2      	b.n	8014a12 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08014a4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8014a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a50:	b09f      	sub	sp, #124	; 0x7c
 8014a52:	9116      	str	r1, [sp, #88]	; 0x58
 8014a54:	9317      	str	r3, [sp, #92]	; 0x5c
 8014a56:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014a58:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014a5a:	8809      	ldrh	r1, [r1, #0]
 8014a5c:	889b      	ldrh	r3, [r3, #4]
 8014a5e:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8014a62:	9212      	str	r2, [sp, #72]	; 0x48
 8014a64:	440b      	add	r3, r1
 8014a66:	b21b      	sxth	r3, r3
 8014a68:	9310      	str	r3, [sp, #64]	; 0x40
 8014a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8014a6e:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8014a72:	7b19      	ldrb	r1, [r3, #12]
 8014a74:	7adb      	ldrb	r3, [r3, #11]
 8014a76:	9011      	str	r0, [sp, #68]	; 0x44
 8014a78:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8014a7c:	9114      	str	r1, [sp, #80]	; 0x50
 8014a7e:	9315      	str	r3, [sp, #84]	; 0x54
 8014a80:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8014a84:	2a00      	cmp	r2, #0
 8014a86:	d06a      	beq.n	8014b5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8014a88:	f898 3010 	ldrb.w	r3, [r8, #16]
 8014a8c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8014a8e:	2b06      	cmp	r3, #6
 8014a90:	bf14      	ite	ne
 8014a92:	2301      	movne	r3, #1
 8014a94:	2302      	moveq	r3, #2
 8014a96:	4413      	add	r3, r2
 8014a98:	f04f 0900 	mov.w	r9, #0
 8014a9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a9e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014aa2:	464c      	mov	r4, r9
 8014aa4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8014aa8:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8014aac:	4293      	cmp	r3, r2
 8014aae:	f280 808f 	bge.w	8014bd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8014ab8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8014abc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014ac0:	429c      	cmp	r4, r3
 8014ac2:	d006      	beq.n	8014ad2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8014ac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ac6:	f242 020b 	movw	r2, #8203	; 0x200b
 8014aca:	4294      	cmp	r4, r2
 8014acc:	bf18      	it	ne
 8014ace:	4623      	movne	r3, r4
 8014ad0:	930d      	str	r3, [sp, #52]	; 0x34
 8014ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ad4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8014ad6:	f8d8 2000 	ldr.w	r2, [r8]
 8014ada:	428b      	cmp	r3, r1
 8014adc:	db41      	blt.n	8014b62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8014ade:	6813      	ldr	r3, [r2, #0]
 8014ae0:	4610      	mov	r0, r2
 8014ae2:	695b      	ldr	r3, [r3, #20]
 8014ae4:	4798      	blx	r3
 8014ae6:	4604      	mov	r4, r0
 8014ae8:	f8d8 0000 	ldr.w	r0, [r8]
 8014aec:	6803      	ldr	r3, [r0, #0]
 8014aee:	aa1d      	add	r2, sp, #116	; 0x74
 8014af0:	689d      	ldr	r5, [r3, #8]
 8014af2:	4621      	mov	r1, r4
 8014af4:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014af8:	47a8      	blx	r5
 8014afa:	901c      	str	r0, [sp, #112]	; 0x70
 8014afc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014b00:	429c      	cmp	r4, r3
 8014b02:	f000 80eb 	beq.w	8014cdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014b06:	f242 030b 	movw	r3, #8203	; 0x200b
 8014b0a:	429c      	cmp	r4, r3
 8014b0c:	f000 80e6 	beq.w	8014cdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014b10:	2c00      	cmp	r4, #0
 8014b12:	f000 80f8 	beq.w	8014d06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8014b16:	2c0a      	cmp	r4, #10
 8014b18:	d060      	beq.n	8014bdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8014b1a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014b1c:	b36a      	cbz	r2, 8014b7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8014b1e:	8894      	ldrh	r4, [r2, #4]
 8014b20:	f1bb 0f00 	cmp.w	fp, #0
 8014b24:	d03b      	beq.n	8014b9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8014b26:	f892 900d 	ldrb.w	r9, [r2, #13]
 8014b2a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8014b2e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8014b32:	f892 900a 	ldrb.w	r9, [r2, #10]
 8014b36:	f1bb 0f01 	cmp.w	fp, #1
 8014b3a:	ea49 0903 	orr.w	r9, r9, r3
 8014b3e:	d134      	bne.n	8014baa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8014b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b42:	eba6 0609 	sub.w	r6, r6, r9
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d14f      	bne.n	8014bea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8014b4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b4c:	eb09 0306 	add.w	r3, r9, r6
 8014b50:	4413      	add	r3, r2
 8014b52:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014b54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014b58:	4293      	cmp	r3, r2
 8014b5a:	da51      	bge.n	8014c00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8014b5c:	e038      	b.n	8014bd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8014b5e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014b60:	e79a      	b.n	8014a98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8014b62:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8014b66:	9301      	str	r3, [sp, #4]
 8014b68:	ab1d      	add	r3, sp, #116	; 0x74
 8014b6a:	9300      	str	r3, [sp, #0]
 8014b6c:	4659      	mov	r1, fp
 8014b6e:	ab1c      	add	r3, sp, #112	; 0x70
 8014b70:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014b72:	f002 fff8 	bl	8017b66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8014b76:	4604      	mov	r4, r0
 8014b78:	e7c0      	b.n	8014afc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8014b7a:	f8d8 0000 	ldr.w	r0, [r8]
 8014b7e:	6803      	ldr	r3, [r0, #0]
 8014b80:	691b      	ldr	r3, [r3, #16]
 8014b82:	4798      	blx	r3
 8014b84:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014b88:	4298      	cmp	r0, r3
 8014b8a:	f000 80a7 	beq.w	8014cdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014b8e:	f242 030b 	movw	r3, #8203	; 0x200b
 8014b92:	4298      	cmp	r0, r3
 8014b94:	f000 80a2 	beq.w	8014cdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014b98:	f1bb 0f00 	cmp.w	fp, #0
 8014b9c:	d100      	bne.n	8014ba0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8014b9e:	444e      	add	r6, r9
 8014ba0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014ba2:	2a00      	cmp	r2, #0
 8014ba4:	d1bf      	bne.n	8014b26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8014ba6:	4691      	mov	r9, r2
 8014ba8:	e098      	b.n	8014cdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	f000 80ac 	beq.w	8014d0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2be>
 8014bb2:	f1bb 0f00 	cmp.w	fp, #0
 8014bb6:	d118      	bne.n	8014bea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8014bb8:	f8d8 0000 	ldr.w	r0, [r8]
 8014bbc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014bbe:	6803      	ldr	r3, [r0, #0]
 8014bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bc2:	4798      	blx	r3
 8014bc4:	4406      	add	r6, r0
 8014bc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014bca:	1af3      	subs	r3, r6, r3
 8014bcc:	4293      	cmp	r3, r2
 8014bce:	dd17      	ble.n	8014c00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8014bd0:	2c00      	cmp	r4, #0
 8014bd2:	f000 8098 	beq.w	8014d06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8014bd6:	2c0a      	cmp	r4, #10
 8014bd8:	f040 8086 	bne.w	8014ce8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8014bdc:	240a      	movs	r4, #10
 8014bde:	fab4 f084 	clz	r0, r4
 8014be2:	0940      	lsrs	r0, r0, #5
 8014be4:	b01f      	add	sp, #124	; 0x7c
 8014be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bea:	f8d8 0000 	ldr.w	r0, [r8]
 8014bee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014bf0:	6803      	ldr	r3, [r0, #0]
 8014bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bf4:	4798      	blx	r3
 8014bf6:	f1bb 0f01 	cmp.w	fp, #1
 8014bfa:	eba6 0600 	sub.w	r6, r6, r0
 8014bfe:	d0a4      	beq.n	8014b4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8014c00:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014c02:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014c04:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8014c08:	f9b3 7000 	ldrsh.w	r7, [r3]
 8014c0c:	7b43      	ldrb	r3, [r0, #13]
 8014c0e:	015b      	lsls	r3, r3, #5
 8014c10:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014c14:	7983      	ldrb	r3, [r0, #6]
 8014c16:	4431      	add	r1, r6
 8014c18:	4313      	orrs	r3, r2
 8014c1a:	440b      	add	r3, r1
 8014c1c:	42bb      	cmp	r3, r7
 8014c1e:	db5d      	blt.n	8014cdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c22:	4299      	cmp	r1, r3
 8014c24:	da5a      	bge.n	8014cdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014c26:	f8d8 0000 	ldr.w	r0, [r8]
 8014c2a:	6803      	ldr	r3, [r0, #0]
 8014c2c:	42b7      	cmp	r7, r6
 8014c2e:	bfc8      	it	gt
 8014c30:	1bbf      	subgt	r7, r7, r6
 8014c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c34:	bfcc      	ite	gt
 8014c36:	b2bf      	uxthgt	r7, r7
 8014c38:	2700      	movle	r7, #0
 8014c3a:	4798      	blx	r3
 8014c3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014c3e:	7b5a      	ldrb	r2, [r3, #13]
 8014c40:	00d1      	lsls	r1, r2, #3
 8014c42:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8014c46:	7a19      	ldrb	r1, [r3, #8]
 8014c48:	4329      	orrs	r1, r5
 8014c4a:	0655      	lsls	r5, r2, #25
 8014c4c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8014c4e:	bf44      	itt	mi
 8014c50:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8014c54:	b209      	sxthmi	r1, r1
 8014c56:	1945      	adds	r5, r0, r5
 8014c58:	1a6d      	subs	r5, r5, r1
 8014c5a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014c5c:	b2ad      	uxth	r5, r5
 8014c5e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8014c62:	fa0f fa85 	sxth.w	sl, r5
 8014c66:	4551      	cmp	r1, sl
 8014c68:	dd3c      	ble.n	8014ce4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8014c6a:	0112      	lsls	r2, r2, #4
 8014c6c:	79d8      	ldrb	r0, [r3, #7]
 8014c6e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014c72:	4302      	orrs	r2, r0
 8014c74:	4492      	add	sl, r2
 8014c76:	4551      	cmp	r1, sl
 8014c78:	dc30      	bgt.n	8014cdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014c7a:	1b4d      	subs	r5, r1, r5
 8014c7c:	b22d      	sxth	r5, r5
 8014c7e:	468a      	mov	sl, r1
 8014c80:	9319      	str	r3, [sp, #100]	; 0x64
 8014c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c84:	f8d8 0000 	ldr.w	r0, [r8]
 8014c88:	681a      	ldr	r2, [r3, #0]
 8014c8a:	6801      	ldr	r1, [r0, #0]
 8014c8c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8014c8e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014c90:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c92:	9218      	str	r2, [sp, #96]	; 0x60
 8014c94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014c96:	4788      	blx	r1
 8014c98:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014c9c:	910b      	str	r1, [sp, #44]	; 0x2c
 8014c9e:	f898 100e 	ldrb.w	r1, [r8, #14]
 8014ca2:	910a      	str	r1, [sp, #40]	; 0x28
 8014ca4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8014ca8:	9109      	str	r1, [sp, #36]	; 0x24
 8014caa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014cae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014cb0:	9305      	str	r3, [sp, #20]
 8014cb2:	b2ad      	uxth	r5, r5
 8014cb4:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8014cb8:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8014cbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014cbe:	9304      	str	r3, [sp, #16]
 8014cc0:	4437      	add	r7, r6
 8014cc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014cc6:	9206      	str	r2, [sp, #24]
 8014cc8:	b23f      	sxth	r7, r7
 8014cca:	f8cd a004 	str.w	sl, [sp, #4]
 8014cce:	9700      	str	r7, [sp, #0]
 8014cd0:	681a      	ldr	r2, [r3, #0]
 8014cd2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014cd4:	685b      	ldr	r3, [r3, #4]
 8014cd6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014cd8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014cda:	47a8      	blx	r5
 8014cdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cde:	3301      	adds	r3, #1
 8014ce0:	930e      	str	r3, [sp, #56]	; 0x38
 8014ce2:	e6e1      	b.n	8014aa8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8014ce4:	2500      	movs	r5, #0
 8014ce6:	e7cb      	b.n	8014c80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8014ce8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014cea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014cec:	3501      	adds	r5, #1
 8014cee:	429d      	cmp	r5, r3
 8014cf0:	f6bf af75 	bge.w	8014bde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8014cf4:	4659      	mov	r1, fp
 8014cf6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014cf8:	f7f1 fcd0 	bl	800669c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014cfc:	4604      	mov	r4, r0
 8014cfe:	b110      	cbz	r0, 8014d06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8014d00:	280a      	cmp	r0, #10
 8014d02:	d1f2      	bne.n	8014cea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8014d04:	e76a      	b.n	8014bdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8014d06:	2400      	movs	r4, #0
 8014d08:	e769      	b.n	8014bde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8014d0a:	f1bb 0f00 	cmp.w	fp, #0
 8014d0e:	f43f af5a 	beq.w	8014bc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8014d12:	e775      	b.n	8014c00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08014d14 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8014d14:	b530      	push	{r4, r5, lr}
 8014d16:	8ac4      	ldrh	r4, [r0, #22]
 8014d18:	8b45      	ldrh	r5, [r0, #26]
 8014d1a:	8343      	strh	r3, [r0, #26]
 8014d1c:	442c      	add	r4, r5
 8014d1e:	1ae4      	subs	r4, r4, r3
 8014d20:	82c4      	strh	r4, [r0, #22]
 8014d22:	8b83      	ldrh	r3, [r0, #28]
 8014d24:	8b04      	ldrh	r4, [r0, #24]
 8014d26:	4422      	add	r2, r4
 8014d28:	440c      	add	r4, r1
 8014d2a:	1a59      	subs	r1, r3, r1
 8014d2c:	83c2      	strh	r2, [r0, #30]
 8014d2e:	8304      	strh	r4, [r0, #24]
 8014d30:	8381      	strh	r1, [r0, #28]
 8014d32:	bd30      	pop	{r4, r5, pc}

08014d34 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8014d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d38:	4604      	mov	r4, r0
 8014d3a:	8a47      	ldrh	r7, [r0, #18]
 8014d3c:	68c0      	ldr	r0, [r0, #12]
 8014d3e:	6803      	ldr	r3, [r0, #0]
 8014d40:	b085      	sub	sp, #20
 8014d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d44:	4798      	blx	r3
 8014d46:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8014d4a:	7a63      	ldrb	r3, [r4, #9]
 8014d4c:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8014d50:	42b7      	cmp	r7, r6
 8014d52:	f103 33ff 	add.w	r3, r3, #4294967295
 8014d56:	bfac      	ite	ge
 8014d58:	f04f 0900 	movge.w	r9, #0
 8014d5c:	f04f 0901 	movlt.w	r9, #1
 8014d60:	2b05      	cmp	r3, #5
 8014d62:	d804      	bhi.n	8014d6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 8014d64:	e8df f003 	tbb	[pc, r3]
 8014d68:	470e0854 	.word	0x470e0854
 8014d6c:	4c4c      	.short	0x4c4c
 8014d6e:	2500      	movs	r5, #0
 8014d70:	46a9      	mov	r9, r5
 8014d72:	462e      	mov	r6, r5
 8014d74:	462f      	mov	r7, r5
 8014d76:	e00d      	b.n	8014d94 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8014d78:	42b7      	cmp	r7, r6
 8014d7a:	bfb4      	ite	lt
 8014d7c:	2600      	movlt	r6, #0
 8014d7e:	2601      	movge	r6, #1
 8014d80:	2500      	movs	r5, #0
 8014d82:	e7f7      	b.n	8014d74 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8014d84:	42b7      	cmp	r7, r6
 8014d86:	464d      	mov	r5, r9
 8014d88:	f04f 0900 	mov.w	r9, #0
 8014d8c:	bfb4      	ite	lt
 8014d8e:	2600      	movlt	r6, #0
 8014d90:	2601      	movge	r6, #1
 8014d92:	464f      	mov	r7, r9
 8014d94:	f04f 0800 	mov.w	r8, #0
 8014d98:	f8a4 8016 	strh.w	r8, [r4, #22]
 8014d9c:	f8a4 8018 	strh.w	r8, [r4, #24]
 8014da0:	f8cd 8004 	str.w	r8, [sp, #4]
 8014da4:	2300      	movs	r3, #0
 8014da6:	9303      	str	r3, [sp, #12]
 8014da8:	8823      	ldrh	r3, [r4, #0]
 8014daa:	2b20      	cmp	r3, #32
 8014dac:	d034      	beq.n	8014e18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 8014dae:	f242 010b 	movw	r1, #8203	; 0x200b
 8014db2:	1a5a      	subs	r2, r3, r1
 8014db4:	f1d2 0a00 	rsbs	sl, r2, #0
 8014db8:	eb4a 0a02 	adc.w	sl, sl, r2
 8014dbc:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8014dc0:	4293      	cmp	r3, r2
 8014dc2:	d009      	beq.n	8014dd8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 8014dc4:	428b      	cmp	r3, r1
 8014dc6:	9a01      	ldr	r2, [sp, #4]
 8014dc8:	bf18      	it	ne
 8014dca:	461a      	movne	r2, r3
 8014dcc:	9201      	str	r2, [sp, #4]
 8014dce:	bf0c      	ite	eq
 8014dd0:	f04f 0a01 	moveq.w	sl, #1
 8014dd4:	f04f 0a00 	movne.w	sl, #0
 8014dd8:	ab03      	add	r3, sp, #12
 8014dda:	68e2      	ldr	r2, [r4, #12]
 8014ddc:	7a21      	ldrb	r1, [r4, #8]
 8014dde:	6860      	ldr	r0, [r4, #4]
 8014de0:	f002 fe78 	bl	8017ad4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014de4:	8020      	strh	r0, [r4, #0]
 8014de6:	b9d8      	cbnz	r0, 8014e20 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 8014de8:	8ba2      	ldrh	r2, [r4, #28]
 8014dea:	2300      	movs	r3, #0
 8014dec:	4611      	mov	r1, r2
 8014dee:	4620      	mov	r0, r4
 8014df0:	f7ff ff90 	bl	8014d14 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8014df4:	e06e      	b.n	8014ed4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 8014df6:	2500      	movs	r5, #0
 8014df8:	46a9      	mov	r9, r5
 8014dfa:	462e      	mov	r6, r5
 8014dfc:	2701      	movs	r7, #1
 8014dfe:	e7c9      	b.n	8014d94 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8014e00:	42b7      	cmp	r7, r6
 8014e02:	f04f 0500 	mov.w	r5, #0
 8014e06:	bfb4      	ite	lt
 8014e08:	2700      	movlt	r7, #0
 8014e0a:	2701      	movge	r7, #1
 8014e0c:	462e      	mov	r6, r5
 8014e0e:	e7c1      	b.n	8014d94 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8014e10:	2500      	movs	r5, #0
 8014e12:	46a9      	mov	r9, r5
 8014e14:	2601      	movs	r6, #1
 8014e16:	e7ad      	b.n	8014d74 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8014e18:	9301      	str	r3, [sp, #4]
 8014e1a:	f04f 0a01 	mov.w	sl, #1
 8014e1e:	e7db      	b.n	8014dd8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 8014e20:	8b63      	ldrh	r3, [r4, #26]
 8014e22:	280a      	cmp	r0, #10
 8014e24:	f103 0301 	add.w	r3, r3, #1
 8014e28:	8363      	strh	r3, [r4, #26]
 8014e2a:	d0dd      	beq.n	8014de8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 8014e2c:	9a03      	ldr	r2, [sp, #12]
 8014e2e:	bb62      	cbnz	r2, 8014e8a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 8014e30:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8014e34:	4298      	cmp	r0, r3
 8014e36:	d003      	beq.n	8014e40 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 8014e38:	f242 030b 	movw	r3, #8203	; 0x200b
 8014e3c:	4298      	cmp	r0, r3
 8014e3e:	d1b1      	bne.n	8014da4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014e40:	8823      	ldrh	r3, [r4, #0]
 8014e42:	8ba1      	ldrh	r1, [r4, #28]
 8014e44:	2b20      	cmp	r3, #32
 8014e46:	d003      	beq.n	8014e50 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 8014e48:	f242 000b 	movw	r0, #8203	; 0x200b
 8014e4c:	4283      	cmp	r3, r0
 8014e4e:	d131      	bne.n	8014eb4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 8014e50:	f1ba 0f00 	cmp.w	sl, #0
 8014e54:	bf0a      	itet	eq
 8014e56:	4688      	moveq	r8, r1
 8014e58:	4650      	movne	r0, sl
 8014e5a:	2001      	moveq	r0, #1
 8014e5c:	440a      	add	r2, r1
 8014e5e:	8b23      	ldrh	r3, [r4, #24]
 8014e60:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8014e64:	b292      	uxth	r2, r2
 8014e66:	83a2      	strh	r2, [r4, #28]
 8014e68:	4413      	add	r3, r2
 8014e6a:	f1b9 0f00 	cmp.w	r9, #0
 8014e6e:	d102      	bne.n	8014e76 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 8014e70:	2d00      	cmp	r5, #0
 8014e72:	d042      	beq.n	8014efa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 8014e74:	b300      	cbz	r0, 8014eb8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 8014e76:	8c21      	ldrh	r1, [r4, #32]
 8014e78:	4419      	add	r1, r3
 8014e7a:	458c      	cmp	ip, r1
 8014e7c:	da37      	bge.n	8014eee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 8014e7e:	8ae1      	ldrh	r1, [r4, #22]
 8014e80:	2900      	cmp	r1, #0
 8014e82:	d034      	beq.n	8014eee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 8014e84:	4563      	cmp	r3, ip
 8014e86:	dd8d      	ble.n	8014da4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014e88:	e01d      	b.n	8014ec6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 8014e8a:	8893      	ldrh	r3, [r2, #4]
 8014e8c:	8023      	strh	r3, [r4, #0]
 8014e8e:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8014e92:	9901      	ldr	r1, [sp, #4]
 8014e94:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8014e98:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8014e9c:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8014ea0:	ea4b 0b00 	orr.w	fp, fp, r0
 8014ea4:	68e0      	ldr	r0, [r4, #12]
 8014ea6:	6803      	ldr	r3, [r0, #0]
 8014ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014eaa:	4798      	blx	r3
 8014eac:	eb0b 0200 	add.w	r2, fp, r0
 8014eb0:	b292      	uxth	r2, r2
 8014eb2:	e7c5      	b.n	8014e40 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 8014eb4:	2000      	movs	r0, #0
 8014eb6:	e7d1      	b.n	8014e5c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 8014eb8:	4563      	cmp	r3, ip
 8014eba:	f77f af73 	ble.w	8014da4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014ebe:	8ae3      	ldrh	r3, [r4, #22]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	f43f af6f 	beq.w	8014da4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8014ecc:	8c22      	ldrh	r2, [r4, #32]
 8014ece:	8be3      	ldrh	r3, [r4, #30]
 8014ed0:	4413      	add	r3, r2
 8014ed2:	83e3      	strh	r3, [r4, #30]
 8014ed4:	68e0      	ldr	r0, [r4, #12]
 8014ed6:	6803      	ldr	r3, [r0, #0]
 8014ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014eda:	4798      	blx	r3
 8014edc:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8014ee0:	4418      	add	r0, r3
 8014ee2:	8a63      	ldrh	r3, [r4, #18]
 8014ee4:	1a18      	subs	r0, r3, r0
 8014ee6:	8260      	strh	r0, [r4, #18]
 8014ee8:	b005      	add	sp, #20
 8014eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eee:	2300      	movs	r3, #0
 8014ef0:	4611      	mov	r1, r2
 8014ef2:	4620      	mov	r0, r4
 8014ef4:	f7ff ff0e 	bl	8014d14 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8014ef8:	e754      	b.n	8014da4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014efa:	4563      	cmp	r3, ip
 8014efc:	dd14      	ble.n	8014f28 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 8014efe:	b117      	cbz	r7, 8014f06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 8014f00:	2301      	movs	r3, #1
 8014f02:	460a      	mov	r2, r1
 8014f04:	e772      	b.n	8014dec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8014f06:	2e00      	cmp	r6, #0
 8014f08:	f43f af4c 	beq.w	8014da4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014f0c:	2800      	cmp	r0, #0
 8014f0e:	f47f af49 	bne.w	8014da4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014f12:	f1ba 0f00 	cmp.w	sl, #0
 8014f16:	d002      	beq.n	8014f1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 8014f18:	2301      	movs	r3, #1
 8014f1a:	4642      	mov	r2, r8
 8014f1c:	e767      	b.n	8014dee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 8014f1e:	8ae3      	ldrh	r3, [r4, #22]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	f43f af3f 	beq.w	8014da4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014f26:	e7d5      	b.n	8014ed4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 8014f28:	2800      	cmp	r0, #0
 8014f2a:	f47f af3b 	bne.w	8014da4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014f2e:	f1ba 0f00 	cmp.w	sl, #0
 8014f32:	f43f af37 	beq.w	8014da4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8014f36:	2301      	movs	r3, #1
 8014f38:	4642      	mov	r2, r8
 8014f3a:	e7da      	b.n	8014ef2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

08014f3c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8014f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f3e:	4605      	mov	r5, r0
 8014f40:	b08f      	sub	sp, #60	; 0x3c
 8014f42:	4617      	mov	r7, r2
 8014f44:	461c      	mov	r4, r3
 8014f46:	460e      	mov	r6, r1
 8014f48:	b1d1      	cbz	r1, 8014f80 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	4620      	mov	r0, r4
 8014f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f50:	4798      	blx	r3
 8014f52:	4240      	negs	r0, r0
 8014f54:	b200      	sxth	r0, r0
 8014f56:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8014f5a:	9603      	str	r6, [sp, #12]
 8014f5c:	9700      	str	r7, [sp, #0]
 8014f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f62:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8014f66:	4629      	mov	r1, r5
 8014f68:	a805      	add	r0, sp, #20
 8014f6a:	f7ff fcbf 	bl	80148ec <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8014f6e:	2401      	movs	r4, #1
 8014f70:	a805      	add	r0, sp, #20
 8014f72:	f7ff fedf 	bl	8014d34 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8014f76:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8014f7a:	b163      	cbz	r3, 8014f96 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8014f7c:	3401      	adds	r4, #1
 8014f7e:	e7f7      	b.n	8014f70 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8014f80:	f002 fe76 	bl	8017c70 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014f84:	2401      	movs	r4, #1
 8014f86:	280a      	cmp	r0, #10
 8014f88:	4628      	mov	r0, r5
 8014f8a:	bf08      	it	eq
 8014f8c:	3401      	addeq	r4, #1
 8014f8e:	f002 fe6f 	bl	8017c70 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014f92:	2800      	cmp	r0, #0
 8014f94:	d1f7      	bne.n	8014f86 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8014f96:	b2a0      	uxth	r0, r4
 8014f98:	b00f      	add	sp, #60	; 0x3c
 8014f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014f9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8014f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa0:	b0e3      	sub	sp, #396	; 0x18c
 8014fa2:	461c      	mov	r4, r3
 8014fa4:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8014fa6:	4683      	mov	fp, r0
 8014fa8:	4688      	mov	r8, r1
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	f000 8112 	beq.w	80151d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8014fb0:	6823      	ldr	r3, [r4, #0]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	f000 810e 	beq.w	80151d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8014fb8:	7ba3      	ldrb	r3, [r4, #14]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	f000 810a 	beq.w	80151d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8014fc0:	6810      	ldr	r0, [r2, #0]
 8014fc2:	6851      	ldr	r1, [r2, #4]
 8014fc4:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8014fc8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8014fcc:	ad0a      	add	r5, sp, #40	; 0x28
 8014fce:	462b      	mov	r3, r5
 8014fd0:	c303      	stmia	r3!, {r0, r1}
 8014fd2:	2100      	movs	r1, #0
 8014fd4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8014fd8:	910c      	str	r1, [sp, #48]	; 0x30
 8014fda:	79a2      	ldrb	r2, [r4, #6]
 8014fdc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014fe0:	a90c      	add	r1, sp, #48	; 0x30
 8014fe2:	4628      	mov	r0, r5
 8014fe4:	f7ff fd01 	bl	80149ea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8014fe8:	a90c      	add	r1, sp, #48	; 0x30
 8014fea:	4608      	mov	r0, r1
 8014fec:	79a2      	ldrb	r2, [r4, #6]
 8014fee:	f7ff fcfc 	bl	80149ea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8014ff2:	a817      	add	r0, sp, #92	; 0x5c
 8014ff4:	f002 fa10 	bl	8017418 <_ZN8touchgfx12TextProviderC1Ev>
 8014ff8:	6820      	ldr	r0, [r4, #0]
 8014ffa:	6803      	ldr	r3, [r0, #0]
 8014ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ffe:	4798      	blx	r3
 8015000:	4606      	mov	r6, r0
 8015002:	6820      	ldr	r0, [r4, #0]
 8015004:	6803      	ldr	r3, [r0, #0]
 8015006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015008:	4798      	blx	r3
 801500a:	4633      	mov	r3, r6
 801500c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801500e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8015010:	9000      	str	r0, [sp, #0]
 8015012:	a817      	add	r0, sp, #92	; 0x5c
 8015014:	f002 fa5b 	bl	80174ce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015018:	6820      	ldr	r0, [r4, #0]
 801501a:	f894 a004 	ldrb.w	sl, [r4, #4]
 801501e:	6803      	ldr	r3, [r0, #0]
 8015020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015022:	4798      	blx	r3
 8015024:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8015028:	6823      	ldr	r3, [r4, #0]
 801502a:	4607      	mov	r7, r0
 801502c:	4406      	add	r6, r0
 801502e:	a830      	add	r0, sp, #192	; 0xc0
 8015030:	f893 9009 	ldrb.w	r9, [r3, #9]
 8015034:	f002 f9f0 	bl	8017418 <_ZN8touchgfx12TextProviderC1Ev>
 8015038:	7c23      	ldrb	r3, [r4, #16]
 801503a:	b17b      	cbz	r3, 801505c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801503c:	6820      	ldr	r0, [r4, #0]
 801503e:	6803      	ldr	r3, [r0, #0]
 8015040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015042:	4798      	blx	r3
 8015044:	9009      	str	r0, [sp, #36]	; 0x24
 8015046:	6820      	ldr	r0, [r4, #0]
 8015048:	6802      	ldr	r2, [r0, #0]
 801504a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801504c:	4790      	blx	r2
 801504e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015050:	9000      	str	r0, [sp, #0]
 8015052:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8015054:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8015056:	a830      	add	r0, sp, #192	; 0xc0
 8015058:	f002 fa39 	bl	80174ce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801505c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015060:	7be2      	ldrb	r2, [r4, #15]
 8015062:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8015066:	1a8a      	subs	r2, r1, r2
 8015068:	7c21      	ldrb	r1, [r4, #16]
 801506a:	9103      	str	r1, [sp, #12]
 801506c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8015070:	9102      	str	r1, [sp, #8]
 8015072:	6821      	ldr	r1, [r4, #0]
 8015074:	9101      	str	r1, [sp, #4]
 8015076:	7961      	ldrb	r1, [r4, #5]
 8015078:	9100      	str	r1, [sp, #0]
 801507a:	b292      	uxth	r2, r2
 801507c:	a930      	add	r1, sp, #192	; 0xc0
 801507e:	a80e      	add	r0, sp, #56	; 0x38
 8015080:	f7ff fc34 	bl	80148ec <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015084:	2e00      	cmp	r6, #0
 8015086:	dc5b      	bgt.n	8015140 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8015088:	af17      	add	r7, sp, #92	; 0x5c
 801508a:	f04f 0900 	mov.w	r9, #0
 801508e:	7c23      	ldrb	r3, [r4, #16]
 8015090:	2b00      	cmp	r3, #0
 8015092:	f000 80b1 	beq.w	80151f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8015096:	a80e      	add	r0, sp, #56	; 0x38
 8015098:	f7ff fe4c 	bl	8014d34 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801509c:	f1ba 0f00 	cmp.w	sl, #0
 80150a0:	f000 80a5 	beq.w	80151ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80150a4:	7c23      	ldrb	r3, [r4, #16]
 80150a6:	9309      	str	r3, [sp, #36]	; 0x24
 80150a8:	2264      	movs	r2, #100	; 0x64
 80150aa:	4639      	mov	r1, r7
 80150ac:	a849      	add	r0, sp, #292	; 0x124
 80150ae:	f011 ffe9 	bl	8027084 <memcpy>
 80150b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	f000 80a7 	beq.w	8015208 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80150ba:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80150be:	7922      	ldrb	r2, [r4, #4]
 80150c0:	2a01      	cmp	r2, #1
 80150c2:	f040 808a 	bne.w	80151da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 80150c6:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 80150ca:	1ac0      	subs	r0, r0, r3
 80150cc:	2302      	movs	r3, #2
 80150ce:	fb90 f0f3 	sdiv	r0, r0, r3
 80150d2:	b200      	sxth	r0, r0
 80150d4:	7c23      	ldrb	r3, [r4, #16]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	f000 808b 	beq.w	80151f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80150dc:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 80150e0:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 80150e4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80150e8:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80150ec:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80150f0:	4410      	add	r0, r2
 80150f2:	b200      	sxth	r0, r0
 80150f4:	9000      	str	r0, [sp, #0]
 80150f6:	e9cd 9703 	strd	r9, r7, [sp, #12]
 80150fa:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80150fe:	4642      	mov	r2, r8
 8015100:	2100      	movs	r1, #0
 8015102:	4658      	mov	r0, fp
 8015104:	f7ff fca2 	bl	8014a4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8015108:	2800      	cmp	r0, #0
 801510a:	d163      	bne.n	80151d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801510c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8015110:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8015114:	b2b2      	uxth	r2, r6
 8015116:	4413      	add	r3, r2
 8015118:	1a8a      	subs	r2, r1, r2
 801511a:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801511e:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8015122:	b21b      	sxth	r3, r3
 8015124:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015128:	2a00      	cmp	r2, #0
 801512a:	d153      	bne.n	80151d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801512c:	6822      	ldr	r2, [r4, #0]
 801512e:	8869      	ldrh	r1, [r5, #2]
 8015130:	7a12      	ldrb	r2, [r2, #8]
 8015132:	1a9b      	subs	r3, r3, r2
 8015134:	88ea      	ldrh	r2, [r5, #6]
 8015136:	440a      	add	r2, r1
 8015138:	b212      	sxth	r2, r2
 801513a:	4293      	cmp	r3, r2
 801513c:	dda7      	ble.n	801508e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801513e:	e049      	b.n	80151d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015140:	7c23      	ldrb	r3, [r4, #16]
 8015142:	444f      	add	r7, r9
 8015144:	b1c3      	cbz	r3, 8015178 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8015146:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801514a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801514e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015152:	443b      	add	r3, r7
 8015154:	4293      	cmp	r3, r2
 8015156:	da97      	bge.n	8015088 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015158:	a80e      	add	r0, sp, #56	; 0x38
 801515a:	f7ff fdeb 	bl	8014d34 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801515e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8015162:	3b01      	subs	r3, #1
 8015164:	b29b      	uxth	r3, r3
 8015166:	454b      	cmp	r3, r9
 8015168:	9309      	str	r3, [sp, #36]	; 0x24
 801516a:	d021      	beq.n	80151b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801516c:	7961      	ldrb	r1, [r4, #5]
 801516e:	a817      	add	r0, sp, #92	; 0x5c
 8015170:	f7f1 fa94 	bl	800669c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015176:	e7f4      	b.n	8015162 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8015178:	fa1f f986 	uxth.w	r9, r6
 801517c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015180:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015184:	443b      	add	r3, r7
 8015186:	4293      	cmp	r3, r2
 8015188:	f6bf af7e 	bge.w	8015088 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801518c:	a817      	add	r0, sp, #92	; 0x5c
 801518e:	f002 fd6f 	bl	8017c70 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015192:	b1f8      	cbz	r0, 80151d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015194:	280a      	cmp	r0, #10
 8015196:	d1f1      	bne.n	801517c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8015198:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801519c:	444b      	add	r3, r9
 801519e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80151a2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80151a6:	eba3 0309 	sub.w	r3, r3, r9
 80151aa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80151ae:	e7e5      	b.n	801517c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80151b0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80151b4:	b2b3      	uxth	r3, r6
 80151b6:	441a      	add	r2, r3
 80151b8:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80151bc:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 80151c0:	1ad3      	subs	r3, r2, r3
 80151c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80151c6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80151ca:	b11b      	cbz	r3, 80151d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80151cc:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d0ba      	beq.n	801514a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80151d4:	b063      	add	sp, #396	; 0x18c
 80151d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151da:	2a02      	cmp	r2, #2
 80151dc:	d105      	bne.n	80151ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 80151de:	7be2      	ldrb	r2, [r4, #15]
 80151e0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80151e4:	1a80      	subs	r0, r0, r2
 80151e6:	1ac0      	subs	r0, r0, r3
 80151e8:	e773      	b.n	80150d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 80151ea:	2000      	movs	r0, #0
 80151ec:	e772      	b.n	80150d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80151ee:	7be0      	ldrb	r0, [r4, #15]
 80151f0:	e770      	b.n	80150d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80151f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80151f6:	e773      	b.n	80150e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80151f8:	f1ba 0f00 	cmp.w	sl, #0
 80151fc:	d0f7      	beq.n	80151ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80151fe:	2264      	movs	r2, #100	; 0x64
 8015200:	4639      	mov	r1, r7
 8015202:	a849      	add	r0, sp, #292	; 0x124
 8015204:	f011 ff3e 	bl	8027084 <memcpy>
 8015208:	2300      	movs	r3, #0
 801520a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801520e:	6821      	ldr	r1, [r4, #0]
 8015210:	a849      	add	r0, sp, #292	; 0x124
 8015212:	f7ff fbae 	bl	8014972 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015216:	b203      	sxth	r3, r0
 8015218:	e751      	b.n	80150be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801521a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801521a:	2b03      	cmp	r3, #3
 801521c:	d818      	bhi.n	8015250 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801521e:	e8df f003 	tbb	[pc, r3]
 8015222:	0602      	.short	0x0602
 8015224:	130d      	.short	0x130d
 8015226:	f9b0 2000 	ldrsh.w	r2, [r0]
 801522a:	1850      	adds	r0, r2, r1
 801522c:	4770      	bx	lr
 801522e:	8803      	ldrh	r3, [r0, #0]
 8015230:	8880      	ldrh	r0, [r0, #4]
 8015232:	4418      	add	r0, r3
 8015234:	b200      	sxth	r0, r0
 8015236:	1a80      	subs	r0, r0, r2
 8015238:	3801      	subs	r0, #1
 801523a:	4770      	bx	lr
 801523c:	8803      	ldrh	r3, [r0, #0]
 801523e:	8880      	ldrh	r0, [r0, #4]
 8015240:	4418      	add	r0, r3
 8015242:	b200      	sxth	r0, r0
 8015244:	1a40      	subs	r0, r0, r1
 8015246:	e7f7      	b.n	8015238 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8015248:	f9b0 0000 	ldrsh.w	r0, [r0]
 801524c:	4410      	add	r0, r2
 801524e:	4770      	bx	lr
 8015250:	2000      	movs	r0, #0
 8015252:	4770      	bx	lr

08015254 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8015254:	2b03      	cmp	r3, #3
 8015256:	d817      	bhi.n	8015288 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8015258:	e8df f003 	tbb	[pc, r3]
 801525c:	10090602 	.word	0x10090602
 8015260:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015264:	1850      	adds	r0, r2, r1
 8015266:	4770      	bx	lr
 8015268:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801526c:	e7fa      	b.n	8015264 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801526e:	8843      	ldrh	r3, [r0, #2]
 8015270:	88c0      	ldrh	r0, [r0, #6]
 8015272:	4418      	add	r0, r3
 8015274:	b200      	sxth	r0, r0
 8015276:	1a80      	subs	r0, r0, r2
 8015278:	3801      	subs	r0, #1
 801527a:	4770      	bx	lr
 801527c:	8843      	ldrh	r3, [r0, #2]
 801527e:	88c0      	ldrh	r0, [r0, #6]
 8015280:	4418      	add	r0, r3
 8015282:	b200      	sxth	r0, r0
 8015284:	1a40      	subs	r0, r0, r1
 8015286:	e7f7      	b.n	8015278 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8015288:	2000      	movs	r0, #0
 801528a:	4770      	bx	lr

0801528c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801528c:	4b01      	ldr	r3, [pc, #4]	; (8015294 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801528e:	2200      	movs	r2, #0
 8015290:	601a      	str	r2, [r3, #0]
 8015292:	4770      	bx	lr
 8015294:	20014620 	.word	0x20014620

08015298 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8015298:	4603      	mov	r3, r0
 801529a:	b1c8      	cbz	r0, 80152d0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801529c:	0c02      	lsrs	r2, r0, #16
 801529e:	0412      	lsls	r2, r2, #16
 80152a0:	b9a2      	cbnz	r2, 80152cc <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80152a2:	0403      	lsls	r3, r0, #16
 80152a4:	2010      	movs	r0, #16
 80152a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80152aa:	bf04      	itt	eq
 80152ac:	021b      	lsleq	r3, r3, #8
 80152ae:	3008      	addeq	r0, #8
 80152b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80152b4:	bf04      	itt	eq
 80152b6:	011b      	lsleq	r3, r3, #4
 80152b8:	3004      	addeq	r0, #4
 80152ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80152be:	bf04      	itt	eq
 80152c0:	009b      	lsleq	r3, r3, #2
 80152c2:	3002      	addeq	r0, #2
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	db04      	blt.n	80152d2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80152c8:	3001      	adds	r0, #1
 80152ca:	4770      	bx	lr
 80152cc:	2000      	movs	r0, #0
 80152ce:	e7ea      	b.n	80152a6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80152d0:	2020      	movs	r0, #32
 80152d2:	4770      	bx	lr

080152d4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80152d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d8:	b087      	sub	sp, #28
 80152da:	460d      	mov	r5, r1
 80152dc:	4616      	mov	r6, r2
 80152de:	4698      	mov	r8, r3
 80152e0:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80152e4:	4601      	mov	r1, r0
 80152e6:	b120      	cbz	r0, 80152f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80152e8:	b11a      	cbz	r2, 80152f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80152ea:	2d1f      	cmp	r5, #31
 80152ec:	d801      	bhi.n	80152f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80152ee:	2b1f      	cmp	r3, #31
 80152f0:	d904      	bls.n	80152fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80152f2:	2000      	movs	r0, #0
 80152f4:	6038      	str	r0, [r7, #0]
 80152f6:	b007      	add	sp, #28
 80152f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152fc:	b97d      	cbnz	r5, 801531e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80152fe:	b143      	cbz	r3, 8015312 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8015300:	4602      	mov	r2, r0
 8015302:	e9cd 4700 	strd	r4, r7, [sp]
 8015306:	462b      	mov	r3, r5
 8015308:	4641      	mov	r1, r8
 801530a:	4630      	mov	r0, r6
 801530c:	f7ff ffe2 	bl	80152d4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015310:	e7f1      	b.n	80152f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8015312:	f04f 33ff 	mov.w	r3, #4294967295
 8015316:	603b      	str	r3, [r7, #0]
 8015318:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801531c:	e7eb      	b.n	80152f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801531e:	fa32 fa05 	lsrs.w	sl, r2, r5
 8015322:	d106      	bne.n	8015332 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8015324:	4346      	muls	r6, r0
 8015326:	fbb6 f0f4 	udiv	r0, r6, r4
 801532a:	fb04 6610 	mls	r6, r4, r0, r6
 801532e:	603e      	str	r6, [r7, #0]
 8015330:	e7e1      	b.n	80152f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8015332:	2201      	movs	r2, #1
 8015334:	40aa      	lsls	r2, r5
 8015336:	3a01      	subs	r2, #1
 8015338:	4016      	ands	r6, r2
 801533a:	fa00 fb05 	lsl.w	fp, r0, r5
 801533e:	4630      	mov	r0, r6
 8015340:	fbbb f9f4 	udiv	r9, fp, r4
 8015344:	fb0a f309 	mul.w	r3, sl, r9
 8015348:	9303      	str	r3, [sp, #12]
 801534a:	f7ff ffa5 	bl	8015298 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801534e:	462b      	mov	r3, r5
 8015350:	460a      	mov	r2, r1
 8015352:	e9cd 4700 	strd	r4, r7, [sp]
 8015356:	4601      	mov	r1, r0
 8015358:	4630      	mov	r0, r6
 801535a:	f7ff ffbb 	bl	80152d4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801535e:	fb04 b919 	mls	r9, r4, r9, fp
 8015362:	4606      	mov	r6, r0
 8015364:	4648      	mov	r0, r9
 8015366:	eb05 0108 	add.w	r1, r5, r8
 801536a:	f7ff ff95 	bl	8015298 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801536e:	ab05      	add	r3, sp, #20
 8015370:	e9cd 4300 	strd	r4, r3, [sp]
 8015374:	464a      	mov	r2, r9
 8015376:	4603      	mov	r3, r0
 8015378:	4650      	mov	r0, sl
 801537a:	f7ff ffab 	bl	80152d4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801537e:	6839      	ldr	r1, [r7, #0]
 8015380:	9a05      	ldr	r2, [sp, #20]
 8015382:	9b03      	ldr	r3, [sp, #12]
 8015384:	4411      	add	r1, r2
 8015386:	fbb1 f2f4 	udiv	r2, r1, r4
 801538a:	18d3      	adds	r3, r2, r3
 801538c:	441e      	add	r6, r3
 801538e:	fb04 1412 	mls	r4, r4, r2, r1
 8015392:	4430      	add	r0, r6
 8015394:	603c      	str	r4, [r7, #0]
 8015396:	e7ae      	b.n	80152f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08015398 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8015398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801539c:	b085      	sub	sp, #20
 801539e:	f1b0 0900 	subs.w	r9, r0, #0
 80153a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80153a4:	461d      	mov	r5, r3
 80153a6:	bfbf      	itttt	lt
 80153a8:	6823      	ldrlt	r3, [r4, #0]
 80153aa:	425b      	neglt	r3, r3
 80153ac:	f1c9 0900 	rsblt	r9, r9, #0
 80153b0:	6023      	strlt	r3, [r4, #0]
 80153b2:	bfb4      	ite	lt
 80153b4:	f04f 36ff 	movlt.w	r6, #4294967295
 80153b8:	2601      	movge	r6, #1
 80153ba:	2a00      	cmp	r2, #0
 80153bc:	4617      	mov	r7, r2
 80153be:	da04      	bge.n	80153ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80153c0:	6823      	ldr	r3, [r4, #0]
 80153c2:	425b      	negs	r3, r3
 80153c4:	4257      	negs	r7, r2
 80153c6:	4276      	negs	r6, r6
 80153c8:	6023      	str	r3, [r4, #0]
 80153ca:	2d00      	cmp	r5, #0
 80153cc:	4638      	mov	r0, r7
 80153ce:	bfba      	itte	lt
 80153d0:	426d      	neglt	r5, r5
 80153d2:	f04f 38ff 	movlt.w	r8, #4294967295
 80153d6:	f04f 0801 	movge.w	r8, #1
 80153da:	f7ff ff5d 	bl	8015298 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80153de:	ab03      	add	r3, sp, #12
 80153e0:	e9cd 5300 	strd	r5, r3, [sp]
 80153e4:	463a      	mov	r2, r7
 80153e6:	4603      	mov	r3, r0
 80153e8:	4648      	mov	r0, r9
 80153ea:	f7ff ff73 	bl	80152d4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80153ee:	6823      	ldr	r3, [r4, #0]
 80153f0:	9a03      	ldr	r2, [sp, #12]
 80153f2:	4546      	cmp	r6, r8
 80153f4:	441a      	add	r2, r3
 80153f6:	fb92 f3f5 	sdiv	r3, r2, r5
 80153fa:	4418      	add	r0, r3
 80153fc:	bf18      	it	ne
 80153fe:	4240      	negne	r0, r0
 8015400:	fb05 2313 	mls	r3, r5, r3, r2
 8015404:	1c72      	adds	r2, r6, #1
 8015406:	6023      	str	r3, [r4, #0]
 8015408:	d105      	bne.n	8015416 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801540a:	2b00      	cmp	r3, #0
 801540c:	f1c3 0200 	rsb	r2, r3, #0
 8015410:	db0b      	blt.n	801542a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8015412:	6022      	str	r2, [r4, #0]
 8015414:	e006      	b.n	8015424 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015416:	2e01      	cmp	r6, #1
 8015418:	d104      	bne.n	8015424 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801541a:	2b00      	cmp	r3, #0
 801541c:	da02      	bge.n	8015424 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801541e:	442b      	add	r3, r5
 8015420:	3801      	subs	r0, #1
 8015422:	6023      	str	r3, [r4, #0]
 8015424:	b005      	add	sp, #20
 8015426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801542a:	3801      	subs	r0, #1
 801542c:	1b52      	subs	r2, r2, r5
 801542e:	e7f0      	b.n	8015412 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08015430 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8015430:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015434:	4c1c      	ldr	r4, [pc, #112]	; (80154a8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8015436:	6807      	ldr	r7, [r0, #0]
 8015438:	69a3      	ldr	r3, [r4, #24]
 801543a:	4605      	mov	r5, r0
 801543c:	b92b      	cbnz	r3, 801544a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801543e:	6840      	ldr	r0, [r0, #4]
 8015440:	e9c5 7000 	strd	r7, r0, [r5]
 8015444:	b004      	add	sp, #16
 8015446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801544a:	68a2      	ldr	r2, [r4, #8]
 801544c:	6820      	ldr	r0, [r4, #0]
 801544e:	ae04      	add	r6, sp, #16
 8015450:	f04f 0802 	mov.w	r8, #2
 8015454:	fb93 f1f8 	sdiv	r1, r3, r8
 8015458:	440a      	add	r2, r1
 801545a:	f846 2d04 	str.w	r2, [r6, #-4]!
 801545e:	69e1      	ldr	r1, [r4, #28]
 8015460:	9600      	str	r6, [sp, #0]
 8015462:	463a      	mov	r2, r7
 8015464:	f7ff ff98 	bl	8015398 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015468:	69a3      	ldr	r3, [r4, #24]
 801546a:	686a      	ldr	r2, [r5, #4]
 801546c:	6a21      	ldr	r1, [r4, #32]
 801546e:	9600      	str	r6, [sp, #0]
 8015470:	4607      	mov	r7, r0
 8015472:	6860      	ldr	r0, [r4, #4]
 8015474:	f7ff ff90 	bl	8015398 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015478:	6962      	ldr	r2, [r4, #20]
 801547a:	69a3      	ldr	r3, [r4, #24]
 801547c:	fb93 f8f8 	sdiv	r8, r3, r8
 8015480:	4442      	add	r2, r8
 8015482:	9203      	str	r2, [sp, #12]
 8015484:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015486:	682a      	ldr	r2, [r5, #0]
 8015488:	9600      	str	r6, [sp, #0]
 801548a:	4407      	add	r7, r0
 801548c:	68e0      	ldr	r0, [r4, #12]
 801548e:	f7ff ff83 	bl	8015398 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015492:	9600      	str	r6, [sp, #0]
 8015494:	4680      	mov	r8, r0
 8015496:	69a3      	ldr	r3, [r4, #24]
 8015498:	686a      	ldr	r2, [r5, #4]
 801549a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801549c:	6920      	ldr	r0, [r4, #16]
 801549e:	f7ff ff7b 	bl	8015398 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80154a2:	4440      	add	r0, r8
 80154a4:	e7cc      	b.n	8015440 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80154a6:	bf00      	nop
 80154a8:	20014624 	.word	0x20014624

080154ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80154ac:	4b07      	ldr	r3, [pc, #28]	; (80154cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	2b01      	cmp	r3, #1
 80154b2:	d109      	bne.n	80154c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80154b4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80154b8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80154bc:	8003      	strh	r3, [r0, #0]
 80154be:	4b04      	ldr	r3, [pc, #16]	; (80154d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80154c0:	881b      	ldrh	r3, [r3, #0]
 80154c2:	3b01      	subs	r3, #1
 80154c4:	1a9b      	subs	r3, r3, r2
 80154c6:	800b      	strh	r3, [r1, #0]
 80154c8:	4770      	bx	lr
 80154ca:	bf00      	nop
 80154cc:	20014608 	.word	0x20014608
 80154d0:	20014604 	.word	0x20014604

080154d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80154d4:	b510      	push	{r4, lr}
 80154d6:	4b07      	ldr	r3, [pc, #28]	; (80154f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80154d8:	781b      	ldrb	r3, [r3, #0]
 80154da:	2b01      	cmp	r3, #1
 80154dc:	d108      	bne.n	80154f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80154de:	4b06      	ldr	r3, [pc, #24]	; (80154f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80154e0:	880c      	ldrh	r4, [r1, #0]
 80154e2:	881b      	ldrh	r3, [r3, #0]
 80154e4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80154e8:	3b01      	subs	r3, #1
 80154ea:	1b1b      	subs	r3, r3, r4
 80154ec:	8003      	strh	r3, [r0, #0]
 80154ee:	800a      	strh	r2, [r1, #0]
 80154f0:	bd10      	pop	{r4, pc}
 80154f2:	bf00      	nop
 80154f4:	20014608 	.word	0x20014608
 80154f8:	20014604 	.word	0x20014604

080154fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80154fc:	b510      	push	{r4, lr}
 80154fe:	4b0a      	ldr	r3, [pc, #40]	; (8015528 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8015500:	781b      	ldrb	r3, [r3, #0]
 8015502:	2b01      	cmp	r3, #1
 8015504:	d10e      	bne.n	8015524 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8015506:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801550a:	8843      	ldrh	r3, [r0, #2]
 801550c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015510:	8044      	strh	r4, [r0, #2]
 8015512:	18ca      	adds	r2, r1, r3
 8015514:	4b05      	ldr	r3, [pc, #20]	; (801552c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8015516:	881b      	ldrh	r3, [r3, #0]
 8015518:	1a9b      	subs	r3, r3, r2
 801551a:	8003      	strh	r3, [r0, #0]
 801551c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015520:	80c3      	strh	r3, [r0, #6]
 8015522:	8081      	strh	r1, [r0, #4]
 8015524:	bd10      	pop	{r4, pc}
 8015526:	bf00      	nop
 8015528:	20014608 	.word	0x20014608
 801552c:	20014604 	.word	0x20014604

08015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8015530:	4b08      	ldr	r3, [pc, #32]	; (8015554 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	2b01      	cmp	r3, #1
 8015536:	d10c      	bne.n	8015552 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8015538:	8803      	ldrh	r3, [r0, #0]
 801553a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801553e:	8842      	ldrh	r2, [r0, #2]
 8015540:	8002      	strh	r2, [r0, #0]
 8015542:	185a      	adds	r2, r3, r1
 8015544:	4b04      	ldr	r3, [pc, #16]	; (8015558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8015546:	881b      	ldrh	r3, [r3, #0]
 8015548:	1a9b      	subs	r3, r3, r2
 801554a:	8043      	strh	r3, [r0, #2]
 801554c:	88c3      	ldrh	r3, [r0, #6]
 801554e:	8083      	strh	r3, [r0, #4]
 8015550:	80c1      	strh	r1, [r0, #6]
 8015552:	4770      	bx	lr
 8015554:	20014608 	.word	0x20014608
 8015558:	20014604 	.word	0x20014604

0801555c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801555c:	b510      	push	{r4, lr}
 801555e:	4b07      	ldr	r3, [pc, #28]	; (801557c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	2b01      	cmp	r3, #1
 8015564:	d108      	bne.n	8015578 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8015566:	f9b1 3000 	ldrsh.w	r3, [r1]
 801556a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801556e:	8003      	strh	r3, [r0, #0]
 8015570:	8893      	ldrh	r3, [r2, #4]
 8015572:	3b01      	subs	r3, #1
 8015574:	1b1b      	subs	r3, r3, r4
 8015576:	800b      	strh	r3, [r1, #0]
 8015578:	bd10      	pop	{r4, pc}
 801557a:	bf00      	nop
 801557c:	20014608 	.word	0x20014608

08015580 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8015580:	4b0b      	ldr	r3, [pc, #44]	; (80155b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8015582:	781b      	ldrb	r3, [r3, #0]
 8015584:	2b01      	cmp	r3, #1
 8015586:	d111      	bne.n	80155ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8015588:	680b      	ldr	r3, [r1, #0]
 801558a:	ed90 7a00 	vldr	s14, [r0]
 801558e:	6003      	str	r3, [r0, #0]
 8015590:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8015594:	eddf 6a07 	vldr	s13, [pc, #28]	; 80155b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8015598:	ee07 3a90 	vmov	s15, r3
 801559c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80155a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80155a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80155a8:	edc1 7a00 	vstr	s15, [r1]
 80155ac:	4770      	bx	lr
 80155ae:	bf00      	nop
 80155b0:	20014608 	.word	0x20014608
 80155b4:	38d1b717 	.word	0x38d1b717

080155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80155b8:	b510      	push	{r4, lr}
 80155ba:	4b0a      	ldr	r3, [pc, #40]	; (80155e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80155bc:	781b      	ldrb	r3, [r3, #0]
 80155be:	2b01      	cmp	r3, #1
 80155c0:	460a      	mov	r2, r1
 80155c2:	d10d      	bne.n	80155e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80155c4:	8881      	ldrh	r1, [r0, #4]
 80155c6:	8803      	ldrh	r3, [r0, #0]
 80155c8:	440b      	add	r3, r1
 80155ca:	4601      	mov	r1, r0
 80155cc:	3b01      	subs	r3, #1
 80155ce:	f821 3b02 	strh.w	r3, [r1], #2
 80155d2:	f7ff ffc3 	bl	801555c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80155d6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80155da:	88c2      	ldrh	r2, [r0, #6]
 80155dc:	8082      	strh	r2, [r0, #4]
 80155de:	80c3      	strh	r3, [r0, #6]
 80155e0:	bd10      	pop	{r4, pc}
 80155e2:	bf00      	nop
 80155e4:	20014608 	.word	0x20014608

080155e8 <_ZN8touchgfx11Application13requestRedrawEv>:
 80155e8:	4b06      	ldr	r3, [pc, #24]	; (8015604 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80155ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80155ee:	4b06      	ldr	r3, [pc, #24]	; (8015608 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80155f0:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 80155f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155f8:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 80155fc:	2100      	movs	r1, #0
 80155fe:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8015602:	4770      	bx	lr
 8015604:	20014604 	.word	0x20014604
 8015608:	20014606 	.word	0x20014606

0801560c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801560c:	4b03      	ldr	r3, [pc, #12]	; (801561c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801560e:	6818      	ldr	r0, [r3, #0]
 8015610:	b110      	cbz	r0, 8015618 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8015612:	6803      	ldr	r3, [r0, #0]
 8015614:	699b      	ldr	r3, [r3, #24]
 8015616:	4718      	bx	r3
 8015618:	4770      	bx	lr
 801561a:	bf00      	nop
 801561c:	20014654 	.word	0x20014654

08015620 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8015620:	4770      	bx	lr
	...

08015624 <_ZN8touchgfx11Application4drawEv>:
 8015624:	b507      	push	{r0, r1, r2, lr}
 8015626:	4b09      	ldr	r3, [pc, #36]	; (801564c <_ZN8touchgfx11Application4drawEv+0x28>)
 8015628:	f9b3 2000 	ldrsh.w	r2, [r3]
 801562c:	4b08      	ldr	r3, [pc, #32]	; (8015650 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801562e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015636:	f8ad 3006 	strh.w	r3, [sp, #6]
 801563a:	6803      	ldr	r3, [r0, #0]
 801563c:	2100      	movs	r1, #0
 801563e:	9100      	str	r1, [sp, #0]
 8015640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015642:	4669      	mov	r1, sp
 8015644:	4798      	blx	r3
 8015646:	b003      	add	sp, #12
 8015648:	f85d fb04 	ldr.w	pc, [sp], #4
 801564c:	20014604 	.word	0x20014604
 8015650:	20014606 	.word	0x20014606

08015654 <_ZN8touchgfx11Application10invalidateEv>:
 8015654:	4b09      	ldr	r3, [pc, #36]	; (801567c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8015656:	f9b3 2000 	ldrsh.w	r2, [r3]
 801565a:	4b09      	ldr	r3, [pc, #36]	; (8015680 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801565c:	b082      	sub	sp, #8
 801565e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015662:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015666:	2100      	movs	r1, #0
 8015668:	f8ad 3006 	strh.w	r3, [sp, #6]
 801566c:	9100      	str	r1, [sp, #0]
 801566e:	6803      	ldr	r3, [r0, #0]
 8015670:	aa02      	add	r2, sp, #8
 8015672:	e912 0006 	ldmdb	r2, {r1, r2}
 8015676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015678:	b002      	add	sp, #8
 801567a:	4718      	bx	r3
 801567c:	20014604 	.word	0x20014604
 8015680:	20014606 	.word	0x20014606

08015684 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8015684:	4b03      	ldr	r3, [pc, #12]	; (8015694 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8015686:	6818      	ldr	r0, [r3, #0]
 8015688:	b110      	cbz	r0, 8015690 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801568a:	6803      	ldr	r3, [r0, #0]
 801568c:	69db      	ldr	r3, [r3, #28]
 801568e:	4718      	bx	r3
 8015690:	4770      	bx	lr
 8015692:	bf00      	nop
 8015694:	20014654 	.word	0x20014654

08015698 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8015698:	4b03      	ldr	r3, [pc, #12]	; (80156a8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801569a:	6818      	ldr	r0, [r3, #0]
 801569c:	b110      	cbz	r0, 80156a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801569e:	6803      	ldr	r3, [r0, #0]
 80156a0:	6a1b      	ldr	r3, [r3, #32]
 80156a2:	4718      	bx	r3
 80156a4:	4770      	bx	lr
 80156a6:	bf00      	nop
 80156a8:	20014654 	.word	0x20014654

080156ac <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80156ac:	2300      	movs	r3, #0
 80156ae:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 80156b2:	4770      	bx	lr

080156b4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80156b4:	4b03      	ldr	r3, [pc, #12]	; (80156c4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80156b6:	6818      	ldr	r0, [r3, #0]
 80156b8:	b110      	cbz	r0, 80156c0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80156ba:	6803      	ldr	r3, [r0, #0]
 80156bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156be:	4718      	bx	r3
 80156c0:	4770      	bx	lr
 80156c2:	bf00      	nop
 80156c4:	20014654 	.word	0x20014654

080156c8 <_ZN8touchgfx11ApplicationD1Ev>:
 80156c8:	4770      	bx	lr

080156ca <_ZN8touchgfx11ApplicationD0Ev>:
 80156ca:	b510      	push	{r4, lr}
 80156cc:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80156d0:	4604      	mov	r4, r0
 80156d2:	f011 f990 	bl	80269f6 <_ZdlPvj>
 80156d6:	4620      	mov	r0, r4
 80156d8:	bd10      	pop	{r4, pc}

080156da <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80156da:	b510      	push	{r4, lr}
 80156dc:	f9b1 4000 	ldrsh.w	r4, [r1]
 80156e0:	888a      	ldrh	r2, [r1, #4]
 80156e2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80156e6:	4422      	add	r2, r4
 80156e8:	b212      	sxth	r2, r2
 80156ea:	4293      	cmp	r3, r2
 80156ec:	da15      	bge.n	801571a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80156ee:	8882      	ldrh	r2, [r0, #4]
 80156f0:	4413      	add	r3, r2
 80156f2:	b21b      	sxth	r3, r3
 80156f4:	429c      	cmp	r4, r3
 80156f6:	da10      	bge.n	801571a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80156f8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80156fc:	88c9      	ldrh	r1, [r1, #6]
 80156fe:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015702:	4419      	add	r1, r3
 8015704:	b209      	sxth	r1, r1
 8015706:	428a      	cmp	r2, r1
 8015708:	da07      	bge.n	801571a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801570a:	88c0      	ldrh	r0, [r0, #6]
 801570c:	4410      	add	r0, r2
 801570e:	b200      	sxth	r0, r0
 8015710:	4283      	cmp	r3, r0
 8015712:	bfac      	ite	ge
 8015714:	2000      	movge	r0, #0
 8015716:	2001      	movlt	r0, #1
 8015718:	bd10      	pop	{r4, pc}
 801571a:	2000      	movs	r0, #0
 801571c:	e7fc      	b.n	8015718 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801571e <_ZN8touchgfx4Rect10restrictToEss>:
 801571e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	b510      	push	{r4, lr}
 8015726:	da04      	bge.n	8015732 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8015728:	8884      	ldrh	r4, [r0, #4]
 801572a:	4423      	add	r3, r4
 801572c:	8083      	strh	r3, [r0, #4]
 801572e:	2300      	movs	r3, #0
 8015730:	8003      	strh	r3, [r0, #0]
 8015732:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015736:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801573a:	1b09      	subs	r1, r1, r4
 801573c:	428b      	cmp	r3, r1
 801573e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8015742:	bfc8      	it	gt
 8015744:	8081      	strhgt	r1, [r0, #4]
 8015746:	2b00      	cmp	r3, #0
 8015748:	da04      	bge.n	8015754 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801574a:	88c1      	ldrh	r1, [r0, #6]
 801574c:	440b      	add	r3, r1
 801574e:	80c3      	strh	r3, [r0, #6]
 8015750:	2300      	movs	r3, #0
 8015752:	8043      	strh	r3, [r0, #2]
 8015754:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015758:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801575c:	1a52      	subs	r2, r2, r1
 801575e:	4293      	cmp	r3, r2
 8015760:	bfc8      	it	gt
 8015762:	80c2      	strhgt	r2, [r0, #6]
 8015764:	bd10      	pop	{r4, pc}
	...

08015768 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8015768:	b510      	push	{r4, lr}
 801576a:	4b10      	ldr	r3, [pc, #64]	; (80157ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801576c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015770:	4b0f      	ldr	r3, [pc, #60]	; (80157b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8015772:	460c      	mov	r4, r1
 8015774:	4620      	mov	r0, r4
 8015776:	f9b3 1000 	ldrsh.w	r1, [r3]
 801577a:	f7ff ffd0 	bl	801571e <_ZN8touchgfx4Rect10restrictToEss>
 801577e:	4b0d      	ldr	r3, [pc, #52]	; (80157b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8015780:	6818      	ldr	r0, [r3, #0]
 8015782:	b190      	cbz	r0, 80157aa <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8015784:	6803      	ldr	r3, [r0, #0]
 8015786:	4621      	mov	r1, r4
 8015788:	689b      	ldr	r3, [r3, #8]
 801578a:	4798      	blx	r3
 801578c:	4b0a      	ldr	r3, [pc, #40]	; (80157b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801578e:	6818      	ldr	r0, [r3, #0]
 8015790:	b118      	cbz	r0, 801579a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8015792:	6803      	ldr	r3, [r0, #0]
 8015794:	4621      	mov	r1, r4
 8015796:	689b      	ldr	r3, [r3, #8]
 8015798:	4798      	blx	r3
 801579a:	4b08      	ldr	r3, [pc, #32]	; (80157bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801579c:	6818      	ldr	r0, [r3, #0]
 801579e:	6803      	ldr	r3, [r0, #0]
 80157a0:	4621      	mov	r1, r4
 80157a2:	69db      	ldr	r3, [r3, #28]
 80157a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157a8:	4718      	bx	r3
 80157aa:	bd10      	pop	{r4, pc}
 80157ac:	20014606 	.word	0x20014606
 80157b0:	20014604 	.word	0x20014604
 80157b4:	20014654 	.word	0x20014654
 80157b8:	20014650 	.word	0x20014650
 80157bc:	20014610 	.word	0x20014610

080157c0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80157c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157c2:	4606      	mov	r6, r0
 80157c4:	4608      	mov	r0, r1
 80157c6:	460f      	mov	r7, r1
 80157c8:	f7fa fb55 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 80157cc:	b9e8      	cbnz	r0, 801580a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80157ce:	f9b7 5000 	ldrsh.w	r5, [r7]
 80157d2:	f9b6 4000 	ldrsh.w	r4, [r6]
 80157d6:	42a5      	cmp	r5, r4
 80157d8:	db17      	blt.n	801580a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80157da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80157de:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80157e2:	429a      	cmp	r2, r3
 80157e4:	db11      	blt.n	801580a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80157e6:	88b9      	ldrh	r1, [r7, #4]
 80157e8:	440d      	add	r5, r1
 80157ea:	88b1      	ldrh	r1, [r6, #4]
 80157ec:	440c      	add	r4, r1
 80157ee:	b22d      	sxth	r5, r5
 80157f0:	b224      	sxth	r4, r4
 80157f2:	42a5      	cmp	r5, r4
 80157f4:	dc09      	bgt.n	801580a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80157f6:	88f8      	ldrh	r0, [r7, #6]
 80157f8:	4410      	add	r0, r2
 80157fa:	88f2      	ldrh	r2, [r6, #6]
 80157fc:	4413      	add	r3, r2
 80157fe:	b200      	sxth	r0, r0
 8015800:	b21b      	sxth	r3, r3
 8015802:	4298      	cmp	r0, r3
 8015804:	bfcc      	ite	gt
 8015806:	2000      	movgt	r0, #0
 8015808:	2001      	movle	r0, #1
 801580a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801580c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801580e:	4604      	mov	r4, r0
 8015810:	4608      	mov	r0, r1
 8015812:	460d      	mov	r5, r1
 8015814:	f7fa fb2f 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015818:	b978      	cbnz	r0, 801583a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801581a:	4620      	mov	r0, r4
 801581c:	f7fa fb2b 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015820:	f9b5 6000 	ldrsh.w	r6, [r5]
 8015824:	b150      	cbz	r0, 801583c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8015826:	8026      	strh	r6, [r4, #0]
 8015828:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801582c:	8063      	strh	r3, [r4, #2]
 801582e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8015832:	80a3      	strh	r3, [r4, #4]
 8015834:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015838:	80e3      	strh	r3, [r4, #6]
 801583a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801583c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8015840:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015844:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015848:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801584c:	88ed      	ldrh	r5, [r5, #6]
 801584e:	42b1      	cmp	r1, r6
 8015850:	460f      	mov	r7, r1
 8015852:	bfa8      	it	ge
 8015854:	4637      	movge	r7, r6
 8015856:	4293      	cmp	r3, r2
 8015858:	4618      	mov	r0, r3
 801585a:	4466      	add	r6, ip
 801585c:	bfa8      	it	ge
 801585e:	4610      	movge	r0, r2
 8015860:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8015864:	8027      	strh	r7, [r4, #0]
 8015866:	442a      	add	r2, r5
 8015868:	88e5      	ldrh	r5, [r4, #6]
 801586a:	8060      	strh	r0, [r4, #2]
 801586c:	4461      	add	r1, ip
 801586e:	442b      	add	r3, r5
 8015870:	b236      	sxth	r6, r6
 8015872:	b209      	sxth	r1, r1
 8015874:	b212      	sxth	r2, r2
 8015876:	b21b      	sxth	r3, r3
 8015878:	428e      	cmp	r6, r1
 801587a:	bfac      	ite	ge
 801587c:	ebc7 0106 	rsbge	r1, r7, r6
 8015880:	ebc7 0101 	rsblt	r1, r7, r1
 8015884:	429a      	cmp	r2, r3
 8015886:	bfac      	ite	ge
 8015888:	ebc0 0202 	rsbge	r2, r0, r2
 801588c:	ebc0 0203 	rsblt	r2, r0, r3
 8015890:	80a1      	strh	r1, [r4, #4]
 8015892:	80e2      	strh	r2, [r4, #6]
 8015894:	e7d1      	b.n	801583a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08015898 <_ZN8touchgfx11Application11getInstanceEv>:
 8015898:	4b01      	ldr	r3, [pc, #4]	; (80158a0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801589a:	6818      	ldr	r0, [r3, #0]
 801589c:	4770      	bx	lr
 801589e:	bf00      	nop
 80158a0:	20014664 	.word	0x20014664

080158a4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80158a4:	b510      	push	{r4, lr}
 80158a6:	2300      	movs	r3, #0
 80158a8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 80158ac:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80158b0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80158b4:	4604      	mov	r4, r0
 80158b6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80158ba:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 80158be:	429a      	cmp	r2, r3
 80158c0:	d90e      	bls.n	80158e0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80158c2:	18e2      	adds	r2, r4, r3
 80158c4:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 80158c8:	b122      	cbz	r2, 80158d4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80158ca:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80158ce:	6803      	ldr	r3, [r0, #0]
 80158d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158d2:	4798      	blx	r3
 80158d4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80158d8:	3301      	adds	r3, #1
 80158da:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80158de:	e7ea      	b.n	80158b6 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80158e0:	bd10      	pop	{r4, pc}

080158e2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80158e2:	2300      	movs	r3, #0
 80158e4:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 80158e8:	f100 0284 	add.w	r2, r0, #132	; 0x84
 80158ec:	30a4      	adds	r0, #164	; 0xa4
 80158ee:	f802 3b01 	strb.w	r3, [r2], #1
 80158f2:	4282      	cmp	r2, r0
 80158f4:	d1fb      	bne.n	80158ee <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80158f6:	4770      	bx	lr

080158f8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80158f8:	b570      	push	{r4, r5, r6, lr}
 80158fa:	4c0b      	ldr	r4, [pc, #44]	; (8015928 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80158fc:	4605      	mov	r5, r0
 80158fe:	6820      	ldr	r0, [r4, #0]
 8015900:	460e      	mov	r6, r1
 8015902:	b110      	cbz	r0, 801590a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8015904:	6803      	ldr	r3, [r0, #0]
 8015906:	695b      	ldr	r3, [r3, #20]
 8015908:	4798      	blx	r3
 801590a:	1d28      	adds	r0, r5, #4
 801590c:	f7ff ffe9 	bl	80158e2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8015910:	6026      	str	r6, [r4, #0]
 8015912:	6833      	ldr	r3, [r6, #0]
 8015914:	4630      	mov	r0, r6
 8015916:	68db      	ldr	r3, [r3, #12]
 8015918:	4798      	blx	r3
 801591a:	682b      	ldr	r3, [r5, #0]
 801591c:	4628      	mov	r0, r5
 801591e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015924:	4718      	bx	r3
 8015926:	bf00      	nop
 8015928:	20014654 	.word	0x20014654

0801592c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801592c:	2300      	movs	r3, #0
 801592e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8015932:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8015936:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015938:	461a      	mov	r2, r3
 801593a:	461c      	mov	r4, r3
 801593c:	461d      	mov	r5, r3
 801593e:	459c      	cmp	ip, r3
 8015940:	dd1a      	ble.n	8015978 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8015942:	18c6      	adds	r6, r0, r3
 8015944:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8015948:	b16e      	cbz	r6, 8015966 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801594a:	429a      	cmp	r2, r3
 801594c:	d008      	beq.n	8015960 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801594e:	fa1f fe82 	uxth.w	lr, r2
 8015952:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8015956:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801595a:	1887      	adds	r7, r0, r2
 801595c:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8015960:	3201      	adds	r2, #1
 8015962:	3301      	adds	r3, #1
 8015964:	e7eb      	b.n	801593e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8015966:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801596a:	4299      	cmp	r1, r3
 801596c:	bfa8      	it	ge
 801596e:	3501      	addge	r5, #1
 8015970:	429e      	cmp	r6, r3
 8015972:	bfc8      	it	gt
 8015974:	3401      	addgt	r4, #1
 8015976:	e7f4      	b.n	8015962 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8015978:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801597c:	1b49      	subs	r1, r1, r5
 801597e:	1b1b      	subs	r3, r3, r4
 8015980:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8015984:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8015988:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801598c:	4293      	cmp	r3, r2
 801598e:	dd03      	ble.n	8015998 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8015990:	3b01      	subs	r3, #1
 8015992:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8015996:	e7f7      	b.n	8015988 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8015998:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801599c <_ZN8touchgfx11Application15handleTickEventEv>:
 801599c:	b570      	push	{r4, r5, r6, lr}
 801599e:	4d16      	ldr	r5, [pc, #88]	; (80159f8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80159a0:	4604      	mov	r4, r0
 80159a2:	6828      	ldr	r0, [r5, #0]
 80159a4:	b140      	cbz	r0, 80159b8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80159a6:	7a03      	ldrb	r3, [r0, #8]
 80159a8:	b933      	cbnz	r3, 80159b8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80159aa:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 80159ae:	6803      	ldr	r3, [r0, #0]
 80159b0:	689b      	ldr	r3, [r3, #8]
 80159b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159b6:	4718      	bx	r3
 80159b8:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 80159bc:	4e0f      	ldr	r6, [pc, #60]	; (80159fc <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80159be:	b973      	cbnz	r3, 80159de <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80159c0:	b168      	cbz	r0, 80159de <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80159c2:	7a03      	ldrb	r3, [r0, #8]
 80159c4:	b15b      	cbz	r3, 80159de <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80159c6:	6830      	ldr	r0, [r6, #0]
 80159c8:	b110      	cbz	r0, 80159d0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80159ca:	6803      	ldr	r3, [r0, #0]
 80159cc:	691b      	ldr	r3, [r3, #16]
 80159ce:	4798      	blx	r3
 80159d0:	6828      	ldr	r0, [r5, #0]
 80159d2:	6803      	ldr	r3, [r0, #0]
 80159d4:	68db      	ldr	r3, [r3, #12]
 80159d6:	4798      	blx	r3
 80159d8:	2301      	movs	r3, #1
 80159da:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 80159de:	3404      	adds	r4, #4
 80159e0:	4620      	mov	r0, r4
 80159e2:	f7ff ff5f 	bl	80158a4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80159e6:	4620      	mov	r0, r4
 80159e8:	f7ff ffa0 	bl	801592c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80159ec:	6830      	ldr	r0, [r6, #0]
 80159ee:	b110      	cbz	r0, 80159f6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80159f0:	6803      	ldr	r3, [r0, #0]
 80159f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159f4:	e7dd      	b.n	80159b2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80159f6:	bd70      	pop	{r4, r5, r6, pc}
 80159f8:	20014658 	.word	0x20014658
 80159fc:	20014654 	.word	0x20014654

08015a00 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8015a00:	4603      	mov	r3, r0
 8015a02:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8015a06:	2200      	movs	r2, #0
 8015a08:	801a      	strh	r2, [r3, #0]
 8015a0a:	805a      	strh	r2, [r3, #2]
 8015a0c:	809a      	strh	r2, [r3, #4]
 8015a0e:	80da      	strh	r2, [r3, #6]
 8015a10:	3308      	adds	r3, #8
 8015a12:	428b      	cmp	r3, r1
 8015a14:	d1f8      	bne.n	8015a08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8015a16:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8015a1a:	4770      	bx	lr

08015a1c <_ZN8touchgfx11ApplicationC1Ev>:
 8015a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a1e:	4606      	mov	r6, r0
 8015a20:	4b1c      	ldr	r3, [pc, #112]	; (8015a94 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8015a22:	f846 3b04 	str.w	r3, [r6], #4
 8015a26:	4604      	mov	r4, r0
 8015a28:	2500      	movs	r5, #0
 8015a2a:	22a8      	movs	r2, #168	; 0xa8
 8015a2c:	2100      	movs	r1, #0
 8015a2e:	4630      	mov	r0, r6
 8015a30:	f011 fa03 	bl	8026e3a <memset>
 8015a34:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8015a38:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8015a3c:	f7ff ffe0 	bl	8015a00 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015a40:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8015a44:	f7ff ffdc 	bl	8015a00 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015a48:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8015a4c:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8015a50:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8015a54:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8015a58:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8015a5c:	490e      	ldr	r1, [pc, #56]	; (8015a98 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8015a5e:	480f      	ldr	r0, [pc, #60]	; (8015a9c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8015a60:	4f0f      	ldr	r7, [pc, #60]	; (8015aa0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8015a62:	f010 fb95 	bl	8026190 <CRC_Lock>
 8015a66:	4b0f      	ldr	r3, [pc, #60]	; (8015aa4 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8015a68:	b158      	cbz	r0, 8015a82 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8015a6a:	801d      	strh	r5, [r3, #0]
 8015a6c:	4a0e      	ldr	r2, [pc, #56]	; (8015aa8 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8015a6e:	2300      	movs	r3, #0
 8015a70:	6013      	str	r3, [r2, #0]
 8015a72:	4a0e      	ldr	r2, [pc, #56]	; (8015aac <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8015a74:	603b      	str	r3, [r7, #0]
 8015a76:	4630      	mov	r0, r6
 8015a78:	6013      	str	r3, [r2, #0]
 8015a7a:	f7ff ff32 	bl	80158e2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8015a7e:	4620      	mov	r0, r4
 8015a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015a86:	2002      	movs	r0, #2
 8015a88:	801a      	strh	r2, [r3, #0]
 8015a8a:	6038      	str	r0, [r7, #0]
 8015a8c:	f001 fb4a 	bl	8017124 <_ZN8touchgfx6Screen4drawEv>
 8015a90:	e7ec      	b.n	8015a6c <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8015a92:	bf00      	nop
 8015a94:	08029848 	.word	0x08029848
 8015a98:	b5e8b5cd 	.word	0xb5e8b5cd
 8015a9c:	f407a5c2 	.word	0xf407a5c2
 8015aa0:	20014654 	.word	0x20014654
 8015aa4:	20000090 	.word	0x20000090
 8015aa8:	20014664 	.word	0x20014664
 8015aac:	20014658 	.word	0x20014658

08015ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8015ab0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8015ab4:	3b01      	subs	r3, #1
 8015ab6:	b29b      	uxth	r3, r3
 8015ab8:	428b      	cmp	r3, r1
 8015aba:	b510      	push	{r4, lr}
 8015abc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8015ac0:	d908      	bls.n	8015ad4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8015ac2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8015ac6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8015aca:	681a      	ldr	r2, [r3, #0]
 8015acc:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8015ad0:	685a      	ldr	r2, [r3, #4]
 8015ad2:	6062      	str	r2, [r4, #4]
 8015ad4:	bd10      	pop	{r4, pc}
	...

08015ad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8015ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015adc:	4b8f      	ldr	r3, [pc, #572]	; (8015d1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8015ade:	b08f      	sub	sp, #60	; 0x3c
 8015ae0:	ac0a      	add	r4, sp, #40	; 0x28
 8015ae2:	e884 0006 	stmia.w	r4, {r1, r2}
 8015ae6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015aea:	4b8d      	ldr	r3, [pc, #564]	; (8015d20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8015aec:	4683      	mov	fp, r0
 8015aee:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015af2:	4620      	mov	r0, r4
 8015af4:	f7ff fe13 	bl	801571e <_ZN8touchgfx4Rect10restrictToEss>
 8015af8:	4620      	mov	r0, r4
 8015afa:	f7fa f9bc 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015afe:	2800      	cmp	r0, #0
 8015b00:	d16a      	bne.n	8015bd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015b02:	9403      	str	r4, [sp, #12]
 8015b04:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8015b08:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8015b0c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8015b10:	35a4      	adds	r5, #164	; 0xa4
 8015b12:	9301      	str	r3, [sp, #4]
 8015b14:	b15c      	cbz	r4, 8015b2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8015b16:	4629      	mov	r1, r5
 8015b18:	9803      	ldr	r0, [sp, #12]
 8015b1a:	f7ff fe51 	bl	80157c0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015b1e:	3c01      	subs	r4, #1
 8015b20:	b118      	cbz	r0, 8015b2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8015b22:	b2a1      	uxth	r1, r4
 8015b24:	9801      	ldr	r0, [sp, #4]
 8015b26:	f7ff ffc3 	bl	8015ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015b2a:	3d08      	subs	r5, #8
 8015b2c:	e7f2      	b.n	8015b14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8015b2e:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 8015b32:	f8cd a010 	str.w	sl, [sp, #16]
 8015b36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015b3a:	9302      	str	r3, [sp, #8]
 8015b3c:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015b40:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8015b44:	9306      	str	r3, [sp, #24]
 8015b46:	445c      	add	r4, fp
 8015b48:	2500      	movs	r5, #0
 8015b4a:	4626      	mov	r6, r4
 8015b4c:	f8cd a014 	str.w	sl, [sp, #20]
 8015b50:	462f      	mov	r7, r5
 8015b52:	9b05      	ldr	r3, [sp, #20]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d073      	beq.n	8015c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015b58:	9903      	ldr	r1, [sp, #12]
 8015b5a:	4630      	mov	r0, r6
 8015b5c:	f7ff fdbd 	bl	80156da <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015b60:	b350      	cbz	r0, 8015bb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015b62:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8015b66:	f9b6 c000 	ldrsh.w	ip, [r6]
 8015b6a:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 8015b6e:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8015b72:	45e6      	cmp	lr, ip
 8015b74:	db33      	blt.n	8015bde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015b76:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8015b7a:	88b3      	ldrh	r3, [r6, #4]
 8015b7c:	4472      	add	r2, lr
 8015b7e:	4463      	add	r3, ip
 8015b80:	b212      	sxth	r2, r2
 8015b82:	b21b      	sxth	r3, r3
 8015b84:	429a      	cmp	r2, r3
 8015b86:	dc2a      	bgt.n	8015bde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015b88:	88f3      	ldrh	r3, [r6, #6]
 8015b8a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015b8e:	fa1f f289 	uxth.w	r2, r9
 8015b92:	4413      	add	r3, r2
 8015b94:	b29b      	uxth	r3, r3
 8015b96:	45c8      	cmp	r8, r9
 8015b98:	fa1f fc88 	uxth.w	ip, r8
 8015b9c:	fa0f fe83 	sxth.w	lr, r3
 8015ba0:	db0f      	blt.n	8015bc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8015ba2:	eba3 030c 	sub.w	r3, r3, ip
 8015ba6:	1ac9      	subs	r1, r1, r3
 8015ba8:	b209      	sxth	r1, r1
 8015baa:	2900      	cmp	r1, #0
 8015bac:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015bb0:	dd12      	ble.n	8015bd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015bb2:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8015bb6:	4605      	mov	r5, r0
 8015bb8:	9b05      	ldr	r3, [sp, #20]
 8015bba:	3b01      	subs	r3, #1
 8015bbc:	9305      	str	r3, [sp, #20]
 8015bbe:	3e08      	subs	r6, #8
 8015bc0:	e7c7      	b.n	8015b52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8015bc2:	4461      	add	r1, ip
 8015bc4:	b209      	sxth	r1, r1
 8015bc6:	4571      	cmp	r1, lr
 8015bc8:	dc38      	bgt.n	8015c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015bca:	eba2 020c 	sub.w	r2, r2, ip
 8015bce:	b212      	sxth	r2, r2
 8015bd0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8015bd4:	2a00      	cmp	r2, #0
 8015bd6:	dcee      	bgt.n	8015bb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015bd8:	b00f      	add	sp, #60	; 0x3c
 8015bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bde:	45c8      	cmp	r8, r9
 8015be0:	db2c      	blt.n	8015c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015be2:	88f3      	ldrh	r3, [r6, #6]
 8015be4:	4499      	add	r9, r3
 8015be6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8015bea:	4498      	add	r8, r3
 8015bec:	fa0f f989 	sxth.w	r9, r9
 8015bf0:	fa0f f888 	sxth.w	r8, r8
 8015bf4:	45c1      	cmp	r9, r8
 8015bf6:	db21      	blt.n	8015c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015bf8:	88b3      	ldrh	r3, [r6, #4]
 8015bfa:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015bfe:	fa1f f28c 	uxth.w	r2, ip
 8015c02:	4413      	add	r3, r2
 8015c04:	b29b      	uxth	r3, r3
 8015c06:	45e6      	cmp	lr, ip
 8015c08:	fa1f f88e 	uxth.w	r8, lr
 8015c0c:	fa0f f983 	sxth.w	r9, r3
 8015c10:	db0a      	blt.n	8015c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8015c12:	eba3 0308 	sub.w	r3, r3, r8
 8015c16:	1ac9      	subs	r1, r1, r3
 8015c18:	b209      	sxth	r1, r1
 8015c1a:	2900      	cmp	r1, #0
 8015c1c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8015c20:	ddda      	ble.n	8015bd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015c22:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8015c26:	e7c6      	b.n	8015bb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015c28:	4441      	add	r1, r8
 8015c2a:	b209      	sxth	r1, r1
 8015c2c:	4549      	cmp	r1, r9
 8015c2e:	dc05      	bgt.n	8015c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015c30:	eba2 0208 	sub.w	r2, r2, r8
 8015c34:	b212      	sxth	r2, r2
 8015c36:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8015c3a:	e7cb      	b.n	8015bd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8015c3c:	4607      	mov	r7, r0
 8015c3e:	e7bb      	b.n	8015bb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015c40:	2d00      	cmp	r5, #0
 8015c42:	d181      	bne.n	8015b48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8015c44:	2f00      	cmp	r7, #0
 8015c46:	f000 81dd 	beq.w	8016004 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8015c4a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8015c4e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8015c52:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8015c56:	b2b3      	uxth	r3, r6
 8015c58:	9305      	str	r3, [sp, #20]
 8015c5a:	9a05      	ldr	r2, [sp, #20]
 8015c5c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8015c60:	4413      	add	r3, r2
 8015c62:	b2ba      	uxth	r2, r7
 8015c64:	4492      	add	sl, r2
 8015c66:	b29b      	uxth	r3, r3
 8015c68:	fa1f fa8a 	uxth.w	sl, sl
 8015c6c:	fa0f f883 	sxth.w	r8, r3
 8015c70:	fa0f f98a 	sxth.w	r9, sl
 8015c74:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8015c78:	9b04      	ldr	r3, [sp, #16]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d052      	beq.n	8015d24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8015c7e:	9903      	ldr	r1, [sp, #12]
 8015c80:	4620      	mov	r0, r4
 8015c82:	f7ff fd2a 	bl	80156da <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015c86:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015c8a:	b1c0      	cbz	r0, 8015cbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015c8c:	f9b4 e000 	ldrsh.w	lr, [r4]
 8015c90:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015c94:	4576      	cmp	r6, lr
 8015c96:	dc22      	bgt.n	8015cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8015c98:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8015c9c:	44f4      	add	ip, lr
 8015c9e:	fa0f fc8c 	sxth.w	ip, ip
 8015ca2:	45e0      	cmp	r8, ip
 8015ca4:	db1b      	blt.n	8015cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8015ca6:	428f      	cmp	r7, r1
 8015ca8:	fa1f fc81 	uxth.w	ip, r1
 8015cac:	88e1      	ldrh	r1, [r4, #6]
 8015cae:	dc0d      	bgt.n	8015ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8015cb0:	ebaa 0c0c 	sub.w	ip, sl, ip
 8015cb4:	eba1 010c 	sub.w	r1, r1, ip
 8015cb8:	f8a4 9002 	strh.w	r9, [r4, #2]
 8015cbc:	80e1      	strh	r1, [r4, #6]
 8015cbe:	4628      	mov	r0, r5
 8015cc0:	9904      	ldr	r1, [sp, #16]
 8015cc2:	3901      	subs	r1, #1
 8015cc4:	9104      	str	r1, [sp, #16]
 8015cc6:	3c08      	subs	r4, #8
 8015cc8:	4605      	mov	r5, r0
 8015cca:	e7d3      	b.n	8015c74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8015ccc:	4461      	add	r1, ip
 8015cce:	b209      	sxth	r1, r1
 8015cd0:	4549      	cmp	r1, r9
 8015cd2:	dcf5      	bgt.n	8015cc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8015cd4:	eba2 0c0c 	sub.w	ip, r2, ip
 8015cd8:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015cdc:	e7ef      	b.n	8015cbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015cde:	428f      	cmp	r7, r1
 8015ce0:	dcee      	bgt.n	8015cc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8015ce2:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8015ce6:	4461      	add	r1, ip
 8015ce8:	b209      	sxth	r1, r1
 8015cea:	4589      	cmp	r9, r1
 8015cec:	dbe8      	blt.n	8015cc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8015cee:	4576      	cmp	r6, lr
 8015cf0:	fa1f fc8e 	uxth.w	ip, lr
 8015cf4:	88a1      	ldrh	r1, [r4, #4]
 8015cf6:	dc07      	bgt.n	8015d08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8015cf8:	eba3 0c0c 	sub.w	ip, r3, ip
 8015cfc:	eba1 010c 	sub.w	r1, r1, ip
 8015d00:	f8a4 8000 	strh.w	r8, [r4]
 8015d04:	80a1      	strh	r1, [r4, #4]
 8015d06:	e7da      	b.n	8015cbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015d08:	4461      	add	r1, ip
 8015d0a:	b209      	sxth	r1, r1
 8015d0c:	4588      	cmp	r8, r1
 8015d0e:	dbd7      	blt.n	8015cc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8015d10:	9905      	ldr	r1, [sp, #20]
 8015d12:	eba1 0c0c 	sub.w	ip, r1, ip
 8015d16:	f8a4 c004 	strh.w	ip, [r4, #4]
 8015d1a:	e7d0      	b.n	8015cbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015d1c:	20014606 	.word	0x20014606
 8015d20:	20014604 	.word	0x20014604
 8015d24:	2d00      	cmp	r5, #0
 8015d26:	f000 816d 	beq.w	8016004 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8015d2a:	9b06      	ldr	r3, [sp, #24]
 8015d2c:	445b      	add	r3, fp
 8015d2e:	461c      	mov	r4, r3
 8015d30:	9b02      	ldr	r3, [sp, #8]
 8015d32:	3301      	adds	r3, #1
 8015d34:	f000 8166 	beq.w	8016004 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8015d38:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8015d3c:	4629      	mov	r1, r5
 8015d3e:	9803      	ldr	r0, [sp, #12]
 8015d40:	f7ff fd3e 	bl	80157c0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015d44:	b120      	cbz	r0, 8015d50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8015d46:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8015d4a:	9801      	ldr	r0, [sp, #4]
 8015d4c:	f7ff feb0 	bl	8015ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015d50:	9903      	ldr	r1, [sp, #12]
 8015d52:	4628      	mov	r0, r5
 8015d54:	f7ff fcc1 	bl	80156da <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015d58:	2800      	cmp	r0, #0
 8015d5a:	f000 809c 	beq.w	8015e96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8015d5e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8015d62:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8015d66:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8015d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8015d6c:	fa1f f189 	uxth.w	r1, r9
 8015d70:	eb01 0c03 	add.w	ip, r1, r3
 8015d74:	fa1f fa8c 	uxth.w	sl, ip
 8015d78:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8015d7c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8015d80:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8015d84:	b283      	uxth	r3, r0
 8015d86:	eb03 050c 	add.w	r5, r3, ip
 8015d8a:	b2ad      	uxth	r5, r5
 8015d8c:	9505      	str	r5, [sp, #20]
 8015d8e:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8015d92:	9504      	str	r5, [sp, #16]
 8015d94:	4548      	cmp	r0, r9
 8015d96:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8015d9a:	f340 8099 	ble.w	8015ed0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8015d9e:	1a5b      	subs	r3, r3, r1
 8015da0:	b29b      	uxth	r3, r3
 8015da2:	4596      	cmp	lr, r2
 8015da4:	fa0f f08a 	sxth.w	r0, sl
 8015da8:	b21e      	sxth	r6, r3
 8015daa:	dd2e      	ble.n	8015e0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8015dac:	9f02      	ldr	r7, [sp, #8]
 8015dae:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8015db2:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8015db6:	9f04      	ldr	r7, [sp, #16]
 8015db8:	1a3f      	subs	r7, r7, r0
 8015dba:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8015dbe:	fa1f fe8e 	uxth.w	lr, lr
 8015dc2:	b292      	uxth	r2, r2
 8015dc4:	ebae 0102 	sub.w	r1, lr, r2
 8015dc8:	44a6      	add	lr, r4
 8015dca:	4402      	add	r2, r0
 8015dcc:	b289      	uxth	r1, r1
 8015dce:	fa0f fe8e 	sxth.w	lr, lr
 8015dd2:	b212      	sxth	r2, r2
 8015dd4:	b20d      	sxth	r5, r1
 8015dd6:	ebae 0202 	sub.w	r2, lr, r2
 8015dda:	436f      	muls	r7, r5
 8015ddc:	4372      	muls	r2, r6
 8015dde:	4297      	cmp	r7, r2
 8015de0:	db09      	blt.n	8015df6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8015de2:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8015de6:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8015dea:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8015dee:	449c      	add	ip, r3
 8015df0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8015df4:	e686      	b.n	8015b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015df6:	4421      	add	r1, r4
 8015df8:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8015dfc:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8015e00:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015e04:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015e08:	e67c      	b.n	8015b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015e0a:	9f04      	ldr	r7, [sp, #16]
 8015e0c:	42b8      	cmp	r0, r7
 8015e0e:	da27      	bge.n	8015e60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8015e10:	9902      	ldr	r1, [sp, #8]
 8015e12:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8015e16:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8015e1a:	eb05 010e 	add.w	r1, r5, lr
 8015e1e:	fa1f f881 	uxth.w	r8, r1
 8015e22:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8015e26:	4411      	add	r1, r2
 8015e28:	eba1 0108 	sub.w	r1, r1, r8
 8015e2c:	b289      	uxth	r1, r1
 8015e2e:	fa0f f988 	sxth.w	r9, r8
 8015e32:	eba2 020e 	sub.w	r2, r2, lr
 8015e36:	fa0f f881 	sxth.w	r8, r1
 8015e3a:	1a3f      	subs	r7, r7, r0
 8015e3c:	4372      	muls	r2, r6
 8015e3e:	fb08 f707 	mul.w	r7, r8, r7
 8015e42:	42ba      	cmp	r2, r7
 8015e44:	dc06      	bgt.n	8015e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8015e46:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8015e4a:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8015e4e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8015e52:	e7ca      	b.n	8015dea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8015e54:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8015e58:	4429      	add	r1, r5
 8015e5a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015e5e:	e651      	b.n	8015b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015e60:	9805      	ldr	r0, [sp, #20]
 8015e62:	ebaa 0000 	sub.w	r0, sl, r0
 8015e66:	b280      	uxth	r0, r0
 8015e68:	2d06      	cmp	r5, #6
 8015e6a:	fa0f fe80 	sxth.w	lr, r0
 8015e6e:	d817      	bhi.n	8015ea0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8015e70:	9b04      	ldr	r3, [sp, #16]
 8015e72:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8015e76:	1c6b      	adds	r3, r5, #1
 8015e78:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8015e7c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8015e80:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8015e84:	9b01      	ldr	r3, [sp, #4]
 8015e86:	9801      	ldr	r0, [sp, #4]
 8015e88:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015e8c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8015e90:	805a      	strh	r2, [r3, #2]
 8015e92:	809e      	strh	r6, [r3, #4]
 8015e94:	80d9      	strh	r1, [r3, #6]
 8015e96:	9b02      	ldr	r3, [sp, #8]
 8015e98:	3b01      	subs	r3, #1
 8015e9a:	9302      	str	r3, [sp, #8]
 8015e9c:	3c08      	subs	r4, #8
 8015e9e:	e747      	b.n	8015d30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8015ea0:	9a02      	ldr	r2, [sp, #8]
 8015ea2:	45b6      	cmp	lr, r6
 8015ea4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8015ea8:	db0d      	blt.n	8015ec6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8015eaa:	449c      	add	ip, r3
 8015eac:	fa1f fc8c 	uxth.w	ip, ip
 8015eb0:	445a      	add	r2, fp
 8015eb2:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8015eb6:	448c      	add	ip, r1
 8015eb8:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8015ebc:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8015ec0:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8015ec4:	e61e      	b.n	8015b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015ec6:	445a      	add	r2, fp
 8015ec8:	4484      	add	ip, r0
 8015eca:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8015ece:	e78f      	b.n	8015df0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8015ed0:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8015ed4:	fa1f f18e 	uxth.w	r1, lr
 8015ed8:	eb01 0806 	add.w	r8, r1, r6
 8015edc:	b293      	uxth	r3, r2
 8015ede:	fa1f f888 	uxth.w	r8, r8
 8015ee2:	9306      	str	r3, [sp, #24]
 8015ee4:	fa0f f388 	sxth.w	r3, r8
 8015ee8:	9307      	str	r3, [sp, #28]
 8015eea:	9f06      	ldr	r7, [sp, #24]
 8015eec:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8015ef0:	443b      	add	r3, r7
 8015ef2:	b29b      	uxth	r3, r3
 8015ef4:	4596      	cmp	lr, r2
 8015ef6:	9308      	str	r3, [sp, #32]
 8015ef8:	da24      	bge.n	8015f44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8015efa:	9905      	ldr	r1, [sp, #20]
 8015efc:	eba3 0308 	sub.w	r3, r3, r8
 8015f00:	ebaa 0401 	sub.w	r4, sl, r1
 8015f04:	b2a4      	uxth	r4, r4
 8015f06:	b29b      	uxth	r3, r3
 8015f08:	b225      	sxth	r5, r4
 8015f0a:	b219      	sxth	r1, r3
 8015f0c:	eba2 020e 	sub.w	r2, r2, lr
 8015f10:	eba9 0000 	sub.w	r0, r9, r0
 8015f14:	436a      	muls	r2, r5
 8015f16:	4348      	muls	r0, r1
 8015f18:	4282      	cmp	r2, r0
 8015f1a:	9a02      	ldr	r2, [sp, #8]
 8015f1c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8015f20:	445a      	add	r2, fp
 8015f22:	dc06      	bgt.n	8015f32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8015f24:	9b07      	ldr	r3, [sp, #28]
 8015f26:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8015f2a:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8015f2e:	44a4      	add	ip, r4
 8015f30:	e75e      	b.n	8015df0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8015f32:	9904      	ldr	r1, [sp, #16]
 8015f34:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8015f38:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8015f3c:	4433      	add	r3, r6
 8015f3e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015f42:	e5df      	b.n	8015b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015f44:	9f06      	ldr	r7, [sp, #24]
 8015f46:	9b04      	ldr	r3, [sp, #16]
 8015f48:	1bc9      	subs	r1, r1, r7
 8015f4a:	fa0f f78a 	sxth.w	r7, sl
 8015f4e:	b289      	uxth	r1, r1
 8015f50:	429f      	cmp	r7, r3
 8015f52:	fa0f fe81 	sxth.w	lr, r1
 8015f56:	dd23      	ble.n	8015fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8015f58:	9a05      	ldr	r2, [sp, #20]
 8015f5a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8015f5e:	9d07      	ldr	r5, [sp, #28]
 8015f60:	ebaa 0202 	sub.w	r2, sl, r2
 8015f64:	b292      	uxth	r2, r2
 8015f66:	eba5 0a03 	sub.w	sl, r5, r3
 8015f6a:	b214      	sxth	r4, r2
 8015f6c:	eba9 0000 	sub.w	r0, r9, r0
 8015f70:	9b02      	ldr	r3, [sp, #8]
 8015f72:	fb0e f000 	mul.w	r0, lr, r0
 8015f76:	fb04 fa0a 	mul.w	sl, r4, sl
 8015f7a:	00db      	lsls	r3, r3, #3
 8015f7c:	4550      	cmp	r0, sl
 8015f7e:	445b      	add	r3, fp
 8015f80:	db03      	blt.n	8015f8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8015f82:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8015f86:	4494      	add	ip, r2
 8015f88:	e732      	b.n	8015df0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8015f8a:	9a04      	ldr	r2, [sp, #16]
 8015f8c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8015f90:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8015f94:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8015f98:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015f9c:	4431      	add	r1, r6
 8015f9e:	e75c      	b.n	8015e5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8015fa0:	9b08      	ldr	r3, [sp, #32]
 8015fa2:	eba3 0308 	sub.w	r3, r3, r8
 8015fa6:	b29b      	uxth	r3, r3
 8015fa8:	2d06      	cmp	r5, #6
 8015faa:	b218      	sxth	r0, r3
 8015fac:	d813      	bhi.n	8015fd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8015fae:	9b07      	ldr	r3, [sp, #28]
 8015fb0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8015fb4:	1c6b      	adds	r3, r5, #1
 8015fb6:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8015fba:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8015fbe:	9b01      	ldr	r3, [sp, #4]
 8015fc0:	9901      	ldr	r1, [sp, #4]
 8015fc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015fc6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8015fca:	805a      	strh	r2, [r3, #2]
 8015fcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fce:	809a      	strh	r2, [r3, #4]
 8015fd0:	f8a3 e006 	strh.w	lr, [r3, #6]
 8015fd4:	e75f      	b.n	8015e96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8015fd6:	9c02      	ldr	r4, [sp, #8]
 8015fd8:	4570      	cmp	r0, lr
 8015fda:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8015fde:	db0d      	blt.n	8015ffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8015fe0:	4431      	add	r1, r6
 8015fe2:	9b06      	ldr	r3, [sp, #24]
 8015fe4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8015fe8:	b289      	uxth	r1, r1
 8015fea:	445c      	add	r4, fp
 8015fec:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015ff0:	4419      	add	r1, r3
 8015ff2:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8015ff6:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8015ffa:	e583      	b.n	8015b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015ffc:	445c      	add	r4, fp
 8015ffe:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8016002:	e79b      	b.n	8015f3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8016004:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8016008:	1e65      	subs	r5, r4, #1
 801600a:	b2ad      	uxth	r5, r5
 801600c:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8016010:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8016014:	42b5      	cmp	r5, r6
 8016016:	d044      	beq.n	80160a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8016018:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801601c:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 8016020:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8016024:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 8016028:	4282      	cmp	r2, r0
 801602a:	d11f      	bne.n	801606c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801602c:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 8016030:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8016034:	459c      	cmp	ip, r3
 8016036:	d119      	bne.n	801606c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8016038:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 801603c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8016040:	19d8      	adds	r0, r3, r7
 8016042:	b200      	sxth	r0, r0
 8016044:	4288      	cmp	r0, r1
 8016046:	d109      	bne.n	801605c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8016048:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 801604c:	4413      	add	r3, r2
 801604e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8016052:	4629      	mov	r1, r5
 8016054:	9801      	ldr	r0, [sp, #4]
 8016056:	f7ff fd2b 	bl	8015ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801605a:	e003      	b.n	8016064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801605c:	4411      	add	r1, r2
 801605e:	b209      	sxth	r1, r1
 8016060:	42b9      	cmp	r1, r7
 8016062:	d0f3      	beq.n	801604c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8016064:	3d01      	subs	r5, #1
 8016066:	b2ad      	uxth	r5, r5
 8016068:	3c08      	subs	r4, #8
 801606a:	e7d3      	b.n	8016014 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801606c:	42b9      	cmp	r1, r7
 801606e:	d1f9      	bne.n	8016064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016070:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 8016074:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8016078:	4299      	cmp	r1, r3
 801607a:	d1f3      	bne.n	8016064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801607c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8016080:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8016084:	181f      	adds	r7, r3, r0
 8016086:	b23f      	sxth	r7, r7
 8016088:	42ba      	cmp	r2, r7
 801608a:	d105      	bne.n	8016098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801608c:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8016090:	440b      	add	r3, r1
 8016092:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8016096:	e7dc      	b.n	8016052 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8016098:	440a      	add	r2, r1
 801609a:	b212      	sxth	r2, r2
 801609c:	4290      	cmp	r0, r2
 801609e:	d1e1      	bne.n	8016064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80160a0:	e7f6      	b.n	8016090 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80160a2:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 80160a6:	2e07      	cmp	r6, #7
 80160a8:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80160ac:	d812      	bhi.n	80160d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80160ae:	1c75      	adds	r5, r6, #1
 80160b0:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80160b4:	9d01      	ldr	r5, [sp, #4]
 80160b6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80160ba:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80160be:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80160c2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80160c6:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80160ca:	442c      	add	r4, r5
 80160cc:	8061      	strh	r1, [r4, #2]
 80160ce:	80a2      	strh	r2, [r4, #4]
 80160d0:	80e3      	strh	r3, [r4, #6]
 80160d2:	e581      	b.n	8015bd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80160d4:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80160d8:	3e01      	subs	r6, #1
 80160da:	445c      	add	r4, fp
 80160dc:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80160e0:	f04f 37ff 	mov.w	r7, #4294967295
 80160e4:	2500      	movs	r5, #0
 80160e6:	9305      	str	r3, [sp, #20]
 80160e8:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80160ec:	9302      	str	r3, [sp, #8]
 80160ee:	1e72      	subs	r2, r6, #1
 80160f0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80160f4:	9304      	str	r3, [sp, #16]
 80160f6:	4691      	mov	r9, r2
 80160f8:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 80160fc:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016100:	bf14      	ite	ne
 8016102:	9905      	ldrne	r1, [sp, #20]
 8016104:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8016108:	6818      	ldr	r0, [r3, #0]
 801610a:	9207      	str	r2, [sp, #28]
 801610c:	bf18      	it	ne
 801610e:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8016112:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016116:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801611a:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801611e:	9306      	str	r3, [sp, #24]
 8016120:	fb18 f801 	smulbb	r8, r8, r1
 8016124:	6859      	ldr	r1, [r3, #4]
 8016126:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801612a:	4671      	mov	r1, lr
 801612c:	a80c      	add	r0, sp, #48	; 0x30
 801612e:	f7ff fb6d 	bl	801580c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016132:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8016136:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801613a:	9b04      	ldr	r3, [sp, #16]
 801613c:	9a02      	ldr	r2, [sp, #8]
 801613e:	fb10 f001 	smulbb	r0, r0, r1
 8016142:	fb02 8803 	mla	r8, r2, r3, r8
 8016146:	eba0 0108 	sub.w	r1, r0, r8
 801614a:	f04f 0c08 	mov.w	ip, #8
 801614e:	fb90 f0fc 	sdiv	r0, r0, ip
 8016152:	4288      	cmp	r0, r1
 8016154:	dc20      	bgt.n	8016198 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 8016156:	4551      	cmp	r1, sl
 8016158:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801615c:	da03      	bge.n	8016166 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 801615e:	b1d9      	cbz	r1, 8016198 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 8016160:	468a      	mov	sl, r1
 8016162:	464f      	mov	r7, r9
 8016164:	4635      	mov	r5, r6
 8016166:	f109 39ff 	add.w	r9, r9, #4294967295
 801616a:	f119 0f02 	cmn.w	r9, #2
 801616e:	d1c5      	bne.n	80160fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8016170:	4616      	mov	r6, r2
 8016172:	3201      	adds	r2, #1
 8016174:	f1a4 0408 	sub.w	r4, r4, #8
 8016178:	d1b6      	bne.n	80160e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801617a:	9b01      	ldr	r3, [sp, #4]
 801617c:	b2ac      	uxth	r4, r5
 801617e:	00ed      	lsls	r5, r5, #3
 8016180:	1958      	adds	r0, r3, r5
 8016182:	1c7b      	adds	r3, r7, #1
 8016184:	d10b      	bne.n	801619e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 8016186:	4601      	mov	r1, r0
 8016188:	9803      	ldr	r0, [sp, #12]
 801618a:	f7ff fb3f 	bl	801580c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801618e:	4621      	mov	r1, r4
 8016190:	9801      	ldr	r0, [sp, #4]
 8016192:	f7ff fc8d 	bl	8015ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016196:	e4b5      	b.n	8015b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016198:	464f      	mov	r7, r9
 801619a:	4635      	mov	r5, r6
 801619c:	e7ed      	b.n	801617a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 801619e:	9b01      	ldr	r3, [sp, #4]
 80161a0:	00ff      	lsls	r7, r7, #3
 80161a2:	19d9      	adds	r1, r3, r7
 80161a4:	f7ff fb32 	bl	801580c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80161a8:	9b03      	ldr	r3, [sp, #12]
 80161aa:	cb03      	ldmia	r3!, {r0, r1}
 80161ac:	445f      	add	r7, fp
 80161ae:	445d      	add	r5, fp
 80161b0:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 80161b4:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80161b8:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80161bc:	9b03      	ldr	r3, [sp, #12]
 80161be:	6869      	ldr	r1, [r5, #4]
 80161c0:	c303      	stmia	r3!, {r0, r1}
 80161c2:	e7e4      	b.n	801618e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

080161c4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80161c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161c8:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80161cc:	b09b      	sub	sp, #108	; 0x6c
 80161ce:	4604      	mov	r4, r0
 80161d0:	4630      	mov	r0, r6
 80161d2:	f7f9 fe50 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 80161d6:	4605      	mov	r5, r0
 80161d8:	b948      	cbnz	r0, 80161ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 80161da:	6823      	ldr	r3, [r4, #0]
 80161dc:	e896 0006 	ldmia.w	r6, {r1, r2}
 80161e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161e2:	4620      	mov	r0, r4
 80161e4:	4798      	blx	r3
 80161e6:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80161ea:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 80161ee:	4bc6      	ldr	r3, [pc, #792]	; (8016508 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d03f      	beq.n	8016276 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80161f6:	4dc5      	ldr	r5, [pc, #788]	; (801650c <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 80161f8:	4628      	mov	r0, r5
 80161fa:	f7f9 fe3c 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 80161fe:	4606      	mov	r6, r0
 8016200:	2800      	cmp	r0, #0
 8016202:	d138      	bne.n	8016276 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8016204:	4628      	mov	r0, r5
 8016206:	f7ff f979 	bl	80154fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801620a:	6823      	ldr	r3, [r4, #0]
 801620c:	6829      	ldr	r1, [r5, #0]
 801620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016210:	686a      	ldr	r2, [r5, #4]
 8016212:	4620      	mov	r0, r4
 8016214:	4798      	blx	r3
 8016216:	802e      	strh	r6, [r5, #0]
 8016218:	806e      	strh	r6, [r5, #2]
 801621a:	80ae      	strh	r6, [r5, #4]
 801621c:	80ee      	strh	r6, [r5, #6]
 801621e:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8016222:	4dbb      	ldr	r5, [pc, #748]	; (8016510 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8016224:	4640      	mov	r0, r8
 8016226:	f7ff fbeb 	bl	8015a00 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801622a:	882e      	ldrh	r6, [r5, #0]
 801622c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8016230:	4633      	mov	r3, r6
 8016232:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8016236:	42bb      	cmp	r3, r7
 8016238:	d224      	bcs.n	8016284 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801623a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801623e:	2907      	cmp	r1, #7
 8016240:	d816      	bhi.n	8016270 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8016242:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8016246:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801624a:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801624e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8016252:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8016256:	1c4a      	adds	r2, r1, #1
 8016258:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801625c:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8016260:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8016264:	f8a2 a002 	strh.w	sl, [r2, #2]
 8016268:	f8a2 e004 	strh.w	lr, [r2, #4]
 801626c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016270:	3301      	adds	r3, #1
 8016272:	b29b      	uxth	r3, r3
 8016274:	e7df      	b.n	8016236 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8016276:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801627a:	2b00      	cmp	r3, #0
 801627c:	d1cf      	bne.n	801621e <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801627e:	b01b      	add	sp, #108	; 0x6c
 8016280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016284:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8016288:	42b3      	cmp	r3, r6
 801628a:	d90c      	bls.n	80162a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801628c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8016290:	6822      	ldr	r2, [r4, #0]
 8016292:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8016296:	6c17      	ldr	r7, [r2, #64]	; 0x40
 8016298:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801629c:	4620      	mov	r0, r4
 801629e:	3601      	adds	r6, #1
 80162a0:	47b8      	blx	r7
 80162a2:	b2b6      	uxth	r6, r6
 80162a4:	e7ee      	b.n	8016284 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80162a6:	4a9b      	ldr	r2, [pc, #620]	; (8016514 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80162a8:	6813      	ldr	r3, [r2, #0]
 80162aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80162ae:	2b01      	cmp	r3, #1
 80162b0:	4691      	mov	r9, r2
 80162b2:	f040 80e2 	bne.w	801647a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 80162b6:	8829      	ldrh	r1, [r5, #0]
 80162b8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80162bc:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80162c0:	33ae      	adds	r3, #174	; 0xae
 80162c2:	2600      	movs	r6, #0
 80162c4:	428f      	cmp	r7, r1
 80162c6:	f103 0308 	add.w	r3, r3, #8
 80162ca:	dd0a      	ble.n	80162e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80162cc:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80162d0:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80162d4:	4402      	add	r2, r0
 80162d6:	b212      	sxth	r2, r2
 80162d8:	4296      	cmp	r6, r2
 80162da:	bfb8      	it	lt
 80162dc:	4616      	movlt	r6, r2
 80162de:	3101      	adds	r1, #1
 80162e0:	e7f0      	b.n	80162c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 80162e2:	4b8d      	ldr	r3, [pc, #564]	; (8016518 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80162e4:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8016514 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 80162e8:	881b      	ldrh	r3, [r3, #0]
 80162ea:	2b0f      	cmp	r3, #15
 80162ec:	bf88      	it	hi
 80162ee:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 80162f2:	f04f 0300 	mov.w	r3, #0
 80162f6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80162fa:	bf98      	it	ls
 80162fc:	f04f 0b01 	movls.w	fp, #1
 8016300:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8016304:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8016308:	4b82      	ldr	r3, [pc, #520]	; (8016514 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801630a:	4438      	add	r0, r7
 801630c:	b207      	sxth	r7, r0
 801630e:	6818      	ldr	r0, [r3, #0]
 8016310:	42b7      	cmp	r7, r6
 8016312:	6803      	ldr	r3, [r0, #0]
 8016314:	f280 8083 	bge.w	801641e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801631c:	4798      	blx	r3
 801631e:	eb07 030b 	add.w	r3, r7, fp
 8016322:	4298      	cmp	r0, r3
 8016324:	da07      	bge.n	8016336 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 8016326:	42b0      	cmp	r0, r6
 8016328:	da05      	bge.n	8016336 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 801632a:	4287      	cmp	r7, r0
 801632c:	dd6c      	ble.n	8016408 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801632e:	2f00      	cmp	r7, #0
 8016330:	dd6a      	ble.n	8016408 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8016332:	4630      	mov	r0, r6
 8016334:	e004      	b.n	8016340 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8016336:	4287      	cmp	r7, r0
 8016338:	dcfb      	bgt.n	8016332 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801633a:	42b0      	cmp	r0, r6
 801633c:	bfa8      	it	ge
 801633e:	4630      	movge	r0, r6
 8016340:	4b76      	ldr	r3, [pc, #472]	; (801651c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8016342:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016346:	1bc0      	subs	r0, r0, r7
 8016348:	f9b3 3000 	ldrsh.w	r3, [r3]
 801634c:	882f      	ldrh	r7, [r5, #0]
 801634e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016352:	2200      	movs	r2, #0
 8016354:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016358:	f8ad 001a 	strh.w	r0, [sp, #26]
 801635c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8016360:	42bb      	cmp	r3, r7
 8016362:	d9cd      	bls.n	8016300 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8016364:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8016368:	ab07      	add	r3, sp, #28
 801636a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801636e:	6851      	ldr	r1, [r2, #4]
 8016370:	c303      	stmia	r3!, {r0, r1}
 8016372:	a905      	add	r1, sp, #20
 8016374:	a807      	add	r0, sp, #28
 8016376:	f7ff f9b0 	bl	80156da <_ZNK8touchgfx4Rect9intersectERKS0_>
 801637a:	2800      	cmp	r0, #0
 801637c:	d04c      	beq.n	8016418 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801637e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8016382:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8016386:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801638a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801638e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016392:	9302      	str	r3, [sp, #8]
 8016394:	4686      	mov	lr, r0
 8016396:	4290      	cmp	r0, r2
 8016398:	4450      	add	r0, sl
 801639a:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801639e:	bfb8      	it	lt
 80163a0:	4696      	movlt	lr, r2
 80163a2:	4452      	add	r2, sl
 80163a4:	4299      	cmp	r1, r3
 80163a6:	b280      	uxth	r0, r0
 80163a8:	b292      	uxth	r2, r2
 80163aa:	468c      	mov	ip, r1
 80163ac:	fa0f fa82 	sxth.w	sl, r2
 80163b0:	bfb8      	it	lt
 80163b2:	469c      	movlt	ip, r3
 80163b4:	b203      	sxth	r3, r0
 80163b6:	4553      	cmp	r3, sl
 80163b8:	bfb8      	it	lt
 80163ba:	4602      	movlt	r2, r0
 80163bc:	eba2 020e 	sub.w	r2, r2, lr
 80163c0:	f8ad 2020 	strh.w	r2, [sp, #32]
 80163c4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80163c8:	9b02      	ldr	r3, [sp, #8]
 80163ca:	f8ad e01c 	strh.w	lr, [sp, #28]
 80163ce:	4411      	add	r1, r2
 80163d0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80163d4:	f8ad c01e 	strh.w	ip, [sp, #30]
 80163d8:	4413      	add	r3, r2
 80163da:	b289      	uxth	r1, r1
 80163dc:	b29b      	uxth	r3, r3
 80163de:	b208      	sxth	r0, r1
 80163e0:	b21a      	sxth	r2, r3
 80163e2:	4290      	cmp	r0, r2
 80163e4:	bfb8      	it	lt
 80163e6:	460b      	movlt	r3, r1
 80163e8:	eba3 030c 	sub.w	r3, r3, ip
 80163ec:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80163f0:	a807      	add	r0, sp, #28
 80163f2:	f7f9 fd40 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 80163f6:	b920      	cbnz	r0, 8016402 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 80163f8:	6823      	ldr	r3, [r4, #0]
 80163fa:	a907      	add	r1, sp, #28
 80163fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80163fe:	4620      	mov	r0, r4
 8016400:	4798      	blx	r3
 8016402:	3701      	adds	r7, #1
 8016404:	b2bf      	uxth	r7, r7
 8016406:	e7a9      	b.n	801635c <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 8016408:	f8d9 0000 	ldr.w	r0, [r9]
 801640c:	6803      	ldr	r3, [r0, #0]
 801640e:	2101      	movs	r1, #1
 8016410:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016414:	4798      	blx	r3
 8016416:	e773      	b.n	8016300 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8016418:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801641c:	e7e8      	b.n	80163f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016420:	4798      	blx	r3
 8016422:	4b3f      	ldr	r3, [pc, #252]	; (8016520 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8016424:	781b      	ldrb	r3, [r3, #0]
 8016426:	2b00      	cmp	r3, #0
 8016428:	f43f af29 	beq.w	801627e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801642c:	2300      	movs	r3, #0
 801642e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8016432:	882b      	ldrh	r3, [r5, #0]
 8016434:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8016438:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801643c:	42ab      	cmp	r3, r5
 801643e:	f4bf af1e 	bcs.w	801627e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8016442:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8016446:	2907      	cmp	r1, #7
 8016448:	d814      	bhi.n	8016474 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801644a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801644e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8016452:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8016456:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801645a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801645e:	1c4a      	adds	r2, r1, #1
 8016460:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8016464:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8016468:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801646c:	f8a2 c002 	strh.w	ip, [r2, #2]
 8016470:	8097      	strh	r7, [r2, #4]
 8016472:	80d6      	strh	r6, [r2, #6]
 8016474:	3301      	adds	r3, #1
 8016476:	b29b      	uxth	r3, r3
 8016478:	e7e0      	b.n	801643c <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 801647a:	2b02      	cmp	r3, #2
 801647c:	f040 8133 	bne.w	80166e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 8016480:	4b28      	ldr	r3, [pc, #160]	; (8016524 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8016482:	781b      	ldrb	r3, [r3, #0]
 8016484:	2b01      	cmp	r3, #1
 8016486:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 801648a:	f000 8098 	beq.w	80165be <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801648e:	882a      	ldrh	r2, [r5, #0]
 8016490:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 8016494:	3201      	adds	r2, #1
 8016496:	b292      	uxth	r2, r2
 8016498:	2900      	cmp	r1, #0
 801649a:	d0c2      	beq.n	8016422 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801649c:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 80164a0:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80164a4:	441e      	add	r6, r3
 80164a6:	b236      	sxth	r6, r6
 80164a8:	4694      	mov	ip, r2
 80164aa:	f04f 0900 	mov.w	r9, #0
 80164ae:	fa1f f38c 	uxth.w	r3, ip
 80164b2:	4299      	cmp	r1, r3
 80164b4:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80164b8:	f240 80bf 	bls.w	801663a <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 80164bc:	4427      	add	r7, r4
 80164be:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80164c2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80164c6:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 80164ca:	4283      	cmp	r3, r0
 80164cc:	f340 80a1 	ble.w	8016612 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 80164d0:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 80164d4:	4406      	add	r6, r0
 80164d6:	b236      	sxth	r6, r6
 80164d8:	429e      	cmp	r6, r3
 80164da:	bfa8      	it	ge
 80164dc:	461e      	movge	r6, r3
 80164de:	46e1      	mov	r9, ip
 80164e0:	f10c 0c01 	add.w	ip, ip, #1
 80164e4:	e7e3      	b.n	80164ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 80164e6:	d10a      	bne.n	80164fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 80164e8:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 80164ec:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 80164f0:	4562      	cmp	r2, ip
 80164f2:	bfb8      	it	lt
 80164f4:	4662      	movlt	r2, ip
 80164f6:	4288      	cmp	r0, r1
 80164f8:	bfb8      	it	lt
 80164fa:	461f      	movlt	r7, r3
 80164fc:	e087      	b.n	801660e <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 80164fe:	428a      	cmp	r2, r1
 8016500:	bfb8      	it	lt
 8016502:	460a      	movlt	r2, r1
 8016504:	e083      	b.n	801660e <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 8016506:	bf00      	nop
 8016508:	20014650 	.word	0x20014650
 801650c:	2001465c 	.word	0x2001465c
 8016510:	20000090 	.word	0x20000090
 8016514:	20014610 	.word	0x20014610
 8016518:	20014606 	.word	0x20014606
 801651c:	20014604 	.word	0x20014604
 8016520:	2001460e 	.word	0x2001460e
 8016524:	20014608 	.word	0x20014608
 8016528:	19a1      	adds	r1, r4, r6
 801652a:	ab07      	add	r3, sp, #28
 801652c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8016530:	6849      	ldr	r1, [r1, #4]
 8016532:	c303      	stmia	r3!, {r0, r1}
 8016534:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016538:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801653c:	2b13      	cmp	r3, #19
 801653e:	bfd8      	it	le
 8016540:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8016544:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016548:	440b      	add	r3, r1
 801654a:	1a9b      	subs	r3, r3, r2
 801654c:	a807      	add	r0, sp, #28
 801654e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016552:	f7fe ffed 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016556:	a807      	add	r0, sp, #28
 8016558:	f7f9 fc8d 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 801655c:	bb78      	cbnz	r0, 80165be <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801655e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8016562:	f8d9 0000 	ldr.w	r0, [r9]
 8016566:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801656a:	f8d0 e000 	ldr.w	lr, [r0]
 801656e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016572:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016576:	f1bc 0f14 	cmp.w	ip, #20
 801657a:	bfa8      	it	ge
 801657c:	f04f 0c14 	movge.w	ip, #20
 8016580:	fa1f fc8c 	uxth.w	ip, ip
 8016584:	f8cd c000 	str.w	ip, [sp]
 8016588:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 801658c:	47d8      	blx	fp
 801658e:	4683      	mov	fp, r0
 8016590:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016594:	a807      	add	r0, sp, #28
 8016596:	f7fe ffb1 	bl	80154fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801659a:	6823      	ldr	r3, [r4, #0]
 801659c:	4426      	add	r6, r4
 801659e:	4620      	mov	r0, r4
 80165a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80165a2:	a907      	add	r1, sp, #28
 80165a4:	4798      	blx	r3
 80165a6:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 80165aa:	eba0 000b 	sub.w	r0, r0, fp
 80165ae:	b200      	sxth	r0, r0
 80165b0:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 80165b4:	b918      	cbnz	r0, 80165be <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 80165b6:	b2b9      	uxth	r1, r7
 80165b8:	4650      	mov	r0, sl
 80165ba:	f7ff fa79 	bl	8015ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80165be:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80165c2:	f1bb 0f00 	cmp.w	fp, #0
 80165c6:	f43f af2c 	beq.w	8016422 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80165ca:	882b      	ldrh	r3, [r5, #0]
 80165cc:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80165d0:	3301      	adds	r3, #1
 80165d2:	b29b      	uxth	r3, r3
 80165d4:	2700      	movs	r7, #0
 80165d6:	b299      	uxth	r1, r3
 80165d8:	458b      	cmp	fp, r1
 80165da:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 80165de:	d9a3      	bls.n	8016528 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 80165e0:	4426      	add	r6, r4
 80165e2:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 80165e6:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 80165ea:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 80165ee:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 80165f2:	4408      	add	r0, r1
 80165f4:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 80165f8:	4461      	add	r1, ip
 80165fa:	b200      	sxth	r0, r0
 80165fc:	b209      	sxth	r1, r1
 80165fe:	4288      	cmp	r0, r1
 8016600:	f6bf af71 	bge.w	80164e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8016604:	4584      	cmp	ip, r0
 8016606:	4662      	mov	r2, ip
 8016608:	461f      	mov	r7, r3
 801660a:	bfb8      	it	lt
 801660c:	4602      	movlt	r2, r0
 801660e:	3301      	adds	r3, #1
 8016610:	e7e1      	b.n	80165d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 8016612:	d10e      	bne.n	8016632 <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 8016614:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8016618:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 801661c:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8016620:	4473      	add	r3, lr
 8016622:	b21b      	sxth	r3, r3
 8016624:	429e      	cmp	r6, r3
 8016626:	bfa8      	it	ge
 8016628:	461e      	movge	r6, r3
 801662a:	4287      	cmp	r7, r0
 801662c:	bfb8      	it	lt
 801662e:	46e1      	movlt	r9, ip
 8016630:	e756      	b.n	80164e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8016632:	4286      	cmp	r6, r0
 8016634:	bfa8      	it	ge
 8016636:	4606      	movge	r6, r0
 8016638:	e752      	b.n	80164e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801663a:	eb0a 0007 	add.w	r0, sl, r7
 801663e:	4427      	add	r7, r4
 8016640:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8016644:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 8016648:	f1bb 0f13 	cmp.w	fp, #19
 801664c:	bfde      	ittt	le
 801664e:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 8016652:	445e      	addle	r6, fp
 8016654:	b236      	sxthle	r6, r6
 8016656:	f7f9 fc0e 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 801665a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801665e:	2800      	cmp	r0, #0
 8016660:	f47f af1a 	bne.w	8016498 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 8016664:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8016668:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801666c:	482a      	ldr	r0, [pc, #168]	; (8016718 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 801666e:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8016672:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8016676:	6800      	ldr	r0, [r0, #0]
 8016678:	f8ad 101c 	strh.w	r1, [sp, #28]
 801667c:	1ab6      	subs	r6, r6, r2
 801667e:	2e14      	cmp	r6, #20
 8016680:	f8ad 201e 	strh.w	r2, [sp, #30]
 8016684:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016688:	bfa8      	it	ge
 801668a:	2614      	movge	r6, #20
 801668c:	f8d0 c000 	ldr.w	ip, [r0]
 8016690:	b2b6      	uxth	r6, r6
 8016692:	fa1f fb8b 	uxth.w	fp, fp
 8016696:	455e      	cmp	r6, fp
 8016698:	bf94      	ite	ls
 801669a:	9600      	strls	r6, [sp, #0]
 801669c:	f8cd b000 	strhi.w	fp, [sp]
 80166a0:	b292      	uxth	r2, r2
 80166a2:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 80166a6:	b29b      	uxth	r3, r3
 80166a8:	b289      	uxth	r1, r1
 80166aa:	47b0      	blx	r6
 80166ac:	6823      	ldr	r3, [r4, #0]
 80166ae:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80166b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80166b4:	a907      	add	r1, sp, #28
 80166b6:	4620      	mov	r0, r4
 80166b8:	4798      	blx	r3
 80166ba:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80166be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80166c2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80166c6:	1a5b      	subs	r3, r3, r1
 80166c8:	440a      	add	r2, r1
 80166ca:	b21b      	sxth	r3, r3
 80166cc:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 80166d0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	f47f aeda 	bne.w	801648e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80166da:	fa1f f189 	uxth.w	r1, r9
 80166de:	4650      	mov	r0, sl
 80166e0:	f7ff f9e6 	bl	8015ab0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80166e4:	e6d3      	b.n	801648e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80166e6:	882e      	ldrh	r6, [r5, #0]
 80166e8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80166ec:	42b3      	cmp	r3, r6
 80166ee:	f67f ae98 	bls.w	8016422 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80166f2:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80166f6:	ab07      	add	r3, sp, #28
 80166f8:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80166fc:	6851      	ldr	r1, [r2, #4]
 80166fe:	c303      	stmia	r3!, {r0, r1}
 8016700:	a807      	add	r0, sp, #28
 8016702:	f7f9 fbb8 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016706:	b920      	cbnz	r0, 8016712 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 8016708:	6823      	ldr	r3, [r4, #0]
 801670a:	a907      	add	r1, sp, #28
 801670c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801670e:	4620      	mov	r0, r4
 8016710:	4798      	blx	r3
 8016712:	3601      	adds	r6, #1
 8016714:	b2b6      	uxth	r6, r6
 8016716:	e7e7      	b.n	80166e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 8016718:	20014610 	.word	0x20014610

0801671c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801671c:	4b03      	ldr	r3, [pc, #12]	; (801672c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801671e:	2200      	movs	r2, #0
 8016720:	801a      	strh	r2, [r3, #0]
 8016722:	805a      	strh	r2, [r3, #2]
 8016724:	809a      	strh	r2, [r3, #4]
 8016726:	80da      	strh	r2, [r3, #6]
 8016728:	4770      	bx	lr
 801672a:	bf00      	nop
 801672c:	2001465c 	.word	0x2001465c

08016730 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8016730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016734:	4606      	mov	r6, r0
 8016736:	b09d      	sub	sp, #116	; 0x74
 8016738:	a803      	add	r0, sp, #12
 801673a:	4614      	mov	r4, r2
 801673c:	468a      	mov	sl, r1
 801673e:	461d      	mov	r5, r3
 8016740:	f000 fe6a 	bl	8017418 <_ZN8touchgfx12TextProviderC1Ev>
 8016744:	6833      	ldr	r3, [r6, #0]
 8016746:	4630      	mov	r0, r6
 8016748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801674a:	4798      	blx	r3
 801674c:	6833      	ldr	r3, [r6, #0]
 801674e:	4607      	mov	r7, r0
 8016750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016752:	4630      	mov	r0, r6
 8016754:	4798      	blx	r3
 8016756:	462a      	mov	r2, r5
 8016758:	9000      	str	r0, [sp, #0]
 801675a:	4621      	mov	r1, r4
 801675c:	463b      	mov	r3, r7
 801675e:	a803      	add	r0, sp, #12
 8016760:	f000 feb5 	bl	80174ce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016764:	2500      	movs	r5, #0
 8016766:	462c      	mov	r4, r5
 8016768:	46a9      	mov	r9, r5
 801676a:	46a8      	mov	r8, r5
 801676c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8016770:	2300      	movs	r3, #0
 8016772:	9302      	str	r3, [sp, #8]
 8016774:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016778:	429c      	cmp	r4, r3
 801677a:	d002      	beq.n	8016782 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801677c:	455c      	cmp	r4, fp
 801677e:	bf18      	it	ne
 8016780:	4625      	movne	r5, r4
 8016782:	ab02      	add	r3, sp, #8
 8016784:	4632      	mov	r2, r6
 8016786:	4651      	mov	r1, sl
 8016788:	a803      	add	r0, sp, #12
 801678a:	f001 f9a3 	bl	8017ad4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801678e:	4604      	mov	r4, r0
 8016790:	b108      	cbz	r0, 8016796 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8016792:	280a      	cmp	r0, #10
 8016794:	d10a      	bne.n	80167ac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8016796:	45c1      	cmp	r9, r8
 8016798:	bf38      	it	cc
 801679a:	46c1      	movcc	r9, r8
 801679c:	f04f 0800 	mov.w	r8, #0
 80167a0:	2c00      	cmp	r4, #0
 80167a2:	d1e5      	bne.n	8016770 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80167a4:	4648      	mov	r0, r9
 80167a6:	b01d      	add	sp, #116	; 0x74
 80167a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ac:	9a02      	ldr	r2, [sp, #8]
 80167ae:	2a00      	cmp	r2, #0
 80167b0:	d0de      	beq.n	8016770 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80167b2:	7b57      	ldrb	r7, [r2, #13]
 80167b4:	6833      	ldr	r3, [r6, #0]
 80167b6:	8894      	ldrh	r4, [r2, #4]
 80167b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167ba:	007f      	lsls	r7, r7, #1
 80167bc:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80167c0:	7a97      	ldrb	r7, [r2, #10]
 80167c2:	4629      	mov	r1, r5
 80167c4:	4307      	orrs	r7, r0
 80167c6:	4630      	mov	r0, r6
 80167c8:	4798      	blx	r3
 80167ca:	4438      	add	r0, r7
 80167cc:	4480      	add	r8, r0
 80167ce:	fa1f f888 	uxth.w	r8, r8
 80167d2:	e7e5      	b.n	80167a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080167d4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80167d4:	b508      	push	{r3, lr}
 80167d6:	6803      	ldr	r3, [r0, #0]
 80167d8:	68db      	ldr	r3, [r3, #12]
 80167da:	4798      	blx	r3
 80167dc:	b128      	cbz	r0, 80167ea <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80167de:	7b43      	ldrb	r3, [r0, #13]
 80167e0:	7a80      	ldrb	r0, [r0, #10]
 80167e2:	005b      	lsls	r3, r3, #1
 80167e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80167e8:	4318      	orrs	r0, r3
 80167ea:	bd08      	pop	{r3, pc}

080167ec <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80167ec:	b40e      	push	{r1, r2, r3}
 80167ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167f0:	b09e      	sub	sp, #120	; 0x78
 80167f2:	ab23      	add	r3, sp, #140	; 0x8c
 80167f4:	4605      	mov	r5, r0
 80167f6:	f853 4b04 	ldr.w	r4, [r3], #4
 80167fa:	9303      	str	r3, [sp, #12]
 80167fc:	a805      	add	r0, sp, #20
 80167fe:	f000 fe0b 	bl	8017418 <_ZN8touchgfx12TextProviderC1Ev>
 8016802:	682b      	ldr	r3, [r5, #0]
 8016804:	4628      	mov	r0, r5
 8016806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016808:	4798      	blx	r3
 801680a:	682b      	ldr	r3, [r5, #0]
 801680c:	4606      	mov	r6, r0
 801680e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016810:	4628      	mov	r0, r5
 8016812:	4798      	blx	r3
 8016814:	4633      	mov	r3, r6
 8016816:	ae1e      	add	r6, sp, #120	; 0x78
 8016818:	4621      	mov	r1, r4
 801681a:	9000      	str	r0, [sp, #0]
 801681c:	9a03      	ldr	r2, [sp, #12]
 801681e:	2400      	movs	r4, #0
 8016820:	a805      	add	r0, sp, #20
 8016822:	f000 fe54 	bl	80174ce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016826:	f846 4d68 	str.w	r4, [r6, #-104]!
 801682a:	462a      	mov	r2, r5
 801682c:	4633      	mov	r3, r6
 801682e:	4621      	mov	r1, r4
 8016830:	a805      	add	r0, sp, #20
 8016832:	f001 f94f 	bl	8017ad4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016836:	b1f0      	cbz	r0, 8016876 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8016838:	280a      	cmp	r0, #10
 801683a:	d018      	beq.n	801686e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801683c:	9f04      	ldr	r7, [sp, #16]
 801683e:	b1b7      	cbz	r7, 801686e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8016840:	7b78      	ldrb	r0, [r7, #13]
 8016842:	7a3b      	ldrb	r3, [r7, #8]
 8016844:	88ea      	ldrh	r2, [r5, #6]
 8016846:	00c1      	lsls	r1, r0, #3
 8016848:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801684c:	4319      	orrs	r1, r3
 801684e:	0643      	lsls	r3, r0, #25
 8016850:	bf44      	itt	mi
 8016852:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8016856:	b219      	sxthmi	r1, r3
 8016858:	0100      	lsls	r0, r0, #4
 801685a:	79fb      	ldrb	r3, [r7, #7]
 801685c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016860:	4303      	orrs	r3, r0
 8016862:	4413      	add	r3, r2
 8016864:	1a5b      	subs	r3, r3, r1
 8016866:	b21b      	sxth	r3, r3
 8016868:	429c      	cmp	r4, r3
 801686a:	bfb8      	it	lt
 801686c:	461c      	movlt	r4, r3
 801686e:	4633      	mov	r3, r6
 8016870:	462a      	mov	r2, r5
 8016872:	2100      	movs	r1, #0
 8016874:	e7dc      	b.n	8016830 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8016876:	b2a0      	uxth	r0, r4
 8016878:	b01e      	add	sp, #120	; 0x78
 801687a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801687e:	b003      	add	sp, #12
 8016880:	4770      	bx	lr

08016882 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8016882:	7a43      	ldrb	r3, [r0, #9]
 8016884:	8880      	ldrh	r0, [r0, #4]
 8016886:	4418      	add	r0, r3
 8016888:	b280      	uxth	r0, r0
 801688a:	4770      	bx	lr

0801688c <_ZNK8touchgfx4Font13getFontHeightEv>:
 801688c:	6803      	ldr	r3, [r0, #0]
 801688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016890:	4718      	bx	r3

08016892 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8016892:	b40e      	push	{r1, r2, r3}
 8016894:	b570      	push	{r4, r5, r6, lr}
 8016896:	b09d      	sub	sp, #116	; 0x74
 8016898:	ab21      	add	r3, sp, #132	; 0x84
 801689a:	4604      	mov	r4, r0
 801689c:	f853 5b04 	ldr.w	r5, [r3], #4
 80168a0:	9302      	str	r3, [sp, #8]
 80168a2:	a803      	add	r0, sp, #12
 80168a4:	f000 fdb8 	bl	8017418 <_ZN8touchgfx12TextProviderC1Ev>
 80168a8:	6823      	ldr	r3, [r4, #0]
 80168aa:	4620      	mov	r0, r4
 80168ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80168ae:	4798      	blx	r3
 80168b0:	6823      	ldr	r3, [r4, #0]
 80168b2:	4606      	mov	r6, r0
 80168b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80168b6:	4620      	mov	r0, r4
 80168b8:	4798      	blx	r3
 80168ba:	4633      	mov	r3, r6
 80168bc:	9000      	str	r0, [sp, #0]
 80168be:	9a02      	ldr	r2, [sp, #8]
 80168c0:	4629      	mov	r1, r5
 80168c2:	a803      	add	r0, sp, #12
 80168c4:	f000 fe03 	bl	80174ce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80168c8:	a803      	add	r0, sp, #12
 80168ca:	f001 f9d1 	bl	8017c70 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80168ce:	2401      	movs	r4, #1
 80168d0:	b2a3      	uxth	r3, r4
 80168d2:	b140      	cbz	r0, 80168e6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 80168d4:	280a      	cmp	r0, #10
 80168d6:	bf08      	it	eq
 80168d8:	3301      	addeq	r3, #1
 80168da:	a803      	add	r0, sp, #12
 80168dc:	bf08      	it	eq
 80168de:	b21c      	sxtheq	r4, r3
 80168e0:	f001 f9c6 	bl	8017c70 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80168e4:	e7f4      	b.n	80168d0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80168e6:	4618      	mov	r0, r3
 80168e8:	b01d      	add	sp, #116	; 0x74
 80168ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168ee:	b003      	add	sp, #12
 80168f0:	4770      	bx	lr

080168f2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80168f2:	b40e      	push	{r1, r2, r3}
 80168f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168f6:	b09e      	sub	sp, #120	; 0x78
 80168f8:	ab23      	add	r3, sp, #140	; 0x8c
 80168fa:	4604      	mov	r4, r0
 80168fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8016900:	9303      	str	r3, [sp, #12]
 8016902:	a805      	add	r0, sp, #20
 8016904:	f000 fd88 	bl	8017418 <_ZN8touchgfx12TextProviderC1Ev>
 8016908:	6823      	ldr	r3, [r4, #0]
 801690a:	4620      	mov	r0, r4
 801690c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801690e:	4798      	blx	r3
 8016910:	6823      	ldr	r3, [r4, #0]
 8016912:	4606      	mov	r6, r0
 8016914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016916:	4620      	mov	r0, r4
 8016918:	4798      	blx	r3
 801691a:	4633      	mov	r3, r6
 801691c:	4629      	mov	r1, r5
 801691e:	9000      	str	r0, [sp, #0]
 8016920:	9a03      	ldr	r2, [sp, #12]
 8016922:	a805      	add	r0, sp, #20
 8016924:	ad1e      	add	r5, sp, #120	; 0x78
 8016926:	f000 fdd2 	bl	80174ce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801692a:	2100      	movs	r1, #0
 801692c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8016930:	4622      	mov	r2, r4
 8016932:	462b      	mov	r3, r5
 8016934:	a805      	add	r0, sp, #20
 8016936:	f001 f8cd 	bl	8017ad4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801693a:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801693e:	b1d8      	cbz	r0, 8016978 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8016940:	280a      	cmp	r0, #10
 8016942:	d012      	beq.n	801696a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016944:	9804      	ldr	r0, [sp, #16]
 8016946:	b180      	cbz	r0, 801696a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016948:	7b47      	ldrb	r7, [r0, #13]
 801694a:	88e2      	ldrh	r2, [r4, #6]
 801694c:	00fb      	lsls	r3, r7, #3
 801694e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016952:	7a03      	ldrb	r3, [r0, #8]
 8016954:	430b      	orrs	r3, r1
 8016956:	0679      	lsls	r1, r7, #25
 8016958:	bf44      	itt	mi
 801695a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801695e:	b21b      	sxthmi	r3, r3
 8016960:	1ad3      	subs	r3, r2, r3
 8016962:	b21b      	sxth	r3, r3
 8016964:	429e      	cmp	r6, r3
 8016966:	bfa8      	it	ge
 8016968:	461e      	movge	r6, r3
 801696a:	462b      	mov	r3, r5
 801696c:	4622      	mov	r2, r4
 801696e:	2100      	movs	r1, #0
 8016970:	a805      	add	r0, sp, #20
 8016972:	f001 f8af 	bl	8017ad4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016976:	e7e2      	b.n	801693e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8016978:	4630      	mov	r0, r6
 801697a:	b01e      	add	sp, #120	; 0x78
 801697c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016980:	b003      	add	sp, #12
 8016982:	4770      	bx	lr

08016984 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8016984:	b513      	push	{r0, r1, r4, lr}
 8016986:	6803      	ldr	r3, [r0, #0]
 8016988:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801698c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016990:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016994:	2400      	movs	r4, #0
 8016996:	9400      	str	r4, [sp, #0]
 8016998:	f8ad 2006 	strh.w	r2, [sp, #6]
 801699c:	691b      	ldr	r3, [r3, #16]
 801699e:	4669      	mov	r1, sp
 80169a0:	4798      	blx	r3
 80169a2:	b002      	add	sp, #8
 80169a4:	bd10      	pop	{r4, pc}

080169a6 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80169a6:	b538      	push	{r3, r4, r5, lr}
 80169a8:	680b      	ldr	r3, [r1, #0]
 80169aa:	460c      	mov	r4, r1
 80169ac:	68db      	ldr	r3, [r3, #12]
 80169ae:	4605      	mov	r5, r0
 80169b0:	4798      	blx	r3
 80169b2:	6823      	ldr	r3, [r4, #0]
 80169b4:	4620      	mov	r0, r4
 80169b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169b8:	4629      	mov	r1, r5
 80169ba:	4798      	blx	r3
 80169bc:	4628      	mov	r0, r5
 80169be:	bd38      	pop	{r3, r4, r5, pc}

080169c0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80169c0:	b410      	push	{r4}
 80169c2:	880a      	ldrh	r2, [r1, #0]
 80169c4:	8884      	ldrh	r4, [r0, #4]
 80169c6:	4422      	add	r2, r4
 80169c8:	800a      	strh	r2, [r1, #0]
 80169ca:	88c4      	ldrh	r4, [r0, #6]
 80169cc:	884a      	ldrh	r2, [r1, #2]
 80169ce:	4422      	add	r2, r4
 80169d0:	804a      	strh	r2, [r1, #2]
 80169d2:	6940      	ldr	r0, [r0, #20]
 80169d4:	b120      	cbz	r0, 80169e0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80169d6:	6803      	ldr	r3, [r0, #0]
 80169d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169de:	4718      	bx	r3
 80169e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169e4:	4770      	bx	lr

080169e6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80169e6:	b570      	push	{r4, r5, r6, lr}
 80169e8:	8882      	ldrh	r2, [r0, #4]
 80169ea:	880b      	ldrh	r3, [r1, #0]
 80169ec:	4413      	add	r3, r2
 80169ee:	800b      	strh	r3, [r1, #0]
 80169f0:	88c2      	ldrh	r2, [r0, #6]
 80169f2:	884b      	ldrh	r3, [r1, #2]
 80169f4:	460c      	mov	r4, r1
 80169f6:	4413      	add	r3, r2
 80169f8:	804b      	strh	r3, [r1, #2]
 80169fa:	4605      	mov	r5, r0
 80169fc:	1d01      	adds	r1, r0, #4
 80169fe:	4620      	mov	r0, r4
 8016a00:	f7f9 f9f6 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 8016a04:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	dd0b      	ble.n	8016a24 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016a0c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	dd07      	ble.n	8016a24 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016a14:	6968      	ldr	r0, [r5, #20]
 8016a16:	b128      	cbz	r0, 8016a24 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016a18:	6803      	ldr	r3, [r0, #0]
 8016a1a:	4621      	mov	r1, r4
 8016a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a22:	4718      	bx	r3
 8016a24:	bd70      	pop	{r4, r5, r6, pc}
	...

08016a28 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8016a28:	b570      	push	{r4, r5, r6, lr}
 8016a2a:	8882      	ldrh	r2, [r0, #4]
 8016a2c:	880b      	ldrh	r3, [r1, #0]
 8016a2e:	4413      	add	r3, r2
 8016a30:	800b      	strh	r3, [r1, #0]
 8016a32:	88c2      	ldrh	r2, [r0, #6]
 8016a34:	884b      	ldrh	r3, [r1, #2]
 8016a36:	460c      	mov	r4, r1
 8016a38:	4413      	add	r3, r2
 8016a3a:	804b      	strh	r3, [r1, #2]
 8016a3c:	4605      	mov	r5, r0
 8016a3e:	1d01      	adds	r1, r0, #4
 8016a40:	4620      	mov	r0, r4
 8016a42:	f7f9 f9d5 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 8016a46:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	dd19      	ble.n	8016a82 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016a4e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	dd15      	ble.n	8016a82 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016a56:	6968      	ldr	r0, [r5, #20]
 8016a58:	b128      	cbz	r0, 8016a66 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8016a5a:	6803      	ldr	r3, [r0, #0]
 8016a5c:	4621      	mov	r1, r4
 8016a5e:	691b      	ldr	r3, [r3, #16]
 8016a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a64:	4718      	bx	r3
 8016a66:	4b07      	ldr	r3, [pc, #28]	; (8016a84 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	3304      	adds	r3, #4
 8016a6c:	429d      	cmp	r5, r3
 8016a6e:	d108      	bne.n	8016a82 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016a70:	f7fe ff12 	bl	8015898 <_ZN8touchgfx11Application11getInstanceEv>
 8016a74:	6803      	ldr	r3, [r0, #0]
 8016a76:	6821      	ldr	r1, [r4, #0]
 8016a78:	6862      	ldr	r2, [r4, #4]
 8016a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a80:	4718      	bx	r3
 8016a82:	bd70      	pop	{r4, r5, r6, pc}
 8016a84:	20014654 	.word	0x20014654

08016a88 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8016a88:	b570      	push	{r4, r5, r6, lr}
 8016a8a:	4604      	mov	r4, r0
 8016a8c:	4616      	mov	r6, r2
 8016a8e:	460d      	mov	r5, r1
 8016a90:	b901      	cbnz	r1, 8016a94 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8016a92:	b192      	cbz	r2, 8016aba <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8016a94:	6823      	ldr	r3, [r4, #0]
 8016a96:	4620      	mov	r0, r4
 8016a98:	699b      	ldr	r3, [r3, #24]
 8016a9a:	4798      	blx	r3
 8016a9c:	88e2      	ldrh	r2, [r4, #6]
 8016a9e:	88a1      	ldrh	r1, [r4, #4]
 8016aa0:	4432      	add	r2, r6
 8016aa2:	4429      	add	r1, r5
 8016aa4:	4620      	mov	r0, r4
 8016aa6:	b212      	sxth	r2, r2
 8016aa8:	b209      	sxth	r1, r1
 8016aaa:	f7ec ff2e 	bl	800390a <_ZN8touchgfx8Drawable5setXYEss>
 8016aae:	6823      	ldr	r3, [r4, #0]
 8016ab0:	4620      	mov	r0, r4
 8016ab2:	699b      	ldr	r3, [r3, #24]
 8016ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ab8:	4718      	bx	r3
 8016aba:	bd70      	pop	{r4, r5, r6, pc}

08016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8016abc:	b510      	push	{r4, lr}
 8016abe:	4604      	mov	r4, r0
 8016ac0:	4608      	mov	r0, r1
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	8023      	strh	r3, [r4, #0]
 8016ac6:	8063      	strh	r3, [r4, #2]
 8016ac8:	6803      	ldr	r3, [r0, #0]
 8016aca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016ace:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8016ad2:	80a1      	strh	r1, [r4, #4]
 8016ad4:	80e2      	strh	r2, [r4, #6]
 8016ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ad8:	4621      	mov	r1, r4
 8016ada:	4798      	blx	r3
 8016adc:	4620      	mov	r0, r4
 8016ade:	bd10      	pop	{r4, pc}

08016ae0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8016ae0:	b530      	push	{r4, r5, lr}
 8016ae2:	8083      	strh	r3, [r0, #4]
 8016ae4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016ae8:	80c3      	strh	r3, [r0, #6]
 8016aea:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8016aee:	7203      	strb	r3, [r0, #8]
 8016af0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016af4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8016af8:	7243      	strb	r3, [r0, #9]
 8016afa:	7a83      	ldrb	r3, [r0, #10]
 8016afc:	6141      	str	r1, [r0, #20]
 8016afe:	f365 0306 	bfi	r3, r5, #0, #7
 8016b02:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8016b06:	8302      	strh	r2, [r0, #24]
 8016b08:	f365 13c7 	bfi	r3, r5, #7, #1
 8016b0c:	7283      	strb	r3, [r0, #10]
 8016b0e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8016b12:	72c3      	strb	r3, [r0, #11]
 8016b14:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8016b18:	7303      	strb	r3, [r0, #12]
 8016b1a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8016b1e:	81c3      	strh	r3, [r0, #14]
 8016b20:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8016b24:	8203      	strh	r3, [r0, #16]
 8016b26:	4b01      	ldr	r3, [pc, #4]	; (8016b2c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8016b28:	6003      	str	r3, [r0, #0]
 8016b2a:	bd30      	pop	{r4, r5, pc}
 8016b2c:	0802989c 	.word	0x0802989c

08016b30 <_ZNK8touchgfx9ConstFont4findEt>:
 8016b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b32:	6944      	ldr	r4, [r0, #20]
 8016b34:	b3bc      	cbz	r4, 8016ba6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016b36:	88a3      	ldrh	r3, [r4, #4]
 8016b38:	8b02      	ldrh	r2, [r0, #24]
 8016b3a:	1acb      	subs	r3, r1, r3
 8016b3c:	f102 32ff 	add.w	r2, r2, #4294967295
 8016b40:	d431      	bmi.n	8016ba6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016b42:	4293      	cmp	r3, r2
 8016b44:	dd0c      	ble.n	8016b60 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8016b46:	230e      	movs	r3, #14
 8016b48:	fb03 4302 	mla	r3, r3, r2, r4
 8016b4c:	889b      	ldrh	r3, [r3, #4]
 8016b4e:	1a5b      	subs	r3, r3, r1
 8016b50:	1ad3      	subs	r3, r2, r3
 8016b52:	429a      	cmp	r2, r3
 8016b54:	db27      	blt.n	8016ba6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	bfbc      	itt	lt
 8016b5a:	2302      	movlt	r3, #2
 8016b5c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8016b60:	2500      	movs	r5, #0
 8016b62:	260e      	movs	r6, #14
 8016b64:	4295      	cmp	r5, r2
 8016b66:	dc1e      	bgt.n	8016ba6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016b68:	fb06 4003 	mla	r0, r6, r3, r4
 8016b6c:	8887      	ldrh	r7, [r0, #4]
 8016b6e:	42b9      	cmp	r1, r7
 8016b70:	d01a      	beq.n	8016ba8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8016b72:	d20d      	bcs.n	8016b90 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8016b74:	1e5a      	subs	r2, r3, #1
 8016b76:	4295      	cmp	r5, r2
 8016b78:	dc15      	bgt.n	8016ba6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016b7a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8016b7e:	1a5b      	subs	r3, r3, r1
 8016b80:	1ad3      	subs	r3, r2, r3
 8016b82:	429a      	cmp	r2, r3
 8016b84:	db0f      	blt.n	8016ba6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016b86:	429d      	cmp	r5, r3
 8016b88:	ddec      	ble.n	8016b64 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016b8a:	1953      	adds	r3, r2, r5
 8016b8c:	105b      	asrs	r3, r3, #1
 8016b8e:	e7e9      	b.n	8016b64 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016b90:	1c5d      	adds	r5, r3, #1
 8016b92:	42aa      	cmp	r2, r5
 8016b94:	db07      	blt.n	8016ba6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016b96:	8a43      	ldrh	r3, [r0, #18]
 8016b98:	1acb      	subs	r3, r1, r3
 8016b9a:	442b      	add	r3, r5
 8016b9c:	429d      	cmp	r5, r3
 8016b9e:	dc02      	bgt.n	8016ba6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	dadf      	bge.n	8016b64 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016ba4:	e7f1      	b.n	8016b8a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8016ba6:	2000      	movs	r0, #0
 8016ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016baa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8016baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bac:	4604      	mov	r4, r0
 8016bae:	4617      	mov	r7, r2
 8016bb0:	461e      	mov	r6, r3
 8016bb2:	b911      	cbnz	r1, 8016bba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8016bb4:	2500      	movs	r5, #0
 8016bb6:	4628      	mov	r0, r5
 8016bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bba:	290a      	cmp	r1, #10
 8016bbc:	d0fa      	beq.n	8016bb4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016bbe:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8016bc2:	4291      	cmp	r1, r2
 8016bc4:	d0f6      	beq.n	8016bb4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016bc6:	f242 020b 	movw	r2, #8203	; 0x200b
 8016bca:	4291      	cmp	r1, r2
 8016bcc:	d0f2      	beq.n	8016bb4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016bce:	f7ff ffaf 	bl	8016b30 <_ZNK8touchgfx9ConstFont4findEt>
 8016bd2:	4605      	mov	r5, r0
 8016bd4:	b950      	cbnz	r0, 8016bec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8016bd6:	6823      	ldr	r3, [r4, #0]
 8016bd8:	4620      	mov	r0, r4
 8016bda:	691b      	ldr	r3, [r3, #16]
 8016bdc:	4798      	blx	r3
 8016bde:	4601      	mov	r1, r0
 8016be0:	4620      	mov	r0, r4
 8016be2:	f7ff ffa5 	bl	8016b30 <_ZNK8touchgfx9ConstFont4findEt>
 8016be6:	4605      	mov	r5, r0
 8016be8:	2800      	cmp	r0, #0
 8016bea:	d0e3      	beq.n	8016bb4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016bec:	6823      	ldr	r3, [r4, #0]
 8016bee:	4629      	mov	r1, r5
 8016bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016bf2:	4620      	mov	r0, r4
 8016bf4:	4798      	blx	r3
 8016bf6:	6038      	str	r0, [r7, #0]
 8016bf8:	6823      	ldr	r3, [r4, #0]
 8016bfa:	4620      	mov	r0, r4
 8016bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bfe:	4798      	blx	r3
 8016c00:	7030      	strb	r0, [r6, #0]
 8016c02:	e7d8      	b.n	8016bb6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08016c04 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8016c04:	b538      	push	{r3, r4, r5, lr}
 8016c06:	4605      	mov	r5, r0
 8016c08:	f002 f902 	bl	8018e10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016c0c:	4604      	mov	r4, r0
 8016c0e:	4628      	mov	r0, r5
 8016c10:	f002 f842 	bl	8018c98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8016c14:	2800      	cmp	r0, #0
 8016c16:	bf14      	ite	ne
 8016c18:	2002      	movne	r0, #2
 8016c1a:	2000      	moveq	r0, #0
 8016c1c:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8016c20:	b280      	uxth	r0, r0
 8016c22:	bd38      	pop	{r3, r4, r5, pc}

08016c24 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 8016c24:	b538      	push	{r3, r4, r5, lr}
 8016c26:	4605      	mov	r5, r0
 8016c28:	f002 f8f2 	bl	8018e10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016c2c:	4604      	mov	r4, r0
 8016c2e:	4628      	mov	r0, r5
 8016c30:	f002 f832 	bl	8018c98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8016c34:	2800      	cmp	r0, #0
 8016c36:	bf14      	ite	ne
 8016c38:	2002      	movne	r0, #2
 8016c3a:	2000      	moveq	r0, #0
 8016c3c:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8016c40:	f040 0001 	orr.w	r0, r0, #1
 8016c44:	b280      	uxth	r0, r0
 8016c46:	bd38      	pop	{r3, r4, r5, pc}

08016c48 <_ZN8touchgfx4clzuEm>:
 8016c48:	4603      	mov	r3, r0
 8016c4a:	b1c8      	cbz	r0, 8016c80 <_ZN8touchgfx4clzuEm+0x38>
 8016c4c:	0c02      	lsrs	r2, r0, #16
 8016c4e:	0412      	lsls	r2, r2, #16
 8016c50:	b9a2      	cbnz	r2, 8016c7c <_ZN8touchgfx4clzuEm+0x34>
 8016c52:	0403      	lsls	r3, r0, #16
 8016c54:	2010      	movs	r0, #16
 8016c56:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016c5a:	bf04      	itt	eq
 8016c5c:	021b      	lsleq	r3, r3, #8
 8016c5e:	3008      	addeq	r0, #8
 8016c60:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016c64:	bf04      	itt	eq
 8016c66:	011b      	lsleq	r3, r3, #4
 8016c68:	3004      	addeq	r0, #4
 8016c6a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016c6e:	bf04      	itt	eq
 8016c70:	009b      	lsleq	r3, r3, #2
 8016c72:	3002      	addeq	r0, #2
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	db04      	blt.n	8016c82 <_ZN8touchgfx4clzuEm+0x3a>
 8016c78:	3001      	adds	r0, #1
 8016c7a:	4770      	bx	lr
 8016c7c:	2000      	movs	r0, #0
 8016c7e:	e7ea      	b.n	8016c56 <_ZN8touchgfx4clzuEm+0xe>
 8016c80:	2020      	movs	r0, #32
 8016c82:	4770      	bx	lr

08016c84 <_ZN8touchgfx7muldivuEmmmRm>:
 8016c84:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c88:	460f      	mov	r7, r1
 8016c8a:	4615      	mov	r5, r2
 8016c8c:	461e      	mov	r6, r3
 8016c8e:	4601      	mov	r1, r0
 8016c90:	b100      	cbz	r0, 8016c94 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 8016c92:	b927      	cbnz	r7, 8016c9e <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 8016c94:	2000      	movs	r0, #0
 8016c96:	6030      	str	r0, [r6, #0]
 8016c98:	b002      	add	sp, #8
 8016c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c9e:	f7ff ffd3 	bl	8016c48 <_ZN8touchgfx4clzuEm>
 8016ca2:	b980      	cbnz	r0, 8016cc6 <_ZN8touchgfx7muldivuEmmmRm+0x42>
 8016ca4:	4638      	mov	r0, r7
 8016ca6:	f7ff ffcf 	bl	8016c48 <_ZN8touchgfx4clzuEm>
 8016caa:	2800      	cmp	r0, #0
 8016cac:	dd05      	ble.n	8016cba <_ZN8touchgfx7muldivuEmmmRm+0x36>
 8016cae:	4633      	mov	r3, r6
 8016cb0:	462a      	mov	r2, r5
 8016cb2:	4638      	mov	r0, r7
 8016cb4:	f7ff ffe6 	bl	8016c84 <_ZN8touchgfx7muldivuEmmmRm>
 8016cb8:	e7ee      	b.n	8016c98 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8016cba:	f04f 33ff 	mov.w	r3, #4294967295
 8016cbe:	6033      	str	r3, [r6, #0]
 8016cc0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016cc4:	e7e8      	b.n	8016c98 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8016cc6:	fa37 f800 	lsrs.w	r8, r7, r0
 8016cca:	fb07 f301 	mul.w	r3, r7, r1
 8016cce:	d105      	bne.n	8016cdc <_ZN8touchgfx7muldivuEmmmRm+0x58>
 8016cd0:	fbb3 f0f5 	udiv	r0, r3, r5
 8016cd4:	fb05 3510 	mls	r5, r5, r0, r3
 8016cd8:	6035      	str	r5, [r6, #0]
 8016cda:	e7dd      	b.n	8016c98 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8016cdc:	2301      	movs	r3, #1
 8016cde:	fa01 fa00 	lsl.w	sl, r1, r0
 8016ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8016ce6:	3801      	subs	r0, #1
 8016ce8:	462a      	mov	r2, r5
 8016cea:	4633      	mov	r3, r6
 8016cec:	4038      	ands	r0, r7
 8016cee:	f7ff ffc9 	bl	8016c84 <_ZN8touchgfx7muldivuEmmmRm>
 8016cf2:	fbba f9f5 	udiv	r9, sl, r5
 8016cf6:	462a      	mov	r2, r5
 8016cf8:	4607      	mov	r7, r0
 8016cfa:	ab01      	add	r3, sp, #4
 8016cfc:	fb05 a119 	mls	r1, r5, r9, sl
 8016d00:	4640      	mov	r0, r8
 8016d02:	f7ff ffbf 	bl	8016c84 <_ZN8touchgfx7muldivuEmmmRm>
 8016d06:	9b01      	ldr	r3, [sp, #4]
 8016d08:	6832      	ldr	r2, [r6, #0]
 8016d0a:	fb08 f409 	mul.w	r4, r8, r9
 8016d0e:	441a      	add	r2, r3
 8016d10:	fbb2 f3f5 	udiv	r3, r2, r5
 8016d14:	441c      	add	r4, r3
 8016d16:	443c      	add	r4, r7
 8016d18:	4420      	add	r0, r4
 8016d1a:	fb05 2513 	mls	r5, r5, r3, r2
 8016d1e:	e7db      	b.n	8016cd8 <_ZN8touchgfx7muldivuEmmmRm+0x54>

08016d20 <_ZN8touchgfx6muldivElllRl>:
 8016d20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d22:	2800      	cmp	r0, #0
 8016d24:	bfba      	itte	lt
 8016d26:	4240      	neglt	r0, r0
 8016d28:	f04f 34ff 	movlt.w	r4, #4294967295
 8016d2c:	2401      	movge	r4, #1
 8016d2e:	2900      	cmp	r1, #0
 8016d30:	bfbc      	itt	lt
 8016d32:	4249      	neglt	r1, r1
 8016d34:	4264      	neglt	r4, r4
 8016d36:	2a00      	cmp	r2, #0
 8016d38:	bfb6      	itet	lt
 8016d3a:	4265      	neglt	r5, r4
 8016d3c:	4625      	movge	r5, r4
 8016d3e:	4252      	neglt	r2, r2
 8016d40:	4288      	cmp	r0, r1
 8016d42:	461e      	mov	r6, r3
 8016d44:	bfc2      	ittt	gt
 8016d46:	4603      	movgt	r3, r0
 8016d48:	4608      	movgt	r0, r1
 8016d4a:	4619      	movgt	r1, r3
 8016d4c:	ab01      	add	r3, sp, #4
 8016d4e:	f7ff ff99 	bl	8016c84 <_ZN8touchgfx7muldivuEmmmRm>
 8016d52:	9b01      	ldr	r3, [sp, #4]
 8016d54:	4368      	muls	r0, r5
 8016d56:	435c      	muls	r4, r3
 8016d58:	6034      	str	r4, [r6, #0]
 8016d5a:	b002      	add	sp, #8
 8016d5c:	bd70      	pop	{r4, r5, r6, pc}

08016d5e <_ZN8touchgfx6muldivElll>:
 8016d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d60:	4606      	mov	r6, r0
 8016d62:	ab01      	add	r3, sp, #4
 8016d64:	460d      	mov	r5, r1
 8016d66:	4614      	mov	r4, r2
 8016d68:	f7ff ffda 	bl	8016d20 <_ZN8touchgfx6muldivElllRl>
 8016d6c:	2e00      	cmp	r6, #0
 8016d6e:	db20      	blt.n	8016db2 <_ZN8touchgfx6muldivElll+0x54>
 8016d70:	bf14      	ite	ne
 8016d72:	2301      	movne	r3, #1
 8016d74:	2300      	moveq	r3, #0
 8016d76:	2d00      	cmp	r5, #0
 8016d78:	db1e      	blt.n	8016db8 <_ZN8touchgfx6muldivElll+0x5a>
 8016d7a:	bf14      	ite	ne
 8016d7c:	2201      	movne	r2, #1
 8016d7e:	2200      	moveq	r2, #0
 8016d80:	2c00      	cmp	r4, #0
 8016d82:	fb03 f202 	mul.w	r2, r3, r2
 8016d86:	db1a      	blt.n	8016dbe <_ZN8touchgfx6muldivElll+0x60>
 8016d88:	bf14      	ite	ne
 8016d8a:	2301      	movne	r3, #1
 8016d8c:	2300      	moveq	r3, #0
 8016d8e:	4353      	muls	r3, r2
 8016d90:	2b01      	cmp	r3, #1
 8016d92:	d117      	bne.n	8016dc4 <_ZN8touchgfx6muldivElll+0x66>
 8016d94:	9b01      	ldr	r3, [sp, #4]
 8016d96:	2c00      	cmp	r4, #0
 8016d98:	bfb8      	it	lt
 8016d9a:	4264      	neglt	r4, r4
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	f104 0401 	add.w	r4, r4, #1
 8016da2:	bfb8      	it	lt
 8016da4:	425b      	neglt	r3, r3
 8016da6:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8016daa:	db00      	blt.n	8016dae <_ZN8touchgfx6muldivElll+0x50>
 8016dac:	3001      	adds	r0, #1
 8016dae:	b002      	add	sp, #8
 8016db0:	bd70      	pop	{r4, r5, r6, pc}
 8016db2:	f04f 33ff 	mov.w	r3, #4294967295
 8016db6:	e7de      	b.n	8016d76 <_ZN8touchgfx6muldivElll+0x18>
 8016db8:	f04f 32ff 	mov.w	r2, #4294967295
 8016dbc:	e7e0      	b.n	8016d80 <_ZN8touchgfx6muldivElll+0x22>
 8016dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8016dc2:	e7e4      	b.n	8016d8e <_ZN8touchgfx6muldivElll+0x30>
 8016dc4:	3301      	adds	r3, #1
 8016dc6:	d1f2      	bne.n	8016dae <_ZN8touchgfx6muldivElll+0x50>
 8016dc8:	9b01      	ldr	r3, [sp, #4]
 8016dca:	2c00      	cmp	r4, #0
 8016dcc:	bfb8      	it	lt
 8016dce:	4264      	neglt	r4, r4
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	bfb8      	it	lt
 8016dd4:	425b      	neglt	r3, r3
 8016dd6:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8016dda:	bfc8      	it	gt
 8016ddc:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8016de0:	e7e5      	b.n	8016dae <_ZN8touchgfx6muldivElll+0x50>

08016de2 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8016de2:	2000      	movs	r0, #0
 8016de4:	4770      	bx	lr

08016de6 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8016de6:	2001      	movs	r0, #1
 8016de8:	4770      	bx	lr

08016dea <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8016dea:	2002      	movs	r0, #2
 8016dec:	4770      	bx	lr

08016dee <_ZN8touchgfx6ScreenD1Ev>:
 8016dee:	4770      	bx	lr

08016df0 <_ZN8touchgfx12GestureEventD1Ev>:
 8016df0:	4770      	bx	lr

08016df2 <_ZN8touchgfx9DragEventD1Ev>:
 8016df2:	4770      	bx	lr

08016df4 <_ZN8touchgfx10ClickEventD1Ev>:
 8016df4:	4770      	bx	lr

08016df6 <_ZN8touchgfx10ClickEventD0Ev>:
 8016df6:	b510      	push	{r4, lr}
 8016df8:	210c      	movs	r1, #12
 8016dfa:	4604      	mov	r4, r0
 8016dfc:	f00f fdfb 	bl	80269f6 <_ZdlPvj>
 8016e00:	4620      	mov	r0, r4
 8016e02:	bd10      	pop	{r4, pc}

08016e04 <_ZN8touchgfx9DragEventD0Ev>:
 8016e04:	b510      	push	{r4, lr}
 8016e06:	2110      	movs	r1, #16
 8016e08:	4604      	mov	r4, r0
 8016e0a:	f00f fdf4 	bl	80269f6 <_ZdlPvj>
 8016e0e:	4620      	mov	r0, r4
 8016e10:	bd10      	pop	{r4, pc}

08016e12 <_ZN8touchgfx12GestureEventD0Ev>:
 8016e12:	b510      	push	{r4, lr}
 8016e14:	210c      	movs	r1, #12
 8016e16:	4604      	mov	r4, r0
 8016e18:	f00f fded 	bl	80269f6 <_ZdlPvj>
 8016e1c:	4620      	mov	r0, r4
 8016e1e:	bd10      	pop	{r4, pc}

08016e20 <_ZN8touchgfx6ScreenD0Ev>:
 8016e20:	b510      	push	{r4, lr}
 8016e22:	213c      	movs	r1, #60	; 0x3c
 8016e24:	4604      	mov	r4, r0
 8016e26:	f00f fde6 	bl	80269f6 <_ZdlPvj>
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	bd10      	pop	{r4, pc}
	...

08016e30 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8016e30:	b530      	push	{r4, r5, lr}
 8016e32:	460d      	mov	r5, r1
 8016e34:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016e36:	b087      	sub	sp, #28
 8016e38:	4604      	mov	r4, r0
 8016e3a:	b301      	cbz	r1, 8016e7e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8016e3c:	a801      	add	r0, sp, #4
 8016e3e:	f7ff fe3d 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016e42:	892a      	ldrh	r2, [r5, #8]
 8016e44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016e48:	7928      	ldrb	r0, [r5, #4]
 8016e4a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016e4e:	f88d 0010 	strb.w	r0, [sp, #16]
 8016e52:	1ad2      	subs	r2, r2, r3
 8016e54:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016e56:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016e58:	f8ad 1012 	strh.w	r1, [sp, #18]
 8016e5c:	441a      	add	r2, r3
 8016e5e:	896b      	ldrh	r3, [r5, #10]
 8016e60:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8016e64:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016e68:	1b5b      	subs	r3, r3, r5
 8016e6a:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8016e6c:	442b      	add	r3, r5
 8016e6e:	4d05      	ldr	r5, [pc, #20]	; (8016e84 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016e70:	9503      	str	r5, [sp, #12]
 8016e72:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e76:	6803      	ldr	r3, [r0, #0]
 8016e78:	a903      	add	r1, sp, #12
 8016e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e7c:	4798      	blx	r3
 8016e7e:	b007      	add	sp, #28
 8016e80:	bd30      	pop	{r4, r5, pc}
 8016e82:	bf00      	nop
 8016e84:	08029924 	.word	0x08029924

08016e88 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8016e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016e8e:	b08a      	sub	sp, #40	; 0x28
 8016e90:	4604      	mov	r4, r0
 8016e92:	460d      	mov	r5, r1
 8016e94:	b113      	cbz	r3, 8016e9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8016e96:	790b      	ldrb	r3, [r1, #4]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d044      	beq.n	8016f26 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016e9c:	f104 0804 	add.w	r8, r4, #4
 8016ea0:	4641      	mov	r1, r8
 8016ea2:	a803      	add	r0, sp, #12
 8016ea4:	f7ff fe0a 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016ea8:	792b      	ldrb	r3, [r5, #4]
 8016eaa:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8016eae:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8016eb2:	b983      	cbnz	r3, 8016ed6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8016eb4:	892a      	ldrh	r2, [r5, #8]
 8016eb6:	88e9      	ldrh	r1, [r5, #6]
 8016eb8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8016ebc:	1b92      	subs	r2, r2, r6
 8016ebe:	1bc9      	subs	r1, r1, r7
 8016ec0:	9301      	str	r3, [sp, #4]
 8016ec2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8016ec6:	9300      	str	r3, [sp, #0]
 8016ec8:	b212      	sxth	r2, r2
 8016eca:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8016ece:	b209      	sxth	r1, r1
 8016ed0:	4640      	mov	r0, r8
 8016ed2:	f7f8 fea9 	bl	800fc28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8016ed6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016ed8:	b329      	cbz	r1, 8016f26 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016eda:	a805      	add	r0, sp, #20
 8016edc:	f7ff fdee 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016ee0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016ee4:	792b      	ldrb	r3, [r5, #4]
 8016ee6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016ee8:	f88d 3020 	strb.w	r3, [sp, #32]
 8016eec:	1abf      	subs	r7, r7, r2
 8016eee:	88ea      	ldrh	r2, [r5, #6]
 8016ef0:	4417      	add	r7, r2
 8016ef2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8016ef4:	4417      	add	r7, r2
 8016ef6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016efa:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8016efe:	1ab6      	subs	r6, r6, r2
 8016f00:	892a      	ldrh	r2, [r5, #8]
 8016f02:	4416      	add	r6, r2
 8016f04:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016f06:	4416      	add	r6, r2
 8016f08:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8016f0c:	4a07      	ldr	r2, [pc, #28]	; (8016f2c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8016f0e:	9207      	str	r2, [sp, #28]
 8016f10:	2600      	movs	r6, #0
 8016f12:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8016f16:	6803      	ldr	r3, [r0, #0]
 8016f18:	a907      	add	r1, sp, #28
 8016f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f1c:	4798      	blx	r3
 8016f1e:	792b      	ldrb	r3, [r5, #4]
 8016f20:	b10b      	cbz	r3, 8016f26 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016f22:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8016f26:	b00a      	add	sp, #40	; 0x28
 8016f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f2c:	080298fc 	.word	0x080298fc

08016f30 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f34:	460c      	mov	r4, r1
 8016f36:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016f38:	b088      	sub	sp, #32
 8016f3a:	4605      	mov	r5, r0
 8016f3c:	2900      	cmp	r1, #0
 8016f3e:	d06d      	beq.n	801701c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8016f40:	4668      	mov	r0, sp
 8016f42:	f7ff fdbb 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016f46:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8016f48:	88e3      	ldrh	r3, [r4, #6]
 8016f4a:	f9bd 8000 	ldrsh.w	r8, [sp]
 8016f4e:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8016f52:	440b      	add	r3, r1
 8016f54:	b21b      	sxth	r3, r3
 8016f56:	4543      	cmp	r3, r8
 8016f58:	db31      	blt.n	8016fbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016f5a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8016f5e:	44c4      	add	ip, r8
 8016f60:	fa0f fc8c 	sxth.w	ip, ip
 8016f64:	4563      	cmp	r3, ip
 8016f66:	da2a      	bge.n	8016fbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016f68:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8016f6a:	8926      	ldrh	r6, [r4, #8]
 8016f6c:	4416      	add	r6, r2
 8016f6e:	b236      	sxth	r6, r6
 8016f70:	42be      	cmp	r6, r7
 8016f72:	db24      	blt.n	8016fbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016f74:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016f78:	4438      	add	r0, r7
 8016f7a:	b200      	sxth	r0, r0
 8016f7c:	4286      	cmp	r6, r0
 8016f7e:	da1e      	bge.n	8016fbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016f80:	8963      	ldrh	r3, [r4, #10]
 8016f82:	4419      	add	r1, r3
 8016f84:	b209      	sxth	r1, r1
 8016f86:	4541      	cmp	r1, r8
 8016f88:	db08      	blt.n	8016f9c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016f8a:	4561      	cmp	r1, ip
 8016f8c:	da06      	bge.n	8016f9c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016f8e:	89a3      	ldrh	r3, [r4, #12]
 8016f90:	441a      	add	r2, r3
 8016f92:	b212      	sxth	r2, r2
 8016f94:	42ba      	cmp	r2, r7
 8016f96:	db01      	blt.n	8016f9c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016f98:	4282      	cmp	r2, r0
 8016f9a:	db10      	blt.n	8016fbe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016f9c:	4b21      	ldr	r3, [pc, #132]	; (8017024 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8016f9e:	9304      	str	r3, [sp, #16]
 8016fa0:	2302      	movs	r3, #2
 8016fa2:	f88d 3014 	strb.w	r3, [sp, #20]
 8016fa6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016fa8:	2300      	movs	r3, #0
 8016faa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016fae:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016fb2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016fb6:	6803      	ldr	r3, [r0, #0]
 8016fb8:	a904      	add	r1, sp, #16
 8016fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fbc:	4798      	blx	r3
 8016fbe:	1d29      	adds	r1, r5, #4
 8016fc0:	a802      	add	r0, sp, #8
 8016fc2:	f7ff fd7b 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016fc6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016fca:	88e0      	ldrh	r0, [r4, #6]
 8016fcc:	7921      	ldrb	r1, [r4, #4]
 8016fce:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8016fd2:	8922      	ldrh	r2, [r4, #8]
 8016fd4:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8016fd6:	f88d 1014 	strb.w	r1, [sp, #20]
 8016fda:	eba3 0808 	sub.w	r8, r3, r8
 8016fde:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016fe2:	1bdf      	subs	r7, r3, r7
 8016fe4:	b2bb      	uxth	r3, r7
 8016fe6:	fa1f f888 	uxth.w	r8, r8
 8016fea:	8967      	ldrh	r7, [r4, #10]
 8016fec:	89a4      	ldrh	r4, [r4, #12]
 8016fee:	4440      	add	r0, r8
 8016ff0:	4460      	add	r0, ip
 8016ff2:	441a      	add	r2, r3
 8016ff4:	44b8      	add	r8, r7
 8016ff6:	4423      	add	r3, r4
 8016ff8:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016ffc:	4433      	add	r3, r6
 8016ffe:	4432      	add	r2, r6
 8017000:	44e0      	add	r8, ip
 8017002:	4c09      	ldr	r4, [pc, #36]	; (8017028 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8017004:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017006:	9404      	str	r4, [sp, #16]
 8017008:	f8ad 2018 	strh.w	r2, [sp, #24]
 801700c:	f8ad 801a 	strh.w	r8, [sp, #26]
 8017010:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017014:	6803      	ldr	r3, [r0, #0]
 8017016:	a904      	add	r1, sp, #16
 8017018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801701a:	4798      	blx	r3
 801701c:	b008      	add	sp, #32
 801701e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017022:	bf00      	nop
 8017024:	080298fc 	.word	0x080298fc
 8017028:	08029910 	.word	0x08029910

0801702c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801702c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801702e:	4604      	mov	r4, r0
 8017030:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8017034:	3201      	adds	r2, #1
 8017036:	d112      	bne.n	801705e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8017038:	6803      	ldr	r3, [r0, #0]
 801703a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801703e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017042:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017046:	2500      	movs	r5, #0
 8017048:	9500      	str	r5, [sp, #0]
 801704a:	466d      	mov	r5, sp
 801704c:	4629      	mov	r1, r5
 801704e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017054:	4798      	blx	r3
 8017056:	e895 0003 	ldmia.w	r5, {r0, r1}
 801705a:	e884 0003 	stmia.w	r4, {r0, r1}
 801705e:	4620      	mov	r0, r4
 8017060:	b003      	add	sp, #12
 8017062:	bd30      	pop	{r4, r5, pc}

08017064 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8017064:	b513      	push	{r0, r1, r4, lr}
 8017066:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801706a:	3301      	adds	r3, #1
 801706c:	4604      	mov	r4, r0
 801706e:	d109      	bne.n	8017084 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8017070:	4601      	mov	r1, r0
 8017072:	4668      	mov	r0, sp
 8017074:	f7ff fd22 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017078:	f8bd 3000 	ldrh.w	r3, [sp]
 801707c:	8423      	strh	r3, [r4, #32]
 801707e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017082:	8463      	strh	r3, [r4, #34]	; 0x22
 8017084:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8017088:	b002      	add	sp, #8
 801708a:	bd10      	pop	{r4, pc}

0801708c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801708c:	b513      	push	{r0, r1, r4, lr}
 801708e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8017092:	3301      	adds	r3, #1
 8017094:	4604      	mov	r4, r0
 8017096:	d109      	bne.n	80170ac <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8017098:	4601      	mov	r1, r0
 801709a:	4668      	mov	r0, sp
 801709c:	f7ff fd0e 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80170a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80170a4:	8423      	strh	r3, [r4, #32]
 80170a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80170aa:	8463      	strh	r3, [r4, #34]	; 0x22
 80170ac:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80170b0:	b002      	add	sp, #8
 80170b2:	bd10      	pop	{r4, pc}

080170b4 <_ZN8touchgfx6ScreenC1Ev>:
 80170b4:	b570      	push	{r4, r5, r6, lr}
 80170b6:	4605      	mov	r5, r0
 80170b8:	4b16      	ldr	r3, [pc, #88]	; (8017114 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80170ba:	f845 3b04 	str.w	r3, [r5], #4
 80170be:	2300      	movs	r3, #0
 80170c0:	8103      	strh	r3, [r0, #8]
 80170c2:	8143      	strh	r3, [r0, #10]
 80170c4:	8183      	strh	r3, [r0, #12]
 80170c6:	81c3      	strh	r3, [r0, #14]
 80170c8:	8203      	strh	r3, [r0, #16]
 80170ca:	8243      	strh	r3, [r0, #18]
 80170cc:	8283      	strh	r3, [r0, #20]
 80170ce:	82c3      	strh	r3, [r0, #22]
 80170d0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80170d4:	6203      	str	r3, [r0, #32]
 80170d6:	8483      	strh	r3, [r0, #36]	; 0x24
 80170d8:	84c3      	strh	r3, [r0, #38]	; 0x26
 80170da:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80170de:	4a0e      	ldr	r2, [pc, #56]	; (8017118 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80170e0:	6343      	str	r3, [r0, #52]	; 0x34
 80170e2:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80170e6:	4b0d      	ldr	r3, [pc, #52]	; (801711c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80170e8:	6042      	str	r2, [r0, #4]
 80170ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80170ee:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80170f0:	4a0b      	ldr	r2, [pc, #44]	; (8017120 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80170f2:	4604      	mov	r4, r0
 80170f4:	2101      	movs	r1, #1
 80170f6:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80170fa:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80170fe:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017102:	4628      	mov	r0, r5
 8017104:	4798      	blx	r3
 8017106:	6863      	ldr	r3, [r4, #4]
 8017108:	4628      	mov	r0, r5
 801710a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801710c:	4631      	mov	r1, r6
 801710e:	4798      	blx	r3
 8017110:	4620      	mov	r0, r4
 8017112:	bd70      	pop	{r4, r5, r6, pc}
 8017114:	08029938 	.word	0x08029938
 8017118:	080291f0 	.word	0x080291f0
 801711c:	20014606 	.word	0x20014606
 8017120:	20014604 	.word	0x20014604

08017124 <_ZN8touchgfx6Screen4drawEv>:
 8017124:	b507      	push	{r0, r1, r2, lr}
 8017126:	4b09      	ldr	r3, [pc, #36]	; (801714c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8017128:	f9b3 2000 	ldrsh.w	r2, [r3]
 801712c:	4b08      	ldr	r3, [pc, #32]	; (8017150 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801712e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017136:	f8ad 3006 	strh.w	r3, [sp, #6]
 801713a:	6803      	ldr	r3, [r0, #0]
 801713c:	2100      	movs	r1, #0
 801713e:	9100      	str	r1, [sp, #0]
 8017140:	689b      	ldr	r3, [r3, #8]
 8017142:	4669      	mov	r1, sp
 8017144:	4798      	blx	r3
 8017146:	b003      	add	sp, #12
 8017148:	f85d fb04 	ldr.w	pc, [sp], #4
 801714c:	20014604 	.word	0x20014604
 8017150:	20014606 	.word	0x20014606

08017154 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8017154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017158:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801715c:	2b00      	cmp	r3, #0
 801715e:	b089      	sub	sp, #36	; 0x24
 8017160:	4680      	mov	r8, r0
 8017162:	460c      	mov	r4, r1
 8017164:	4615      	mov	r5, r2
 8017166:	dd0e      	ble.n	8017186 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017168:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801716c:	2b00      	cmp	r3, #0
 801716e:	dd0a      	ble.n	8017186 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017170:	4628      	mov	r0, r5
 8017172:	f7ff ff5b 	bl	801702c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017176:	4621      	mov	r1, r4
 8017178:	f7fe faaf 	bl	80156da <_ZNK8touchgfx4Rect9intersectERKS0_>
 801717c:	69eb      	ldr	r3, [r5, #28]
 801717e:	b928      	cbnz	r0, 801718c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8017180:	461d      	mov	r5, r3
 8017182:	2b00      	cmp	r3, #0
 8017184:	d1f4      	bne.n	8017170 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8017186:	b009      	add	sp, #36	; 0x24
 8017188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801718c:	ae04      	add	r6, sp, #16
 801718e:	2b00      	cmp	r3, #0
 8017190:	f000 80b5 	beq.w	80172fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017194:	682b      	ldr	r3, [r5, #0]
 8017196:	4629      	mov	r1, r5
 8017198:	68db      	ldr	r3, [r3, #12]
 801719a:	a802      	add	r0, sp, #8
 801719c:	4798      	blx	r3
 801719e:	4628      	mov	r0, r5
 80171a0:	f7ff ff60 	bl	8017064 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80171a4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80171a8:	4407      	add	r7, r0
 80171aa:	4628      	mov	r0, r5
 80171ac:	f7ff ff6e 	bl	801708c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80171b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80171b4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80171b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80171bc:	4418      	add	r0, r3
 80171be:	4621      	mov	r1, r4
 80171c0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80171c4:	f8ad 0012 	strh.w	r0, [sp, #18]
 80171c8:	b23f      	sxth	r7, r7
 80171ca:	4630      	mov	r0, r6
 80171cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80171d0:	f8ad 7010 	strh.w	r7, [sp, #16]
 80171d4:	f7f8 fe0c 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 80171d8:	4628      	mov	r0, r5
 80171da:	f7ff ff27 	bl	801702c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80171de:	4602      	mov	r2, r0
 80171e0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80171e4:	ab06      	add	r3, sp, #24
 80171e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80171ea:	4611      	mov	r1, r2
 80171ec:	4618      	mov	r0, r3
 80171ee:	f7f8 fdff 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 80171f2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80171f6:	f9b4 1000 	ldrsh.w	r1, [r4]
 80171fa:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80171fe:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017202:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8017206:	4299      	cmp	r1, r3
 8017208:	d10b      	bne.n	8017222 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801720a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801720e:	4552      	cmp	r2, sl
 8017210:	d107      	bne.n	8017222 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017212:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017216:	455a      	cmp	r2, fp
 8017218:	d103      	bne.n	8017222 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801721a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801721e:	454a      	cmp	r2, r9
 8017220:	d06d      	beq.n	80172fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017222:	f1bb 0f00 	cmp.w	fp, #0
 8017226:	dd65      	ble.n	80172f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017228:	f1b9 0f00 	cmp.w	r9, #0
 801722c:	dd62      	ble.n	80172f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801722e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017232:	fa1f f08a 	uxth.w	r0, sl
 8017236:	4552      	cmp	r2, sl
 8017238:	9000      	str	r0, [sp, #0]
 801723a:	da12      	bge.n	8017262 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801723c:	9301      	str	r3, [sp, #4]
 801723e:	9b00      	ldr	r3, [sp, #0]
 8017240:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017244:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017248:	1a9a      	subs	r2, r3, r2
 801724a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801724e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017252:	f8ad 2016 	strh.w	r2, [sp, #22]
 8017256:	69ea      	ldr	r2, [r5, #28]
 8017258:	4631      	mov	r1, r6
 801725a:	4640      	mov	r0, r8
 801725c:	f7ff ff7a 	bl	8017154 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017260:	9b01      	ldr	r3, [sp, #4]
 8017262:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017266:	429a      	cmp	r2, r3
 8017268:	b29f      	uxth	r7, r3
 801726a:	da0d      	bge.n	8017288 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801726c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017270:	1aba      	subs	r2, r7, r2
 8017272:	f8ad a012 	strh.w	sl, [sp, #18]
 8017276:	f8ad 2014 	strh.w	r2, [sp, #20]
 801727a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801727e:	69ea      	ldr	r2, [r5, #28]
 8017280:	4631      	mov	r1, r6
 8017282:	4640      	mov	r0, r8
 8017284:	f7ff ff66 	bl	8017154 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017288:	8822      	ldrh	r2, [r4, #0]
 801728a:	88a3      	ldrh	r3, [r4, #4]
 801728c:	445f      	add	r7, fp
 801728e:	4413      	add	r3, r2
 8017290:	b29b      	uxth	r3, r3
 8017292:	b2bf      	uxth	r7, r7
 8017294:	b23a      	sxth	r2, r7
 8017296:	b219      	sxth	r1, r3
 8017298:	4291      	cmp	r1, r2
 801729a:	dd0d      	ble.n	80172b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801729c:	1bdb      	subs	r3, r3, r7
 801729e:	f8ad 2010 	strh.w	r2, [sp, #16]
 80172a2:	f8ad a012 	strh.w	sl, [sp, #18]
 80172a6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80172aa:	f8ad 9016 	strh.w	r9, [sp, #22]
 80172ae:	69ea      	ldr	r2, [r5, #28]
 80172b0:	4631      	mov	r1, r6
 80172b2:	4640      	mov	r0, r8
 80172b4:	f7ff ff4e 	bl	8017154 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80172b8:	88e2      	ldrh	r2, [r4, #6]
 80172ba:	8863      	ldrh	r3, [r4, #2]
 80172bc:	4413      	add	r3, r2
 80172be:	9a00      	ldr	r2, [sp, #0]
 80172c0:	444a      	add	r2, r9
 80172c2:	b29b      	uxth	r3, r3
 80172c4:	fa1f f982 	uxth.w	r9, r2
 80172c8:	fa0f f289 	sxth.w	r2, r9
 80172cc:	b219      	sxth	r1, r3
 80172ce:	428a      	cmp	r2, r1
 80172d0:	da15      	bge.n	80172fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80172d2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80172d6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80172da:	f8ad 1014 	strh.w	r1, [sp, #20]
 80172de:	eba3 0309 	sub.w	r3, r3, r9
 80172e2:	f8ad 0010 	strh.w	r0, [sp, #16]
 80172e6:	f8ad 2012 	strh.w	r2, [sp, #18]
 80172ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80172ee:	69ea      	ldr	r2, [r5, #28]
 80172f0:	4631      	mov	r1, r6
 80172f2:	e001      	b.n	80172f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80172f4:	69ea      	ldr	r2, [r5, #28]
 80172f6:	4621      	mov	r1, r4
 80172f8:	4640      	mov	r0, r8
 80172fa:	f7ff ff2b 	bl	8017154 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80172fe:	4628      	mov	r0, r5
 8017300:	f7ff fe94 	bl	801702c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017304:	6861      	ldr	r1, [r4, #4]
 8017306:	4602      	mov	r2, r0
 8017308:	6820      	ldr	r0, [r4, #0]
 801730a:	4633      	mov	r3, r6
 801730c:	c303      	stmia	r3!, {r0, r1}
 801730e:	4611      	mov	r1, r2
 8017310:	4630      	mov	r0, r6
 8017312:	f7f8 fd6d 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 8017316:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801731a:	2b00      	cmp	r3, #0
 801731c:	f77f af33 	ble.w	8017186 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017320:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017324:	2b00      	cmp	r3, #0
 8017326:	f77f af2e 	ble.w	8017186 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801732a:	4628      	mov	r0, r5
 801732c:	f7ff fe9a 	bl	8017064 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017330:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017334:	1a18      	subs	r0, r3, r0
 8017336:	f8ad 0010 	strh.w	r0, [sp, #16]
 801733a:	4628      	mov	r0, r5
 801733c:	f7ff fea6 	bl	801708c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017340:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017344:	1a18      	subs	r0, r3, r0
 8017346:	f8ad 0012 	strh.w	r0, [sp, #18]
 801734a:	682b      	ldr	r3, [r5, #0]
 801734c:	4631      	mov	r1, r6
 801734e:	689b      	ldr	r3, [r3, #8]
 8017350:	4628      	mov	r0, r5
 8017352:	4798      	blx	r3
 8017354:	e717      	b.n	8017186 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08017356 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8017356:	b570      	push	{r4, r5, r6, lr}
 8017358:	460c      	mov	r4, r1
 801735a:	b086      	sub	sp, #24
 801735c:	1d06      	adds	r6, r0, #4
 801735e:	2300      	movs	r3, #0
 8017360:	4631      	mov	r1, r6
 8017362:	4605      	mov	r5, r0
 8017364:	a802      	add	r0, sp, #8
 8017366:	9301      	str	r3, [sp, #4]
 8017368:	f7ff fba8 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801736c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017370:	8822      	ldrh	r2, [r4, #0]
 8017372:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8017376:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801737a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801737e:	1ad2      	subs	r2, r2, r3
 8017380:	8863      	ldrh	r3, [r4, #2]
 8017382:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017386:	1a5b      	subs	r3, r3, r1
 8017388:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801738c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017390:	aa01      	add	r2, sp, #4
 8017392:	a904      	add	r1, sp, #16
 8017394:	4630      	mov	r0, r6
 8017396:	f8ad 3012 	strh.w	r3, [sp, #18]
 801739a:	f7f8 fe01 	bl	800ffa0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801739e:	9a01      	ldr	r2, [sp, #4]
 80173a0:	b11a      	cbz	r2, 80173aa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80173a2:	4621      	mov	r1, r4
 80173a4:	4628      	mov	r0, r5
 80173a6:	f7ff fed5 	bl	8017154 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80173aa:	b006      	add	sp, #24
 80173ac:	bd70      	pop	{r4, r5, r6, pc}

080173ae <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80173ae:	b530      	push	{r4, r5, lr}
 80173b0:	4602      	mov	r2, r0
 80173b2:	4604      	mov	r4, r0
 80173b4:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80173b8:	b085      	sub	sp, #20
 80173ba:	460d      	mov	r5, r1
 80173bc:	6851      	ldr	r1, [r2, #4]
 80173be:	466b      	mov	r3, sp
 80173c0:	c303      	stmia	r3!, {r0, r1}
 80173c2:	4629      	mov	r1, r5
 80173c4:	4668      	mov	r0, sp
 80173c6:	f7f8 fd13 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 80173ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80173ce:	b12b      	cbz	r3, 80173dc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80173d0:	4669      	mov	r1, sp
 80173d2:	4620      	mov	r0, r4
 80173d4:	f7ff ffbf 	bl	8017356 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80173d8:	b005      	add	sp, #20
 80173da:	bd30      	pop	{r4, r5, pc}
 80173dc:	3404      	adds	r4, #4
 80173de:	4621      	mov	r1, r4
 80173e0:	a802      	add	r0, sp, #8
 80173e2:	f7ff fb6b 	bl	8016abc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80173e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80173ea:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80173ee:	1a9b      	subs	r3, r3, r2
 80173f0:	f8ad 3000 	strh.w	r3, [sp]
 80173f4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80173f8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80173fc:	4669      	mov	r1, sp
 80173fe:	1a9b      	subs	r3, r3, r2
 8017400:	4620      	mov	r0, r4
 8017402:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017406:	f7f8 fd92 	bl	800ff2e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801740a:	e7e5      	b.n	80173d8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801740c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801740c:	680a      	ldr	r2, [r1, #0]
 801740e:	460b      	mov	r3, r1
 8017410:	6992      	ldr	r2, [r2, #24]
 8017412:	1d01      	adds	r1, r0, #4
 8017414:	4618      	mov	r0, r3
 8017416:	4710      	bx	r2

08017418 <_ZN8touchgfx12TextProviderC1Ev>:
 8017418:	b538      	push	{r3, r4, r5, lr}
 801741a:	2500      	movs	r5, #0
 801741c:	2302      	movs	r3, #2
 801741e:	4604      	mov	r4, r0
 8017420:	e9c0 5500 	strd	r5, r5, [r0]
 8017424:	7403      	strb	r3, [r0, #16]
 8017426:	6145      	str	r5, [r0, #20]
 8017428:	7605      	strb	r5, [r0, #24]
 801742a:	83c5      	strh	r5, [r0, #30]
 801742c:	8405      	strh	r5, [r0, #32]
 801742e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017430:	8705      	strh	r5, [r0, #56]	; 0x38
 8017432:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8017434:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8017438:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801743c:	220e      	movs	r2, #14
 801743e:	4629      	mov	r1, r5
 8017440:	304c      	adds	r0, #76	; 0x4c
 8017442:	f00f fcfa 	bl	8026e3a <memset>
 8017446:	2301      	movs	r3, #1
 8017448:	4620      	mov	r0, r4
 801744a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801744e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017452:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8017456:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801745a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801745e:	f7ef f95f 	bl	8006720 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017462:	4620      	mov	r0, r4
 8017464:	bd38      	pop	{r3, r4, r5, pc}

08017466 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8017466:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017468:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801746c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801746e:	fab0 f080 	clz	r0, r0
 8017472:	0940      	lsrs	r0, r0, #5
 8017474:	4770      	bx	lr

08017476 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8017476:	b530      	push	{r4, r5, lr}
 8017478:	2500      	movs	r5, #0
 801747a:	2401      	movs	r4, #1
 801747c:	6843      	ldr	r3, [r0, #4]
 801747e:	b913      	cbnz	r3, 8017486 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8017480:	6803      	ldr	r3, [r0, #0]
 8017482:	b313      	cbz	r3, 80174ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017484:	6043      	str	r3, [r0, #4]
 8017486:	7e03      	ldrb	r3, [r0, #24]
 8017488:	b143      	cbz	r3, 801749c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801748a:	6943      	ldr	r3, [r0, #20]
 801748c:	b12b      	cbz	r3, 801749a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801748e:	881a      	ldrh	r2, [r3, #0]
 8017490:	b11a      	cbz	r2, 801749a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017492:	1c9a      	adds	r2, r3, #2
 8017494:	6142      	str	r2, [r0, #20]
 8017496:	8818      	ldrh	r0, [r3, #0]
 8017498:	bd30      	pop	{r4, r5, pc}
 801749a:	7605      	strb	r5, [r0, #24]
 801749c:	6843      	ldr	r3, [r0, #4]
 801749e:	8819      	ldrh	r1, [r3, #0]
 80174a0:	b199      	cbz	r1, 80174ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80174a2:	1c9a      	adds	r2, r3, #2
 80174a4:	2902      	cmp	r1, #2
 80174a6:	6042      	str	r2, [r0, #4]
 80174a8:	d1f5      	bne.n	8017496 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80174aa:	7c03      	ldrb	r3, [r0, #16]
 80174ac:	2b01      	cmp	r3, #1
 80174ae:	d8e5      	bhi.n	801747c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80174b0:	1c5a      	adds	r2, r3, #1
 80174b2:	3302      	adds	r3, #2
 80174b4:	7402      	strb	r2, [r0, #16]
 80174b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80174ba:	6143      	str	r3, [r0, #20]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d0dd      	beq.n	801747c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80174c0:	881b      	ldrh	r3, [r3, #0]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d0da      	beq.n	801747c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80174c6:	7604      	strb	r4, [r0, #24]
 80174c8:	e7d8      	b.n	801747c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80174ca:	2000      	movs	r0, #0
 80174cc:	e7e4      	b.n	8017498 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080174ce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80174ce:	b430      	push	{r4, r5}
 80174d0:	6001      	str	r1, [r0, #0]
 80174d2:	2100      	movs	r1, #0
 80174d4:	6041      	str	r1, [r0, #4]
 80174d6:	6815      	ldr	r5, [r2, #0]
 80174d8:	6085      	str	r5, [r0, #8]
 80174da:	6852      	ldr	r2, [r2, #4]
 80174dc:	6443      	str	r3, [r0, #68]	; 0x44
 80174de:	9b02      	ldr	r3, [sp, #8]
 80174e0:	60c2      	str	r2, [r0, #12]
 80174e2:	7401      	strb	r1, [r0, #16]
 80174e4:	6141      	str	r1, [r0, #20]
 80174e6:	7601      	strb	r1, [r0, #24]
 80174e8:	8701      	strh	r1, [r0, #56]	; 0x38
 80174ea:	8401      	strh	r1, [r0, #32]
 80174ec:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80174f0:	6483      	str	r3, [r0, #72]	; 0x48
 80174f2:	bc30      	pop	{r4, r5}
 80174f4:	f7ef b914 	b.w	8006720 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080174f8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 80174f8:	b408      	push	{r3}
 80174fa:	b510      	push	{r4, lr}
 80174fc:	b085      	sub	sp, #20
 80174fe:	ac07      	add	r4, sp, #28
 8017500:	f854 3b04 	ldr.w	r3, [r4], #4
 8017504:	9300      	str	r3, [sp, #0]
 8017506:	4613      	mov	r3, r2
 8017508:	4622      	mov	r2, r4
 801750a:	9403      	str	r4, [sp, #12]
 801750c:	f7ff ffdf 	bl	80174ce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017510:	b005      	add	sp, #20
 8017512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017516:	b001      	add	sp, #4
 8017518:	4770      	bx	lr

0801751a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801751a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801751c:	4605      	mov	r5, r0
 801751e:	4608      	mov	r0, r1
 8017520:	b1e9      	cbz	r1, 801755e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8017522:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8017526:	460b      	mov	r3, r1
 8017528:	f101 0708 	add.w	r7, r1, #8
 801752c:	4622      	mov	r2, r4
 801752e:	6818      	ldr	r0, [r3, #0]
 8017530:	6859      	ldr	r1, [r3, #4]
 8017532:	4626      	mov	r6, r4
 8017534:	c603      	stmia	r6!, {r0, r1}
 8017536:	3308      	adds	r3, #8
 8017538:	42bb      	cmp	r3, r7
 801753a:	4634      	mov	r4, r6
 801753c:	d1f7      	bne.n	801752e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801753e:	6818      	ldr	r0, [r3, #0]
 8017540:	6030      	str	r0, [r6, #0]
 8017542:	889b      	ldrh	r3, [r3, #4]
 8017544:	80b3      	strh	r3, [r6, #4]
 8017546:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801754a:	015b      	lsls	r3, r3, #5
 801754c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017550:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8017554:	430b      	orrs	r3, r1
 8017556:	425b      	negs	r3, r3
 8017558:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801755c:	4610      	mov	r0, r2
 801755e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017560 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8017560:	b538      	push	{r3, r4, r5, lr}
 8017562:	460c      	mov	r4, r1
 8017564:	6811      	ldr	r1, [r2, #0]
 8017566:	4610      	mov	r0, r2
 8017568:	68cd      	ldr	r5, [r1, #12]
 801756a:	4619      	mov	r1, r3
 801756c:	47a8      	blx	r5
 801756e:	2800      	cmp	r0, #0
 8017570:	bf08      	it	eq
 8017572:	4620      	moveq	r0, r4
 8017574:	bd38      	pop	{r3, r4, r5, pc}
	...

08017578 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8017578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801757a:	4604      	mov	r4, r0
 801757c:	4615      	mov	r5, r2
 801757e:	4608      	mov	r0, r1
 8017580:	b93a      	cbnz	r2, 8017592 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8017582:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8017586:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801758a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801758e:	4628      	mov	r0, r5
 8017590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017592:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8017596:	8893      	ldrh	r3, [r2, #4]
 8017598:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801759c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80175a0:	79ee      	ldrb	r6, [r5, #7]
 80175a2:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80175a6:	4316      	orrs	r6, r2
 80175a8:	19da      	adds	r2, r3, r7
 80175aa:	b291      	uxth	r1, r2
 80175ac:	291d      	cmp	r1, #29
 80175ae:	b2b7      	uxth	r7, r6
 80175b0:	d87a      	bhi.n	80176a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 80175b2:	2201      	movs	r2, #1
 80175b4:	408a      	lsls	r2, r1
 80175b6:	4975      	ldr	r1, [pc, #468]	; (801778c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80175b8:	420a      	tst	r2, r1
 80175ba:	ea4f 06e6 	mov.w	r6, r6, asr #3
 80175be:	d12d      	bne.n	801761c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80175c0:	f412 7f60 	tst.w	r2, #896	; 0x380
 80175c4:	d070      	beq.n	80176a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 80175c6:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80175ca:	462b      	mov	r3, r5
 80175cc:	f105 0e08 	add.w	lr, r5, #8
 80175d0:	4615      	mov	r5, r2
 80175d2:	6818      	ldr	r0, [r3, #0]
 80175d4:	6859      	ldr	r1, [r3, #4]
 80175d6:	4694      	mov	ip, r2
 80175d8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80175dc:	3308      	adds	r3, #8
 80175de:	4573      	cmp	r3, lr
 80175e0:	4662      	mov	r2, ip
 80175e2:	d1f6      	bne.n	80175d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 80175e4:	6818      	ldr	r0, [r3, #0]
 80175e6:	f8cc 0000 	str.w	r0, [ip]
 80175ea:	889b      	ldrh	r3, [r3, #4]
 80175ec:	f8ac 3004 	strh.w	r3, [ip, #4]
 80175f0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80175f4:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80175f8:	b2b3      	uxth	r3, r6
 80175fa:	1aca      	subs	r2, r1, r3
 80175fc:	b292      	uxth	r2, r2
 80175fe:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8017602:	10d2      	asrs	r2, r2, #3
 8017604:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8017608:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801760c:	4302      	orrs	r2, r0
 801760e:	1bcf      	subs	r7, r1, r7
 8017610:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8017614:	1afb      	subs	r3, r7, r3
 8017616:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801761a:	e7b8      	b.n	801758e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801761c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801761e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017622:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8017624:	f640 6333 	movw	r3, #3635	; 0xe33
 8017628:	4299      	cmp	r1, r3
 801762a:	d110      	bne.n	801764e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801762c:	6803      	ldr	r3, [r0, #0]
 801762e:	68db      	ldr	r3, [r3, #12]
 8017630:	4798      	blx	r3
 8017632:	7b41      	ldrb	r1, [r0, #13]
 8017634:	00cb      	lsls	r3, r1, #3
 8017636:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801763a:	7a03      	ldrb	r3, [r0, #8]
 801763c:	0648      	lsls	r0, r1, #25
 801763e:	ea43 0302 	orr.w	r3, r3, r2
 8017642:	bf44      	itt	mi
 8017644:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017648:	b21b      	sxthmi	r3, r3
 801764a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801764e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8017652:	443b      	add	r3, r7
 8017654:	4433      	add	r3, r6
 8017656:	b29b      	uxth	r3, r3
 8017658:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801765c:	462a      	mov	r2, r5
 801765e:	f105 0c08 	add.w	ip, r5, #8
 8017662:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017666:	4635      	mov	r5, r6
 8017668:	6810      	ldr	r0, [r2, #0]
 801766a:	6851      	ldr	r1, [r2, #4]
 801766c:	4637      	mov	r7, r6
 801766e:	c703      	stmia	r7!, {r0, r1}
 8017670:	3208      	adds	r2, #8
 8017672:	4562      	cmp	r2, ip
 8017674:	463e      	mov	r6, r7
 8017676:	d1f7      	bne.n	8017668 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8017678:	6810      	ldr	r0, [r2, #0]
 801767a:	6038      	str	r0, [r7, #0]
 801767c:	8892      	ldrh	r2, [r2, #4]
 801767e:	80ba      	strh	r2, [r7, #4]
 8017680:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017684:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017688:	10db      	asrs	r3, r3, #3
 801768a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801768e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017692:	4313      	orrs	r3, r2
 8017694:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017698:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801769c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80176a0:	1a9b      	subs	r3, r3, r2
 80176a2:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80176a6:	e772      	b.n	801758e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80176a8:	f023 0204 	bic.w	r2, r3, #4
 80176ac:	f640 611b 	movw	r1, #3611	; 0xe1b
 80176b0:	428a      	cmp	r2, r1
 80176b2:	d003      	beq.n	80176bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80176b4:	f640 621d 	movw	r2, #3613	; 0xe1d
 80176b8:	4293      	cmp	r3, r2
 80176ba:	d120      	bne.n	80176fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 80176bc:	3b01      	subs	r3, #1
 80176be:	4602      	mov	r2, r0
 80176c0:	b29b      	uxth	r3, r3
 80176c2:	4629      	mov	r1, r5
 80176c4:	4620      	mov	r0, r4
 80176c6:	f7ff ff4b 	bl	8017560 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80176ca:	7b41      	ldrb	r1, [r0, #13]
 80176cc:	00cb      	lsls	r3, r1, #3
 80176ce:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80176d2:	7a03      	ldrb	r3, [r0, #8]
 80176d4:	0649      	lsls	r1, r1, #25
 80176d6:	ea43 0302 	orr.w	r3, r3, r2
 80176da:	bf44      	itt	mi
 80176dc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80176e0:	b21b      	sxthmi	r3, r3
 80176e2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80176e6:	7b6b      	ldrb	r3, [r5, #13]
 80176e8:	7aaa      	ldrb	r2, [r5, #10]
 80176ea:	005b      	lsls	r3, r3, #1
 80176ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80176f0:	4313      	orrs	r3, r2
 80176f2:	115a      	asrs	r2, r3, #5
 80176f4:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80176f8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80176fc:	e036      	b.n	801776c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 80176fe:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017702:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8017706:	7a2a      	ldrb	r2, [r5, #8]
 8017708:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801770c:	ea42 0201 	orr.w	r2, r2, r1
 8017710:	bf1c      	itt	ne
 8017712:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8017716:	b212      	sxthne	r2, r2
 8017718:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801771c:	f640 6109 	movw	r1, #3593	; 0xe09
 8017720:	f023 0210 	bic.w	r2, r3, #16
 8017724:	428a      	cmp	r2, r1
 8017726:	d003      	beq.n	8017730 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 8017728:	f640 6213 	movw	r2, #3603	; 0xe13
 801772c:	4293      	cmp	r3, r2
 801772e:	d12a      	bne.n	8017786 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8017730:	7b6e      	ldrb	r6, [r5, #13]
 8017732:	0076      	lsls	r6, r6, #1
 8017734:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017738:	7aae      	ldrb	r6, [r5, #10]
 801773a:	4316      	orrs	r6, r2
 801773c:	f640 6213 	movw	r2, #3603	; 0xe13
 8017740:	4293      	cmp	r3, r2
 8017742:	bf18      	it	ne
 8017744:	f103 33ff 	addne.w	r3, r3, #4294967295
 8017748:	4602      	mov	r2, r0
 801774a:	bf14      	ite	ne
 801774c:	b29b      	uxthne	r3, r3
 801774e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8017752:	4629      	mov	r1, r5
 8017754:	4620      	mov	r0, r4
 8017756:	f7ff ff03 	bl	8017560 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801775a:	7b43      	ldrb	r3, [r0, #13]
 801775c:	7a82      	ldrb	r2, [r0, #10]
 801775e:	005b      	lsls	r3, r3, #1
 8017760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017764:	4313      	orrs	r3, r2
 8017766:	1af6      	subs	r6, r6, r3
 8017768:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801776c:	7b69      	ldrb	r1, [r5, #13]
 801776e:	00cb      	lsls	r3, r1, #3
 8017770:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017774:	7a2b      	ldrb	r3, [r5, #8]
 8017776:	4313      	orrs	r3, r2
 8017778:	064a      	lsls	r2, r1, #25
 801777a:	bf44      	itt	mi
 801777c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017780:	b21b      	sxthmi	r3, r3
 8017782:	1bdb      	subs	r3, r3, r7
 8017784:	e747      	b.n	8017616 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8017786:	2300      	movs	r3, #0
 8017788:	e7b6      	b.n	80176f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 801778a:	bf00      	nop
 801778c:	3fc00079 	.word	0x3fc00079

08017790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8017790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017794:	4604      	mov	r4, r0
 8017796:	b942      	cbnz	r2, 80177aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8017798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801779c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80177a0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80177a4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80177a8:	e047      	b.n	801783a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80177aa:	7b51      	ldrb	r1, [r2, #13]
 80177ac:	8893      	ldrh	r3, [r2, #4]
 80177ae:	010d      	lsls	r5, r1, #4
 80177b0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80177b4:	79d5      	ldrb	r5, [r2, #7]
 80177b6:	4305      	orrs	r5, r0
 80177b8:	2d04      	cmp	r5, #4
 80177ba:	bfcc      	ite	gt
 80177bc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80177c0:	f04f 0e01 	movle.w	lr, #1
 80177c4:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80177c8:	f200 80ab 	bhi.w	8017922 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80177cc:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80177d0:	4283      	cmp	r3, r0
 80177d2:	d216      	bcs.n	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80177d4:	f240 605b 	movw	r0, #1627	; 0x65b
 80177d8:	4283      	cmp	r3, r0
 80177da:	d859      	bhi.n	8017890 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80177dc:	f240 6057 	movw	r0, #1623	; 0x657
 80177e0:	4283      	cmp	r3, r0
 80177e2:	d20e      	bcs.n	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80177e4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80177e8:	d24a      	bcs.n	8017880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80177ea:	f240 604e 	movw	r0, #1614	; 0x64e
 80177ee:	4283      	cmp	r3, r0
 80177f0:	d207      	bcs.n	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80177f2:	f240 601a 	movw	r0, #1562	; 0x61a
 80177f6:	4283      	cmp	r3, r0
 80177f8:	d02a      	beq.n	8017850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80177fa:	d821      	bhi.n	8017840 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80177fc:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8017800:	d35b      	bcc.n	80178ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017802:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8017806:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801780a:	f040 80d0 	bne.w	80179ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801780e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8017812:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017816:	f040 80ca 	bne.w	80179ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801781a:	00cb      	lsls	r3, r1, #3
 801781c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017820:	7a13      	ldrb	r3, [r2, #8]
 8017822:	0649      	lsls	r1, r1, #25
 8017824:	ea43 0300 	orr.w	r3, r3, r0
 8017828:	bf44      	itt	mi
 801782a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801782e:	b21b      	sxthmi	r3, r3
 8017830:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017834:	1b5d      	subs	r5, r3, r5
 8017836:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801783a:	4610      	mov	r0, r2
 801783c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017840:	f240 604b 	movw	r0, #1611	; 0x64b
 8017844:	4283      	cmp	r3, r0
 8017846:	d338      	bcc.n	80178ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017848:	f240 604c 	movw	r0, #1612	; 0x64c
 801784c:	4283      	cmp	r3, r0
 801784e:	d9d8      	bls.n	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017850:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8017854:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8017858:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801785c:	f040 80f2 	bne.w	8017a44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8017860:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017864:	f040 80ee 	bne.w	8017a44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8017868:	00cb      	lsls	r3, r1, #3
 801786a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801786e:	7a13      	ldrb	r3, [r2, #8]
 8017870:	064e      	lsls	r6, r1, #25
 8017872:	ea43 0300 	orr.w	r3, r3, r0
 8017876:	bf44      	itt	mi
 8017878:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801787c:	b21b      	sxthmi	r3, r3
 801787e:	e7d9      	b.n	8017834 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8017880:	f240 6054 	movw	r0, #1620	; 0x654
 8017884:	4283      	cmp	r3, r0
 8017886:	d8e3      	bhi.n	8017850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017888:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801788c:	d9e0      	bls.n	8017850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801788e:	e7b8      	b.n	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017890:	f240 6074 	movw	r0, #1652	; 0x674
 8017894:	4283      	cmp	r3, r0
 8017896:	d0b4      	beq.n	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017898:	d82d      	bhi.n	80178f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801789a:	f240 605e 	movw	r0, #1630	; 0x65e
 801789e:	4283      	cmp	r3, r0
 80178a0:	d804      	bhi.n	80178ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80178a2:	f240 605d 	movw	r0, #1629	; 0x65d
 80178a6:	4283      	cmp	r3, r0
 80178a8:	d3d2      	bcc.n	8017850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178aa:	e7aa      	b.n	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178ac:	f240 605f 	movw	r0, #1631	; 0x65f
 80178b0:	4283      	cmp	r3, r0
 80178b2:	d0cd      	beq.n	8017850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178b4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80178b8:	d0a3      	beq.n	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178ba:	00cb      	lsls	r3, r1, #3
 80178bc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80178c0:	7a13      	ldrb	r3, [r2, #8]
 80178c2:	0649      	lsls	r1, r1, #25
 80178c4:	ea43 0300 	orr.w	r3, r3, r0
 80178c8:	bf44      	itt	mi
 80178ca:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80178ce:	b21b      	sxthmi	r3, r3
 80178d0:	1b5d      	subs	r5, r3, r5
 80178d2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80178d6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80178da:	7b53      	ldrb	r3, [r2, #13]
 80178dc:	015b      	lsls	r3, r3, #5
 80178de:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80178e2:	7993      	ldrb	r3, [r2, #6]
 80178e4:	430b      	orrs	r3, r1
 80178e6:	005b      	lsls	r3, r3, #1
 80178e8:	2105      	movs	r1, #5
 80178ea:	fb93 f3f1 	sdiv	r3, r3, r1
 80178ee:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80178f2:	440b      	add	r3, r1
 80178f4:	e756      	b.n	80177a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80178f6:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80178fa:	4283      	cmp	r3, r0
 80178fc:	d809      	bhi.n	8017912 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80178fe:	f240 60df 	movw	r0, #1759	; 0x6df
 8017902:	4283      	cmp	r3, r0
 8017904:	f4bf af7d 	bcs.w	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017908:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801790c:	2b05      	cmp	r3, #5
 801790e:	d8d4      	bhi.n	80178ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017910:	e777      	b.n	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017912:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8017916:	4283      	cmp	r3, r0
 8017918:	d09a      	beq.n	8017850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801791a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801791e:	4283      	cmp	r3, r0
 8017920:	e7ca      	b.n	80178b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017922:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8017926:	d22b      	bcs.n	8017980 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8017928:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801792c:	4283      	cmp	r3, r0
 801792e:	d28f      	bcs.n	8017850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017930:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017934:	4283      	cmp	r3, r0
 8017936:	d816      	bhi.n	8017966 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8017938:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801793c:	4283      	cmp	r3, r0
 801793e:	f4bf af60 	bcs.w	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017942:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8017946:	4283      	cmp	r3, r0
 8017948:	d80a      	bhi.n	8017960 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801794a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801794e:	4283      	cmp	r3, r0
 8017950:	f4bf af57 	bcs.w	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017954:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8017958:	4283      	cmp	r3, r0
 801795a:	f43f af79 	beq.w	8017850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801795e:	e7ac      	b.n	80178ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017960:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8017964:	e7f8      	b.n	8017958 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8017966:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801796a:	4283      	cmp	r3, r0
 801796c:	d802      	bhi.n	8017974 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801796e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8017972:	e798      	b.n	80178a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8017974:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8017978:	4283      	cmp	r3, r0
 801797a:	f47f af42 	bne.w	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801797e:	e767      	b.n	8017850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017980:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8017984:	4283      	cmp	r3, r0
 8017986:	f43f af63 	beq.w	8017850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801798a:	d802      	bhi.n	8017992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801798c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8017990:	e7f2      	b.n	8017978 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8017992:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8017996:	4283      	cmp	r3, r0
 8017998:	d805      	bhi.n	80179a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801799a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801799e:	4283      	cmp	r3, r0
 80179a0:	f4ff af2f 	bcc.w	8017802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80179a4:	e754      	b.n	8017850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80179a6:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80179aa:	4283      	cmp	r3, r0
 80179ac:	e7af      	b.n	801790e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80179ae:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80179b2:	4617      	mov	r7, r2
 80179b4:	f102 0808 	add.w	r8, r2, #8
 80179b8:	4666      	mov	r6, ip
 80179ba:	6838      	ldr	r0, [r7, #0]
 80179bc:	6879      	ldr	r1, [r7, #4]
 80179be:	46e6      	mov	lr, ip
 80179c0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80179c4:	3708      	adds	r7, #8
 80179c6:	4547      	cmp	r7, r8
 80179c8:	46f4      	mov	ip, lr
 80179ca:	d1f6      	bne.n	80179ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80179cc:	6838      	ldr	r0, [r7, #0]
 80179ce:	f8ce 0000 	str.w	r0, [lr]
 80179d2:	88b9      	ldrh	r1, [r7, #4]
 80179d4:	f8ae 1004 	strh.w	r1, [lr, #4]
 80179d8:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80179dc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80179e0:	d009      	beq.n	80179f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80179e2:	7b51      	ldrb	r1, [r2, #13]
 80179e4:	7992      	ldrb	r2, [r2, #6]
 80179e6:	0149      	lsls	r1, r1, #5
 80179e8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80179ec:	4311      	orrs	r1, r2
 80179ee:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80179f2:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80179f6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80179fa:	b2ad      	uxth	r5, r5
 80179fc:	d00d      	beq.n	8017a1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 80179fe:	442b      	add	r3, r5
 8017a00:	b29b      	uxth	r3, r3
 8017a02:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017a06:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017a0a:	10db      	asrs	r3, r3, #3
 8017a0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017a10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017a14:	4313      	orrs	r3, r2
 8017a16:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017a1a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017a1e:	00cb      	lsls	r3, r1, #3
 8017a20:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017a24:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017a28:	064f      	lsls	r7, r1, #25
 8017a2a:	ea43 0302 	orr.w	r3, r3, r2
 8017a2e:	bf44      	itt	mi
 8017a30:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017a34:	b21b      	sxthmi	r3, r3
 8017a36:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017a3a:	1b5b      	subs	r3, r3, r5
 8017a3c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8017a40:	4632      	mov	r2, r6
 8017a42:	e6fa      	b.n	801783a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8017a44:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8017a48:	4617      	mov	r7, r2
 8017a4a:	f102 0908 	add.w	r9, r2, #8
 8017a4e:	4666      	mov	r6, ip
 8017a50:	6838      	ldr	r0, [r7, #0]
 8017a52:	6879      	ldr	r1, [r7, #4]
 8017a54:	46e0      	mov	r8, ip
 8017a56:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8017a5a:	3708      	adds	r7, #8
 8017a5c:	454f      	cmp	r7, r9
 8017a5e:	46c4      	mov	ip, r8
 8017a60:	d1f6      	bne.n	8017a50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8017a62:	6838      	ldr	r0, [r7, #0]
 8017a64:	f8c8 0000 	str.w	r0, [r8]
 8017a68:	88b9      	ldrh	r1, [r7, #4]
 8017a6a:	f8a8 1004 	strh.w	r1, [r8, #4]
 8017a6e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8017a72:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017a76:	d009      	beq.n	8017a8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8017a78:	7b51      	ldrb	r1, [r2, #13]
 8017a7a:	7992      	ldrb	r2, [r2, #6]
 8017a7c:	0149      	lsls	r1, r1, #5
 8017a7e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017a82:	4311      	orrs	r1, r2
 8017a84:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017a88:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8017a8c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017a90:	d00e      	beq.n	8017ab0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8017a92:	eba3 030e 	sub.w	r3, r3, lr
 8017a96:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017a9a:	b29b      	uxth	r3, r3
 8017a9c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017aa0:	10db      	asrs	r3, r3, #3
 8017aa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017aa6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017aaa:	4313      	orrs	r3, r2
 8017aac:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017ab0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8017ab4:	00cb      	lsls	r3, r1, #3
 8017ab6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017aba:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8017abe:	0648      	lsls	r0, r1, #25
 8017ac0:	ea43 0302 	orr.w	r3, r3, r2
 8017ac4:	bf44      	itt	mi
 8017ac6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017aca:	b21b      	sxthmi	r3, r3
 8017acc:	1b5d      	subs	r5, r3, r5
 8017ace:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017ad2:	e7b5      	b.n	8017a40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08017ad4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8017ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ad8:	461e      	mov	r6, r3
 8017ada:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017adc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017ae0:	4604      	mov	r4, r0
 8017ae2:	4617      	mov	r7, r2
 8017ae4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017ae8:	f7ee fdd8 	bl	800669c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017aec:	4605      	mov	r5, r0
 8017aee:	b918      	cbnz	r0, 8017af8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8017af0:	6030      	str	r0, [r6, #0]
 8017af2:	4628      	mov	r0, r5
 8017af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017af8:	683b      	ldr	r3, [r7, #0]
 8017afa:	4601      	mov	r1, r0
 8017afc:	68db      	ldr	r3, [r3, #12]
 8017afe:	4638      	mov	r0, r7
 8017b00:	4798      	blx	r3
 8017b02:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8017b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017b0a:	4602      	mov	r2, r0
 8017b0c:	6030      	str	r0, [r6, #0]
 8017b0e:	d213      	bcs.n	8017b38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8017b10:	4643      	mov	r3, r8
 8017b12:	4639      	mov	r1, r7
 8017b14:	4620      	mov	r0, r4
 8017b16:	f7ff fe3b 	bl	8017790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017b1a:	6030      	str	r0, [r6, #0]
 8017b1c:	6833      	ldr	r3, [r6, #0]
 8017b1e:	b143      	cbz	r3, 8017b32 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8017b20:	7b5a      	ldrb	r2, [r3, #13]
 8017b22:	7a9b      	ldrb	r3, [r3, #10]
 8017b24:	0052      	lsls	r2, r2, #1
 8017b26:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017b2a:	4313      	orrs	r3, r2
 8017b2c:	bf0c      	ite	eq
 8017b2e:	2301      	moveq	r3, #1
 8017b30:	2300      	movne	r3, #0
 8017b32:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8017b36:	e7dc      	b.n	8017af2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8017b38:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8017b40:	d804      	bhi.n	8017b4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8017b42:	4639      	mov	r1, r7
 8017b44:	4620      	mov	r0, r4
 8017b46:	f7ff fd17 	bl	8017578 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017b4a:	e7e6      	b.n	8017b1a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8017b4c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d0e3      	beq.n	8017b1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017b54:	f640 1302 	movw	r3, #2306	; 0x902
 8017b58:	429d      	cmp	r5, r3
 8017b5a:	d1df      	bne.n	8017b1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017b5c:	4601      	mov	r1, r0
 8017b5e:	4620      	mov	r0, r4
 8017b60:	f7ff fcdb 	bl	801751a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017b64:	e7d9      	b.n	8017b1a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08017b66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8017b66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b6a:	461e      	mov	r6, r3
 8017b6c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017b6e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017b72:	4604      	mov	r4, r0
 8017b74:	4617      	mov	r7, r2
 8017b76:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017b7a:	f7ee fd8f 	bl	800669c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017b7e:	4605      	mov	r5, r0
 8017b80:	b918      	cbnz	r0, 8017b8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8017b82:	6030      	str	r0, [r6, #0]
 8017b84:	4628      	mov	r0, r5
 8017b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b8a:	683b      	ldr	r3, [r7, #0]
 8017b8c:	4601      	mov	r1, r0
 8017b8e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8017b92:	4638      	mov	r0, r7
 8017b94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017b98:	47c8      	blx	r9
 8017b9a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8017b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017ba2:	4602      	mov	r2, r0
 8017ba4:	6030      	str	r0, [r6, #0]
 8017ba6:	d213      	bcs.n	8017bd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8017ba8:	4643      	mov	r3, r8
 8017baa:	4639      	mov	r1, r7
 8017bac:	4620      	mov	r0, r4
 8017bae:	f7ff fdef 	bl	8017790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017bb2:	6030      	str	r0, [r6, #0]
 8017bb4:	6833      	ldr	r3, [r6, #0]
 8017bb6:	b143      	cbz	r3, 8017bca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8017bb8:	7b5a      	ldrb	r2, [r3, #13]
 8017bba:	7a9b      	ldrb	r3, [r3, #10]
 8017bbc:	0052      	lsls	r2, r2, #1
 8017bbe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017bc2:	4313      	orrs	r3, r2
 8017bc4:	bf0c      	ite	eq
 8017bc6:	2301      	moveq	r3, #1
 8017bc8:	2300      	movne	r3, #0
 8017bca:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8017bce:	e7d9      	b.n	8017b84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8017bd0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8017bd4:	b29b      	uxth	r3, r3
 8017bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8017bd8:	d804      	bhi.n	8017be4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8017bda:	4639      	mov	r1, r7
 8017bdc:	4620      	mov	r0, r4
 8017bde:	f7ff fccb 	bl	8017578 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017be2:	e7e6      	b.n	8017bb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8017be4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d0e3      	beq.n	8017bb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017bec:	f640 1302 	movw	r3, #2306	; 0x902
 8017bf0:	429d      	cmp	r5, r3
 8017bf2:	d1df      	bne.n	8017bb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017bf4:	4601      	mov	r1, r0
 8017bf6:	4620      	mov	r0, r4
 8017bf8:	f7ff fc8f 	bl	801751a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017bfc:	e7d9      	b.n	8017bb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08017bfe <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8017bfe:	b510      	push	{r4, lr}
 8017c00:	4604      	mov	r4, r0
 8017c02:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8017c06:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017c08:	b1f1      	cbz	r1, 8017c48 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8017c0a:	2b0a      	cmp	r3, #10
 8017c0c:	d02f      	beq.n	8017c6e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8017c0e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8017c10:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8017c14:	3901      	subs	r1, #1
 8017c16:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8017c18:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8017c1c:	1c51      	adds	r1, r2, #1
 8017c1e:	b289      	uxth	r1, r1
 8017c20:	2901      	cmp	r1, #1
 8017c22:	bf84      	itt	hi
 8017c24:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8017c28:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8017c2a:	f103 0201 	add.w	r2, r3, #1
 8017c2e:	8722      	strh	r2, [r4, #56]	; 0x38
 8017c30:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017c32:	bf98      	it	ls
 8017c34:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8017c36:	4413      	add	r3, r2
 8017c38:	b29b      	uxth	r3, r3
 8017c3a:	2b09      	cmp	r3, #9
 8017c3c:	bf88      	it	hi
 8017c3e:	3b0a      	subhi	r3, #10
 8017c40:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017c44:	8458      	strh	r0, [r3, #34]	; 0x22
 8017c46:	e7dc      	b.n	8017c02 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8017c48:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017c4a:	2b0a      	cmp	r3, #10
 8017c4c:	d00f      	beq.n	8017c6e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8017c4e:	4620      	mov	r0, r4
 8017c50:	f7ff fc11 	bl	8017476 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8017c54:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8017c56:	1c5a      	adds	r2, r3, #1
 8017c58:	8722      	strh	r2, [r4, #56]	; 0x38
 8017c5a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017c5c:	4413      	add	r3, r2
 8017c5e:	b29b      	uxth	r3, r3
 8017c60:	2b09      	cmp	r3, #9
 8017c62:	bf88      	it	hi
 8017c64:	3b0a      	subhi	r3, #10
 8017c66:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017c6a:	8458      	strh	r0, [r3, #34]	; 0x22
 8017c6c:	e7ec      	b.n	8017c48 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8017c6e:	bd10      	pop	{r4, pc}

08017c70 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8017c70:	b538      	push	{r3, r4, r5, lr}
 8017c72:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8017c74:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8017c78:	4604      	mov	r4, r0
 8017c7a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8017c7c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8017c7e:	3a01      	subs	r2, #1
 8017c80:	8702      	strh	r2, [r0, #56]	; 0x38
 8017c82:	1c5a      	adds	r2, r3, #1
 8017c84:	b292      	uxth	r2, r2
 8017c86:	2a09      	cmp	r2, #9
 8017c88:	bf86      	itte	hi
 8017c8a:	3b09      	subhi	r3, #9
 8017c8c:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8017c8e:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8017c90:	f7ff ffb5 	bl	8017bfe <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017c94:	8c23      	ldrh	r3, [r4, #32]
 8017c96:	2b01      	cmp	r3, #1
 8017c98:	bf9c      	itt	ls
 8017c9a:	3301      	addls	r3, #1
 8017c9c:	8423      	strhls	r3, [r4, #32]
 8017c9e:	8be3      	ldrh	r3, [r4, #30]
 8017ca0:	b90b      	cbnz	r3, 8017ca6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8017ca2:	2302      	movs	r3, #2
 8017ca4:	83e3      	strh	r3, [r4, #30]
 8017ca6:	8be3      	ldrh	r3, [r4, #30]
 8017ca8:	3b01      	subs	r3, #1
 8017caa:	b29b      	uxth	r3, r3
 8017cac:	83e3      	strh	r3, [r4, #30]
 8017cae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017cb2:	4628      	mov	r0, r5
 8017cb4:	8365      	strh	r5, [r4, #26]
 8017cb6:	bd38      	pop	{r3, r4, r5, pc}

08017cb8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017cb8:	428a      	cmp	r2, r1
 8017cba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cbe:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8017cc0:	d931      	bls.n	8017d26 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8017cc2:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8017cc4:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8017cc8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8017ccc:	19ee      	adds	r6, r5, r7
 8017cce:	1a54      	subs	r4, r2, r1
 8017cd0:	3e01      	subs	r6, #1
 8017cd2:	fa1f fe84 	uxth.w	lr, r4
 8017cd6:	b2b4      	uxth	r4, r6
 8017cd8:	eba4 090e 	sub.w	r9, r4, lr
 8017cdc:	fa1f f989 	uxth.w	r9, r9
 8017ce0:	2c09      	cmp	r4, #9
 8017ce2:	4626      	mov	r6, r4
 8017ce4:	bf88      	it	hi
 8017ce6:	f1a4 060a 	subhi.w	r6, r4, #10
 8017cea:	f1bc 0f00 	cmp.w	ip, #0
 8017cee:	bf08      	it	eq
 8017cf0:	f04f 0c02 	moveq.w	ip, #2
 8017cf4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8017cf8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017cfc:	fa1f fc8c 	uxth.w	ip, ip
 8017d00:	3c01      	subs	r4, #1
 8017d02:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8017d06:	b2a4      	uxth	r4, r4
 8017d08:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8017d0c:	454c      	cmp	r4, r9
 8017d0e:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8017d12:	d1e5      	bne.n	8017ce0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8017d14:	eba5 050e 	sub.w	r5, r5, lr
 8017d18:	eb0e 0408 	add.w	r4, lr, r8
 8017d1c:	8705      	strh	r5, [r0, #56]	; 0x38
 8017d1e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8017d22:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8017d26:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8017d28:	1a64      	subs	r4, r4, r1
 8017d2a:	4439      	add	r1, r7
 8017d2c:	b289      	uxth	r1, r1
 8017d2e:	2909      	cmp	r1, #9
 8017d30:	bf88      	it	hi
 8017d32:	390a      	subhi	r1, #10
 8017d34:	8704      	strh	r4, [r0, #56]	; 0x38
 8017d36:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017d38:	250a      	movs	r5, #10
 8017d3a:	b18a      	cbz	r2, 8017d60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8017d3c:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8017d3e:	3a01      	subs	r2, #1
 8017d40:	b292      	uxth	r2, r2
 8017d42:	3101      	adds	r1, #1
 8017d44:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8017d48:	8701      	strh	r1, [r0, #56]	; 0x38
 8017d4a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017d4c:	b901      	cbnz	r1, 8017d50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8017d4e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017d50:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017d52:	3901      	subs	r1, #1
 8017d54:	b289      	uxth	r1, r1
 8017d56:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017d58:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8017d5c:	844c      	strh	r4, [r1, #34]	; 0x22
 8017d5e:	e7ec      	b.n	8017d3a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8017d60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d64:	f7ff bf4b 	b.w	8017bfe <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08017d68 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8017d68:	b570      	push	{r4, r5, r6, lr}
 8017d6a:	2500      	movs	r5, #0
 8017d6c:	4295      	cmp	r5, r2
 8017d6e:	d011      	beq.n	8017d94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8017d70:	8bc4      	ldrh	r4, [r0, #30]
 8017d72:	f831 6b02 	ldrh.w	r6, [r1], #2
 8017d76:	4414      	add	r4, r2
 8017d78:	3c01      	subs	r4, #1
 8017d7a:	1b64      	subs	r4, r4, r5
 8017d7c:	b2a4      	uxth	r4, r4
 8017d7e:	2c01      	cmp	r4, #1
 8017d80:	bf88      	it	hi
 8017d82:	3c02      	subhi	r4, #2
 8017d84:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017d88:	8b64      	ldrh	r4, [r4, #26]
 8017d8a:	42b4      	cmp	r4, r6
 8017d8c:	d117      	bne.n	8017dbe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8017d8e:	3501      	adds	r5, #1
 8017d90:	b2ad      	uxth	r5, r5
 8017d92:	e7eb      	b.n	8017d6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8017d94:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017d98:	2400      	movs	r4, #0
 8017d9a:	4413      	add	r3, r2
 8017d9c:	b2a2      	uxth	r2, r4
 8017d9e:	429a      	cmp	r2, r3
 8017da0:	da0f      	bge.n	8017dc2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8017da2:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8017da4:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8017da8:	4432      	add	r2, r6
 8017daa:	b292      	uxth	r2, r2
 8017dac:	2a09      	cmp	r2, #9
 8017dae:	bf88      	it	hi
 8017db0:	3a0a      	subhi	r2, #10
 8017db2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8017db6:	3401      	adds	r4, #1
 8017db8:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8017dba:	42aa      	cmp	r2, r5
 8017dbc:	d0ee      	beq.n	8017d9c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8017dbe:	2000      	movs	r0, #0
 8017dc0:	bd70      	pop	{r4, r5, r6, pc}
 8017dc2:	2001      	movs	r0, #1
 8017dc4:	e7fc      	b.n	8017dc0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017dc6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017dc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dca:	4605      	mov	r5, r0
 8017dcc:	4616      	mov	r6, r2
 8017dce:	1c8c      	adds	r4, r1, #2
 8017dd0:	8809      	ldrh	r1, [r1, #0]
 8017dd2:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017dd6:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8017dda:	42b3      	cmp	r3, r6
 8017ddc:	d124      	bne.n	8017e28 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017dde:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017de2:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017de6:	f001 070f 	and.w	r7, r1, #15
 8017dea:	f8cd 8000 	str.w	r8, [sp]
 8017dee:	464b      	mov	r3, r9
 8017df0:	4652      	mov	r2, sl
 8017df2:	4621      	mov	r1, r4
 8017df4:	4628      	mov	r0, r5
 8017df6:	f7ff ffb7 	bl	8017d68 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8017dfa:	4683      	mov	fp, r0
 8017dfc:	b168      	cbz	r0, 8017e1a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017dfe:	eb0a 0109 	add.w	r1, sl, r9
 8017e02:	4441      	add	r1, r8
 8017e04:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8017e08:	463a      	mov	r2, r7
 8017e0a:	4649      	mov	r1, r9
 8017e0c:	4628      	mov	r0, r5
 8017e0e:	f7ff ff53 	bl	8017cb8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017e12:	4658      	mov	r0, fp
 8017e14:	b003      	add	sp, #12
 8017e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e1a:	eb07 010a 	add.w	r1, r7, sl
 8017e1e:	4449      	add	r1, r9
 8017e20:	4441      	add	r1, r8
 8017e22:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8017e26:	e7d2      	b.n	8017dce <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8017e28:	f04f 0b00 	mov.w	fp, #0
 8017e2c:	e7f1      	b.n	8017e12 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08017e2e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8017e2e:	b570      	push	{r4, r5, r6, lr}
 8017e30:	8810      	ldrh	r0, [r2, #0]
 8017e32:	4298      	cmp	r0, r3
 8017e34:	d817      	bhi.n	8017e66 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017e36:	1e48      	subs	r0, r1, #1
 8017e38:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8017e3c:	4298      	cmp	r0, r3
 8017e3e:	d312      	bcc.n	8017e66 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017e40:	2400      	movs	r4, #0
 8017e42:	428c      	cmp	r4, r1
 8017e44:	d20f      	bcs.n	8017e66 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017e46:	1860      	adds	r0, r4, r1
 8017e48:	1040      	asrs	r0, r0, #1
 8017e4a:	0085      	lsls	r5, r0, #2
 8017e4c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8017e50:	42b3      	cmp	r3, r6
 8017e52:	d902      	bls.n	8017e5a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8017e54:	3001      	adds	r0, #1
 8017e56:	b284      	uxth	r4, r0
 8017e58:	e7f3      	b.n	8017e42 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017e5a:	d201      	bcs.n	8017e60 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8017e5c:	b281      	uxth	r1, r0
 8017e5e:	e7f0      	b.n	8017e42 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017e60:	442a      	add	r2, r5
 8017e62:	8850      	ldrh	r0, [r2, #2]
 8017e64:	bd70      	pop	{r4, r5, r6, pc}
 8017e66:	2000      	movs	r0, #0
 8017e68:	e7fc      	b.n	8017e64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08017e6a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8017e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e6e:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8017e70:	886f      	ldrh	r7, [r5, #2]
 8017e72:	4604      	mov	r4, r0
 8017e74:	087f      	lsrs	r7, r7, #1
 8017e76:	260b      	movs	r6, #11
 8017e78:	3e01      	subs	r6, #1
 8017e7a:	d013      	beq.n	8017ea4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017e7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017e7e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017e82:	462a      	mov	r2, r5
 8017e84:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017e88:	4639      	mov	r1, r7
 8017e8a:	4643      	mov	r3, r8
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	f7ff ffce 	bl	8017e2e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8017e92:	b138      	cbz	r0, 8017ea4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017e94:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8017e98:	4642      	mov	r2, r8
 8017e9a:	4620      	mov	r0, r4
 8017e9c:	f7ff ff93 	bl	8017dc6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8017ea0:	2800      	cmp	r0, #0
 8017ea2:	d1e9      	bne.n	8017e78 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8017ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017ea8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8017ea8:	b570      	push	{r4, r5, r6, lr}
 8017eaa:	694a      	ldr	r2, [r1, #20]
 8017eac:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017eae:	684b      	ldr	r3, [r1, #4]
 8017eb0:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8017eb2:	1b54      	subs	r4, r2, r5
 8017eb4:	f000 8106 	beq.w	80180c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8017eb8:	1b9b      	subs	r3, r3, r6
 8017eba:	d003      	beq.n	8017ec4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017ebc:	4363      	muls	r3, r4
 8017ebe:	2210      	movs	r2, #16
 8017ec0:	fb93 f3f2 	sdiv	r3, r3, r2
 8017ec4:	680c      	ldr	r4, [r1, #0]
 8017ec6:	698a      	ldr	r2, [r1, #24]
 8017ec8:	1b65      	subs	r5, r4, r5
 8017eca:	f000 80fd 	beq.w	80180c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8017ece:	1b92      	subs	r2, r2, r6
 8017ed0:	d003      	beq.n	8017eda <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017ed2:	436a      	muls	r2, r5
 8017ed4:	2410      	movs	r4, #16
 8017ed6:	fb92 f2f4 	sdiv	r2, r2, r4
 8017eda:	1a9b      	subs	r3, r3, r2
 8017edc:	ee07 3a90 	vmov	s15, r3
 8017ee0:	ed9f 4a88 	vldr	s8, [pc, #544]	; 8018104 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017eec:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017ef0:	460a      	mov	r2, r1
 8017ef2:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	f100 040c 	add.w	r4, r0, #12
 8017efc:	eeb1 6a43 	vneg.f32	s12, s6
 8017f00:	edd2 7a02 	vldr	s15, [r2, #8]
 8017f04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017f08:	3214      	adds	r2, #20
 8017f0a:	ece3 6a01 	vstmia	r3!, {s13}
 8017f0e:	ed52 7a02 	vldr	s15, [r2, #-8]
 8017f12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017f16:	429c      	cmp	r4, r3
 8017f18:	edc3 7a02 	vstr	s15, [r3, #8]
 8017f1c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8017f20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017f24:	edc3 7a05 	vstr	s15, [r3, #20]
 8017f28:	d1ea      	bne.n	8017f00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8017f2a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017f2c:	698b      	ldr	r3, [r1, #24]
 8017f2e:	edd0 4a02 	vldr	s9, [r0, #8]
 8017f32:	edd0 3a00 	vldr	s7, [r0]
 8017f36:	edd0 6a01 	vldr	s13, [r0, #4]
 8017f3a:	ed90 5a05 	vldr	s10, [r0, #20]
 8017f3e:	ed90 2a03 	vldr	s4, [r0, #12]
 8017f42:	edd0 5a04 	vldr	s11, [r0, #16]
 8017f46:	ed90 1a07 	vldr	s2, [r0, #28]
 8017f4a:	edd0 2a06 	vldr	s5, [r0, #24]
 8017f4e:	1a9b      	subs	r3, r3, r2
 8017f50:	ee07 3a90 	vmov	s15, r3
 8017f54:	684b      	ldr	r3, [r1, #4]
 8017f56:	1a9b      	subs	r3, r3, r2
 8017f58:	ee07 3a10 	vmov	s14, r3
 8017f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f60:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017f64:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017f68:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8017f6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017f70:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8017f74:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017f78:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8017f7c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017f80:	ee32 5a45 	vsub.f32	s10, s4, s10
 8017f84:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017f88:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8017f8c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017f8e:	694a      	ldr	r2, [r1, #20]
 8017f90:	1b13      	subs	r3, r2, r4
 8017f92:	ee07 3a10 	vmov	s14, r3
 8017f96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017f9a:	680b      	ldr	r3, [r1, #0]
 8017f9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017fa0:	1b1b      	subs	r3, r3, r4
 8017fa2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8017fa6:	ee07 3a10 	vmov	s14, r3
 8017faa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017fae:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017fb2:	eee6 4a87 	vfma.f32	s9, s13, s14
 8017fb6:	ee64 4a86 	vmul.f32	s9, s9, s12
 8017fba:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8017fbe:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017fc0:	698b      	ldr	r3, [r1, #24]
 8017fc2:	1a9b      	subs	r3, r3, r2
 8017fc4:	ee06 3a90 	vmov	s13, r3
 8017fc8:	684b      	ldr	r3, [r1, #4]
 8017fca:	1a9b      	subs	r3, r3, r2
 8017fcc:	ee07 3a10 	vmov	s14, r3
 8017fd0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017fd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017fd8:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017fdc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017fe0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8017fe4:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017fe8:	ee66 6a83 	vmul.f32	s13, s13, s6
 8017fec:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8017ff0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8017ff2:	694a      	ldr	r2, [r1, #20]
 8017ff4:	1b13      	subs	r3, r2, r4
 8017ff6:	ee07 3a10 	vmov	s14, r3
 8017ffa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017ffe:	680b      	ldr	r3, [r1, #0]
 8018000:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018004:	1b1b      	subs	r3, r3, r4
 8018006:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801800a:	ee07 3a10 	vmov	s14, r3
 801800e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018012:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018016:	eea5 5a87 	vfma.f32	s10, s11, s14
 801801a:	edd0 5a08 	vldr	s11, [r0, #32]
 801801e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8018022:	ee31 1a65 	vsub.f32	s2, s2, s11
 8018026:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801802a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801802c:	698b      	ldr	r3, [r1, #24]
 801802e:	1a9b      	subs	r3, r3, r2
 8018030:	ee07 3a10 	vmov	s14, r3
 8018034:	684b      	ldr	r3, [r1, #4]
 8018036:	1a9b      	subs	r3, r3, r2
 8018038:	ee01 3a90 	vmov	s3, r3
 801803c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018040:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8018044:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018048:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801804c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8018050:	ee61 1a84 	vmul.f32	s3, s3, s8
 8018054:	eea1 7a21 	vfma.f32	s14, s2, s3
 8018058:	ee27 7a03 	vmul.f32	s14, s14, s6
 801805c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8018060:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018062:	694a      	ldr	r2, [r1, #20]
 8018064:	1b13      	subs	r3, r2, r4
 8018066:	ee03 3a10 	vmov	s6, r3
 801806a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801806e:	680b      	ldr	r3, [r1, #0]
 8018070:	ee23 3a04 	vmul.f32	s6, s6, s8
 8018074:	1b1b      	subs	r3, r3, r4
 8018076:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801807a:	ee03 3a10 	vmov	s6, r3
 801807e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018082:	ee23 4a04 	vmul.f32	s8, s6, s8
 8018086:	eee1 5a04 	vfma.f32	s11, s2, s8
 801808a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801808e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8018092:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8018096:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801809a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801809e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180a2:	dd13      	ble.n	80180cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80180a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80180a8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80180ac:	63c3      	str	r3, [r0, #60]	; 0x3c
 80180ae:	eee3 7a87 	vfma.f32	s15, s7, s14
 80180b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80180b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ba:	dd15      	ble.n	80180e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80180bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80180c0:	6403      	str	r3, [r0, #64]	; 0x40
 80180c2:	bd70      	pop	{r4, r5, r6, pc}
 80180c4:	4623      	mov	r3, r4
 80180c6:	e6fd      	b.n	8017ec4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80180c8:	462a      	mov	r2, r5
 80180ca:	e706      	b.n	8017eda <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80180cc:	d502      	bpl.n	80180d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80180ce:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80180d2:	e7e9      	b.n	80180a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80180d4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80180d8:	eea3 2a85 	vfma.f32	s4, s7, s10
 80180dc:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80180e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180e4:	dade      	bge.n	80180a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80180e6:	e7f2      	b.n	80180ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80180e8:	d502      	bpl.n	80180f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80180ea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80180ee:	e7e7      	b.n	80180c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80180f0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80180f4:	eee3 4a86 	vfma.f32	s9, s7, s12
 80180f8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80180fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018100:	dadc      	bge.n	80180bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8018102:	e7f2      	b.n	80180ea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8018104:	3d800000 	.word	0x3d800000

08018108 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8018108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801810c:	2714      	movs	r7, #20
 801810e:	435f      	muls	r7, r3
 8018110:	eb02 0c07 	add.w	ip, r2, r7
 8018114:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8018118:	f115 0e0f 	adds.w	lr, r5, #15
 801811c:	f100 80a2 	bmi.w	8018264 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8018120:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8018124:	9c08      	ldr	r4, [sp, #32]
 8018126:	f8c0 e014 	str.w	lr, [r0, #20]
 801812a:	2614      	movs	r6, #20
 801812c:	4366      	muls	r6, r4
 801812e:	eb02 0806 	add.w	r8, r2, r6
 8018132:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018136:	f115 040f 	adds.w	r4, r5, #15
 801813a:	f100 809f 	bmi.w	801827c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801813e:	1124      	asrs	r4, r4, #4
 8018140:	eba4 040e 	sub.w	r4, r4, lr
 8018144:	6184      	str	r4, [r0, #24]
 8018146:	2c00      	cmp	r4, #0
 8018148:	f000 808a 	beq.w	8018260 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801814c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8018150:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018154:	5995      	ldr	r5, [r2, r6]
 8018156:	eba4 0809 	sub.w	r8, r4, r9
 801815a:	59d4      	ldr	r4, [r2, r7]
 801815c:	eba5 0a04 	sub.w	sl, r5, r4
 8018160:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8018164:	fb0e fe05 	mul.w	lr, lr, r5
 8018168:	fb0a ee19 	mls	lr, sl, r9, lr
 801816c:	fb08 e404 	mla	r4, r8, r4, lr
 8018170:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8018174:	3c01      	subs	r4, #1
 8018176:	19a4      	adds	r4, r4, r6
 8018178:	f100 808c 	bmi.w	8018294 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801817c:	fb94 fef6 	sdiv	lr, r4, r6
 8018180:	f8c0 e000 	str.w	lr, [r0]
 8018184:	fb06 441e 	mls	r4, r6, lr, r4
 8018188:	6104      	str	r4, [r0, #16]
 801818a:	2d00      	cmp	r5, #0
 801818c:	f2c0 8095 	blt.w	80182ba <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8018190:	fb95 f4f6 	sdiv	r4, r5, r6
 8018194:	6044      	str	r4, [r0, #4]
 8018196:	fb06 5514 	mls	r5, r6, r4, r5
 801819a:	6085      	str	r5, [r0, #8]
 801819c:	60c6      	str	r6, [r0, #12]
 801819e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80181a2:	6945      	ldr	r5, [r0, #20]
 80181a4:	59d2      	ldr	r2, [r2, r7]
 80181a6:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80182dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80181aa:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80181ae:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80181b2:	ee07 4a10 	vmov	s14, r4
 80181b6:	6804      	ldr	r4, [r0, #0]
 80181b8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80181bc:	ee07 2a90 	vmov	s15, r2
 80181c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80181c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80181c8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80181cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80181d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80181d4:	edd3 6a00 	vldr	s13, [r3]
 80181d8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80181dc:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80181e0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80181e4:	edc0 6a07 	vstr	s13, [r0, #28]
 80181e8:	edd0 6a01 	vldr	s13, [r0, #4]
 80181ec:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 80181f0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80181f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80181f8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80181fc:	ed80 6a08 	vstr	s12, [r0, #32]
 8018200:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8018202:	6242      	str	r2, [r0, #36]	; 0x24
 8018204:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8018208:	ed93 6a03 	vldr	s12, [r3, #12]
 801820c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018210:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018214:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018218:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801821c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018220:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8018224:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018228:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801822c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801822e:	6302      	str	r2, [r0, #48]	; 0x30
 8018230:	ed93 6a06 	vldr	s12, [r3, #24]
 8018234:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8018238:	eea5 6a87 	vfma.f32	s12, s11, s14
 801823c:	eeb0 7a46 	vmov.f32	s14, s12
 8018240:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8018244:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018248:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801824c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8018250:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8018254:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018258:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801825c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801825e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018264:	f1c5 0501 	rsb	r5, r5, #1
 8018268:	f015 050f 	ands.w	r5, r5, #15
 801826c:	bf18      	it	ne
 801826e:	2501      	movne	r5, #1
 8018270:	2410      	movs	r4, #16
 8018272:	fb9e fef4 	sdiv	lr, lr, r4
 8018276:	ebae 0e05 	sub.w	lr, lr, r5
 801827a:	e753      	b.n	8018124 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801827c:	f1c5 0501 	rsb	r5, r5, #1
 8018280:	f015 050f 	ands.w	r5, r5, #15
 8018284:	bf18      	it	ne
 8018286:	2501      	movne	r5, #1
 8018288:	f04f 0910 	mov.w	r9, #16
 801828c:	fb94 f4f9 	sdiv	r4, r4, r9
 8018290:	1b64      	subs	r4, r4, r5
 8018292:	e755      	b.n	8018140 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8018294:	4264      	negs	r4, r4
 8018296:	fb94 fef6 	sdiv	lr, r4, r6
 801829a:	f1ce 0800 	rsb	r8, lr, #0
 801829e:	fb06 441e 	mls	r4, r6, lr, r4
 80182a2:	f8c0 8000 	str.w	r8, [r0]
 80182a6:	6104      	str	r4, [r0, #16]
 80182a8:	2c00      	cmp	r4, #0
 80182aa:	f43f af6e 	beq.w	801818a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80182ae:	ea6f 0e0e 	mvn.w	lr, lr
 80182b2:	f8c0 e000 	str.w	lr, [r0]
 80182b6:	1b34      	subs	r4, r6, r4
 80182b8:	e766      	b.n	8018188 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80182ba:	426d      	negs	r5, r5
 80182bc:	fb95 f4f6 	sdiv	r4, r5, r6
 80182c0:	f1c4 0e00 	rsb	lr, r4, #0
 80182c4:	fb06 5514 	mls	r5, r6, r4, r5
 80182c8:	f8c0 e004 	str.w	lr, [r0, #4]
 80182cc:	6085      	str	r5, [r0, #8]
 80182ce:	2d00      	cmp	r5, #0
 80182d0:	f43f af64 	beq.w	801819c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 80182d4:	43e4      	mvns	r4, r4
 80182d6:	6044      	str	r4, [r0, #4]
 80182d8:	1b75      	subs	r5, r6, r5
 80182da:	e75e      	b.n	801819a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80182dc:	3d800000 	.word	0x3d800000

080182e0 <_ZN8touchgfx7Unicode6strlenEPKt>:
 80182e0:	4602      	mov	r2, r0
 80182e2:	b148      	cbz	r0, 80182f8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 80182e4:	2300      	movs	r3, #0
 80182e6:	b298      	uxth	r0, r3
 80182e8:	3301      	adds	r3, #1
 80182ea:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80182ee:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 80182f2:	2900      	cmp	r1, #0
 80182f4:	d1f7      	bne.n	80182e6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 80182f6:	4770      	bx	lr
 80182f8:	4770      	bx	lr

080182fa <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80182fa:	b530      	push	{r4, r5, lr}
 80182fc:	4604      	mov	r4, r0
 80182fe:	b159      	cbz	r1, 8018318 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018300:	b148      	cbz	r0, 8018316 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018302:	2300      	movs	r3, #0
 8018304:	b298      	uxth	r0, r3
 8018306:	4282      	cmp	r2, r0
 8018308:	d905      	bls.n	8018316 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801830a:	5ccd      	ldrb	r5, [r1, r3]
 801830c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018310:	3301      	adds	r3, #1
 8018312:	2d00      	cmp	r5, #0
 8018314:	d1f6      	bne.n	8018304 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8018316:	bd30      	pop	{r4, r5, pc}
 8018318:	4608      	mov	r0, r1
 801831a:	e7fc      	b.n	8018316 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801831c <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801831c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801831e:	b08b      	sub	sp, #44	; 0x2c
 8018320:	468c      	mov	ip, r1
 8018322:	2100      	movs	r1, #0
 8018324:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018328:	4604      	mov	r4, r0
 801832a:	261f      	movs	r6, #31
 801832c:	af01      	add	r7, sp, #4
 801832e:	fb94 fef3 	sdiv	lr, r4, r3
 8018332:	fb03 441e 	mls	r4, r3, lr, r4
 8018336:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801833a:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801833e:	b2ec      	uxtb	r4, r5
 8018340:	2d09      	cmp	r5, #9
 8018342:	bfd4      	ite	le
 8018344:	3430      	addle	r4, #48	; 0x30
 8018346:	3457      	addgt	r4, #87	; 0x57
 8018348:	b2e4      	uxtb	r4, r4
 801834a:	55bc      	strb	r4, [r7, r6]
 801834c:	4674      	mov	r4, lr
 801834e:	1e71      	subs	r1, r6, #1
 8018350:	b974      	cbnz	r4, 8018370 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 8018352:	2800      	cmp	r0, #0
 8018354:	da05      	bge.n	8018362 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 8018356:	ab0a      	add	r3, sp, #40	; 0x28
 8018358:	4419      	add	r1, r3
 801835a:	232d      	movs	r3, #45	; 0x2d
 801835c:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018360:	1eb1      	subs	r1, r6, #2
 8018362:	3101      	adds	r1, #1
 8018364:	4439      	add	r1, r7
 8018366:	4660      	mov	r0, ip
 8018368:	f7ff ffc7 	bl	80182fa <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801836c:	b00b      	add	sp, #44	; 0x2c
 801836e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018370:	460e      	mov	r6, r1
 8018372:	e7dc      	b.n	801832e <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

08018374 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 8018374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018376:	b08b      	sub	sp, #44	; 0x2c
 8018378:	468c      	mov	ip, r1
 801837a:	2100      	movs	r1, #0
 801837c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018380:	ae01      	add	r6, sp, #4
 8018382:	211f      	movs	r1, #31
 8018384:	fbb0 f7f3 	udiv	r7, r0, r3
 8018388:	fb03 0517 	mls	r5, r3, r7, r0
 801838c:	b2ec      	uxtb	r4, r5
 801838e:	2d09      	cmp	r5, #9
 8018390:	bfd4      	ite	le
 8018392:	3430      	addle	r4, #48	; 0x30
 8018394:	3457      	addgt	r4, #87	; 0x57
 8018396:	b2e4      	uxtb	r4, r4
 8018398:	558c      	strb	r4, [r1, r6]
 801839a:	4638      	mov	r0, r7
 801839c:	1e4c      	subs	r4, r1, #1
 801839e:	b92f      	cbnz	r7, 80183ac <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 80183a0:	4431      	add	r1, r6
 80183a2:	4660      	mov	r0, ip
 80183a4:	f7ff ffa9 	bl	80182fa <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80183a8:	b00b      	add	sp, #44	; 0x2c
 80183aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183ac:	4621      	mov	r1, r4
 80183ae:	e7e9      	b.n	8018384 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

080183b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 80183b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183b4:	4691      	mov	r9, r2
 80183b6:	b085      	sub	sp, #20
 80183b8:	6802      	ldr	r2, [r0, #0]
 80183ba:	9201      	str	r2, [sp, #4]
 80183bc:	4688      	mov	r8, r1
 80183be:	4683      	mov	fp, r0
 80183c0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 80183c4:	9103      	str	r1, [sp, #12]
 80183c6:	4610      	mov	r0, r2
 80183c8:	461c      	mov	r4, r3
 80183ca:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80183ce:	9302      	str	r3, [sp, #8]
 80183d0:	f7ff ff86 	bl	80182e0 <_ZN8touchgfx7Unicode6strlenEPKt>
 80183d4:	f1b8 0f00 	cmp.w	r8, #0
 80183d8:	bf0c      	ite	eq
 80183da:	4684      	moveq	ip, r0
 80183dc:	f100 0c01 	addne.w	ip, r0, #1
 80183e0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 80183e4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 80183e8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80183ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80183ec:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80183f0:	9903      	ldr	r1, [sp, #12]
 80183f2:	fa1f fc8c 	uxth.w	ip, ip
 80183f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80183fa:	d041      	beq.n	8018480 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80183fc:	d834      	bhi.n	8018468 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 80183fe:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8018402:	d059      	beq.n	80184b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8018404:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8018408:	d03a      	beq.n	8018480 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801840a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801840e:	d034      	beq.n	801847a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018410:	2400      	movs	r4, #0
 8018412:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8018416:	3a01      	subs	r2, #1
 8018418:	b169      	cbz	r1, 8018436 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801841a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801841c:	458c      	cmp	ip, r1
 801841e:	da09      	bge.n	8018434 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018420:	eba1 010c 	sub.w	r1, r1, ip
 8018424:	b289      	uxth	r1, r1
 8018426:	b933      	cbnz	r3, 8018436 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018428:	2e00      	cmp	r6, #0
 801842a:	d051      	beq.n	80184d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801842c:	2800      	cmp	r0, #0
 801842e:	d04f      	beq.n	80184d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018430:	440c      	add	r4, r1
 8018432:	b2a4      	uxth	r4, r4
 8018434:	2100      	movs	r1, #0
 8018436:	682b      	ldr	r3, [r5, #0]
 8018438:	4293      	cmp	r3, r2
 801843a:	da07      	bge.n	801844c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801843c:	f1b8 0f00 	cmp.w	r8, #0
 8018440:	d004      	beq.n	801844c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018442:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8018446:	682b      	ldr	r3, [r5, #0]
 8018448:	3301      	adds	r3, #1
 801844a:	602b      	str	r3, [r5, #0]
 801844c:	2730      	movs	r7, #48	; 0x30
 801844e:	2c00      	cmp	r4, #0
 8018450:	d04e      	beq.n	80184f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018452:	682e      	ldr	r6, [r5, #0]
 8018454:	3c01      	subs	r4, #1
 8018456:	42b2      	cmp	r2, r6
 8018458:	b2a4      	uxth	r4, r4
 801845a:	dd49      	ble.n	80184f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801845c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018460:	682b      	ldr	r3, [r5, #0]
 8018462:	3301      	adds	r3, #1
 8018464:	602b      	str	r3, [r5, #0]
 8018466:	e7f2      	b.n	801844e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8018468:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801846c:	d01d      	beq.n	80184aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801846e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8018472:	d002      	beq.n	801847a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018474:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8018478:	e7c9      	b.n	801840e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801847a:	4684      	mov	ip, r0
 801847c:	f04f 0800 	mov.w	r8, #0
 8018480:	2c00      	cmp	r4, #0
 8018482:	d0c6      	beq.n	8018412 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018484:	b947      	cbnz	r7, 8018498 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018486:	2801      	cmp	r0, #1
 8018488:	d106      	bne.n	8018498 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801848a:	8814      	ldrh	r4, [r2, #0]
 801848c:	2c30      	cmp	r4, #48	; 0x30
 801848e:	bf02      	ittt	eq
 8018490:	3202      	addeq	r2, #2
 8018492:	f8cb 2000 	streq.w	r2, [fp]
 8018496:	4638      	moveq	r0, r7
 8018498:	45bc      	cmp	ip, r7
 801849a:	da14      	bge.n	80184c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801849c:	b2bf      	uxth	r7, r7
 801849e:	eba7 040c 	sub.w	r4, r7, ip
 80184a2:	b2a4      	uxth	r4, r4
 80184a4:	46bc      	mov	ip, r7
 80184a6:	2600      	movs	r6, #0
 80184a8:	e7b3      	b.n	8018412 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80184aa:	4684      	mov	ip, r0
 80184ac:	b16c      	cbz	r4, 80184ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 80184ae:	42b8      	cmp	r0, r7
 80184b0:	dd00      	ble.n	80184b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 80184b2:	b2b8      	uxth	r0, r7
 80184b4:	2400      	movs	r4, #0
 80184b6:	e003      	b.n	80184c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 80184b8:	f04f 0c01 	mov.w	ip, #1
 80184bc:	2400      	movs	r4, #0
 80184be:	4660      	mov	r0, ip
 80184c0:	4626      	mov	r6, r4
 80184c2:	46a0      	mov	r8, r4
 80184c4:	e7a5      	b.n	8018412 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80184c6:	2400      	movs	r4, #0
 80184c8:	e7ed      	b.n	80184a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 80184ca:	4626      	mov	r6, r4
 80184cc:	46a0      	mov	r8, r4
 80184ce:	e7a0      	b.n	8018412 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80184d0:	2900      	cmp	r1, #0
 80184d2:	d0b0      	beq.n	8018436 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80184d4:	2720      	movs	r7, #32
 80184d6:	682e      	ldr	r6, [r5, #0]
 80184d8:	2900      	cmp	r1, #0
 80184da:	d0ac      	beq.n	8018436 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80184dc:	3901      	subs	r1, #1
 80184de:	4296      	cmp	r6, r2
 80184e0:	b289      	uxth	r1, r1
 80184e2:	daa7      	bge.n	8018434 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80184e4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80184e8:	682b      	ldr	r3, [r5, #0]
 80184ea:	3301      	adds	r3, #1
 80184ec:	602b      	str	r3, [r5, #0]
 80184ee:	e7f2      	b.n	80184d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 80184f0:	b188      	cbz	r0, 8018516 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80184f2:	682b      	ldr	r3, [r5, #0]
 80184f4:	3801      	subs	r0, #1
 80184f6:	429a      	cmp	r2, r3
 80184f8:	b280      	uxth	r0, r0
 80184fa:	dd0c      	ble.n	8018516 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80184fc:	f8db 3000 	ldr.w	r3, [fp]
 8018500:	1c9c      	adds	r4, r3, #2
 8018502:	f8cb 4000 	str.w	r4, [fp]
 8018506:	881c      	ldrh	r4, [r3, #0]
 8018508:	682b      	ldr	r3, [r5, #0]
 801850a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801850e:	682b      	ldr	r3, [r5, #0]
 8018510:	3301      	adds	r3, #1
 8018512:	602b      	str	r3, [r5, #0]
 8018514:	e7ec      	b.n	80184f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018516:	2620      	movs	r6, #32
 8018518:	b151      	cbz	r1, 8018530 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801851a:	6828      	ldr	r0, [r5, #0]
 801851c:	3901      	subs	r1, #1
 801851e:	4282      	cmp	r2, r0
 8018520:	b289      	uxth	r1, r1
 8018522:	dd05      	ble.n	8018530 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018524:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8018528:	682b      	ldr	r3, [r5, #0]
 801852a:	3301      	adds	r3, #1
 801852c:	602b      	str	r3, [r5, #0]
 801852e:	e7f3      	b.n	8018518 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8018530:	b005      	add	sp, #20
 8018532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018536 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8018536:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801853a:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801853e:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8018542:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8018546:	2400      	movs	r4, #0
 8018548:	8014      	strh	r4, [r2, #0]
 801854a:	701c      	strb	r4, [r3, #0]
 801854c:	f888 4000 	strb.w	r4, [r8]
 8018550:	f88c 4000 	strb.w	r4, [ip]
 8018554:	f88e 4000 	strb.w	r4, [lr]
 8018558:	703c      	strb	r4, [r7, #0]
 801855a:	6804      	ldr	r4, [r0, #0]
 801855c:	b1a4      	cbz	r4, 8018588 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801855e:	8824      	ldrh	r4, [r4, #0]
 8018560:	f04f 0901 	mov.w	r9, #1
 8018564:	b314      	cbz	r4, 80185ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018566:	2c2b      	cmp	r4, #43	; 0x2b
 8018568:	d001      	beq.n	801856e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801856a:	2c20      	cmp	r4, #32
 801856c:	d110      	bne.n	8018590 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801856e:	8014      	strh	r4, [r2, #0]
 8018570:	6804      	ldr	r4, [r0, #0]
 8018572:	b10c      	cbz	r4, 8018578 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8018574:	3402      	adds	r4, #2
 8018576:	6004      	str	r4, [r0, #0]
 8018578:	680c      	ldr	r4, [r1, #0]
 801857a:	b10c      	cbz	r4, 8018580 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801857c:	3401      	adds	r4, #1
 801857e:	600c      	str	r4, [r1, #0]
 8018580:	6804      	ldr	r4, [r0, #0]
 8018582:	b17c      	cbz	r4, 80185a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8018584:	8824      	ldrh	r4, [r4, #0]
 8018586:	e7ed      	b.n	8018564 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018588:	680c      	ldr	r4, [r1, #0]
 801858a:	b17c      	cbz	r4, 80185ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801858c:	7824      	ldrb	r4, [r4, #0]
 801858e:	e7e7      	b.n	8018560 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8018590:	2c2d      	cmp	r4, #45	; 0x2d
 8018592:	d102      	bne.n	801859a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8018594:	f883 9000 	strb.w	r9, [r3]
 8018598:	e7ea      	b.n	8018570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801859a:	2c23      	cmp	r4, #35	; 0x23
 801859c:	d107      	bne.n	80185ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801859e:	f888 9000 	strb.w	r9, [r8]
 80185a2:	e7e5      	b.n	8018570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80185a4:	680c      	ldr	r4, [r1, #0]
 80185a6:	b10c      	cbz	r4, 80185ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80185a8:	7824      	ldrb	r4, [r4, #0]
 80185aa:	e7db      	b.n	8018564 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80185ac:	2400      	movs	r4, #0
 80185ae:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80185b2:	2b09      	cmp	r3, #9
 80185b4:	d901      	bls.n	80185ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 80185b6:	2c2a      	cmp	r4, #42	; 0x2a
 80185b8:	d122      	bne.n	8018600 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80185ba:	2301      	movs	r3, #1
 80185bc:	2c30      	cmp	r4, #48	; 0x30
 80185be:	f88e 3000 	strb.w	r3, [lr]
 80185c2:	d10d      	bne.n	80185e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80185c4:	f88c 3000 	strb.w	r3, [ip]
 80185c8:	6803      	ldr	r3, [r0, #0]
 80185ca:	b10b      	cbz	r3, 80185d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 80185cc:	3302      	adds	r3, #2
 80185ce:	6003      	str	r3, [r0, #0]
 80185d0:	680b      	ldr	r3, [r1, #0]
 80185d2:	b10b      	cbz	r3, 80185d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 80185d4:	3301      	adds	r3, #1
 80185d6:	600b      	str	r3, [r1, #0]
 80185d8:	6803      	ldr	r3, [r0, #0]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d02f      	beq.n	801863e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 80185de:	881c      	ldrh	r4, [r3, #0]
 80185e0:	2c2a      	cmp	r4, #42	; 0x2a
 80185e2:	d135      	bne.n	8018650 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80185e4:	f04f 33ff 	mov.w	r3, #4294967295
 80185e8:	6033      	str	r3, [r6, #0]
 80185ea:	6803      	ldr	r3, [r0, #0]
 80185ec:	b10b      	cbz	r3, 80185f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 80185ee:	3302      	adds	r3, #2
 80185f0:	6003      	str	r3, [r0, #0]
 80185f2:	680b      	ldr	r3, [r1, #0]
 80185f4:	b10b      	cbz	r3, 80185fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 80185f6:	3301      	adds	r3, #1
 80185f8:	600b      	str	r3, [r1, #0]
 80185fa:	6803      	ldr	r3, [r0, #0]
 80185fc:	b31b      	cbz	r3, 8018646 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 80185fe:	881c      	ldrh	r4, [r3, #0]
 8018600:	2c2e      	cmp	r4, #46	; 0x2e
 8018602:	d11a      	bne.n	801863a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018604:	2301      	movs	r3, #1
 8018606:	703b      	strb	r3, [r7, #0]
 8018608:	6803      	ldr	r3, [r0, #0]
 801860a:	b10b      	cbz	r3, 8018610 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801860c:	3302      	adds	r3, #2
 801860e:	6003      	str	r3, [r0, #0]
 8018610:	680b      	ldr	r3, [r1, #0]
 8018612:	b10b      	cbz	r3, 8018618 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8018614:	3301      	adds	r3, #1
 8018616:	600b      	str	r3, [r1, #0]
 8018618:	6803      	ldr	r3, [r0, #0]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d036      	beq.n	801868c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801861e:	881b      	ldrh	r3, [r3, #0]
 8018620:	2b2a      	cmp	r3, #42	; 0x2a
 8018622:	d137      	bne.n	8018694 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018624:	f04f 33ff 	mov.w	r3, #4294967295
 8018628:	602b      	str	r3, [r5, #0]
 801862a:	6803      	ldr	r3, [r0, #0]
 801862c:	b10b      	cbz	r3, 8018632 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801862e:	3302      	adds	r3, #2
 8018630:	6003      	str	r3, [r0, #0]
 8018632:	680b      	ldr	r3, [r1, #0]
 8018634:	b10b      	cbz	r3, 801863a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018636:	3301      	adds	r3, #1
 8018638:	600b      	str	r3, [r1, #0]
 801863a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801863e:	680c      	ldr	r4, [r1, #0]
 8018640:	b134      	cbz	r4, 8018650 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018642:	7824      	ldrb	r4, [r4, #0]
 8018644:	e7cc      	b.n	80185e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018646:	680b      	ldr	r3, [r1, #0]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d0f6      	beq.n	801863a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801864c:	781c      	ldrb	r4, [r3, #0]
 801864e:	e7d7      	b.n	8018600 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018650:	2300      	movs	r3, #0
 8018652:	6033      	str	r3, [r6, #0]
 8018654:	220a      	movs	r2, #10
 8018656:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801865a:	fa1f f38c 	uxth.w	r3, ip
 801865e:	2b09      	cmp	r3, #9
 8018660:	d8ce      	bhi.n	8018600 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018662:	6833      	ldr	r3, [r6, #0]
 8018664:	fb02 c303 	mla	r3, r2, r3, ip
 8018668:	6033      	str	r3, [r6, #0]
 801866a:	6803      	ldr	r3, [r0, #0]
 801866c:	b10b      	cbz	r3, 8018672 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801866e:	3302      	adds	r3, #2
 8018670:	6003      	str	r3, [r0, #0]
 8018672:	680b      	ldr	r3, [r1, #0]
 8018674:	b10b      	cbz	r3, 801867a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8018676:	3301      	adds	r3, #1
 8018678:	600b      	str	r3, [r1, #0]
 801867a:	6803      	ldr	r3, [r0, #0]
 801867c:	b10b      	cbz	r3, 8018682 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801867e:	881c      	ldrh	r4, [r3, #0]
 8018680:	e7e9      	b.n	8018656 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018682:	680c      	ldr	r4, [r1, #0]
 8018684:	2c00      	cmp	r4, #0
 8018686:	d0e6      	beq.n	8018656 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8018688:	7824      	ldrb	r4, [r4, #0]
 801868a:	e7e4      	b.n	8018656 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801868c:	680b      	ldr	r3, [r1, #0]
 801868e:	b10b      	cbz	r3, 8018694 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018690:	781b      	ldrb	r3, [r3, #0]
 8018692:	e7c5      	b.n	8018620 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8018694:	2200      	movs	r2, #0
 8018696:	602a      	str	r2, [r5, #0]
 8018698:	240a      	movs	r4, #10
 801869a:	3b30      	subs	r3, #48	; 0x30
 801869c:	b29e      	uxth	r6, r3
 801869e:	2e09      	cmp	r6, #9
 80186a0:	682a      	ldr	r2, [r5, #0]
 80186a2:	d813      	bhi.n	80186cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 80186a4:	fb04 3302 	mla	r3, r4, r2, r3
 80186a8:	602b      	str	r3, [r5, #0]
 80186aa:	6803      	ldr	r3, [r0, #0]
 80186ac:	b10b      	cbz	r3, 80186b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 80186ae:	3302      	adds	r3, #2
 80186b0:	6003      	str	r3, [r0, #0]
 80186b2:	680b      	ldr	r3, [r1, #0]
 80186b4:	b10b      	cbz	r3, 80186ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 80186b6:	3301      	adds	r3, #1
 80186b8:	600b      	str	r3, [r1, #0]
 80186ba:	6803      	ldr	r3, [r0, #0]
 80186bc:	b10b      	cbz	r3, 80186c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 80186be:	881b      	ldrh	r3, [r3, #0]
 80186c0:	e7eb      	b.n	801869a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80186c2:	680b      	ldr	r3, [r1, #0]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d0e8      	beq.n	801869a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80186c8:	781b      	ldrb	r3, [r3, #0]
 80186ca:	e7e6      	b.n	801869a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80186cc:	2a06      	cmp	r2, #6
 80186ce:	bfa8      	it	ge
 80186d0:	2206      	movge	r2, #6
 80186d2:	602a      	str	r2, [r5, #0]
 80186d4:	e7b1      	b.n	801863a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

080186d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 80186d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186da:	b0a3      	sub	sp, #140	; 0x8c
 80186dc:	2600      	movs	r6, #0
 80186de:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80186e2:	4607      	mov	r7, r0
 80186e4:	4688      	mov	r8, r1
 80186e6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80186ea:	4631      	mov	r1, r6
 80186ec:	2242      	movs	r2, #66	; 0x42
 80186ee:	4648      	mov	r0, r9
 80186f0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80186f2:	960d      	str	r6, [sp, #52]	; 0x34
 80186f4:	f00e fba1 	bl	8026e3a <memset>
 80186f8:	b15f      	cbz	r7, 8018712 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 80186fa:	f108 3aff 	add.w	sl, r8, #4294967295
 80186fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018700:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018702:	b152      	cbz	r2, 801871a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8018704:	8812      	ldrh	r2, [r2, #0]
 8018706:	b10a      	cbz	r2, 801870c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018708:	459a      	cmp	sl, r3
 801870a:	dc2e      	bgt.n	801876a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801870c:	2200      	movs	r2, #0
 801870e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018712:	4638      	mov	r0, r7
 8018714:	b023      	add	sp, #140	; 0x8c
 8018716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801871a:	9a08      	ldr	r2, [sp, #32]
 801871c:	2a00      	cmp	r2, #0
 801871e:	d0f5      	beq.n	801870c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8018720:	7812      	ldrb	r2, [r2, #0]
 8018722:	e7f0      	b.n	8018706 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8018724:	2d00      	cmp	r5, #0
 8018726:	d0ea      	beq.n	80186fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018728:	782a      	ldrb	r2, [r5, #0]
 801872a:	b142      	cbz	r2, 801873e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801872c:	2a25      	cmp	r2, #37	; 0x25
 801872e:	d001      	beq.n	8018734 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8018730:	459a      	cmp	sl, r3
 8018732:	dc08      	bgt.n	8018746 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8018734:	f1bb 0f00 	cmp.w	fp, #0
 8018738:	d121      	bne.n	801877e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801873a:	2d00      	cmp	r5, #0
 801873c:	d0df      	beq.n	80186fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801873e:	782a      	ldrb	r2, [r5, #0]
 8018740:	f04f 0b00 	mov.w	fp, #0
 8018744:	e01d      	b.n	8018782 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8018746:	f1bb 0f00 	cmp.w	fp, #0
 801874a:	d078      	beq.n	801883e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 801874c:	f8bb 2000 	ldrh.w	r2, [fp]
 8018750:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8018754:	f1bb 0f00 	cmp.w	fp, #0
 8018758:	d002      	beq.n	8018760 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801875a:	f10b 0202 	add.w	r2, fp, #2
 801875e:	9209      	str	r2, [sp, #36]	; 0x24
 8018760:	b10d      	cbz	r5, 8018766 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8018762:	3501      	adds	r5, #1
 8018764:	9508      	str	r5, [sp, #32]
 8018766:	3301      	adds	r3, #1
 8018768:	930d      	str	r3, [sp, #52]	; 0x34
 801876a:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801876e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018770:	f1bb 0f00 	cmp.w	fp, #0
 8018774:	d0d6      	beq.n	8018724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8018776:	f8bb 2000 	ldrh.w	r2, [fp]
 801877a:	2a00      	cmp	r2, #0
 801877c:	d1d6      	bne.n	801872c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801877e:	f8bb 2000 	ldrh.w	r2, [fp]
 8018782:	2a00      	cmp	r2, #0
 8018784:	d0bb      	beq.n	80186fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018786:	459a      	cmp	sl, r3
 8018788:	ddb9      	ble.n	80186fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801878a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801878e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8018792:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8018796:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801879a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801879e:	960e      	str	r6, [sp, #56]	; 0x38
 80187a0:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 80187a4:	960f      	str	r6, [sp, #60]	; 0x3c
 80187a6:	f1bb 0f00 	cmp.w	fp, #0
 80187aa:	d002      	beq.n	80187b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 80187ac:	f10b 0302 	add.w	r3, fp, #2
 80187b0:	9309      	str	r3, [sp, #36]	; 0x24
 80187b2:	b10d      	cbz	r5, 80187b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 80187b4:	1c6b      	adds	r3, r5, #1
 80187b6:	9308      	str	r3, [sp, #32]
 80187b8:	ab0f      	add	r3, sp, #60	; 0x3c
 80187ba:	9305      	str	r3, [sp, #20]
 80187bc:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 80187c0:	9304      	str	r3, [sp, #16]
 80187c2:	ab0e      	add	r3, sp, #56	; 0x38
 80187c4:	9303      	str	r3, [sp, #12]
 80187c6:	ab0c      	add	r3, sp, #48	; 0x30
 80187c8:	9302      	str	r3, [sp, #8]
 80187ca:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80187ce:	9301      	str	r3, [sp, #4]
 80187d0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80187d4:	9300      	str	r3, [sp, #0]
 80187d6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80187da:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 80187de:	a908      	add	r1, sp, #32
 80187e0:	a809      	add	r0, sp, #36	; 0x24
 80187e2:	f7ff fea8 	bl	8018536 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 80187e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	bfbe      	ittt	lt
 80187ec:	6823      	ldrlt	r3, [r4, #0]
 80187ee:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80187f2:	930e      	strlt	r3, [sp, #56]	; 0x38
 80187f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80187f6:	bfb8      	it	lt
 80187f8:	3404      	addlt	r4, #4
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	bfb8      	it	lt
 80187fe:	6823      	ldrlt	r3, [r4, #0]
 8018800:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8018804:	bfbe      	ittt	lt
 8018806:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801880a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801880c:	3404      	addlt	r4, #4
 801880e:	b1d9      	cbz	r1, 8018848 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 8018810:	880b      	ldrh	r3, [r1, #0]
 8018812:	2b69      	cmp	r3, #105	; 0x69
 8018814:	d01f      	beq.n	8018856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018816:	d82f      	bhi.n	8018878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 8018818:	2b58      	cmp	r3, #88	; 0x58
 801881a:	d01c      	beq.n	8018856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801881c:	d818      	bhi.n	8018850 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801881e:	2b25      	cmp	r3, #37	; 0x25
 8018820:	d034      	beq.n	801888c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 8018822:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8018826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018828:	f1bb 0f00 	cmp.w	fp, #0
 801882c:	f000 80b8 	beq.w	80189a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 8018830:	f8bb 5000 	ldrh.w	r5, [fp]
 8018834:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8018838:	3301      	adds	r3, #1
 801883a:	930d      	str	r3, [sp, #52]	; 0x34
 801883c:	e029      	b.n	8018892 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801883e:	b10d      	cbz	r5, 8018844 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 8018840:	782a      	ldrb	r2, [r5, #0]
 8018842:	e785      	b.n	8018750 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8018844:	462a      	mov	r2, r5
 8018846:	e783      	b.n	8018750 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8018848:	2a00      	cmp	r2, #0
 801884a:	d0ea      	beq.n	8018822 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801884c:	7813      	ldrb	r3, [r2, #0]
 801884e:	e7e0      	b.n	8018812 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 8018850:	3b63      	subs	r3, #99	; 0x63
 8018852:	2b01      	cmp	r3, #1
 8018854:	d8e5      	bhi.n	8018822 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8018856:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801885a:	b329      	cbz	r1, 80188a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 801885c:	880b      	ldrh	r3, [r1, #0]
 801885e:	2b69      	cmp	r3, #105	; 0x69
 8018860:	d063      	beq.n	801892a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8018862:	d825      	bhi.n	80188b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 8018864:	2b63      	cmp	r3, #99	; 0x63
 8018866:	d038      	beq.n	80188da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 8018868:	2b64      	cmp	r3, #100	; 0x64
 801886a:	d05e      	beq.n	801892a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801886c:	2b58      	cmp	r3, #88	; 0x58
 801886e:	d07b      	beq.n	8018968 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 8018870:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8018874:	4625      	mov	r5, r4
 8018876:	e036      	b.n	80188e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8018878:	2b73      	cmp	r3, #115	; 0x73
 801887a:	d0ec      	beq.n	8018856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801887c:	d802      	bhi.n	8018884 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 801887e:	2b6f      	cmp	r3, #111	; 0x6f
 8018880:	d1cf      	bne.n	8018822 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8018882:	e7e8      	b.n	8018856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018884:	2b75      	cmp	r3, #117	; 0x75
 8018886:	d0e6      	beq.n	8018856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8018888:	2b78      	cmp	r3, #120	; 0x78
 801888a:	e7f9      	b.n	8018880 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 801888c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801888e:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8018892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018894:	b10b      	cbz	r3, 801889a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 8018896:	3302      	adds	r3, #2
 8018898:	9309      	str	r3, [sp, #36]	; 0x24
 801889a:	9b08      	ldr	r3, [sp, #32]
 801889c:	2b00      	cmp	r3, #0
 801889e:	f43f af2e 	beq.w	80186fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80188a2:	3301      	adds	r3, #1
 80188a4:	9308      	str	r3, [sp, #32]
 80188a6:	e72a      	b.n	80186fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80188a8:	2a00      	cmp	r2, #0
 80188aa:	d0e1      	beq.n	8018870 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80188ac:	7813      	ldrb	r3, [r2, #0]
 80188ae:	e7d6      	b.n	801885e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 80188b0:	2b73      	cmp	r3, #115	; 0x73
 80188b2:	d036      	beq.n	8018922 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 80188b4:	d807      	bhi.n	80188c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 80188b6:	2b6f      	cmp	r3, #111	; 0x6f
 80188b8:	d1da      	bne.n	8018870 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80188ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80188bc:	1d25      	adds	r5, r4, #4
 80188be:	eba8 0202 	sub.w	r2, r8, r2
 80188c2:	2308      	movs	r3, #8
 80188c4:	e04a      	b.n	801895c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 80188c6:	2b75      	cmp	r3, #117	; 0x75
 80188c8:	d043      	beq.n	8018952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 80188ca:	2b78      	cmp	r3, #120	; 0x78
 80188cc:	d1d0      	bne.n	8018870 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80188ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80188d0:	1d25      	adds	r5, r4, #4
 80188d2:	eba8 0202 	sub.w	r2, r8, r2
 80188d6:	2310      	movs	r3, #16
 80188d8:	e040      	b.n	801895c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 80188da:	6823      	ldr	r3, [r4, #0]
 80188dc:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80188e0:	1d25      	adds	r5, r4, #4
 80188e2:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80188e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188e8:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d052      	beq.n	8018996 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 80188f0:	881a      	ldrh	r2, [r3, #0]
 80188f2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80188f6:	a80d      	add	r0, sp, #52	; 0x34
 80188f8:	9005      	str	r0, [sp, #20]
 80188fa:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 80188fe:	9004      	str	r0, [sp, #16]
 8018900:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018902:	9003      	str	r0, [sp, #12]
 8018904:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8018908:	9002      	str	r0, [sp, #8]
 801890a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801890c:	9001      	str	r0, [sp, #4]
 801890e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8018912:	9000      	str	r0, [sp, #0]
 8018914:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8018918:	a810      	add	r0, sp, #64	; 0x40
 801891a:	f7ff fd49 	bl	80183b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801891e:	462c      	mov	r4, r5
 8018920:	e7b7      	b.n	8018892 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 8018922:	6823      	ldr	r3, [r4, #0]
 8018924:	1d25      	adds	r5, r4, #4
 8018926:	9310      	str	r3, [sp, #64]	; 0x40
 8018928:	e7dd      	b.n	80188e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801892a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801892c:	6820      	ldr	r0, [r4, #0]
 801892e:	eba8 0202 	sub.w	r2, r8, r2
 8018932:	230a      	movs	r3, #10
 8018934:	b292      	uxth	r2, r2
 8018936:	4649      	mov	r1, r9
 8018938:	f7ff fcf0 	bl	801831c <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801893c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018940:	2b2d      	cmp	r3, #45	; 0x2d
 8018942:	f104 0504 	add.w	r5, r4, #4
 8018946:	d1ce      	bne.n	80188e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8018948:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801894c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801894e:	3302      	adds	r3, #2
 8018950:	e7e9      	b.n	8018926 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 8018952:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018954:	1d25      	adds	r5, r4, #4
 8018956:	eba8 0202 	sub.w	r2, r8, r2
 801895a:	230a      	movs	r3, #10
 801895c:	b292      	uxth	r2, r2
 801895e:	4649      	mov	r1, r9
 8018960:	6820      	ldr	r0, [r4, #0]
 8018962:	f7ff fd07 	bl	8018374 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8018966:	e7be      	b.n	80188e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8018968:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801896a:	6820      	ldr	r0, [r4, #0]
 801896c:	eba8 0202 	sub.w	r2, r8, r2
 8018970:	b292      	uxth	r2, r2
 8018972:	2310      	movs	r3, #16
 8018974:	4649      	mov	r1, r9
 8018976:	f7ff fcfd 	bl	8018374 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801897a:	1d25      	adds	r5, r4, #4
 801897c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8018980:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8018984:	2b00      	cmp	r3, #0
 8018986:	d0ae      	beq.n	80188e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8018988:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801898c:	2919      	cmp	r1, #25
 801898e:	d8f7      	bhi.n	8018980 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8018990:	3b20      	subs	r3, #32
 8018992:	8013      	strh	r3, [r2, #0]
 8018994:	e7f4      	b.n	8018980 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8018996:	9a08      	ldr	r2, [sp, #32]
 8018998:	2a00      	cmp	r2, #0
 801899a:	d0aa      	beq.n	80188f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801899c:	7812      	ldrb	r2, [r2, #0]
 801899e:	e7a8      	b.n	80188f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 80189a0:	2d00      	cmp	r5, #0
 80189a2:	f43f af47 	beq.w	8018834 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 80189a6:	782d      	ldrb	r5, [r5, #0]
 80189a8:	e744      	b.n	8018834 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

080189aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80189aa:	b507      	push	{r0, r1, r2, lr}
 80189ac:	9300      	str	r3, [sp, #0]
 80189ae:	4613      	mov	r3, r2
 80189b0:	2200      	movs	r2, #0
 80189b2:	f7ff fe90 	bl	80186d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80189b6:	b003      	add	sp, #12
 80189b8:	f85d fb04 	ldr.w	pc, [sp], #4

080189bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80189bc:	b40c      	push	{r2, r3}
 80189be:	b507      	push	{r0, r1, r2, lr}
 80189c0:	ab04      	add	r3, sp, #16
 80189c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80189c6:	9301      	str	r3, [sp, #4]
 80189c8:	f7ff ffef 	bl	80189aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80189cc:	b003      	add	sp, #12
 80189ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80189d2:	b002      	add	sp, #8
 80189d4:	4770      	bx	lr
	...

080189d8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80189d8:	4b01      	ldr	r3, [pc, #4]	; (80189e0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80189da:	6018      	str	r0, [r3, #0]
 80189dc:	4770      	bx	lr
 80189de:	bf00      	nop
 80189e0:	20014678 	.word	0x20014678

080189e4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80189e4:	4b06      	ldr	r3, [pc, #24]	; (8018a00 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80189e6:	881a      	ldrh	r2, [r3, #0]
 80189e8:	4282      	cmp	r2, r0
 80189ea:	d807      	bhi.n	80189fc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80189ec:	4b05      	ldr	r3, [pc, #20]	; (8018a04 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80189ee:	881b      	ldrh	r3, [r3, #0]
 80189f0:	4413      	add	r3, r2
 80189f2:	4298      	cmp	r0, r3
 80189f4:	bfac      	ite	ge
 80189f6:	2000      	movge	r0, #0
 80189f8:	2001      	movlt	r0, #1
 80189fa:	4770      	bx	lr
 80189fc:	2000      	movs	r0, #0
 80189fe:	4770      	bx	lr
 8018a00:	20014698 	.word	0x20014698
 8018a04:	2001469c 	.word	0x2001469c

08018a08 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8018a08:	b508      	push	{r3, lr}
 8018a0a:	4601      	mov	r1, r0
 8018a0c:	f7ff ffea 	bl	80189e4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8018a10:	b118      	cbz	r0, 8018a1a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8018a12:	4b02      	ldr	r3, [pc, #8]	; (8018a1c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8018a1a:	bd08      	pop	{r3, pc}
 8018a1c:	2001467c 	.word	0x2001467c

08018a20 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8018a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a22:	4c24      	ldr	r4, [pc, #144]	; (8018ab4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8018a24:	6823      	ldr	r3, [r4, #0]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d042      	beq.n	8018ab0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018a2a:	4a23      	ldr	r2, [pc, #140]	; (8018ab8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8018a2c:	4d23      	ldr	r5, [pc, #140]	; (8018abc <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8018a2e:	8811      	ldrh	r1, [r2, #0]
 8018a30:	f8b5 c000 	ldrh.w	ip, [r5]
 8018a34:	4822      	ldr	r0, [pc, #136]	; (8018ac0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8018a36:	4461      	add	r1, ip
 8018a38:	1c4a      	adds	r2, r1, #1
 8018a3a:	f022 0201 	bic.w	r2, r2, #1
 8018a3e:	008f      	lsls	r7, r1, #2
 8018a40:	0412      	lsls	r2, r2, #16
 8018a42:	19de      	adds	r6, r3, r7
 8018a44:	0c12      	lsrs	r2, r2, #16
 8018a46:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8018a4a:	6006      	str	r6, [r0, #0]
 8018a4c:	4e1d      	ldr	r6, [pc, #116]	; (8018ac4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8018a4e:	19da      	adds	r2, r3, r7
 8018a50:	6032      	str	r2, [r6, #0]
 8018a52:	220e      	movs	r2, #14
 8018a54:	fb02 f20c 	mul.w	r2, r2, ip
 8018a58:	3203      	adds	r2, #3
 8018a5a:	f022 0203 	bic.w	r2, r2, #3
 8018a5e:	443a      	add	r2, r7
 8018a60:	4f19      	ldr	r7, [pc, #100]	; (8018ac8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8018a62:	4413      	add	r3, r2
 8018a64:	603b      	str	r3, [r7, #0]
 8018a66:	4f19      	ldr	r7, [pc, #100]	; (8018acc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8018a68:	2300      	movs	r3, #0
 8018a6a:	803b      	strh	r3, [r7, #0]
 8018a6c:	4f18      	ldr	r7, [pc, #96]	; (8018ad0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8018a6e:	683f      	ldr	r7, [r7, #0]
 8018a70:	1aba      	subs	r2, r7, r2
 8018a72:	4f18      	ldr	r7, [pc, #96]	; (8018ad4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8018a74:	603a      	str	r2, [r7, #0]
 8018a76:	4a18      	ldr	r2, [pc, #96]	; (8018ad8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8018a78:	469c      	mov	ip, r3
 8018a7a:	8013      	strh	r3, [r2, #0]
 8018a7c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8018a80:	428b      	cmp	r3, r1
 8018a82:	d10d      	bne.n	8018aa0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8018a84:	882d      	ldrh	r5, [r5, #0]
 8018a86:	6830      	ldr	r0, [r6, #0]
 8018a88:	2300      	movs	r3, #0
 8018a8a:	240e      	movs	r4, #14
 8018a8c:	429d      	cmp	r5, r3
 8018a8e:	d90f      	bls.n	8018ab0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018a90:	fb04 0203 	mla	r2, r4, r3, r0
 8018a94:	3301      	adds	r3, #1
 8018a96:	7b11      	ldrb	r1, [r2, #12]
 8018a98:	f36f 1145 	bfc	r1, #5, #1
 8018a9c:	7311      	strb	r1, [r2, #12]
 8018a9e:	e7f5      	b.n	8018a8c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8018aa0:	6822      	ldr	r2, [r4, #0]
 8018aa2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8018aa6:	6802      	ldr	r2, [r0, #0]
 8018aa8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8018aac:	3301      	adds	r3, #1
 8018aae:	e7e7      	b.n	8018a80 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8018ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ab2:	bf00      	nop
 8018ab4:	2001467c 	.word	0x2001467c
 8018ab8:	20014698 	.word	0x20014698
 8018abc:	2001469c 	.word	0x2001469c
 8018ac0:	20014690 	.word	0x20014690
 8018ac4:	20014680 	.word	0x20014680
 8018ac8:	20014688 	.word	0x20014688
 8018acc:	2001469a 	.word	0x2001469a
 8018ad0:	20014684 	.word	0x20014684
 8018ad4:	20014694 	.word	0x20014694
 8018ad8:	2001468c 	.word	0x2001468c

08018adc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8018adc:	4b06      	ldr	r3, [pc, #24]	; (8018af8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	b943      	cbnz	r3, 8018af4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8018ae2:	b139      	cbz	r1, 8018af4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8018ae4:	4b05      	ldr	r3, [pc, #20]	; (8018afc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8018ae6:	801a      	strh	r2, [r3, #0]
 8018ae8:	4b05      	ldr	r3, [pc, #20]	; (8018b00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8018aea:	6019      	str	r1, [r3, #0]
 8018aec:	4b05      	ldr	r3, [pc, #20]	; (8018b04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8018aee:	6018      	str	r0, [r3, #0]
 8018af0:	f7ff bf96 	b.w	8018a20 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8018af4:	4770      	bx	lr
 8018af6:	bf00      	nop
 8018af8:	20014688 	.word	0x20014688
 8018afc:	2001469c 	.word	0x2001469c
 8018b00:	20014684 	.word	0x20014684
 8018b04:	2001467c 	.word	0x2001467c

08018b08 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8018b08:	b470      	push	{r4, r5, r6}
 8018b0a:	4c07      	ldr	r4, [pc, #28]	; (8018b28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8018b0c:	6826      	ldr	r6, [r4, #0]
 8018b0e:	4605      	mov	r5, r0
 8018b10:	4610      	mov	r0, r2
 8018b12:	9a03      	ldr	r2, [sp, #12]
 8018b14:	b936      	cbnz	r6, 8018b24 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8018b16:	6025      	str	r5, [r4, #0]
 8018b18:	4c04      	ldr	r4, [pc, #16]	; (8018b2c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8018b1a:	8021      	strh	r1, [r4, #0]
 8018b1c:	bc70      	pop	{r4, r5, r6}
 8018b1e:	4619      	mov	r1, r3
 8018b20:	f7ff bfdc 	b.w	8018adc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8018b24:	bc70      	pop	{r4, r5, r6}
 8018b26:	4770      	bx	lr
 8018b28:	200146a0 	.word	0x200146a0
 8018b2c:	20014698 	.word	0x20014698

08018b30 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8018b30:	4a12      	ldr	r2, [pc, #72]	; (8018b7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8018b32:	8803      	ldrh	r3, [r0, #0]
 8018b34:	8812      	ldrh	r2, [r2, #0]
 8018b36:	4293      	cmp	r3, r2
 8018b38:	d207      	bcs.n	8018b4a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8018b3a:	4a11      	ldr	r2, [pc, #68]	; (8018b80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8018b3c:	6812      	ldr	r2, [r2, #0]
 8018b3e:	2114      	movs	r1, #20
 8018b40:	fb01 2303 	mla	r3, r1, r3, r2
 8018b44:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8018b48:	4770      	bx	lr
 8018b4a:	490e      	ldr	r1, [pc, #56]	; (8018b84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8018b4c:	8809      	ldrh	r1, [r1, #0]
 8018b4e:	4411      	add	r1, r2
 8018b50:	428b      	cmp	r3, r1
 8018b52:	da04      	bge.n	8018b5e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8018b54:	1a9b      	subs	r3, r3, r2
 8018b56:	4a0c      	ldr	r2, [pc, #48]	; (8018b88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8018b58:	210e      	movs	r1, #14
 8018b5a:	6812      	ldr	r2, [r2, #0]
 8018b5c:	e7f0      	b.n	8018b40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8018b5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018b62:	4293      	cmp	r3, r2
 8018b64:	d108      	bne.n	8018b78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8018b66:	4b09      	ldr	r3, [pc, #36]	; (8018b8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8018b68:	781b      	ldrb	r3, [r3, #0]
 8018b6a:	b91b      	cbnz	r3, 8018b74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8018b6c:	4b08      	ldr	r3, [pc, #32]	; (8018b90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8018b6e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018b72:	4770      	bx	lr
 8018b74:	4b07      	ldr	r3, [pc, #28]	; (8018b94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8018b76:	e7fa      	b.n	8018b6e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8018b78:	2000      	movs	r0, #0
 8018b7a:	4770      	bx	lr
 8018b7c:	20014698 	.word	0x20014698
 8018b80:	200146a0 	.word	0x200146a0
 8018b84:	2001469c 	.word	0x2001469c
 8018b88:	20014680 	.word	0x20014680
 8018b8c:	20014608 	.word	0x20014608
 8018b90:	2001460a 	.word	0x2001460a
 8018b94:	2001460c 	.word	0x2001460c

08018b98 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8018b98:	4a12      	ldr	r2, [pc, #72]	; (8018be4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8018b9a:	8803      	ldrh	r3, [r0, #0]
 8018b9c:	8812      	ldrh	r2, [r2, #0]
 8018b9e:	4293      	cmp	r3, r2
 8018ba0:	d207      	bcs.n	8018bb2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8018ba2:	4a11      	ldr	r2, [pc, #68]	; (8018be8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8018ba4:	6812      	ldr	r2, [r2, #0]
 8018ba6:	2114      	movs	r1, #20
 8018ba8:	fb01 2303 	mla	r3, r1, r3, r2
 8018bac:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8018bb0:	4770      	bx	lr
 8018bb2:	490e      	ldr	r1, [pc, #56]	; (8018bec <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8018bb4:	8809      	ldrh	r1, [r1, #0]
 8018bb6:	4411      	add	r1, r2
 8018bb8:	428b      	cmp	r3, r1
 8018bba:	da04      	bge.n	8018bc6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8018bbc:	1a9b      	subs	r3, r3, r2
 8018bbe:	4a0c      	ldr	r2, [pc, #48]	; (8018bf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8018bc0:	210e      	movs	r1, #14
 8018bc2:	6812      	ldr	r2, [r2, #0]
 8018bc4:	e7f0      	b.n	8018ba8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8018bc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018bca:	4293      	cmp	r3, r2
 8018bcc:	d108      	bne.n	8018be0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8018bce:	4b09      	ldr	r3, [pc, #36]	; (8018bf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8018bd0:	781b      	ldrb	r3, [r3, #0]
 8018bd2:	b91b      	cbnz	r3, 8018bdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8018bd4:	4b08      	ldr	r3, [pc, #32]	; (8018bf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8018bd6:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018bda:	4770      	bx	lr
 8018bdc:	4b07      	ldr	r3, [pc, #28]	; (8018bfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8018bde:	e7fa      	b.n	8018bd6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8018be0:	2000      	movs	r0, #0
 8018be2:	4770      	bx	lr
 8018be4:	20014698 	.word	0x20014698
 8018be8:	200146a0 	.word	0x200146a0
 8018bec:	2001469c 	.word	0x2001469c
 8018bf0:	20014680 	.word	0x20014680
 8018bf4:	20014608 	.word	0x20014608
 8018bf8:	2001460c 	.word	0x2001460c
 8018bfc:	2001460a 	.word	0x2001460a

08018c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8018c00:	b510      	push	{r4, lr}
 8018c02:	4a1f      	ldr	r2, [pc, #124]	; (8018c80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8018c04:	880b      	ldrh	r3, [r1, #0]
 8018c06:	8812      	ldrh	r2, [r2, #0]
 8018c08:	4293      	cmp	r3, r2
 8018c0a:	d213      	bcs.n	8018c34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8018c0c:	4a1d      	ldr	r2, [pc, #116]	; (8018c84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8018c0e:	6812      	ldr	r2, [r2, #0]
 8018c10:	2114      	movs	r1, #20
 8018c12:	fb01 2303 	mla	r3, r1, r3, r2
 8018c16:	8a1a      	ldrh	r2, [r3, #16]
 8018c18:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8018c1c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8018c20:	8a5b      	ldrh	r3, [r3, #18]
 8018c22:	8004      	strh	r4, [r0, #0]
 8018c24:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c2c:	8041      	strh	r1, [r0, #2]
 8018c2e:	8082      	strh	r2, [r0, #4]
 8018c30:	80c3      	strh	r3, [r0, #6]
 8018c32:	e00e      	b.n	8018c52 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018c34:	4914      	ldr	r1, [pc, #80]	; (8018c88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8018c36:	8809      	ldrh	r1, [r1, #0]
 8018c38:	4411      	add	r1, r2
 8018c3a:	428b      	cmp	r3, r1
 8018c3c:	da0a      	bge.n	8018c54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8018c3e:	1a9b      	subs	r3, r3, r2
 8018c40:	4a12      	ldr	r2, [pc, #72]	; (8018c8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8018c42:	6812      	ldr	r2, [r2, #0]
 8018c44:	210e      	movs	r1, #14
 8018c46:	fb01 2303 	mla	r3, r1, r3, r2
 8018c4a:	681a      	ldr	r2, [r3, #0]
 8018c4c:	6002      	str	r2, [r0, #0]
 8018c4e:	685a      	ldr	r2, [r3, #4]
 8018c50:	6042      	str	r2, [r0, #4]
 8018c52:	bd10      	pop	{r4, pc}
 8018c54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018c58:	4293      	cmp	r3, r2
 8018c5a:	d10b      	bne.n	8018c74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8018c5c:	4b0c      	ldr	r3, [pc, #48]	; (8018c90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8018c5e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018c62:	4b0c      	ldr	r3, [pc, #48]	; (8018c94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8018c64:	8081      	strh	r1, [r0, #4]
 8018c66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018c6a:	80c2      	strh	r2, [r0, #6]
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	8003      	strh	r3, [r0, #0]
 8018c70:	8043      	strh	r3, [r0, #2]
 8018c72:	e7ee      	b.n	8018c52 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018c74:	2300      	movs	r3, #0
 8018c76:	8003      	strh	r3, [r0, #0]
 8018c78:	8043      	strh	r3, [r0, #2]
 8018c7a:	8083      	strh	r3, [r0, #4]
 8018c7c:	e7d8      	b.n	8018c30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8018c7e:	bf00      	nop
 8018c80:	20014698 	.word	0x20014698
 8018c84:	200146a0 	.word	0x200146a0
 8018c88:	2001469c 	.word	0x2001469c
 8018c8c:	20014680 	.word	0x20014680
 8018c90:	20014604 	.word	0x20014604
 8018c94:	20014606 	.word	0x20014606

08018c98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8018c98:	4a17      	ldr	r2, [pc, #92]	; (8018cf8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8018c9a:	8803      	ldrh	r3, [r0, #0]
 8018c9c:	8812      	ldrh	r2, [r2, #0]
 8018c9e:	4293      	cmp	r3, r2
 8018ca0:	d213      	bcs.n	8018cca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8018ca2:	4a16      	ldr	r2, [pc, #88]	; (8018cfc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8018ca4:	6812      	ldr	r2, [r2, #0]
 8018ca6:	2114      	movs	r1, #20
 8018ca8:	fb01 2303 	mla	r3, r1, r3, r2
 8018cac:	8a1a      	ldrh	r2, [r3, #16]
 8018cae:	8919      	ldrh	r1, [r3, #8]
 8018cb0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018cb4:	428a      	cmp	r2, r1
 8018cb6:	db1d      	blt.n	8018cf4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8018cb8:	8a58      	ldrh	r0, [r3, #18]
 8018cba:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8018cbe:	895b      	ldrh	r3, [r3, #10]
 8018cc0:	4298      	cmp	r0, r3
 8018cc2:	bfac      	ite	ge
 8018cc4:	2000      	movge	r0, #0
 8018cc6:	2001      	movlt	r0, #1
 8018cc8:	4770      	bx	lr
 8018cca:	490d      	ldr	r1, [pc, #52]	; (8018d00 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8018ccc:	8809      	ldrh	r1, [r1, #0]
 8018cce:	4411      	add	r1, r2
 8018cd0:	428b      	cmp	r3, r1
 8018cd2:	da0d      	bge.n	8018cf0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8018cd4:	1a9b      	subs	r3, r3, r2
 8018cd6:	4a0b      	ldr	r2, [pc, #44]	; (8018d04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8018cd8:	6812      	ldr	r2, [r2, #0]
 8018cda:	210e      	movs	r1, #14
 8018cdc:	fb01 2303 	mla	r3, r1, r3, r2
 8018ce0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8018ce4:	891a      	ldrh	r2, [r3, #8]
 8018ce6:	4291      	cmp	r1, r2
 8018ce8:	db04      	blt.n	8018cf4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8018cea:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8018cee:	e7e6      	b.n	8018cbe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8018cf0:	2000      	movs	r0, #0
 8018cf2:	4770      	bx	lr
 8018cf4:	2001      	movs	r0, #1
 8018cf6:	4770      	bx	lr
 8018cf8:	20014698 	.word	0x20014698
 8018cfc:	200146a0 	.word	0x200146a0
 8018d00:	2001469c 	.word	0x2001469c
 8018d04:	20014680 	.word	0x20014680

08018d08 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8018d08:	4a12      	ldr	r2, [pc, #72]	; (8018d54 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8018d0a:	8803      	ldrh	r3, [r0, #0]
 8018d0c:	8811      	ldrh	r1, [r2, #0]
 8018d0e:	428b      	cmp	r3, r1
 8018d10:	d20b      	bcs.n	8018d2a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8018d12:	4a11      	ldr	r2, [pc, #68]	; (8018d58 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018d14:	6812      	ldr	r2, [r2, #0]
 8018d16:	b112      	cbz	r2, 8018d1e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8018d18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018d1c:	b9c0      	cbnz	r0, 8018d50 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8018d1e:	4a0f      	ldr	r2, [pc, #60]	; (8018d5c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8018d20:	6811      	ldr	r1, [r2, #0]
 8018d22:	2214      	movs	r2, #20
 8018d24:	4353      	muls	r3, r2
 8018d26:	58c8      	ldr	r0, [r1, r3]
 8018d28:	4770      	bx	lr
 8018d2a:	4a0d      	ldr	r2, [pc, #52]	; (8018d60 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8018d2c:	8812      	ldrh	r2, [r2, #0]
 8018d2e:	440a      	add	r2, r1
 8018d30:	4293      	cmp	r3, r2
 8018d32:	da04      	bge.n	8018d3e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8018d34:	4a08      	ldr	r2, [pc, #32]	; (8018d58 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018d36:	6812      	ldr	r2, [r2, #0]
 8018d38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018d3c:	4770      	bx	lr
 8018d3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018d42:	4293      	cmp	r3, r2
 8018d44:	d103      	bne.n	8018d4e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8018d46:	4b07      	ldr	r3, [pc, #28]	; (8018d64 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8018d4c:	4770      	bx	lr
 8018d4e:	2000      	movs	r0, #0
 8018d50:	4770      	bx	lr
 8018d52:	bf00      	nop
 8018d54:	20014698 	.word	0x20014698
 8018d58:	2001467c 	.word	0x2001467c
 8018d5c:	200146a0 	.word	0x200146a0
 8018d60:	2001469c 	.word	0x2001469c
 8018d64:	20014610 	.word	0x20014610

08018d68 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8018d68:	4b24      	ldr	r3, [pc, #144]	; (8018dfc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8018d6a:	8802      	ldrh	r2, [r0, #0]
 8018d6c:	8818      	ldrh	r0, [r3, #0]
 8018d6e:	4282      	cmp	r2, r0
 8018d70:	d221      	bcs.n	8018db6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8018d72:	4b23      	ldr	r3, [pc, #140]	; (8018e00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8018d74:	6819      	ldr	r1, [r3, #0]
 8018d76:	2314      	movs	r3, #20
 8018d78:	fb03 1302 	mla	r3, r3, r2, r1
 8018d7c:	6858      	ldr	r0, [r3, #4]
 8018d7e:	2800      	cmp	r0, #0
 8018d80:	d03a      	beq.n	8018df8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018d82:	4920      	ldr	r1, [pc, #128]	; (8018e04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018d84:	6809      	ldr	r1, [r1, #0]
 8018d86:	2900      	cmp	r1, #0
 8018d88:	d036      	beq.n	8018df8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018d8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018d8e:	2900      	cmp	r1, #0
 8018d90:	d032      	beq.n	8018df8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018d92:	891a      	ldrh	r2, [r3, #8]
 8018d94:	8958      	ldrh	r0, [r3, #10]
 8018d96:	4350      	muls	r0, r2
 8018d98:	7c5a      	ldrb	r2, [r3, #17]
 8018d9a:	7cdb      	ldrb	r3, [r3, #19]
 8018d9c:	0952      	lsrs	r2, r2, #5
 8018d9e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8018da2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8018da6:	2b0b      	cmp	r3, #11
 8018da8:	bf18      	it	ne
 8018daa:	0040      	lslne	r0, r0, #1
 8018dac:	3003      	adds	r0, #3
 8018dae:	f020 0003 	bic.w	r0, r0, #3
 8018db2:	4408      	add	r0, r1
 8018db4:	4770      	bx	lr
 8018db6:	4b14      	ldr	r3, [pc, #80]	; (8018e08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8018db8:	881b      	ldrh	r3, [r3, #0]
 8018dba:	4403      	add	r3, r0
 8018dbc:	429a      	cmp	r2, r3
 8018dbe:	da1a      	bge.n	8018df6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018dc0:	4b12      	ldr	r3, [pc, #72]	; (8018e0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	1a10      	subs	r0, r2, r0
 8018dc6:	210e      	movs	r1, #14
 8018dc8:	fb01 3000 	mla	r0, r1, r0, r3
 8018dcc:	7b03      	ldrb	r3, [r0, #12]
 8018dce:	f003 031f 	and.w	r3, r3, #31
 8018dd2:	2b0b      	cmp	r3, #11
 8018dd4:	d10b      	bne.n	8018dee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8018dd6:	8903      	ldrh	r3, [r0, #8]
 8018dd8:	8940      	ldrh	r0, [r0, #10]
 8018dda:	4358      	muls	r0, r3
 8018ddc:	4b09      	ldr	r3, [pc, #36]	; (8018e04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018dde:	6819      	ldr	r1, [r3, #0]
 8018de0:	3003      	adds	r0, #3
 8018de2:	f020 0303 	bic.w	r3, r0, #3
 8018de6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8018dea:	4418      	add	r0, r3
 8018dec:	4770      	bx	lr
 8018dee:	2b0d      	cmp	r3, #13
 8018df0:	d101      	bne.n	8018df6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018df2:	300d      	adds	r0, #13
 8018df4:	4770      	bx	lr
 8018df6:	2000      	movs	r0, #0
 8018df8:	4770      	bx	lr
 8018dfa:	bf00      	nop
 8018dfc:	20014698 	.word	0x20014698
 8018e00:	200146a0 	.word	0x200146a0
 8018e04:	2001467c 	.word	0x2001467c
 8018e08:	2001469c 	.word	0x2001469c
 8018e0c:	20014680 	.word	0x20014680

08018e10 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8018e10:	b510      	push	{r4, lr}
 8018e12:	4a17      	ldr	r2, [pc, #92]	; (8018e70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8018e14:	8803      	ldrh	r3, [r0, #0]
 8018e16:	8812      	ldrh	r2, [r2, #0]
 8018e18:	4293      	cmp	r3, r2
 8018e1a:	d20c      	bcs.n	8018e36 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8018e1c:	4a15      	ldr	r2, [pc, #84]	; (8018e74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8018e1e:	6812      	ldr	r2, [r2, #0]
 8018e20:	2114      	movs	r1, #20
 8018e22:	fb01 2303 	mla	r3, r1, r3, r2
 8018e26:	7c58      	ldrb	r0, [r3, #17]
 8018e28:	0942      	lsrs	r2, r0, #5
 8018e2a:	7cd8      	ldrb	r0, [r3, #19]
 8018e2c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8018e30:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8018e34:	bd10      	pop	{r4, pc}
 8018e36:	4910      	ldr	r1, [pc, #64]	; (8018e78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8018e38:	8809      	ldrh	r1, [r1, #0]
 8018e3a:	4411      	add	r1, r2
 8018e3c:	428b      	cmp	r3, r1
 8018e3e:	da09      	bge.n	8018e54 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8018e40:	1a9b      	subs	r3, r3, r2
 8018e42:	4a0e      	ldr	r2, [pc, #56]	; (8018e7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8018e44:	6812      	ldr	r2, [r2, #0]
 8018e46:	210e      	movs	r1, #14
 8018e48:	fb01 2303 	mla	r3, r1, r3, r2
 8018e4c:	7b18      	ldrb	r0, [r3, #12]
 8018e4e:	f000 001f 	and.w	r0, r0, #31
 8018e52:	e7ef      	b.n	8018e34 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8018e54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018e58:	4293      	cmp	r3, r2
 8018e5a:	d106      	bne.n	8018e6a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8018e5c:	f7eb f83e 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 8018e60:	6803      	ldr	r3, [r0, #0]
 8018e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e68:	4718      	bx	r3
 8018e6a:	2000      	movs	r0, #0
 8018e6c:	e7e2      	b.n	8018e34 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8018e6e:	bf00      	nop
 8018e70:	20014698 	.word	0x20014698
 8018e74:	200146a0 	.word	0x200146a0
 8018e78:	2001469c 	.word	0x2001469c
 8018e7c:	20014680 	.word	0x20014680

08018e80 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8018e80:	2010      	movs	r0, #16
 8018e82:	4770      	bx	lr

08018e84 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8018e84:	2000      	movs	r0, #0
 8018e86:	4770      	bx	lr

08018e88 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8018e88:	4b02      	ldr	r3, [pc, #8]	; (8018e94 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8018e8a:	8818      	ldrh	r0, [r3, #0]
 8018e8c:	0040      	lsls	r0, r0, #1
 8018e8e:	b280      	uxth	r0, r0
 8018e90:	4770      	bx	lr
 8018e92:	bf00      	nop
 8018e94:	2001460a 	.word	0x2001460a

08018e98 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018e98:	2bff      	cmp	r3, #255	; 0xff
 8018e9a:	d050      	beq.n	8018f3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8018e9c:	2a0b      	cmp	r2, #11
 8018e9e:	d04a      	beq.n	8018f36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8018ea0:	d80e      	bhi.n	8018ec0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8018ea2:	2a03      	cmp	r2, #3
 8018ea4:	d03f      	beq.n	8018f26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8018ea6:	d804      	bhi.n	8018eb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8018ea8:	2a01      	cmp	r2, #1
 8018eaa:	d03e      	beq.n	8018f2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8018eac:	d93f      	bls.n	8018f2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8018eae:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8018eb0:	4770      	bx	lr
 8018eb2:	2a09      	cmp	r2, #9
 8018eb4:	d03f      	beq.n	8018f36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8018eb6:	d83c      	bhi.n	8018f32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8018eb8:	2a08      	cmp	r2, #8
 8018eba:	d03a      	beq.n	8018f32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8018ebc:	2000      	movs	r0, #0
 8018ebe:	4770      	bx	lr
 8018ec0:	2a2f      	cmp	r2, #47	; 0x2f
 8018ec2:	d024      	beq.n	8018f0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8018ec4:	d80d      	bhi.n	8018ee2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8018ec6:	2a2d      	cmp	r2, #45	; 0x2d
 8018ec8:	d014      	beq.n	8018ef4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8018eca:	d826      	bhi.n	8018f1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8018ecc:	2a2c      	cmp	r2, #44	; 0x2c
 8018ece:	d1f5      	bne.n	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018ed0:	684b      	ldr	r3, [r1, #4]
 8018ed2:	781b      	ldrb	r3, [r3, #0]
 8018ed4:	2b01      	cmp	r3, #1
 8018ed6:	d018      	beq.n	8018f0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8018ed8:	d323      	bcc.n	8018f22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8018eda:	2b02      	cmp	r3, #2
 8018edc:	d1ee      	bne.n	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018ede:	6880      	ldr	r0, [r0, #8]
 8018ee0:	4770      	bx	lr
 8018ee2:	2a31      	cmp	r2, #49	; 0x31
 8018ee4:	d004      	beq.n	8018ef0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8018ee6:	d328      	bcc.n	8018f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8018ee8:	2a32      	cmp	r2, #50	; 0x32
 8018eea:	d026      	beq.n	8018f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8018eec:	2a33      	cmp	r2, #51	; 0x33
 8018eee:	d1e5      	bne.n	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018ef0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8018ef2:	4770      	bx	lr
 8018ef4:	684b      	ldr	r3, [r1, #4]
 8018ef6:	781b      	ldrb	r3, [r3, #0]
 8018ef8:	2b01      	cmp	r3, #1
 8018efa:	d004      	beq.n	8018f06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8018efc:	d30b      	bcc.n	8018f16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8018efe:	2b02      	cmp	r3, #2
 8018f00:	d1dc      	bne.n	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f02:	6900      	ldr	r0, [r0, #16]
 8018f04:	4770      	bx	lr
 8018f06:	6a00      	ldr	r0, [r0, #32]
 8018f08:	4770      	bx	lr
 8018f0a:	6980      	ldr	r0, [r0, #24]
 8018f0c:	4770      	bx	lr
 8018f0e:	684b      	ldr	r3, [r1, #4]
 8018f10:	781b      	ldrb	r3, [r3, #0]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d1d2      	bne.n	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f16:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018f18:	4770      	bx	lr
 8018f1a:	684b      	ldr	r3, [r1, #4]
 8018f1c:	781b      	ldrb	r3, [r3, #0]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d1cc      	bne.n	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f22:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018f24:	4770      	bx	lr
 8018f26:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8018f28:	4770      	bx	lr
 8018f2a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8018f2c:	4770      	bx	lr
 8018f2e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8018f30:	4770      	bx	lr
 8018f32:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8018f34:	4770      	bx	lr
 8018f36:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8018f38:	4770      	bx	lr
 8018f3a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8018f3c:	4770      	bx	lr
 8018f3e:	2a0b      	cmp	r2, #11
 8018f40:	d049      	beq.n	8018fd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8018f42:	d80e      	bhi.n	8018f62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8018f44:	2a03      	cmp	r2, #3
 8018f46:	d040      	beq.n	8018fca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8018f48:	d804      	bhi.n	8018f54 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8018f4a:	2a01      	cmp	r2, #1
 8018f4c:	d03f      	beq.n	8018fce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8018f4e:	d940      	bls.n	8018fd2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8018f50:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8018f52:	4770      	bx	lr
 8018f54:	2a09      	cmp	r2, #9
 8018f56:	d03e      	beq.n	8018fd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8018f58:	d801      	bhi.n	8018f5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8018f5a:	2a08      	cmp	r2, #8
 8018f5c:	d1ae      	bne.n	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f5e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8018f60:	4770      	bx	lr
 8018f62:	2a2f      	cmp	r2, #47	; 0x2f
 8018f64:	d024      	beq.n	8018fb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8018f66:	d80d      	bhi.n	8018f84 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8018f68:	2a2d      	cmp	r2, #45	; 0x2d
 8018f6a:	d014      	beq.n	8018f96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8018f6c:	d826      	bhi.n	8018fbc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8018f6e:	2a2c      	cmp	r2, #44	; 0x2c
 8018f70:	d1a4      	bne.n	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f72:	684b      	ldr	r3, [r1, #4]
 8018f74:	781b      	ldrb	r3, [r3, #0]
 8018f76:	2b01      	cmp	r3, #1
 8018f78:	d018      	beq.n	8018fac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8018f7a:	d324      	bcc.n	8018fc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8018f7c:	2b02      	cmp	r3, #2
 8018f7e:	d19d      	bne.n	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f80:	68c0      	ldr	r0, [r0, #12]
 8018f82:	4770      	bx	lr
 8018f84:	2a31      	cmp	r2, #49	; 0x31
 8018f86:	d004      	beq.n	8018f92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8018f88:	d327      	bcc.n	8018fda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8018f8a:	2a32      	cmp	r2, #50	; 0x32
 8018f8c:	d025      	beq.n	8018fda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8018f8e:	2a33      	cmp	r2, #51	; 0x33
 8018f90:	d194      	bne.n	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018f92:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8018f94:	4770      	bx	lr
 8018f96:	684b      	ldr	r3, [r1, #4]
 8018f98:	781b      	ldrb	r3, [r3, #0]
 8018f9a:	2b01      	cmp	r3, #1
 8018f9c:	d004      	beq.n	8018fa8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8018f9e:	d30b      	bcc.n	8018fb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8018fa0:	2b02      	cmp	r3, #2
 8018fa2:	d18b      	bne.n	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018fa4:	6940      	ldr	r0, [r0, #20]
 8018fa6:	4770      	bx	lr
 8018fa8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8018faa:	4770      	bx	lr
 8018fac:	69c0      	ldr	r0, [r0, #28]
 8018fae:	4770      	bx	lr
 8018fb0:	684b      	ldr	r3, [r1, #4]
 8018fb2:	781b      	ldrb	r3, [r3, #0]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d181      	bne.n	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018fb8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8018fba:	4770      	bx	lr
 8018fbc:	684b      	ldr	r3, [r1, #4]
 8018fbe:	781b      	ldrb	r3, [r3, #0]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	f47f af7b 	bne.w	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018fc6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8018fc8:	4770      	bx	lr
 8018fca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8018fcc:	4770      	bx	lr
 8018fce:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8018fd0:	4770      	bx	lr
 8018fd2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8018fd4:	4770      	bx	lr
 8018fd6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8018fd8:	4770      	bx	lr
 8018fda:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8018fdc:	4770      	bx	lr

08018fde <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018fde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fe2:	b087      	sub	sp, #28
 8018fe4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018fe6:	9205      	str	r2, [sp, #20]
 8018fe8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018fec:	9202      	str	r2, [sp, #8]
 8018fee:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8018ff2:	9101      	str	r1, [sp, #4]
 8018ff4:	6841      	ldr	r1, [r0, #4]
 8018ff6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8018ffa:	fb01 2404 	mla	r4, r1, r4, r2
 8018ffe:	6802      	ldr	r2, [r0, #0]
 8019000:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019004:	f8de 2000 	ldr.w	r2, [lr]
 8019008:	9203      	str	r2, [sp, #12]
 801900a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801900e:	3204      	adds	r2, #4
 8019010:	9204      	str	r2, [sp, #16]
 8019012:	9a02      	ldr	r2, [sp, #8]
 8019014:	43d6      	mvns	r6, r2
 8019016:	b2f6      	uxtb	r6, r6
 8019018:	9a01      	ldr	r2, [sp, #4]
 801901a:	2a00      	cmp	r2, #0
 801901c:	dc03      	bgt.n	8019026 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801901e:	9a05      	ldr	r2, [sp, #20]
 8019020:	2a00      	cmp	r2, #0
 8019022:	f340 8129 	ble.w	8019278 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019026:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019028:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801902c:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019030:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019036:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801903a:	2b00      	cmp	r3, #0
 801903c:	dd0e      	ble.n	801905c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801903e:	1408      	asrs	r0, r1, #16
 8019040:	d405      	bmi.n	801904e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019042:	4560      	cmp	r0, ip
 8019044:	da03      	bge.n	801904e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019046:	1410      	asrs	r0, r2, #16
 8019048:	d401      	bmi.n	801904e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801904a:	42b8      	cmp	r0, r7
 801904c:	db07      	blt.n	801905e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801904e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019050:	4401      	add	r1, r0
 8019052:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019054:	3b01      	subs	r3, #1
 8019056:	4402      	add	r2, r0
 8019058:	3402      	adds	r4, #2
 801905a:	e7ee      	b.n	801903a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801905c:	d071      	beq.n	8019142 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801905e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019060:	1e58      	subs	r0, r3, #1
 8019062:	fb05 1500 	mla	r5, r5, r0, r1
 8019066:	142d      	asrs	r5, r5, #16
 8019068:	d45f      	bmi.n	801912a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801906a:	4565      	cmp	r5, ip
 801906c:	da5d      	bge.n	801912a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801906e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019070:	fb05 2000 	mla	r0, r5, r0, r2
 8019074:	1400      	asrs	r0, r0, #16
 8019076:	d458      	bmi.n	801912a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019078:	42b8      	cmp	r0, r7
 801907a:	da56      	bge.n	801912a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801907c:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8019080:	4699      	mov	r9, r3
 8019082:	46a2      	mov	sl, r4
 8019084:	f1b9 0f00 	cmp.w	r9, #0
 8019088:	dd57      	ble.n	801913a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801908a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801908e:	9803      	ldr	r0, [sp, #12]
 8019090:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019094:	140d      	asrs	r5, r1, #16
 8019096:	fb07 000c 	mla	r0, r7, ip, r0
 801909a:	f109 39ff 	add.w	r9, r9, #4294967295
 801909e:	5d40      	ldrb	r0, [r0, r5]
 80190a0:	9d04      	ldr	r5, [sp, #16]
 80190a2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80190a6:	f8ba 5000 	ldrh.w	r5, [sl]
 80190aa:	122f      	asrs	r7, r5, #8
 80190ac:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80190b0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80190b4:	fb17 f706 	smulbb	r7, r7, r6
 80190b8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80190bc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80190c0:	00ed      	lsls	r5, r5, #3
 80190c2:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80190c6:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80190ca:	10c7      	asrs	r7, r0, #3
 80190cc:	b2ed      	uxtb	r5, r5
 80190ce:	00c0      	lsls	r0, r0, #3
 80190d0:	fb18 f806 	smulbb	r8, r8, r6
 80190d4:	fb15 f506 	smulbb	r5, r5, r6
 80190d8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80190dc:	b2c0      	uxtb	r0, r0
 80190de:	fa1f fc8c 	uxth.w	ip, ip
 80190e2:	fb07 870b 	mla	r7, r7, fp, r8
 80190e6:	fb00 500b 	mla	r0, r0, fp, r5
 80190ea:	b280      	uxth	r0, r0
 80190ec:	b2bf      	uxth	r7, r7
 80190ee:	f10c 0501 	add.w	r5, ip, #1
 80190f2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80190f6:	f107 0801 	add.w	r8, r7, #1
 80190fa:	1c45      	adds	r5, r0, #1
 80190fc:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019100:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8019104:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019106:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801910a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801910e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019112:	ea45 0c0c 	orr.w	ip, r5, ip
 8019116:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801911a:	4401      	add	r1, r0
 801911c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801911e:	ea4c 0c08 	orr.w	ip, ip, r8
 8019122:	f82a cb02 	strh.w	ip, [sl], #2
 8019126:	4402      	add	r2, r0
 8019128:	e7ac      	b.n	8019084 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801912a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801912e:	f04f 0800 	mov.w	r8, #0
 8019132:	eb03 0008 	add.w	r0, r3, r8
 8019136:	2800      	cmp	r0, #0
 8019138:	dc41      	bgt.n	80191be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801913a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801913e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019142:	9b01      	ldr	r3, [sp, #4]
 8019144:	2b00      	cmp	r3, #0
 8019146:	f340 8097 	ble.w	8019278 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801914a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801914e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019152:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019156:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019158:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801915c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019160:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019164:	eef0 6a62 	vmov.f32	s13, s5
 8019168:	ee61 7a27 	vmul.f32	s15, s2, s15
 801916c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019170:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019174:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019178:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801917c:	eef0 6a43 	vmov.f32	s13, s6
 8019180:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019184:	ee12 2a90 	vmov	r2, s5
 8019188:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801918c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019190:	ee13 2a10 	vmov	r2, s6
 8019194:	9313      	str	r3, [sp, #76]	; 0x4c
 8019196:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019198:	fb92 f3f3 	sdiv	r3, r2, r3
 801919c:	9314      	str	r3, [sp, #80]	; 0x50
 801919e:	9b01      	ldr	r3, [sp, #4]
 80191a0:	9a05      	ldr	r2, [sp, #20]
 80191a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80191a6:	3b01      	subs	r3, #1
 80191a8:	9301      	str	r3, [sp, #4]
 80191aa:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80191ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80191b0:	eeb0 3a67 	vmov.f32	s6, s15
 80191b4:	bf08      	it	eq
 80191b6:	4613      	moveq	r3, r2
 80191b8:	eef0 2a47 	vmov.f32	s5, s14
 80191bc:	e72c      	b.n	8019018 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80191be:	140f      	asrs	r7, r1, #16
 80191c0:	d453      	bmi.n	801926a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80191c2:	f8de 5008 	ldr.w	r5, [lr, #8]
 80191c6:	42bd      	cmp	r5, r7
 80191c8:	dd4f      	ble.n	801926a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80191ca:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80191ce:	d44c      	bmi.n	801926a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80191d0:	f8de 000c 	ldr.w	r0, [lr, #12]
 80191d4:	4560      	cmp	r0, ip
 80191d6:	dd48      	ble.n	801926a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80191d8:	9803      	ldr	r0, [sp, #12]
 80191da:	b22d      	sxth	r5, r5
 80191dc:	fb0c 0505 	mla	r5, ip, r5, r0
 80191e0:	5de8      	ldrb	r0, [r5, r7]
 80191e2:	9d04      	ldr	r5, [sp, #16]
 80191e4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80191e8:	f06f 0501 	mvn.w	r5, #1
 80191ec:	fb05 fb08 	mul.w	fp, r5, r8
 80191f0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80191f4:	f834 500b 	ldrh.w	r5, [r4, fp]
 80191f8:	122f      	asrs	r7, r5, #8
 80191fa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80191fe:	fb17 f706 	smulbb	r7, r7, r6
 8019202:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019206:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801920a:	00ed      	lsls	r5, r5, #3
 801920c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8019210:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019214:	10c7      	asrs	r7, r0, #3
 8019216:	b2ed      	uxtb	r5, r5
 8019218:	00c0      	lsls	r0, r0, #3
 801921a:	fb19 f906 	smulbb	r9, r9, r6
 801921e:	fb15 f506 	smulbb	r5, r5, r6
 8019222:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019226:	b2c0      	uxtb	r0, r0
 8019228:	fa1f fc8c 	uxth.w	ip, ip
 801922c:	fb07 970a 	mla	r7, r7, sl, r9
 8019230:	fb00 500a 	mla	r0, r0, sl, r5
 8019234:	b2bf      	uxth	r7, r7
 8019236:	b280      	uxth	r0, r0
 8019238:	f10c 0501 	add.w	r5, ip, #1
 801923c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019240:	f107 0901 	add.w	r9, r7, #1
 8019244:	1c45      	adds	r5, r0, #1
 8019246:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801924a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801924e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019252:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019256:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801925a:	ea45 0c0c 	orr.w	ip, r5, ip
 801925e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019262:	ea4c 0c09 	orr.w	ip, ip, r9
 8019266:	f824 c00b 	strh.w	ip, [r4, fp]
 801926a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801926c:	4401      	add	r1, r0
 801926e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019270:	f108 38ff 	add.w	r8, r8, #4294967295
 8019274:	4402      	add	r2, r0
 8019276:	e75c      	b.n	8019132 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019278:	b007      	add	sp, #28
 801927a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801927e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801927e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019282:	b085      	sub	sp, #20
 8019284:	4693      	mov	fp, r2
 8019286:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019288:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801928a:	6870      	ldr	r0, [r6, #4]
 801928c:	9100      	str	r1, [sp, #0]
 801928e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019292:	fb00 2404 	mla	r4, r0, r4, r2
 8019296:	6832      	ldr	r2, [r6, #0]
 8019298:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801929c:	682a      	ldr	r2, [r5, #0]
 801929e:	9201      	str	r2, [sp, #4]
 80192a0:	686a      	ldr	r2, [r5, #4]
 80192a2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80192a6:	3204      	adds	r2, #4
 80192a8:	9202      	str	r2, [sp, #8]
 80192aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80192ae:	9a00      	ldr	r2, [sp, #0]
 80192b0:	2a00      	cmp	r2, #0
 80192b2:	dc03      	bgt.n	80192bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80192b4:	f1bb 0f00 	cmp.w	fp, #0
 80192b8:	f340 80a0 	ble.w	80193fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80192bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80192be:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80192c2:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80192c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80192ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80192cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	dd0c      	ble.n	80192ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80192d4:	1406      	asrs	r6, r0, #16
 80192d6:	d405      	bmi.n	80192e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80192d8:	454e      	cmp	r6, r9
 80192da:	da03      	bge.n	80192e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80192dc:	1416      	asrs	r6, r2, #16
 80192de:	d401      	bmi.n	80192e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80192e0:	4546      	cmp	r6, r8
 80192e2:	db05      	blt.n	80192f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80192e4:	4470      	add	r0, lr
 80192e6:	4462      	add	r2, ip
 80192e8:	3b01      	subs	r3, #1
 80192ea:	3402      	adds	r4, #2
 80192ec:	e7f0      	b.n	80192d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80192ee:	d00f      	beq.n	8019310 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80192f0:	1e5e      	subs	r6, r3, #1
 80192f2:	fb0e 0706 	mla	r7, lr, r6, r0
 80192f6:	143f      	asrs	r7, r7, #16
 80192f8:	d541      	bpl.n	801937e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 80192fa:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80192fe:	4698      	mov	r8, r3
 8019300:	9603      	str	r6, [sp, #12]
 8019302:	f1b8 0f00 	cmp.w	r8, #0
 8019306:	dc59      	bgt.n	80193bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8019308:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801930c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019310:	9b00      	ldr	r3, [sp, #0]
 8019312:	2b00      	cmp	r3, #0
 8019314:	dd72      	ble.n	80193fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8019316:	ee30 0a04 	vadd.f32	s0, s0, s8
 801931a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801931e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019324:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019328:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801932c:	eeb0 6a62 	vmov.f32	s12, s5
 8019330:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019334:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019338:	ee77 2a62 	vsub.f32	s5, s14, s5
 801933c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019340:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019344:	eeb0 6a43 	vmov.f32	s12, s6
 8019348:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801934c:	ee12 2a90 	vmov	r2, s5
 8019350:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019354:	fb92 fef3 	sdiv	lr, r2, r3
 8019358:	ee13 2a10 	vmov	r2, s6
 801935c:	fb92 fcf3 	sdiv	ip, r2, r3
 8019360:	9b00      	ldr	r3, [sp, #0]
 8019362:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019366:	3b01      	subs	r3, #1
 8019368:	9300      	str	r3, [sp, #0]
 801936a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801936e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019370:	eeb0 3a67 	vmov.f32	s6, s15
 8019374:	bf08      	it	eq
 8019376:	465b      	moveq	r3, fp
 8019378:	eef0 2a47 	vmov.f32	s5, s14
 801937c:	e797      	b.n	80192ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801937e:	454f      	cmp	r7, r9
 8019380:	dabb      	bge.n	80192fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019382:	fb0c 2606 	mla	r6, ip, r6, r2
 8019386:	1436      	asrs	r6, r6, #16
 8019388:	d4b7      	bmi.n	80192fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801938a:	4546      	cmp	r6, r8
 801938c:	dab5      	bge.n	80192fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801938e:	461e      	mov	r6, r3
 8019390:	46a0      	mov	r8, r4
 8019392:	2e00      	cmp	r6, #0
 8019394:	ddb8      	ble.n	8019308 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019396:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801939a:	9901      	ldr	r1, [sp, #4]
 801939c:	1417      	asrs	r7, r2, #16
 801939e:	ea4f 4920 	mov.w	r9, r0, asr #16
 80193a2:	fb0a 1707 	mla	r7, sl, r7, r1
 80193a6:	9902      	ldr	r1, [sp, #8]
 80193a8:	f817 7009 	ldrb.w	r7, [r7, r9]
 80193ac:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80193b0:	f828 7b02 	strh.w	r7, [r8], #2
 80193b4:	4470      	add	r0, lr
 80193b6:	4462      	add	r2, ip
 80193b8:	3e01      	subs	r6, #1
 80193ba:	e7ea      	b.n	8019392 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80193bc:	ea5f 4920 	movs.w	r9, r0, asr #16
 80193c0:	d417      	bmi.n	80193f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80193c2:	68ae      	ldr	r6, [r5, #8]
 80193c4:	454e      	cmp	r6, r9
 80193c6:	dd14      	ble.n	80193f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80193c8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80193cc:	d411      	bmi.n	80193f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80193ce:	68ef      	ldr	r7, [r5, #12]
 80193d0:	4557      	cmp	r7, sl
 80193d2:	dd0e      	ble.n	80193f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80193d4:	9f01      	ldr	r7, [sp, #4]
 80193d6:	b236      	sxth	r6, r6
 80193d8:	fb0a 7606 	mla	r6, sl, r6, r7
 80193dc:	9f02      	ldr	r7, [sp, #8]
 80193de:	f816 6009 	ldrb.w	r6, [r6, r9]
 80193e2:	f06f 0101 	mvn.w	r1, #1
 80193e6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80193ea:	fb01 f608 	mul.w	r6, r1, r8
 80193ee:	9903      	ldr	r1, [sp, #12]
 80193f0:	538f      	strh	r7, [r1, r6]
 80193f2:	4470      	add	r0, lr
 80193f4:	4462      	add	r2, ip
 80193f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80193fa:	e782      	b.n	8019302 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80193fc:	b005      	add	sp, #20
 80193fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019402 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019402:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019406:	b087      	sub	sp, #28
 8019408:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801940a:	9205      	str	r2, [sp, #20]
 801940c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019410:	9203      	str	r2, [sp, #12]
 8019412:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8019416:	9102      	str	r1, [sp, #8]
 8019418:	6861      	ldr	r1, [r4, #4]
 801941a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801941e:	fb01 2000 	mla	r0, r1, r0, r2
 8019422:	6822      	ldr	r2, [r4, #0]
 8019424:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019428:	9200      	str	r2, [sp, #0]
 801942a:	f8dc 2000 	ldr.w	r2, [ip]
 801942e:	9204      	str	r2, [sp, #16]
 8019430:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019434:	3204      	adds	r2, #4
 8019436:	9201      	str	r2, [sp, #4]
 8019438:	9a03      	ldr	r2, [sp, #12]
 801943a:	43d5      	mvns	r5, r2
 801943c:	b2ed      	uxtb	r5, r5
 801943e:	9a02      	ldr	r2, [sp, #8]
 8019440:	2a00      	cmp	r2, #0
 8019442:	dc03      	bgt.n	801944c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019444:	9a05      	ldr	r2, [sp, #20]
 8019446:	2a00      	cmp	r2, #0
 8019448:	f340 812c 	ble.w	80196a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801944c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801944e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019452:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019456:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801945a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801945c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019460:	2b00      	cmp	r3, #0
 8019462:	dd10      	ble.n	8019486 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019464:	140c      	asrs	r4, r1, #16
 8019466:	d405      	bmi.n	8019474 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019468:	4574      	cmp	r4, lr
 801946a:	da03      	bge.n	8019474 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801946c:	1414      	asrs	r4, r2, #16
 801946e:	d401      	bmi.n	8019474 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019470:	42bc      	cmp	r4, r7
 8019472:	db09      	blt.n	8019488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019474:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019476:	9800      	ldr	r0, [sp, #0]
 8019478:	4421      	add	r1, r4
 801947a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801947c:	3002      	adds	r0, #2
 801947e:	4422      	add	r2, r4
 8019480:	3b01      	subs	r3, #1
 8019482:	9000      	str	r0, [sp, #0]
 8019484:	e7ec      	b.n	8019460 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019486:	d071      	beq.n	801956c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8019488:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801948a:	1e5c      	subs	r4, r3, #1
 801948c:	fb06 1604 	mla	r6, r6, r4, r1
 8019490:	1436      	asrs	r6, r6, #16
 8019492:	d45d      	bmi.n	8019550 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019494:	4576      	cmp	r6, lr
 8019496:	da5b      	bge.n	8019550 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019498:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801949a:	fb06 2404 	mla	r4, r6, r4, r2
 801949e:	1424      	asrs	r4, r4, #16
 80194a0:	d456      	bmi.n	8019550 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80194a2:	42bc      	cmp	r4, r7
 80194a4:	da54      	bge.n	8019550 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80194a6:	f8dd 9000 	ldr.w	r9, [sp]
 80194aa:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80194ae:	4698      	mov	r8, r3
 80194b0:	f1b8 0f00 	cmp.w	r8, #0
 80194b4:	dd54      	ble.n	8019560 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80194b6:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80194ba:	9804      	ldr	r0, [sp, #16]
 80194bc:	1414      	asrs	r4, r2, #16
 80194be:	fb07 0404 	mla	r4, r7, r4, r0
 80194c2:	140e      	asrs	r6, r1, #16
 80194c4:	9801      	ldr	r0, [sp, #4]
 80194c6:	f814 e006 	ldrb.w	lr, [r4, r6]
 80194ca:	f8b9 4000 	ldrh.w	r4, [r9]
 80194ce:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80194d2:	eb00 0b0e 	add.w	fp, r0, lr
 80194d6:	1227      	asrs	r7, r4, #8
 80194d8:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80194dc:	f89b b001 	ldrb.w	fp, [fp, #1]
 80194e0:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80194e4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80194e6:	fb16 f60a 	smulbb	r6, r6, sl
 80194ea:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80194ee:	fb07 6705 	mla	r7, r7, r5, r6
 80194f2:	10e6      	asrs	r6, r4, #3
 80194f4:	00e4      	lsls	r4, r4, #3
 80194f6:	b2e4      	uxtb	r4, r4
 80194f8:	fb1b fb0a 	smulbb	fp, fp, sl
 80194fc:	fb14 f405 	smulbb	r4, r4, r5
 8019500:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019504:	b2bf      	uxth	r7, r7
 8019506:	fb06 b605 	mla	r6, r6, r5, fp
 801950a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801950e:	b2b6      	uxth	r6, r6
 8019510:	fa1f fe8e 	uxth.w	lr, lr
 8019514:	1c7c      	adds	r4, r7, #1
 8019516:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801951a:	f106 0b01 	add.w	fp, r6, #1
 801951e:	f10e 0401 	add.w	r4, lr, #1
 8019522:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8019526:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801952a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801952e:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8019532:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8019536:	4327      	orrs	r7, r4
 8019538:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801953c:	4401      	add	r1, r0
 801953e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019540:	ea47 070b 	orr.w	r7, r7, fp
 8019544:	f829 7b02 	strh.w	r7, [r9], #2
 8019548:	4402      	add	r2, r0
 801954a:	f108 38ff 	add.w	r8, r8, #4294967295
 801954e:	e7af      	b.n	80194b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019550:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8019554:	f04f 0e00 	mov.w	lr, #0
 8019558:	eb03 040e 	add.w	r4, r3, lr
 801955c:	2c00      	cmp	r4, #0
 801955e:	dc43      	bgt.n	80195e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8019560:	9a00      	ldr	r2, [sp, #0]
 8019562:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019566:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801956a:	9300      	str	r3, [sp, #0]
 801956c:	9b02      	ldr	r3, [sp, #8]
 801956e:	2b00      	cmp	r3, #0
 8019570:	f340 8098 	ble.w	80196a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019574:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801957c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019580:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019582:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019586:	ee31 1a05 	vadd.f32	s2, s2, s10
 801958a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801958e:	eef0 6a62 	vmov.f32	s13, s5
 8019592:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019596:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801959a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801959e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80195a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80195a6:	eef0 6a43 	vmov.f32	s13, s6
 80195aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80195ae:	ee12 2a90 	vmov	r2, s5
 80195b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80195b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80195ba:	ee13 2a10 	vmov	r2, s6
 80195be:	9313      	str	r3, [sp, #76]	; 0x4c
 80195c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80195c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80195c6:	9314      	str	r3, [sp, #80]	; 0x50
 80195c8:	9b02      	ldr	r3, [sp, #8]
 80195ca:	9a05      	ldr	r2, [sp, #20]
 80195cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80195d0:	3b01      	subs	r3, #1
 80195d2:	9302      	str	r3, [sp, #8]
 80195d4:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80195d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80195da:	eeb0 3a67 	vmov.f32	s6, s15
 80195de:	bf08      	it	eq
 80195e0:	4613      	moveq	r3, r2
 80195e2:	eef0 2a47 	vmov.f32	s5, s14
 80195e6:	e72a      	b.n	801943e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80195e8:	140f      	asrs	r7, r1, #16
 80195ea:	d454      	bmi.n	8019696 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80195ec:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80195f0:	42be      	cmp	r6, r7
 80195f2:	dd50      	ble.n	8019696 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80195f4:	ea5f 4822 	movs.w	r8, r2, asr #16
 80195f8:	d44d      	bmi.n	8019696 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80195fa:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80195fe:	4544      	cmp	r4, r8
 8019600:	dd49      	ble.n	8019696 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019602:	9c04      	ldr	r4, [sp, #16]
 8019604:	b236      	sxth	r6, r6
 8019606:	fb08 4606 	mla	r6, r8, r6, r4
 801960a:	f06f 0001 	mvn.w	r0, #1
 801960e:	f816 8007 	ldrb.w	r8, [r6, r7]
 8019612:	9c01      	ldr	r4, [sp, #4]
 8019614:	fb00 fa0e 	mul.w	sl, r0, lr
 8019618:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801961c:	9800      	ldr	r0, [sp, #0]
 801961e:	eb04 0b08 	add.w	fp, r4, r8
 8019622:	f830 400a 	ldrh.w	r4, [r0, sl]
 8019626:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801962a:	9801      	ldr	r0, [sp, #4]
 801962c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019630:	f810 8008 	ldrb.w	r8, [r0, r8]
 8019634:	9800      	ldr	r0, [sp, #0]
 8019636:	1227      	asrs	r7, r4, #8
 8019638:	fb16 f609 	smulbb	r6, r6, r9
 801963c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019640:	fb07 6705 	mla	r7, r7, r5, r6
 8019644:	10e6      	asrs	r6, r4, #3
 8019646:	00e4      	lsls	r4, r4, #3
 8019648:	b2e4      	uxtb	r4, r4
 801964a:	fb1b fb09 	smulbb	fp, fp, r9
 801964e:	fb14 f405 	smulbb	r4, r4, r5
 8019652:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019656:	b2bf      	uxth	r7, r7
 8019658:	fb06 b605 	mla	r6, r6, r5, fp
 801965c:	fb08 4809 	mla	r8, r8, r9, r4
 8019660:	b2b6      	uxth	r6, r6
 8019662:	fa1f f888 	uxth.w	r8, r8
 8019666:	1c7c      	adds	r4, r7, #1
 8019668:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801966c:	f106 0b01 	add.w	fp, r6, #1
 8019670:	f108 0401 	add.w	r4, r8, #1
 8019674:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8019678:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801967c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019680:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8019684:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8019688:	4327      	orrs	r7, r4
 801968a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801968e:	ea47 070b 	orr.w	r7, r7, fp
 8019692:	f820 700a 	strh.w	r7, [r0, sl]
 8019696:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019698:	4401      	add	r1, r0
 801969a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801969c:	f10e 3eff 	add.w	lr, lr, #4294967295
 80196a0:	4402      	add	r2, r0
 80196a2:	e759      	b.n	8019558 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80196a4:	b007      	add	sp, #28
 80196a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080196ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80196ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196b0:	b085      	sub	sp, #20
 80196b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80196b6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80196b8:	9203      	str	r2, [sp, #12]
 80196ba:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80196be:	6870      	ldr	r0, [r6, #4]
 80196c0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80196c2:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 80196c6:	686f      	ldr	r7, [r5, #4]
 80196c8:	9101      	str	r1, [sp, #4]
 80196ca:	fb00 2404 	mla	r4, r0, r4, r2
 80196ce:	6832      	ldr	r2, [r6, #0]
 80196d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80196d4:	682a      	ldr	r2, [r5, #0]
 80196d6:	9202      	str	r2, [sp, #8]
 80196d8:	3704      	adds	r7, #4
 80196da:	9a01      	ldr	r2, [sp, #4]
 80196dc:	2a00      	cmp	r2, #0
 80196de:	dc03      	bgt.n	80196e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80196e0:	9a03      	ldr	r2, [sp, #12]
 80196e2:	2a00      	cmp	r2, #0
 80196e4:	f340 80cc 	ble.w	8019880 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80196e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80196ea:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80196ee:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80196f2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80196f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80196f8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	dd0d      	ble.n	801971c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019700:	1406      	asrs	r6, r0, #16
 8019702:	d405      	bmi.n	8019710 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019704:	454e      	cmp	r6, r9
 8019706:	da03      	bge.n	8019710 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019708:	1416      	asrs	r6, r2, #16
 801970a:	d401      	bmi.n	8019710 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801970c:	4546      	cmp	r6, r8
 801970e:	db06      	blt.n	801971e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019710:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019712:	4460      	add	r0, ip
 8019714:	4432      	add	r2, r6
 8019716:	3b01      	subs	r3, #1
 8019718:	3402      	adds	r4, #2
 801971a:	e7ef      	b.n	80196fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801971c:	d00f      	beq.n	801973e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801971e:	1e5e      	subs	r6, r3, #1
 8019720:	fb0c 0e06 	mla	lr, ip, r6, r0
 8019724:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8019728:	d543      	bpl.n	80197b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801972a:	4698      	mov	r8, r3
 801972c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8019730:	f1b8 0f00 	cmp.w	r8, #0
 8019734:	dc71      	bgt.n	801981a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8019736:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801973a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801973e:	9b01      	ldr	r3, [sp, #4]
 8019740:	2b00      	cmp	r3, #0
 8019742:	f340 809d 	ble.w	8019880 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8019746:	ee30 0a04 	vadd.f32	s0, s0, s8
 801974a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801974e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019754:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019758:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801975c:	eeb0 6a62 	vmov.f32	s12, s5
 8019760:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019764:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019768:	ee77 2a62 	vsub.f32	s5, s14, s5
 801976c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019770:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019774:	eeb0 6a43 	vmov.f32	s12, s6
 8019778:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801977c:	ee12 2a90 	vmov	r2, s5
 8019780:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019784:	fb92 fcf3 	sdiv	ip, r2, r3
 8019788:	ee13 2a10 	vmov	r2, s6
 801978c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019790:	9312      	str	r3, [sp, #72]	; 0x48
 8019792:	9b01      	ldr	r3, [sp, #4]
 8019794:	9a03      	ldr	r2, [sp, #12]
 8019796:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801979a:	3b01      	subs	r3, #1
 801979c:	9301      	str	r3, [sp, #4]
 801979e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80197a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197a4:	eeb0 3a67 	vmov.f32	s6, s15
 80197a8:	bf08      	it	eq
 80197aa:	4613      	moveq	r3, r2
 80197ac:	eef0 2a47 	vmov.f32	s5, s14
 80197b0:	e793      	b.n	80196da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80197b2:	45ce      	cmp	lr, r9
 80197b4:	dab9      	bge.n	801972a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80197b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80197b8:	fb01 2606 	mla	r6, r1, r6, r2
 80197bc:	1436      	asrs	r6, r6, #16
 80197be:	d4b4      	bmi.n	801972a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80197c0:	4546      	cmp	r6, r8
 80197c2:	dab2      	bge.n	801972a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80197c4:	4698      	mov	r8, r3
 80197c6:	46a2      	mov	sl, r4
 80197c8:	f1b8 0f00 	cmp.w	r8, #0
 80197cc:	ddb3      	ble.n	8019736 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80197ce:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80197d2:	9902      	ldr	r1, [sp, #8]
 80197d4:	1416      	asrs	r6, r2, #16
 80197d6:	fb09 1606 	mla	r6, r9, r6, r1
 80197da:	ea4f 4e20 	mov.w	lr, r0, asr #16
 80197de:	492a      	ldr	r1, [pc, #168]	; (8019888 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 80197e0:	f816 e00e 	ldrb.w	lr, [r6, lr]
 80197e4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80197e8:	eb07 0b0e 	add.w	fp, r7, lr
 80197ec:	4460      	add	r0, ip
 80197ee:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80197f2:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80197f6:	00f6      	lsls	r6, r6, #3
 80197f8:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 80197fc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019800:	ea49 0606 	orr.w	r6, r9, r6
 8019804:	f817 900e 	ldrb.w	r9, [r7, lr]
 8019808:	9912      	ldr	r1, [sp, #72]	; 0x48
 801980a:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801980e:	f82a 6b02 	strh.w	r6, [sl], #2
 8019812:	440a      	add	r2, r1
 8019814:	f108 38ff 	add.w	r8, r8, #4294967295
 8019818:	e7d6      	b.n	80197c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801981a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801981e:	d429      	bmi.n	8019874 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019820:	68ae      	ldr	r6, [r5, #8]
 8019822:	454e      	cmp	r6, r9
 8019824:	dd26      	ble.n	8019874 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019826:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801982a:	d423      	bmi.n	8019874 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801982c:	68e9      	ldr	r1, [r5, #12]
 801982e:	4559      	cmp	r1, fp
 8019830:	dd20      	ble.n	8019874 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019832:	9902      	ldr	r1, [sp, #8]
 8019834:	fa0f fe86 	sxth.w	lr, r6
 8019838:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801983c:	f06f 0101 	mvn.w	r1, #1
 8019840:	f81e e009 	ldrb.w	lr, [lr, r9]
 8019844:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019848:	eb07 060e 	add.w	r6, r7, lr
 801984c:	fb01 f908 	mul.w	r9, r1, r8
 8019850:	f896 b002 	ldrb.w	fp, [r6, #2]
 8019854:	7876      	ldrb	r6, [r6, #1]
 8019856:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801985a:	00f6      	lsls	r6, r6, #3
 801985c:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8019860:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019864:	ea4b 0606 	orr.w	r6, fp, r6
 8019868:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801986c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8019870:	f82a 6009 	strh.w	r6, [sl, r9]
 8019874:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019876:	4460      	add	r0, ip
 8019878:	440a      	add	r2, r1
 801987a:	f108 38ff 	add.w	r8, r8, #4294967295
 801987e:	e757      	b.n	8019730 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019880:	b005      	add	sp, #20
 8019882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019886:	bf00      	nop
 8019888:	fffff800 	.word	0xfffff800

0801988c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801988c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019890:	b087      	sub	sp, #28
 8019892:	468b      	mov	fp, r1
 8019894:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019896:	9204      	str	r2, [sp, #16]
 8019898:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801989c:	9205      	str	r2, [sp, #20]
 801989e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80198a2:	6841      	ldr	r1, [r0, #4]
 80198a4:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80198a8:	fb01 2404 	mla	r4, r1, r4, r2
 80198ac:	6802      	ldr	r2, [r0, #0]
 80198ae:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80198b2:	f8dc 2000 	ldr.w	r2, [ip]
 80198b6:	9201      	str	r2, [sp, #4]
 80198b8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80198bc:	3204      	adds	r2, #4
 80198be:	9202      	str	r2, [sp, #8]
 80198c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80198c4:	f1bb 0f00 	cmp.w	fp, #0
 80198c8:	dc03      	bgt.n	80198d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80198ca:	9a04      	ldr	r2, [sp, #16]
 80198cc:	2a00      	cmp	r2, #0
 80198ce:	f340 8138 	ble.w	8019b42 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80198d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80198d4:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80198d8:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 80198dc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80198e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80198e2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	dd0e      	ble.n	8019908 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80198ea:	1402      	asrs	r2, r0, #16
 80198ec:	d405      	bmi.n	80198fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80198ee:	42ba      	cmp	r2, r7
 80198f0:	da03      	bge.n	80198fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80198f2:	140a      	asrs	r2, r1, #16
 80198f4:	d401      	bmi.n	80198fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80198f6:	42b2      	cmp	r2, r6
 80198f8:	db07      	blt.n	801990a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80198fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80198fc:	4410      	add	r0, r2
 80198fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019900:	3b01      	subs	r3, #1
 8019902:	4411      	add	r1, r2
 8019904:	3402      	adds	r4, #2
 8019906:	e7ee      	b.n	80198e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019908:	d019      	beq.n	801993e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801990a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801990c:	1e5a      	subs	r2, r3, #1
 801990e:	fb05 0502 	mla	r5, r5, r2, r0
 8019912:	142d      	asrs	r5, r5, #16
 8019914:	d409      	bmi.n	801992a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019916:	42bd      	cmp	r5, r7
 8019918:	da07      	bge.n	801992a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801991a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801991c:	fb05 1202 	mla	r2, r5, r2, r1
 8019920:	1412      	asrs	r2, r2, #16
 8019922:	d402      	bmi.n	801992a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019924:	42b2      	cmp	r2, r6
 8019926:	f2c0 80ac 	blt.w	8019a82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801992a:	f04f 0e00 	mov.w	lr, #0
 801992e:	eb03 020e 	add.w	r2, r3, lr
 8019932:	2a00      	cmp	r2, #0
 8019934:	dc3e      	bgt.n	80199b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019936:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801993a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801993e:	f1bb 0f00 	cmp.w	fp, #0
 8019942:	f340 80fe 	ble.w	8019b42 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8019946:	ee30 0a04 	vadd.f32	s0, s0, s8
 801994a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801994e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019952:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019954:	f1bb 0b01 	subs.w	fp, fp, #1
 8019958:	ee31 1a05 	vadd.f32	s2, s2, s10
 801995c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019960:	eeb0 6a62 	vmov.f32	s12, s5
 8019964:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019968:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801996c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019970:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019974:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019978:	eeb0 6a43 	vmov.f32	s12, s6
 801997c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019980:	ee12 2a90 	vmov	r2, s5
 8019984:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019988:	fb92 f3f3 	sdiv	r3, r2, r3
 801998c:	ee13 2a10 	vmov	r2, s6
 8019990:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019994:	9313      	str	r3, [sp, #76]	; 0x4c
 8019996:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019998:	fb92 f3f3 	sdiv	r3, r2, r3
 801999c:	9a04      	ldr	r2, [sp, #16]
 801999e:	9314      	str	r3, [sp, #80]	; 0x50
 80199a0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80199a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80199a6:	eeb0 3a67 	vmov.f32	s6, s15
 80199aa:	bf08      	it	eq
 80199ac:	4613      	moveq	r3, r2
 80199ae:	eef0 2a47 	vmov.f32	s5, s14
 80199b2:	e787      	b.n	80198c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80199b4:	1406      	asrs	r6, r0, #16
 80199b6:	d45d      	bmi.n	8019a74 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80199b8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80199bc:	42b5      	cmp	r5, r6
 80199be:	dd59      	ble.n	8019a74 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80199c0:	140f      	asrs	r7, r1, #16
 80199c2:	d457      	bmi.n	8019a74 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80199c4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80199c8:	42ba      	cmp	r2, r7
 80199ca:	dd53      	ble.n	8019a74 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80199cc:	9a01      	ldr	r2, [sp, #4]
 80199ce:	b22d      	sxth	r5, r5
 80199d0:	fb07 2505 	mla	r5, r7, r5, r2
 80199d4:	5daa      	ldrb	r2, [r5, r6]
 80199d6:	9d02      	ldr	r5, [sp, #8]
 80199d8:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80199dc:	0e2e      	lsrs	r6, r5, #24
 80199de:	d049      	beq.n	8019a74 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80199e0:	f06f 0201 	mvn.w	r2, #1
 80199e4:	fb02 f20e 	mul.w	r2, r2, lr
 80199e8:	9203      	str	r2, [sp, #12]
 80199ea:	f834 8002 	ldrh.w	r8, [r4, r2]
 80199ee:	9a05      	ldr	r2, [sp, #20]
 80199f0:	4356      	muls	r6, r2
 80199f2:	1c72      	adds	r2, r6, #1
 80199f4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80199f8:	1212      	asrs	r2, r2, #8
 80199fa:	fa1f f982 	uxth.w	r9, r2
 80199fe:	ea4f 2728 	mov.w	r7, r8, asr #8
 8019a02:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8019a06:	43d2      	mvns	r2, r2
 8019a08:	b2d2      	uxtb	r2, r2
 8019a0a:	fb16 f609 	smulbb	r6, r6, r9
 8019a0e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019a12:	fb07 6702 	mla	r7, r7, r2, r6
 8019a16:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019a1a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8019a1e:	b2ed      	uxtb	r5, r5
 8019a20:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019a24:	fa5f f888 	uxtb.w	r8, r8
 8019a28:	fb15 f509 	smulbb	r5, r5, r9
 8019a2c:	fb08 5502 	mla	r5, r8, r2, r5
 8019a30:	b2bf      	uxth	r7, r7
 8019a32:	fb1a fa09 	smulbb	sl, sl, r9
 8019a36:	b2ad      	uxth	r5, r5
 8019a38:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019a3c:	fb06 a602 	mla	r6, r6, r2, sl
 8019a40:	1c7a      	adds	r2, r7, #1
 8019a42:	f105 0a01 	add.w	sl, r5, #1
 8019a46:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019a4a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019a4e:	b2b6      	uxth	r6, r6
 8019a50:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019a54:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019a58:	ea4a 0707 	orr.w	r7, sl, r7
 8019a5c:	f106 0a01 	add.w	sl, r6, #1
 8019a60:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019a64:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019a68:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019a6c:	9a03      	ldr	r2, [sp, #12]
 8019a6e:	ea47 070a 	orr.w	r7, r7, sl
 8019a72:	52a7      	strh	r7, [r4, r2]
 8019a74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019a76:	4410      	add	r0, r2
 8019a78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019a7a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019a7e:	4411      	add	r1, r2
 8019a80:	e755      	b.n	801992e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019a82:	f04f 0800 	mov.w	r8, #0
 8019a86:	eba3 0208 	sub.w	r2, r3, r8
 8019a8a:	2a00      	cmp	r2, #0
 8019a8c:	f77f af53 	ble.w	8019936 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8019a90:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8019a94:	9f01      	ldr	r7, [sp, #4]
 8019a96:	140a      	asrs	r2, r1, #16
 8019a98:	1405      	asrs	r5, r0, #16
 8019a9a:	fb06 7202 	mla	r2, r6, r2, r7
 8019a9e:	5d52      	ldrb	r2, [r2, r5]
 8019aa0:	9d02      	ldr	r5, [sp, #8]
 8019aa2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8019aa6:	0e2e      	lsrs	r6, r5, #24
 8019aa8:	d044      	beq.n	8019b34 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8019aaa:	9a05      	ldr	r2, [sp, #20]
 8019aac:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8019ab0:	4356      	muls	r6, r2
 8019ab2:	1c72      	adds	r2, r6, #1
 8019ab4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8019ab8:	1212      	asrs	r2, r2, #8
 8019aba:	fa1f f982 	uxth.w	r9, r2
 8019abe:	ea4f 272e 	mov.w	r7, lr, asr #8
 8019ac2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8019ac6:	43d2      	mvns	r2, r2
 8019ac8:	b2d2      	uxtb	r2, r2
 8019aca:	fb16 f609 	smulbb	r6, r6, r9
 8019ace:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019ad2:	fb07 6702 	mla	r7, r7, r2, r6
 8019ad6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019ada:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019ade:	b2ed      	uxtb	r5, r5
 8019ae0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019ae4:	fa5f fe8e 	uxtb.w	lr, lr
 8019ae8:	fb15 f509 	smulbb	r5, r5, r9
 8019aec:	fb0e 5502 	mla	r5, lr, r2, r5
 8019af0:	b2bf      	uxth	r7, r7
 8019af2:	fb1a fa09 	smulbb	sl, sl, r9
 8019af6:	b2ad      	uxth	r5, r5
 8019af8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019afc:	fb06 a602 	mla	r6, r6, r2, sl
 8019b00:	1c7a      	adds	r2, r7, #1
 8019b02:	f105 0a01 	add.w	sl, r5, #1
 8019b06:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019b0a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019b0e:	b2b6      	uxth	r6, r6
 8019b10:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019b14:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019b18:	ea4a 0707 	orr.w	r7, sl, r7
 8019b1c:	f106 0a01 	add.w	sl, r6, #1
 8019b20:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019b24:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019b28:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019b2c:	ea47 070a 	orr.w	r7, r7, sl
 8019b30:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8019b34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019b36:	4410      	add	r0, r2
 8019b38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019b3a:	f108 0801 	add.w	r8, r8, #1
 8019b3e:	4411      	add	r1, r2
 8019b40:	e7a1      	b.n	8019a86 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8019b42:	b007      	add	sp, #28
 8019b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b4c:	b085      	sub	sp, #20
 8019b4e:	468b      	mov	fp, r1
 8019b50:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019b52:	9203      	str	r2, [sp, #12]
 8019b54:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019b58:	6841      	ldr	r1, [r0, #4]
 8019b5a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8019b5e:	fb01 2404 	mla	r4, r1, r4, r2
 8019b62:	6802      	ldr	r2, [r0, #0]
 8019b64:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019b68:	f8de 2000 	ldr.w	r2, [lr]
 8019b6c:	9200      	str	r2, [sp, #0]
 8019b6e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019b72:	3204      	adds	r2, #4
 8019b74:	9201      	str	r2, [sp, #4]
 8019b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019b7a:	f1bb 0f00 	cmp.w	fp, #0
 8019b7e:	dc03      	bgt.n	8019b88 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8019b80:	9a03      	ldr	r2, [sp, #12]
 8019b82:	2a00      	cmp	r2, #0
 8019b84:	f340 8153 	ble.w	8019e2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8019b88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019b8a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019b8e:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8019b92:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019b96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019b98:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	dd0e      	ble.n	8019bbe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019ba0:	1408      	asrs	r0, r1, #16
 8019ba2:	d405      	bmi.n	8019bb0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019ba4:	42b8      	cmp	r0, r7
 8019ba6:	da03      	bge.n	8019bb0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019ba8:	1410      	asrs	r0, r2, #16
 8019baa:	d401      	bmi.n	8019bb0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019bac:	42b0      	cmp	r0, r6
 8019bae:	db07      	blt.n	8019bc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019bb0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019bb2:	4401      	add	r1, r0
 8019bb4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019bb6:	3b01      	subs	r3, #1
 8019bb8:	4402      	add	r2, r0
 8019bba:	3402      	adds	r4, #2
 8019bbc:	e7ee      	b.n	8019b9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8019bbe:	d017      	beq.n	8019bf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019bc0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019bc2:	1e58      	subs	r0, r3, #1
 8019bc4:	fb05 1500 	mla	r5, r5, r0, r1
 8019bc8:	142d      	asrs	r5, r5, #16
 8019bca:	d409      	bmi.n	8019be0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019bcc:	42bd      	cmp	r5, r7
 8019bce:	da07      	bge.n	8019be0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019bd0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019bd2:	fb05 2000 	mla	r0, r5, r0, r2
 8019bd6:	1400      	asrs	r0, r0, #16
 8019bd8:	d402      	bmi.n	8019be0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019bda:	42b0      	cmp	r0, r6
 8019bdc:	f2c0 80bc 	blt.w	8019d58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8019be0:	2600      	movs	r6, #0
 8019be2:	1998      	adds	r0, r3, r6
 8019be4:	2800      	cmp	r0, #0
 8019be6:	dc3e      	bgt.n	8019c66 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019be8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019bec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019bf0:	f1bb 0f00 	cmp.w	fp, #0
 8019bf4:	f340 811b 	ble.w	8019e2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8019bf8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019bfc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019c00:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019c06:	f1bb 0b01 	subs.w	fp, fp, #1
 8019c0a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019c0e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019c12:	eeb0 6a62 	vmov.f32	s12, s5
 8019c16:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019c1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019c1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019c22:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019c26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019c2a:	eeb0 6a43 	vmov.f32	s12, s6
 8019c2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019c32:	ee12 2a90 	vmov	r2, s5
 8019c36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019c3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c3e:	ee13 2a10 	vmov	r2, s6
 8019c42:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019c46:	9311      	str	r3, [sp, #68]	; 0x44
 8019c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c4e:	9a03      	ldr	r2, [sp, #12]
 8019c50:	9312      	str	r3, [sp, #72]	; 0x48
 8019c52:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019c58:	eeb0 3a67 	vmov.f32	s6, s15
 8019c5c:	bf08      	it	eq
 8019c5e:	4613      	moveq	r3, r2
 8019c60:	eef0 2a47 	vmov.f32	s5, s14
 8019c64:	e789      	b.n	8019b7a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8019c66:	140f      	asrs	r7, r1, #16
 8019c68:	d426      	bmi.n	8019cb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019c6a:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019c6e:	42bd      	cmp	r5, r7
 8019c70:	dd22      	ble.n	8019cb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019c72:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019c76:	d41f      	bmi.n	8019cb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019c78:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019c7c:	4560      	cmp	r0, ip
 8019c7e:	dd1b      	ble.n	8019cb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019c80:	9800      	ldr	r0, [sp, #0]
 8019c82:	b22d      	sxth	r5, r5
 8019c84:	fb0c 0505 	mla	r5, ip, r5, r0
 8019c88:	5de8      	ldrb	r0, [r5, r7]
 8019c8a:	9d01      	ldr	r5, [sp, #4]
 8019c8c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8019c90:	0e07      	lsrs	r7, r0, #24
 8019c92:	2fff      	cmp	r7, #255	; 0xff
 8019c94:	d116      	bne.n	8019cc4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019c96:	f06f 0501 	mvn.w	r5, #1
 8019c9a:	fb05 f706 	mul.w	r7, r5, r6
 8019c9e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8019ca2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8019ca6:	0945      	lsrs	r5, r0, #5
 8019ca8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019cac:	ea4c 0505 	orr.w	r5, ip, r5
 8019cb0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8019cb4:	4305      	orrs	r5, r0
 8019cb6:	53e5      	strh	r5, [r4, r7]
 8019cb8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019cba:	4401      	add	r1, r0
 8019cbc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019cbe:	3e01      	subs	r6, #1
 8019cc0:	4402      	add	r2, r0
 8019cc2:	e78e      	b.n	8019be2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8019cc4:	b2fd      	uxtb	r5, r7
 8019cc6:	2f00      	cmp	r7, #0
 8019cc8:	d0f6      	beq.n	8019cb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019cca:	f06f 0701 	mvn.w	r7, #1
 8019cce:	4377      	muls	r7, r6
 8019cd0:	fa1f f985 	uxth.w	r9, r5
 8019cd4:	f834 8007 	ldrh.w	r8, [r4, r7]
 8019cd8:	9702      	str	r7, [sp, #8]
 8019cda:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8019cde:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8019ce2:	43ed      	mvns	r5, r5
 8019ce4:	b2ed      	uxtb	r5, r5
 8019ce6:	fb17 f709 	smulbb	r7, r7, r9
 8019cea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019cee:	fb0c 7c05 	mla	ip, ip, r5, r7
 8019cf2:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019cf6:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8019cfa:	b2c0      	uxtb	r0, r0
 8019cfc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019d00:	fa5f f888 	uxtb.w	r8, r8
 8019d04:	fb10 f009 	smulbb	r0, r0, r9
 8019d08:	fb08 0005 	mla	r0, r8, r5, r0
 8019d0c:	b280      	uxth	r0, r0
 8019d0e:	fa1f fc8c 	uxth.w	ip, ip
 8019d12:	fb1a fa09 	smulbb	sl, sl, r9
 8019d16:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019d1a:	fb07 a705 	mla	r7, r7, r5, sl
 8019d1e:	f100 0a01 	add.w	sl, r0, #1
 8019d22:	f10c 0501 	add.w	r5, ip, #1
 8019d26:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8019d2a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019d2e:	b2bf      	uxth	r7, r7
 8019d30:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019d34:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019d38:	ea4a 0c0c 	orr.w	ip, sl, ip
 8019d3c:	f107 0a01 	add.w	sl, r7, #1
 8019d40:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019d44:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019d48:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019d4c:	9802      	ldr	r0, [sp, #8]
 8019d4e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8019d52:	f824 c000 	strh.w	ip, [r4, r0]
 8019d56:	e7af      	b.n	8019cb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019d58:	f04f 0800 	mov.w	r8, #0
 8019d5c:	eba3 0008 	sub.w	r0, r3, r8
 8019d60:	2800      	cmp	r0, #0
 8019d62:	f77f af41 	ble.w	8019be8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019d66:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8019d6a:	9f00      	ldr	r7, [sp, #0]
 8019d6c:	1410      	asrs	r0, r2, #16
 8019d6e:	140d      	asrs	r5, r1, #16
 8019d70:	fb06 7000 	mla	r0, r6, r0, r7
 8019d74:	5d40      	ldrb	r0, [r0, r5]
 8019d76:	9d01      	ldr	r5, [sp, #4]
 8019d78:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8019d7c:	0e2e      	lsrs	r6, r5, #24
 8019d7e:	2eff      	cmp	r6, #255	; 0xff
 8019d80:	d112      	bne.n	8019da8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8019d82:	482c      	ldr	r0, [pc, #176]	; (8019e34 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8019d84:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8019d88:	0968      	lsrs	r0, r5, #5
 8019d8a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019d8e:	4330      	orrs	r0, r6
 8019d90:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019d94:	4328      	orrs	r0, r5
 8019d96:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8019d9a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019d9c:	4401      	add	r1, r0
 8019d9e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019da0:	f108 0801 	add.w	r8, r8, #1
 8019da4:	4402      	add	r2, r0
 8019da6:	e7d9      	b.n	8019d5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019da8:	b2f0      	uxtb	r0, r6
 8019daa:	2e00      	cmp	r6, #0
 8019dac:	d0f5      	beq.n	8019d9a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8019dae:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8019db2:	fa1f f980 	uxth.w	r9, r0
 8019db6:	ea4f 272c 	mov.w	r7, ip, asr #8
 8019dba:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8019dbe:	43c0      	mvns	r0, r0
 8019dc0:	b2c0      	uxtb	r0, r0
 8019dc2:	fb16 f609 	smulbb	r6, r6, r9
 8019dc6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019dca:	fb07 6700 	mla	r7, r7, r0, r6
 8019dce:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019dd2:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8019dd6:	b2ed      	uxtb	r5, r5
 8019dd8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019ddc:	fa5f fc8c 	uxtb.w	ip, ip
 8019de0:	fb15 f509 	smulbb	r5, r5, r9
 8019de4:	fb0c 5500 	mla	r5, ip, r0, r5
 8019de8:	b2bf      	uxth	r7, r7
 8019dea:	fb1a fa09 	smulbb	sl, sl, r9
 8019dee:	b2ad      	uxth	r5, r5
 8019df0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019df4:	fb06 a600 	mla	r6, r6, r0, sl
 8019df8:	1c78      	adds	r0, r7, #1
 8019dfa:	f105 0a01 	add.w	sl, r5, #1
 8019dfe:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8019e02:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019e06:	b2b6      	uxth	r6, r6
 8019e08:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019e0c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019e10:	ea4a 0707 	orr.w	r7, sl, r7
 8019e14:	f106 0a01 	add.w	sl, r6, #1
 8019e18:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019e1c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019e20:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019e24:	ea47 070a 	orr.w	r7, r7, sl
 8019e28:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8019e2c:	e7b5      	b.n	8019d9a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8019e2e:	b005      	add	sp, #20
 8019e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e34:	fffff800 	.word	0xfffff800

08019e38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e3c:	b087      	sub	sp, #28
 8019e3e:	468b      	mov	fp, r1
 8019e40:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019e42:	9204      	str	r2, [sp, #16]
 8019e44:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019e48:	9205      	str	r2, [sp, #20]
 8019e4a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8019e4e:	6861      	ldr	r1, [r4, #4]
 8019e50:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8019e54:	fb01 2000 	mla	r0, r1, r0, r2
 8019e58:	6822      	ldr	r2, [r4, #0]
 8019e5a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8019e5e:	f8de 2000 	ldr.w	r2, [lr]
 8019e62:	9201      	str	r2, [sp, #4]
 8019e64:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019e68:	9202      	str	r2, [sp, #8]
 8019e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019e6e:	f1bb 0f00 	cmp.w	fp, #0
 8019e72:	dc03      	bgt.n	8019e7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8019e74:	9a04      	ldr	r2, [sp, #16]
 8019e76:	2a00      	cmp	r2, #0
 8019e78:	f340 8142 	ble.w	801a100 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8019e7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019e7e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019e82:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8019e86:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019e8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019e8c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	dd0e      	ble.n	8019eb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019e94:	140c      	asrs	r4, r1, #16
 8019e96:	d405      	bmi.n	8019ea4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019e98:	42bc      	cmp	r4, r7
 8019e9a:	da03      	bge.n	8019ea4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019e9c:	1414      	asrs	r4, r2, #16
 8019e9e:	d401      	bmi.n	8019ea4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019ea0:	42b4      	cmp	r4, r6
 8019ea2:	db07      	blt.n	8019eb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019ea4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019ea6:	4421      	add	r1, r4
 8019ea8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019eaa:	3b01      	subs	r3, #1
 8019eac:	4422      	add	r2, r4
 8019eae:	3002      	adds	r0, #2
 8019eb0:	e7ee      	b.n	8019e90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8019eb2:	d019      	beq.n	8019ee8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8019eb4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019eb6:	1e5c      	subs	r4, r3, #1
 8019eb8:	fb05 1504 	mla	r5, r5, r4, r1
 8019ebc:	142d      	asrs	r5, r5, #16
 8019ebe:	d409      	bmi.n	8019ed4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019ec0:	42bd      	cmp	r5, r7
 8019ec2:	da07      	bge.n	8019ed4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019ec4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019ec6:	fb05 2404 	mla	r4, r5, r4, r2
 8019eca:	1424      	asrs	r4, r4, #16
 8019ecc:	d402      	bmi.n	8019ed4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019ece:	42b4      	cmp	r4, r6
 8019ed0:	f2c0 80b1 	blt.w	801a036 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8019ed4:	f04f 0800 	mov.w	r8, #0
 8019ed8:	eb03 0408 	add.w	r4, r3, r8
 8019edc:	2c00      	cmp	r4, #0
 8019ede:	dc3e      	bgt.n	8019f5e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019ee0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019ee4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019ee8:	f1bb 0f00 	cmp.w	fp, #0
 8019eec:	f340 8108 	ble.w	801a100 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8019ef0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019ef4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019ef8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019efe:	f1bb 0b01 	subs.w	fp, fp, #1
 8019f02:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f0a:	eeb0 6a62 	vmov.f32	s12, s5
 8019f0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f12:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f16:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f1a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019f1e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019f22:	eeb0 6a43 	vmov.f32	s12, s6
 8019f26:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019f2a:	ee12 2a90 	vmov	r2, s5
 8019f2e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f36:	ee13 2a10 	vmov	r2, s6
 8019f3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f3e:	9313      	str	r3, [sp, #76]	; 0x4c
 8019f40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019f42:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f46:	9a04      	ldr	r2, [sp, #16]
 8019f48:	9314      	str	r3, [sp, #80]	; 0x50
 8019f4a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019f4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019f50:	eeb0 3a67 	vmov.f32	s6, s15
 8019f54:	bf08      	it	eq
 8019f56:	4613      	moveq	r3, r2
 8019f58:	eef0 2a47 	vmov.f32	s5, s14
 8019f5c:	e787      	b.n	8019e6e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8019f5e:	140e      	asrs	r6, r1, #16
 8019f60:	d462      	bmi.n	801a028 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019f62:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019f66:	42b5      	cmp	r5, r6
 8019f68:	dd5e      	ble.n	801a028 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019f6a:	1417      	asrs	r7, r2, #16
 8019f6c:	d45c      	bmi.n	801a028 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019f6e:	f8de 400c 	ldr.w	r4, [lr, #12]
 8019f72:	42bc      	cmp	r4, r7
 8019f74:	dd58      	ble.n	801a028 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019f76:	b22d      	sxth	r5, r5
 8019f78:	fb07 6505 	mla	r5, r7, r5, r6
 8019f7c:	9c02      	ldr	r4, [sp, #8]
 8019f7e:	5d66      	ldrb	r6, [r4, r5]
 8019f80:	2e00      	cmp	r6, #0
 8019f82:	d051      	beq.n	801a028 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019f84:	9c01      	ldr	r4, [sp, #4]
 8019f86:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8019f8a:	f06f 0401 	mvn.w	r4, #1
 8019f8e:	fb04 f408 	mul.w	r4, r4, r8
 8019f92:	9403      	str	r4, [sp, #12]
 8019f94:	5b05      	ldrh	r5, [r0, r4]
 8019f96:	9c05      	ldr	r4, [sp, #20]
 8019f98:	4366      	muls	r6, r4
 8019f9a:	1c74      	adds	r4, r6, #1
 8019f9c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8019fa0:	1224      	asrs	r4, r4, #8
 8019fa2:	b2a7      	uxth	r7, r4
 8019fa4:	122e      	asrs	r6, r5, #8
 8019fa6:	43e4      	mvns	r4, r4
 8019fa8:	b2e4      	uxtb	r4, r4
 8019faa:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8019fae:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019fb2:	fb16 f604 	smulbb	r6, r6, r4
 8019fb6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8019fba:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019fbe:	00ed      	lsls	r5, r5, #3
 8019fc0:	fb0c 6c07 	mla	ip, ip, r7, r6
 8019fc4:	b2ed      	uxtb	r5, r5
 8019fc6:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8019fca:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8019fce:	fb15 f504 	smulbb	r5, r5, r4
 8019fd2:	fa5f f989 	uxtb.w	r9, r9
 8019fd6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8019fda:	fb09 5507 	mla	r5, r9, r7, r5
 8019fde:	fb1a fa04 	smulbb	sl, sl, r4
 8019fe2:	fa1f fc8c 	uxth.w	ip, ip
 8019fe6:	b2ad      	uxth	r5, r5
 8019fe8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019fec:	fb06 a607 	mla	r6, r6, r7, sl
 8019ff0:	f10c 0401 	add.w	r4, ip, #1
 8019ff4:	f105 0a01 	add.w	sl, r5, #1
 8019ff8:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8019ffc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a000:	b2b6      	uxth	r6, r6
 801a002:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a006:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a00a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a00e:	f106 0a01 	add.w	sl, r6, #1
 801a012:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a016:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a01a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a01e:	9c03      	ldr	r4, [sp, #12]
 801a020:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a024:	f820 c004 	strh.w	ip, [r0, r4]
 801a028:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a02a:	4421      	add	r1, r4
 801a02c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a02e:	f108 38ff 	add.w	r8, r8, #4294967295
 801a032:	4422      	add	r2, r4
 801a034:	e750      	b.n	8019ed8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801a036:	f04f 0900 	mov.w	r9, #0
 801a03a:	eba3 0409 	sub.w	r4, r3, r9
 801a03e:	2c00      	cmp	r4, #0
 801a040:	f77f af4e 	ble.w	8019ee0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801a044:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801a048:	140d      	asrs	r5, r1, #16
 801a04a:	1414      	asrs	r4, r2, #16
 801a04c:	fb06 5404 	mla	r4, r6, r4, r5
 801a050:	9d02      	ldr	r5, [sp, #8]
 801a052:	5d2e      	ldrb	r6, [r5, r4]
 801a054:	2e00      	cmp	r6, #0
 801a056:	d04c      	beq.n	801a0f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801a058:	9d01      	ldr	r5, [sp, #4]
 801a05a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801a05e:	9c05      	ldr	r4, [sp, #20]
 801a060:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801a064:	4366      	muls	r6, r4
 801a066:	1c74      	adds	r4, r6, #1
 801a068:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801a06c:	1224      	asrs	r4, r4, #8
 801a06e:	b2a7      	uxth	r7, r4
 801a070:	122e      	asrs	r6, r5, #8
 801a072:	43e4      	mvns	r4, r4
 801a074:	b2e4      	uxtb	r4, r4
 801a076:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801a07a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a07e:	fb16 f604 	smulbb	r6, r6, r4
 801a082:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a086:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a08a:	00ed      	lsls	r5, r5, #3
 801a08c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a090:	b2ed      	uxtb	r5, r5
 801a092:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801a096:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a09a:	fb15 f504 	smulbb	r5, r5, r4
 801a09e:	fa5f f888 	uxtb.w	r8, r8
 801a0a2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a0a6:	fb08 5507 	mla	r5, r8, r7, r5
 801a0aa:	fb1a fa04 	smulbb	sl, sl, r4
 801a0ae:	fa1f fc8c 	uxth.w	ip, ip
 801a0b2:	b2ad      	uxth	r5, r5
 801a0b4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a0b8:	fb06 a607 	mla	r6, r6, r7, sl
 801a0bc:	f10c 0401 	add.w	r4, ip, #1
 801a0c0:	f105 0a01 	add.w	sl, r5, #1
 801a0c4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801a0c8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a0cc:	b2b6      	uxth	r6, r6
 801a0ce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a0d2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a0d6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a0da:	f106 0a01 	add.w	sl, r6, #1
 801a0de:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a0e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a0e6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a0ea:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a0ee:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801a0f2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a0f4:	4421      	add	r1, r4
 801a0f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a0f8:	f109 0901 	add.w	r9, r9, #1
 801a0fc:	4422      	add	r2, r4
 801a0fe:	e79c      	b.n	801a03a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801a100:	b007      	add	sp, #28
 801a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a106 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a106:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a10a:	b085      	sub	sp, #20
 801a10c:	468b      	mov	fp, r1
 801a10e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a110:	9203      	str	r2, [sp, #12]
 801a112:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801a116:	6861      	ldr	r1, [r4, #4]
 801a118:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801a11c:	fb01 2000 	mla	r0, r1, r0, r2
 801a120:	6822      	ldr	r2, [r4, #0]
 801a122:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801a126:	f8d8 2000 	ldr.w	r2, [r8]
 801a12a:	9200      	str	r2, [sp, #0]
 801a12c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a130:	9201      	str	r2, [sp, #4]
 801a132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a136:	f1bb 0f00 	cmp.w	fp, #0
 801a13a:	dc03      	bgt.n	801a144 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a13c:	9a03      	ldr	r2, [sp, #12]
 801a13e:	2a00      	cmp	r2, #0
 801a140:	f340 8146 	ble.w	801a3d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801a144:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a146:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801a14a:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801a14e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a152:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a154:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a158:	2b00      	cmp	r3, #0
 801a15a:	dd0e      	ble.n	801a17a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a15c:	140c      	asrs	r4, r1, #16
 801a15e:	d405      	bmi.n	801a16c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a160:	42bc      	cmp	r4, r7
 801a162:	da03      	bge.n	801a16c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a164:	1414      	asrs	r4, r2, #16
 801a166:	d401      	bmi.n	801a16c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a168:	42b4      	cmp	r4, r6
 801a16a:	db07      	blt.n	801a17c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a16c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a16e:	4421      	add	r1, r4
 801a170:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a172:	3b01      	subs	r3, #1
 801a174:	4422      	add	r2, r4
 801a176:	3002      	adds	r0, #2
 801a178:	e7ee      	b.n	801a158 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a17a:	d017      	beq.n	801a1ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a17c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a17e:	1e5c      	subs	r4, r3, #1
 801a180:	fb05 1504 	mla	r5, r5, r4, r1
 801a184:	142d      	asrs	r5, r5, #16
 801a186:	d409      	bmi.n	801a19c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a188:	42bd      	cmp	r5, r7
 801a18a:	da07      	bge.n	801a19c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a18c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a18e:	fb05 2404 	mla	r4, r5, r4, r2
 801a192:	1424      	asrs	r4, r4, #16
 801a194:	d402      	bmi.n	801a19c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a196:	42b4      	cmp	r4, r6
 801a198:	f2c0 80b3 	blt.w	801a302 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801a19c:	2600      	movs	r6, #0
 801a19e:	199c      	adds	r4, r3, r6
 801a1a0:	2c00      	cmp	r4, #0
 801a1a2:	dc3e      	bgt.n	801a222 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a1a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a1a8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a1ac:	f1bb 0f00 	cmp.w	fp, #0
 801a1b0:	f340 810e 	ble.w	801a3d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801a1b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a1b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a1bc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a1c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1c2:	f1bb 0b01 	subs.w	fp, fp, #1
 801a1c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a1ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a1ce:	eeb0 6a62 	vmov.f32	s12, s5
 801a1d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a1d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a1da:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a1de:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a1e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a1e6:	eeb0 6a43 	vmov.f32	s12, s6
 801a1ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a1ee:	ee12 2a90 	vmov	r2, s5
 801a1f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a1f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a1fa:	ee13 2a10 	vmov	r2, s6
 801a1fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a202:	9311      	str	r3, [sp, #68]	; 0x44
 801a204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a206:	fb92 f3f3 	sdiv	r3, r2, r3
 801a20a:	9a03      	ldr	r2, [sp, #12]
 801a20c:	9312      	str	r3, [sp, #72]	; 0x48
 801a20e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a214:	eeb0 3a67 	vmov.f32	s6, s15
 801a218:	bf08      	it	eq
 801a21a:	4613      	moveq	r3, r2
 801a21c:	eef0 2a47 	vmov.f32	s5, s14
 801a220:	e789      	b.n	801a136 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a222:	140f      	asrs	r7, r1, #16
 801a224:	d418      	bmi.n	801a258 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a226:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801a22a:	42bd      	cmp	r5, r7
 801a22c:	dd14      	ble.n	801a258 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a22e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a232:	d411      	bmi.n	801a258 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a234:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801a238:	4564      	cmp	r4, ip
 801a23a:	dd0d      	ble.n	801a258 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a23c:	b22d      	sxth	r5, r5
 801a23e:	fb0c 7505 	mla	r5, ip, r5, r7
 801a242:	9c01      	ldr	r4, [sp, #4]
 801a244:	5d64      	ldrb	r4, [r4, r5]
 801a246:	2cff      	cmp	r4, #255	; 0xff
 801a248:	d10c      	bne.n	801a264 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a24a:	9c00      	ldr	r4, [sp, #0]
 801a24c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801a250:	f06f 0401 	mvn.w	r4, #1
 801a254:	4374      	muls	r4, r6
 801a256:	5305      	strh	r5, [r0, r4]
 801a258:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a25a:	4421      	add	r1, r4
 801a25c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a25e:	3e01      	subs	r6, #1
 801a260:	4422      	add	r2, r4
 801a262:	e79c      	b.n	801a19e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a264:	2c00      	cmp	r4, #0
 801a266:	d0f7      	beq.n	801a258 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a268:	9f00      	ldr	r7, [sp, #0]
 801a26a:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801a26e:	f06f 0501 	mvn.w	r5, #1
 801a272:	4375      	muls	r5, r6
 801a274:	9502      	str	r5, [sp, #8]
 801a276:	5b45      	ldrh	r5, [r0, r5]
 801a278:	fa1f fc84 	uxth.w	ip, r4
 801a27c:	122f      	asrs	r7, r5, #8
 801a27e:	43e4      	mvns	r4, r4
 801a280:	b2e4      	uxtb	r4, r4
 801a282:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801a286:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a28a:	fb17 f704 	smulbb	r7, r7, r4
 801a28e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a292:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801a296:	00ed      	lsls	r5, r5, #3
 801a298:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801a29c:	b2ed      	uxtb	r5, r5
 801a29e:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801a2a2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801a2a6:	fb15 f504 	smulbb	r5, r5, r4
 801a2aa:	fa5f f989 	uxtb.w	r9, r9
 801a2ae:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a2b2:	fb09 550c 	mla	r5, r9, ip, r5
 801a2b6:	fb1a fa04 	smulbb	sl, sl, r4
 801a2ba:	fa1f fe8e 	uxth.w	lr, lr
 801a2be:	b2ad      	uxth	r5, r5
 801a2c0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a2c4:	fb07 a70c 	mla	r7, r7, ip, sl
 801a2c8:	f10e 0401 	add.w	r4, lr, #1
 801a2cc:	f105 0a01 	add.w	sl, r5, #1
 801a2d0:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801a2d4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a2d8:	b2bf      	uxth	r7, r7
 801a2da:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a2de:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801a2e2:	ea4a 0e0e 	orr.w	lr, sl, lr
 801a2e6:	f107 0a01 	add.w	sl, r7, #1
 801a2ea:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a2ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a2f2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a2f6:	9c02      	ldr	r4, [sp, #8]
 801a2f8:	ea4e 0e0a 	orr.w	lr, lr, sl
 801a2fc:	f820 e004 	strh.w	lr, [r0, r4]
 801a300:	e7aa      	b.n	801a258 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a302:	f04f 0900 	mov.w	r9, #0
 801a306:	eba3 0409 	sub.w	r4, r3, r9
 801a30a:	2c00      	cmp	r4, #0
 801a30c:	f77f af4a 	ble.w	801a1a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a310:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801a314:	1414      	asrs	r4, r2, #16
 801a316:	140d      	asrs	r5, r1, #16
 801a318:	fb06 5504 	mla	r5, r6, r4, r5
 801a31c:	9c01      	ldr	r4, [sp, #4]
 801a31e:	5d64      	ldrb	r4, [r4, r5]
 801a320:	2cff      	cmp	r4, #255	; 0xff
 801a322:	d10b      	bne.n	801a33c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801a324:	9c00      	ldr	r4, [sp, #0]
 801a326:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801a32a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801a32e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a330:	4421      	add	r1, r4
 801a332:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a334:	f109 0901 	add.w	r9, r9, #1
 801a338:	4422      	add	r2, r4
 801a33a:	e7e4      	b.n	801a306 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801a33c:	2c00      	cmp	r4, #0
 801a33e:	d0f6      	beq.n	801a32e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801a340:	9e00      	ldr	r6, [sp, #0]
 801a342:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801a346:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801a34a:	b2a7      	uxth	r7, r4
 801a34c:	122e      	asrs	r6, r5, #8
 801a34e:	43e4      	mvns	r4, r4
 801a350:	b2e4      	uxtb	r4, r4
 801a352:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a356:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a35a:	fb16 f604 	smulbb	r6, r6, r4
 801a35e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a362:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a366:	00ed      	lsls	r5, r5, #3
 801a368:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a36c:	b2ed      	uxtb	r5, r5
 801a36e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a372:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a376:	fb15 f504 	smulbb	r5, r5, r4
 801a37a:	fa5f fe8e 	uxtb.w	lr, lr
 801a37e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a382:	fb0e 5507 	mla	r5, lr, r7, r5
 801a386:	fb1a fa04 	smulbb	sl, sl, r4
 801a38a:	fa1f fc8c 	uxth.w	ip, ip
 801a38e:	b2ad      	uxth	r5, r5
 801a390:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a394:	fb06 a607 	mla	r6, r6, r7, sl
 801a398:	f10c 0401 	add.w	r4, ip, #1
 801a39c:	f105 0a01 	add.w	sl, r5, #1
 801a3a0:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801a3a4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a3a8:	b2b6      	uxth	r6, r6
 801a3aa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a3ae:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a3b2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a3b6:	f106 0a01 	add.w	sl, r6, #1
 801a3ba:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a3be:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a3c2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a3c6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a3ca:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801a3ce:	e7ae      	b.n	801a32e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801a3d0:	b005      	add	sp, #20
 801a3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a3d6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a3d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3da:	b085      	sub	sp, #20
 801a3dc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a3de:	9203      	str	r2, [sp, #12]
 801a3e0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801a3e4:	9201      	str	r2, [sp, #4]
 801a3e6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a3ea:	9100      	str	r1, [sp, #0]
 801a3ec:	6841      	ldr	r1, [r0, #4]
 801a3ee:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801a3f2:	fb01 2404 	mla	r4, r1, r4, r2
 801a3f6:	6802      	ldr	r2, [r0, #0]
 801a3f8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a3fc:	f8de 2000 	ldr.w	r2, [lr]
 801a400:	9202      	str	r2, [sp, #8]
 801a402:	9a01      	ldr	r2, [sp, #4]
 801a404:	43d6      	mvns	r6, r2
 801a406:	b2f6      	uxtb	r6, r6
 801a408:	9a00      	ldr	r2, [sp, #0]
 801a40a:	2a00      	cmp	r2, #0
 801a40c:	dc03      	bgt.n	801a416 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a40e:	9a03      	ldr	r2, [sp, #12]
 801a410:	2a00      	cmp	r2, #0
 801a412:	f340 8124 	ble.w	801a65e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801a416:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a418:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801a41c:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801a420:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a424:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a426:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	dd0e      	ble.n	801a44c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a42e:	1408      	asrs	r0, r1, #16
 801a430:	d405      	bmi.n	801a43e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a432:	4560      	cmp	r0, ip
 801a434:	da03      	bge.n	801a43e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a436:	1410      	asrs	r0, r2, #16
 801a438:	d401      	bmi.n	801a43e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a43a:	42b8      	cmp	r0, r7
 801a43c:	db07      	blt.n	801a44e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a43e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a440:	4401      	add	r1, r0
 801a442:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a444:	3b01      	subs	r3, #1
 801a446:	4402      	add	r2, r0
 801a448:	3402      	adds	r4, #2
 801a44a:	e7ee      	b.n	801a42a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a44c:	d06e      	beq.n	801a52c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a44e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a450:	1e58      	subs	r0, r3, #1
 801a452:	fb05 1500 	mla	r5, r5, r0, r1
 801a456:	142d      	asrs	r5, r5, #16
 801a458:	d45c      	bmi.n	801a514 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a45a:	4565      	cmp	r5, ip
 801a45c:	da5a      	bge.n	801a514 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a45e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a460:	fb05 2000 	mla	r0, r5, r0, r2
 801a464:	1400      	asrs	r0, r0, #16
 801a466:	d455      	bmi.n	801a514 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a468:	42b8      	cmp	r0, r7
 801a46a:	da53      	bge.n	801a514 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a46c:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801a470:	4699      	mov	r9, r3
 801a472:	46a2      	mov	sl, r4
 801a474:	f1b9 0f00 	cmp.w	r9, #0
 801a478:	dd54      	ble.n	801a524 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a47a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a47e:	140d      	asrs	r5, r1, #16
 801a480:	1410      	asrs	r0, r2, #16
 801a482:	fb07 5000 	mla	r0, r7, r0, r5
 801a486:	9d02      	ldr	r5, [sp, #8]
 801a488:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a48c:	f8ba 5000 	ldrh.w	r5, [sl]
 801a490:	122f      	asrs	r7, r5, #8
 801a492:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a496:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a49a:	fb17 f706 	smulbb	r7, r7, r6
 801a49e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801a4a2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a4a6:	00ed      	lsls	r5, r5, #3
 801a4a8:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801a4ac:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801a4b0:	10c7      	asrs	r7, r0, #3
 801a4b2:	b2ed      	uxtb	r5, r5
 801a4b4:	00c0      	lsls	r0, r0, #3
 801a4b6:	fb18 f806 	smulbb	r8, r8, r6
 801a4ba:	fb15 f506 	smulbb	r5, r5, r6
 801a4be:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a4c2:	b2c0      	uxtb	r0, r0
 801a4c4:	fa1f fc8c 	uxth.w	ip, ip
 801a4c8:	fb07 870b 	mla	r7, r7, fp, r8
 801a4cc:	fb00 500b 	mla	r0, r0, fp, r5
 801a4d0:	b280      	uxth	r0, r0
 801a4d2:	b2bf      	uxth	r7, r7
 801a4d4:	f10c 0501 	add.w	r5, ip, #1
 801a4d8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a4dc:	f107 0801 	add.w	r8, r7, #1
 801a4e0:	1c45      	adds	r5, r0, #1
 801a4e2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a4e6:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801a4ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a4ec:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a4f0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a4f4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a4f8:	ea45 0c0c 	orr.w	ip, r5, ip
 801a4fc:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a500:	4401      	add	r1, r0
 801a502:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a504:	ea4c 0c08 	orr.w	ip, ip, r8
 801a508:	f82a cb02 	strh.w	ip, [sl], #2
 801a50c:	4402      	add	r2, r0
 801a50e:	f109 39ff 	add.w	r9, r9, #4294967295
 801a512:	e7af      	b.n	801a474 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a514:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801a518:	f04f 0800 	mov.w	r8, #0
 801a51c:	eb03 0008 	add.w	r0, r3, r8
 801a520:	2800      	cmp	r0, #0
 801a522:	dc41      	bgt.n	801a5a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801a524:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a528:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a52c:	9b00      	ldr	r3, [sp, #0]
 801a52e:	2b00      	cmp	r3, #0
 801a530:	f340 8095 	ble.w	801a65e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801a534:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a53c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a542:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a546:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a54a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a54e:	eef0 6a62 	vmov.f32	s13, s5
 801a552:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a556:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a55a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a55e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801a562:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a566:	eef0 6a43 	vmov.f32	s13, s6
 801a56a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a56e:	ee12 2a90 	vmov	r2, s5
 801a572:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a576:	fb92 f3f3 	sdiv	r3, r2, r3
 801a57a:	ee13 2a10 	vmov	r2, s6
 801a57e:	9311      	str	r3, [sp, #68]	; 0x44
 801a580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a582:	fb92 f3f3 	sdiv	r3, r2, r3
 801a586:	9312      	str	r3, [sp, #72]	; 0x48
 801a588:	9b00      	ldr	r3, [sp, #0]
 801a58a:	9a03      	ldr	r2, [sp, #12]
 801a58c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a590:	3b01      	subs	r3, #1
 801a592:	9300      	str	r3, [sp, #0]
 801a594:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801a598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a59a:	eeb0 3a67 	vmov.f32	s6, s15
 801a59e:	bf08      	it	eq
 801a5a0:	4613      	moveq	r3, r2
 801a5a2:	eef0 2a47 	vmov.f32	s5, s14
 801a5a6:	e72f      	b.n	801a408 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801a5a8:	140f      	asrs	r7, r1, #16
 801a5aa:	d451      	bmi.n	801a650 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a5ac:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a5b0:	42bd      	cmp	r5, r7
 801a5b2:	dd4d      	ble.n	801a650 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a5b4:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a5b8:	d44a      	bmi.n	801a650 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a5ba:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a5be:	4560      	cmp	r0, ip
 801a5c0:	dd46      	ble.n	801a650 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a5c2:	b22d      	sxth	r5, r5
 801a5c4:	fb0c 7505 	mla	r5, ip, r5, r7
 801a5c8:	9802      	ldr	r0, [sp, #8]
 801a5ca:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801a5ce:	f06f 0501 	mvn.w	r5, #1
 801a5d2:	fb05 fb08 	mul.w	fp, r5, r8
 801a5d6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a5da:	f834 500b 	ldrh.w	r5, [r4, fp]
 801a5de:	122f      	asrs	r7, r5, #8
 801a5e0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a5e4:	fb17 f706 	smulbb	r7, r7, r6
 801a5e8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a5ec:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a5f0:	00ed      	lsls	r5, r5, #3
 801a5f2:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801a5f6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a5fa:	10c7      	asrs	r7, r0, #3
 801a5fc:	b2ed      	uxtb	r5, r5
 801a5fe:	00c0      	lsls	r0, r0, #3
 801a600:	fb19 f906 	smulbb	r9, r9, r6
 801a604:	fb15 f506 	smulbb	r5, r5, r6
 801a608:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a60c:	b2c0      	uxtb	r0, r0
 801a60e:	fa1f fc8c 	uxth.w	ip, ip
 801a612:	fb07 970a 	mla	r7, r7, sl, r9
 801a616:	fb00 500a 	mla	r0, r0, sl, r5
 801a61a:	b2bf      	uxth	r7, r7
 801a61c:	b280      	uxth	r0, r0
 801a61e:	f10c 0501 	add.w	r5, ip, #1
 801a622:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a626:	f107 0901 	add.w	r9, r7, #1
 801a62a:	1c45      	adds	r5, r0, #1
 801a62c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a630:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801a634:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a638:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a63c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a640:	ea45 0c0c 	orr.w	ip, r5, ip
 801a644:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a648:	ea4c 0c09 	orr.w	ip, ip, r9
 801a64c:	f824 c00b 	strh.w	ip, [r4, fp]
 801a650:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a652:	4401      	add	r1, r0
 801a654:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a656:	f108 38ff 	add.w	r8, r8, #4294967295
 801a65a:	4402      	add	r2, r0
 801a65c:	e75e      	b.n	801a51c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a65e:	b005      	add	sp, #20
 801a660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a664 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a668:	b085      	sub	sp, #20
 801a66a:	4693      	mov	fp, r2
 801a66c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a66e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a670:	6870      	ldr	r0, [r6, #4]
 801a672:	9101      	str	r1, [sp, #4]
 801a674:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a678:	fb00 2404 	mla	r4, r0, r4, r2
 801a67c:	6832      	ldr	r2, [r6, #0]
 801a67e:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801a682:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a686:	682a      	ldr	r2, [r5, #0]
 801a688:	9202      	str	r2, [sp, #8]
 801a68a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a68e:	9a01      	ldr	r2, [sp, #4]
 801a690:	2a00      	cmp	r2, #0
 801a692:	dc03      	bgt.n	801a69c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a694:	f1bb 0f00 	cmp.w	fp, #0
 801a698:	f340 809a 	ble.w	801a7d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801a69c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a69e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a6a2:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a6a6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a6aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a6ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	dd0c      	ble.n	801a6ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a6b4:	1406      	asrs	r6, r0, #16
 801a6b6:	d405      	bmi.n	801a6c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a6b8:	454e      	cmp	r6, r9
 801a6ba:	da03      	bge.n	801a6c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a6bc:	1416      	asrs	r6, r2, #16
 801a6be:	d401      	bmi.n	801a6c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a6c0:	4546      	cmp	r6, r8
 801a6c2:	db05      	blt.n	801a6d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a6c4:	4470      	add	r0, lr
 801a6c6:	4462      	add	r2, ip
 801a6c8:	3b01      	subs	r3, #1
 801a6ca:	3402      	adds	r4, #2
 801a6cc:	e7f0      	b.n	801a6b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801a6ce:	d00f      	beq.n	801a6f0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a6d0:	1e5e      	subs	r6, r3, #1
 801a6d2:	fb0e 0706 	mla	r7, lr, r6, r0
 801a6d6:	143f      	asrs	r7, r7, #16
 801a6d8:	d541      	bpl.n	801a75e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801a6da:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801a6de:	4698      	mov	r8, r3
 801a6e0:	9603      	str	r6, [sp, #12]
 801a6e2:	f1b8 0f00 	cmp.w	r8, #0
 801a6e6:	dc56      	bgt.n	801a796 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801a6e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a6ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a6f0:	9b01      	ldr	r3, [sp, #4]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	dd6c      	ble.n	801a7d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801a6f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a6fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a6fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a704:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a708:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a70c:	eeb0 6a62 	vmov.f32	s12, s5
 801a710:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a714:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a718:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a71c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a720:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a724:	eeb0 6a43 	vmov.f32	s12, s6
 801a728:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a72c:	ee12 2a90 	vmov	r2, s5
 801a730:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a734:	fb92 fef3 	sdiv	lr, r2, r3
 801a738:	ee13 2a10 	vmov	r2, s6
 801a73c:	fb92 fcf3 	sdiv	ip, r2, r3
 801a740:	9b01      	ldr	r3, [sp, #4]
 801a742:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a746:	3b01      	subs	r3, #1
 801a748:	9301      	str	r3, [sp, #4]
 801a74a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a74e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a750:	eeb0 3a67 	vmov.f32	s6, s15
 801a754:	bf08      	it	eq
 801a756:	465b      	moveq	r3, fp
 801a758:	eef0 2a47 	vmov.f32	s5, s14
 801a75c:	e797      	b.n	801a68e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801a75e:	454f      	cmp	r7, r9
 801a760:	dabb      	bge.n	801a6da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a762:	fb0c 2606 	mla	r6, ip, r6, r2
 801a766:	1436      	asrs	r6, r6, #16
 801a768:	d4b7      	bmi.n	801a6da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a76a:	4546      	cmp	r6, r8
 801a76c:	dab5      	bge.n	801a6da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a76e:	461e      	mov	r6, r3
 801a770:	46a0      	mov	r8, r4
 801a772:	2e00      	cmp	r6, #0
 801a774:	ddb8      	ble.n	801a6e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a776:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801a77a:	9902      	ldr	r1, [sp, #8]
 801a77c:	1417      	asrs	r7, r2, #16
 801a77e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801a782:	fb0a 9707 	mla	r7, sl, r7, r9
 801a786:	4470      	add	r0, lr
 801a788:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801a78c:	f828 7b02 	strh.w	r7, [r8], #2
 801a790:	4462      	add	r2, ip
 801a792:	3e01      	subs	r6, #1
 801a794:	e7ed      	b.n	801a772 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801a796:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a79a:	d414      	bmi.n	801a7c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a79c:	68ae      	ldr	r6, [r5, #8]
 801a79e:	454e      	cmp	r6, r9
 801a7a0:	dd11      	ble.n	801a7c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a7a2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a7a6:	d40e      	bmi.n	801a7c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a7a8:	68ef      	ldr	r7, [r5, #12]
 801a7aa:	4557      	cmp	r7, sl
 801a7ac:	dd0b      	ble.n	801a7c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a7ae:	b236      	sxth	r6, r6
 801a7b0:	fb0a 9606 	mla	r6, sl, r6, r9
 801a7b4:	9f02      	ldr	r7, [sp, #8]
 801a7b6:	f06f 0101 	mvn.w	r1, #1
 801a7ba:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801a7be:	fb01 f608 	mul.w	r6, r1, r8
 801a7c2:	9903      	ldr	r1, [sp, #12]
 801a7c4:	538f      	strh	r7, [r1, r6]
 801a7c6:	4470      	add	r0, lr
 801a7c8:	4462      	add	r2, ip
 801a7ca:	f108 38ff 	add.w	r8, r8, #4294967295
 801a7ce:	e788      	b.n	801a6e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a7d0:	b005      	add	sp, #20
 801a7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a7d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a7d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7da:	b087      	sub	sp, #28
 801a7dc:	468b      	mov	fp, r1
 801a7de:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a7e0:	9203      	str	r2, [sp, #12]
 801a7e2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a7e6:	9204      	str	r2, [sp, #16]
 801a7e8:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801a7ec:	6841      	ldr	r1, [r0, #4]
 801a7ee:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801a7f2:	fb01 2505 	mla	r5, r1, r5, r2
 801a7f6:	6802      	ldr	r2, [r0, #0]
 801a7f8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801a7fc:	f8d9 2000 	ldr.w	r2, [r9]
 801a800:	9201      	str	r2, [sp, #4]
 801a802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a806:	f1bb 0f00 	cmp.w	fp, #0
 801a80a:	dc03      	bgt.n	801a814 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a80c:	9a03      	ldr	r2, [sp, #12]
 801a80e:	2a00      	cmp	r2, #0
 801a810:	f340 8159 	ble.w	801aac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801a814:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a816:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801a81a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801a81e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a822:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a824:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a828:	2b00      	cmp	r3, #0
 801a82a:	dd0e      	ble.n	801a84a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a82c:	1402      	asrs	r2, r0, #16
 801a82e:	d405      	bmi.n	801a83c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a830:	42ba      	cmp	r2, r7
 801a832:	da03      	bge.n	801a83c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a834:	140a      	asrs	r2, r1, #16
 801a836:	d401      	bmi.n	801a83c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a838:	42b2      	cmp	r2, r6
 801a83a:	db07      	blt.n	801a84c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a83c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a83e:	4410      	add	r0, r2
 801a840:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a842:	3b01      	subs	r3, #1
 801a844:	4411      	add	r1, r2
 801a846:	3502      	adds	r5, #2
 801a848:	e7ee      	b.n	801a828 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a84a:	d017      	beq.n	801a87c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a84c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a84e:	1e5a      	subs	r2, r3, #1
 801a850:	fb04 0402 	mla	r4, r4, r2, r0
 801a854:	1424      	asrs	r4, r4, #16
 801a856:	d409      	bmi.n	801a86c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a858:	42bc      	cmp	r4, r7
 801a85a:	da07      	bge.n	801a86c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a85c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a85e:	fb04 1202 	mla	r2, r4, r2, r1
 801a862:	1412      	asrs	r2, r2, #16
 801a864:	d402      	bmi.n	801a86c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a866:	42b2      	cmp	r2, r6
 801a868:	f2c0 80bf 	blt.w	801a9ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a86c:	2700      	movs	r7, #0
 801a86e:	19da      	adds	r2, r3, r7
 801a870:	2a00      	cmp	r2, #0
 801a872:	dc3e      	bgt.n	801a8f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a874:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a878:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801a87c:	f1bb 0f00 	cmp.w	fp, #0
 801a880:	f340 8121 	ble.w	801aac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801a884:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a888:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a88c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a890:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a892:	f1bb 0b01 	subs.w	fp, fp, #1
 801a896:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a89a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a89e:	eeb0 6a62 	vmov.f32	s12, s5
 801a8a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a8a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a8aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a8ae:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a8b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a8b6:	eeb0 6a43 	vmov.f32	s12, s6
 801a8ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a8be:	ee12 2a90 	vmov	r2, s5
 801a8c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a8c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8ca:	ee13 2a10 	vmov	r2, s6
 801a8ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a8d2:	9313      	str	r3, [sp, #76]	; 0x4c
 801a8d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a8d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8da:	9a03      	ldr	r2, [sp, #12]
 801a8dc:	9314      	str	r3, [sp, #80]	; 0x50
 801a8de:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a8e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a8e4:	eeb0 3a67 	vmov.f32	s6, s15
 801a8e8:	bf08      	it	eq
 801a8ea:	4613      	moveq	r3, r2
 801a8ec:	eef0 2a47 	vmov.f32	s5, s14
 801a8f0:	e789      	b.n	801a806 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a8f2:	1406      	asrs	r6, r0, #16
 801a8f4:	d42d      	bmi.n	801a952 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a8f6:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801a8fa:	42b4      	cmp	r4, r6
 801a8fc:	dd29      	ble.n	801a952 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a8fe:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801a902:	d426      	bmi.n	801a952 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a904:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801a908:	4562      	cmp	r2, ip
 801a90a:	dd22      	ble.n	801a952 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a90c:	b224      	sxth	r4, r4
 801a90e:	9a01      	ldr	r2, [sp, #4]
 801a910:	fb0c 6404 	mla	r4, ip, r4, r6
 801a914:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801a918:	0e22      	lsrs	r2, r4, #24
 801a91a:	d01a      	beq.n	801a952 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a91c:	9e04      	ldr	r6, [sp, #16]
 801a91e:	4372      	muls	r2, r6
 801a920:	1c56      	adds	r6, r2, #1
 801a922:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a926:	1212      	asrs	r2, r2, #8
 801a928:	0a26      	lsrs	r6, r4, #8
 801a92a:	2aff      	cmp	r2, #255	; 0xff
 801a92c:	9605      	str	r6, [sp, #20]
 801a92e:	d116      	bne.n	801a95e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801a930:	f06f 0201 	mvn.w	r2, #1
 801a934:	fb02 fc07 	mul.w	ip, r2, r7
 801a938:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801a93c:	0962      	lsrs	r2, r4, #5
 801a93e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a942:	f026 0607 	bic.w	r6, r6, #7
 801a946:	4316      	orrs	r6, r2
 801a948:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801a94c:	4326      	orrs	r6, r4
 801a94e:	f825 600c 	strh.w	r6, [r5, ip]
 801a952:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a954:	4410      	add	r0, r2
 801a956:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a958:	3f01      	subs	r7, #1
 801a95a:	4411      	add	r1, r2
 801a95c:	e787      	b.n	801a86e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a95e:	f06f 0601 	mvn.w	r6, #1
 801a962:	437e      	muls	r6, r7
 801a964:	fa1f fa82 	uxth.w	sl, r2
 801a968:	f835 8006 	ldrh.w	r8, [r5, r6]
 801a96c:	9602      	str	r6, [sp, #8]
 801a96e:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801a972:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801a976:	43d2      	mvns	r2, r2
 801a978:	b2d2      	uxtb	r2, r2
 801a97a:	fb1c fc0a 	smulbb	ip, ip, sl
 801a97e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801a982:	fb0e ce02 	mla	lr, lr, r2, ip
 801a986:	b2e4      	uxtb	r4, r4
 801a988:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801a98c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a990:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801a994:	fa5f f888 	uxtb.w	r8, r8
 801a998:	fb14 f40a 	smulbb	r4, r4, sl
 801a99c:	fb08 4402 	mla	r4, r8, r2, r4
 801a9a0:	fa1f fe8e 	uxth.w	lr, lr
 801a9a4:	fb16 f60a 	smulbb	r6, r6, sl
 801a9a8:	b2a4      	uxth	r4, r4
 801a9aa:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801a9ae:	fb0c 6c02 	mla	ip, ip, r2, r6
 801a9b2:	f10e 0201 	add.w	r2, lr, #1
 801a9b6:	1c66      	adds	r6, r4, #1
 801a9b8:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801a9bc:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801a9c0:	fa1f fc8c 	uxth.w	ip, ip
 801a9c4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a9c8:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801a9cc:	ea46 0e0e 	orr.w	lr, r6, lr
 801a9d0:	f10c 0601 	add.w	r6, ip, #1
 801a9d4:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801a9d8:	0976      	lsrs	r6, r6, #5
 801a9da:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a9de:	9a02      	ldr	r2, [sp, #8]
 801a9e0:	ea4e 0e06 	orr.w	lr, lr, r6
 801a9e4:	f825 e002 	strh.w	lr, [r5, r2]
 801a9e8:	e7b3      	b.n	801a952 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a9ea:	f04f 0800 	mov.w	r8, #0
 801a9ee:	eba3 0208 	sub.w	r2, r3, r8
 801a9f2:	2a00      	cmp	r2, #0
 801a9f4:	f77f af3e 	ble.w	801a874 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a9f8:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801a9fc:	1404      	asrs	r4, r0, #16
 801a9fe:	140a      	asrs	r2, r1, #16
 801aa00:	fb06 4202 	mla	r2, r6, r2, r4
 801aa04:	9c01      	ldr	r4, [sp, #4]
 801aa06:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801aa0a:	0e22      	lsrs	r2, r4, #24
 801aa0c:	d016      	beq.n	801aa3c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801aa0e:	9e04      	ldr	r6, [sp, #16]
 801aa10:	4372      	muls	r2, r6
 801aa12:	1c56      	adds	r6, r2, #1
 801aa14:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801aa18:	1212      	asrs	r2, r2, #8
 801aa1a:	2aff      	cmp	r2, #255	; 0xff
 801aa1c:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801aa20:	d113      	bne.n	801aa4a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801aa22:	0962      	lsrs	r2, r4, #5
 801aa24:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801aa28:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801aa2c:	f026 0607 	bic.w	r6, r6, #7
 801aa30:	4316      	orrs	r6, r2
 801aa32:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801aa36:	4326      	orrs	r6, r4
 801aa38:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801aa3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aa3e:	4410      	add	r0, r2
 801aa40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aa42:	f108 0801 	add.w	r8, r8, #1
 801aa46:	4411      	add	r1, r2
 801aa48:	e7d1      	b.n	801a9ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801aa4a:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801aa4e:	fa1f fa82 	uxth.w	sl, r2
 801aa52:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801aa56:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801aa5a:	43d2      	mvns	r2, r2
 801aa5c:	b2d2      	uxtb	r2, r2
 801aa5e:	fb17 f70a 	smulbb	r7, r7, sl
 801aa62:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801aa66:	fb0c 7c02 	mla	ip, ip, r2, r7
 801aa6a:	b2e4      	uxtb	r4, r4
 801aa6c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801aa70:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801aa74:	fa5f fe8e 	uxtb.w	lr, lr
 801aa78:	fb14 f40a 	smulbb	r4, r4, sl
 801aa7c:	fb0e 4402 	mla	r4, lr, r2, r4
 801aa80:	b2f6      	uxtb	r6, r6
 801aa82:	fa1f fc8c 	uxth.w	ip, ip
 801aa86:	fb16 f60a 	smulbb	r6, r6, sl
 801aa8a:	b2a4      	uxth	r4, r4
 801aa8c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801aa90:	fb07 6702 	mla	r7, r7, r2, r6
 801aa94:	f10c 0201 	add.w	r2, ip, #1
 801aa98:	1c66      	adds	r6, r4, #1
 801aa9a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801aa9e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801aaa2:	b2bf      	uxth	r7, r7
 801aaa4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801aaa8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801aaac:	ea46 0c0c 	orr.w	ip, r6, ip
 801aab0:	1c7e      	adds	r6, r7, #1
 801aab2:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801aab6:	0976      	lsrs	r6, r6, #5
 801aab8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801aabc:	ea4c 0c06 	orr.w	ip, ip, r6
 801aac0:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801aac4:	e7ba      	b.n	801aa3c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801aac6:	b007      	add	sp, #28
 801aac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aacc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aad0:	b085      	sub	sp, #20
 801aad2:	468b      	mov	fp, r1
 801aad4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801aad6:	9203      	str	r2, [sp, #12]
 801aad8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801aadc:	6841      	ldr	r1, [r0, #4]
 801aade:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801aae2:	fb01 2404 	mla	r4, r1, r4, r2
 801aae6:	6802      	ldr	r2, [r0, #0]
 801aae8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801aaec:	f8d8 2000 	ldr.w	r2, [r8]
 801aaf0:	9201      	str	r2, [sp, #4]
 801aaf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aaf6:	f1bb 0f00 	cmp.w	fp, #0
 801aafa:	dc03      	bgt.n	801ab04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801aafc:	9a03      	ldr	r2, [sp, #12]
 801aafe:	2a00      	cmp	r2, #0
 801ab00:	f340 814f 	ble.w	801ada2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ab04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ab06:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ab0a:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801ab0e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ab12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ab14:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	dd0e      	ble.n	801ab3a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ab1c:	1408      	asrs	r0, r1, #16
 801ab1e:	d405      	bmi.n	801ab2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ab20:	42b8      	cmp	r0, r7
 801ab22:	da03      	bge.n	801ab2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ab24:	1410      	asrs	r0, r2, #16
 801ab26:	d401      	bmi.n	801ab2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ab28:	42b0      	cmp	r0, r6
 801ab2a:	db07      	blt.n	801ab3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ab2c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ab2e:	4401      	add	r1, r0
 801ab30:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ab32:	3b01      	subs	r3, #1
 801ab34:	4402      	add	r2, r0
 801ab36:	3402      	adds	r4, #2
 801ab38:	e7ee      	b.n	801ab18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ab3a:	d017      	beq.n	801ab6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ab3c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ab3e:	1e58      	subs	r0, r3, #1
 801ab40:	fb05 1500 	mla	r5, r5, r0, r1
 801ab44:	142d      	asrs	r5, r5, #16
 801ab46:	d409      	bmi.n	801ab5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ab48:	42bd      	cmp	r5, r7
 801ab4a:	da07      	bge.n	801ab5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ab4c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ab4e:	fb05 2000 	mla	r0, r5, r0, r2
 801ab52:	1400      	asrs	r0, r0, #16
 801ab54:	d402      	bmi.n	801ab5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ab56:	42b0      	cmp	r0, r6
 801ab58:	f2c0 80ba 	blt.w	801acd0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ab5c:	2600      	movs	r6, #0
 801ab5e:	1998      	adds	r0, r3, r6
 801ab60:	2800      	cmp	r0, #0
 801ab62:	dc3e      	bgt.n	801abe2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ab64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab68:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ab6c:	f1bb 0f00 	cmp.w	fp, #0
 801ab70:	f340 8117 	ble.w	801ada2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ab74:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ab78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ab7c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ab80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab82:	f1bb 0b01 	subs.w	fp, fp, #1
 801ab86:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab8e:	eeb0 6a62 	vmov.f32	s12, s5
 801ab92:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab9e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801aba2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aba6:	eeb0 6a43 	vmov.f32	s12, s6
 801abaa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801abae:	ee12 2a90 	vmov	r2, s5
 801abb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801abb6:	fb92 f3f3 	sdiv	r3, r2, r3
 801abba:	ee13 2a10 	vmov	r2, s6
 801abbe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801abc2:	9311      	str	r3, [sp, #68]	; 0x44
 801abc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abc6:	fb92 f3f3 	sdiv	r3, r2, r3
 801abca:	9a03      	ldr	r2, [sp, #12]
 801abcc:	9312      	str	r3, [sp, #72]	; 0x48
 801abce:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801abd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abd4:	eeb0 3a67 	vmov.f32	s6, s15
 801abd8:	bf08      	it	eq
 801abda:	4613      	moveq	r3, r2
 801abdc:	eef0 2a47 	vmov.f32	s5, s14
 801abe0:	e789      	b.n	801aaf6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801abe2:	140f      	asrs	r7, r1, #16
 801abe4:	d424      	bmi.n	801ac30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801abe6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801abea:	42bd      	cmp	r5, r7
 801abec:	dd20      	ble.n	801ac30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801abee:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801abf2:	d41d      	bmi.n	801ac30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801abf4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801abf8:	4560      	cmp	r0, ip
 801abfa:	dd19      	ble.n	801ac30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801abfc:	b22d      	sxth	r5, r5
 801abfe:	fb0c 7505 	mla	r5, ip, r5, r7
 801ac02:	9801      	ldr	r0, [sp, #4]
 801ac04:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ac08:	0e07      	lsrs	r7, r0, #24
 801ac0a:	2fff      	cmp	r7, #255	; 0xff
 801ac0c:	d116      	bne.n	801ac3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ac0e:	f06f 0501 	mvn.w	r5, #1
 801ac12:	fb05 f706 	mul.w	r7, r5, r6
 801ac16:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ac1a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ac1e:	0945      	lsrs	r5, r0, #5
 801ac20:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ac24:	ea4c 0505 	orr.w	r5, ip, r5
 801ac28:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ac2c:	4305      	orrs	r5, r0
 801ac2e:	53e5      	strh	r5, [r4, r7]
 801ac30:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ac32:	4401      	add	r1, r0
 801ac34:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ac36:	3e01      	subs	r6, #1
 801ac38:	4402      	add	r2, r0
 801ac3a:	e790      	b.n	801ab5e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ac3c:	b2fd      	uxtb	r5, r7
 801ac3e:	2f00      	cmp	r7, #0
 801ac40:	d0f6      	beq.n	801ac30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ac42:	f06f 0701 	mvn.w	r7, #1
 801ac46:	4377      	muls	r7, r6
 801ac48:	fa1f f985 	uxth.w	r9, r5
 801ac4c:	f834 e007 	ldrh.w	lr, [r4, r7]
 801ac50:	9702      	str	r7, [sp, #8]
 801ac52:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ac56:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ac5a:	43ed      	mvns	r5, r5
 801ac5c:	b2ed      	uxtb	r5, r5
 801ac5e:	fb17 f709 	smulbb	r7, r7, r9
 801ac62:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ac66:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ac6a:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ac6e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801ac72:	b2c0      	uxtb	r0, r0
 801ac74:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ac78:	fa5f fe8e 	uxtb.w	lr, lr
 801ac7c:	fb10 f009 	smulbb	r0, r0, r9
 801ac80:	fb0e 0005 	mla	r0, lr, r5, r0
 801ac84:	b280      	uxth	r0, r0
 801ac86:	fa1f fc8c 	uxth.w	ip, ip
 801ac8a:	fb1a fa09 	smulbb	sl, sl, r9
 801ac8e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ac92:	fb07 a705 	mla	r7, r7, r5, sl
 801ac96:	f100 0a01 	add.w	sl, r0, #1
 801ac9a:	f10c 0501 	add.w	r5, ip, #1
 801ac9e:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801aca2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801aca6:	b2bf      	uxth	r7, r7
 801aca8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801acac:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801acb0:	ea4a 0c0c 	orr.w	ip, sl, ip
 801acb4:	f107 0a01 	add.w	sl, r7, #1
 801acb8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801acbc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801acc0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801acc4:	9802      	ldr	r0, [sp, #8]
 801acc6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801acca:	f824 c000 	strh.w	ip, [r4, r0]
 801acce:	e7af      	b.n	801ac30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801acd0:	f04f 0e00 	mov.w	lr, #0
 801acd4:	eba3 000e 	sub.w	r0, r3, lr
 801acd8:	2800      	cmp	r0, #0
 801acda:	f77f af43 	ble.w	801ab64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801acde:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ace2:	140d      	asrs	r5, r1, #16
 801ace4:	1410      	asrs	r0, r2, #16
 801ace6:	fb06 5000 	mla	r0, r6, r0, r5
 801acea:	9d01      	ldr	r5, [sp, #4]
 801acec:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801acf0:	0e2e      	lsrs	r6, r5, #24
 801acf2:	2eff      	cmp	r6, #255	; 0xff
 801acf4:	d112      	bne.n	801ad1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801acf6:	482c      	ldr	r0, [pc, #176]	; (801ada8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801acf8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801acfc:	0968      	lsrs	r0, r5, #5
 801acfe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ad02:	4330      	orrs	r0, r6
 801ad04:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ad08:	4328      	orrs	r0, r5
 801ad0a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801ad0e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ad10:	4401      	add	r1, r0
 801ad12:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ad14:	f10e 0e01 	add.w	lr, lr, #1
 801ad18:	4402      	add	r2, r0
 801ad1a:	e7db      	b.n	801acd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ad1c:	b2f0      	uxtb	r0, r6
 801ad1e:	2e00      	cmp	r6, #0
 801ad20:	d0f5      	beq.n	801ad0e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ad22:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ad26:	fa1f f980 	uxth.w	r9, r0
 801ad2a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ad2e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ad32:	43c0      	mvns	r0, r0
 801ad34:	b2c0      	uxtb	r0, r0
 801ad36:	fb16 f609 	smulbb	r6, r6, r9
 801ad3a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ad3e:	fb07 6700 	mla	r7, r7, r0, r6
 801ad42:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ad46:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ad4a:	b2ed      	uxtb	r5, r5
 801ad4c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ad50:	fa5f fc8c 	uxtb.w	ip, ip
 801ad54:	fb15 f509 	smulbb	r5, r5, r9
 801ad58:	fb0c 5500 	mla	r5, ip, r0, r5
 801ad5c:	b2bf      	uxth	r7, r7
 801ad5e:	fb1a fa09 	smulbb	sl, sl, r9
 801ad62:	b2ad      	uxth	r5, r5
 801ad64:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ad68:	fb06 a600 	mla	r6, r6, r0, sl
 801ad6c:	1c78      	adds	r0, r7, #1
 801ad6e:	f105 0a01 	add.w	sl, r5, #1
 801ad72:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ad76:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ad7a:	b2b6      	uxth	r6, r6
 801ad7c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ad80:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ad84:	ea4a 0707 	orr.w	r7, sl, r7
 801ad88:	f106 0a01 	add.w	sl, r6, #1
 801ad8c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ad90:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ad94:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ad98:	ea47 070a 	orr.w	r7, r7, sl
 801ad9c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801ada0:	e7b5      	b.n	801ad0e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ada2:	b005      	add	sp, #20
 801ada4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ada8:	fffff800 	.word	0xfffff800

0801adac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801adac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adb0:	b087      	sub	sp, #28
 801adb2:	468b      	mov	fp, r1
 801adb4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801adb6:	9203      	str	r2, [sp, #12]
 801adb8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801adbc:	9204      	str	r2, [sp, #16]
 801adbe:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801adc2:	6841      	ldr	r1, [r0, #4]
 801adc4:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801adc8:	fb01 2404 	mla	r4, r1, r4, r2
 801adcc:	6802      	ldr	r2, [r0, #0]
 801adce:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801add2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801add6:	3201      	adds	r2, #1
 801add8:	f022 0201 	bic.w	r2, r2, #1
 801addc:	9200      	str	r2, [sp, #0]
 801adde:	f8d9 2000 	ldr.w	r2, [r9]
 801ade2:	9201      	str	r2, [sp, #4]
 801ade4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ade8:	f1bb 0f00 	cmp.w	fp, #0
 801adec:	dc03      	bgt.n	801adf6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801adee:	9a03      	ldr	r2, [sp, #12]
 801adf0:	2a00      	cmp	r2, #0
 801adf2:	f340 8169 	ble.w	801b0c8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801adf6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801adf8:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801adfc:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ae00:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ae04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ae06:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	dd0e      	ble.n	801ae2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ae0e:	1402      	asrs	r2, r0, #16
 801ae10:	d405      	bmi.n	801ae1e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ae12:	42ba      	cmp	r2, r7
 801ae14:	da03      	bge.n	801ae1e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ae16:	140a      	asrs	r2, r1, #16
 801ae18:	d401      	bmi.n	801ae1e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ae1a:	42b2      	cmp	r2, r6
 801ae1c:	db07      	blt.n	801ae2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ae1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ae20:	4410      	add	r0, r2
 801ae22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ae24:	3b01      	subs	r3, #1
 801ae26:	4411      	add	r1, r2
 801ae28:	3402      	adds	r4, #2
 801ae2a:	e7ee      	b.n	801ae0a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ae2c:	d017      	beq.n	801ae5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ae2e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ae30:	1e5a      	subs	r2, r3, #1
 801ae32:	fb05 0502 	mla	r5, r5, r2, r0
 801ae36:	142d      	asrs	r5, r5, #16
 801ae38:	d409      	bmi.n	801ae4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ae3a:	42bd      	cmp	r5, r7
 801ae3c:	da07      	bge.n	801ae4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ae3e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ae40:	fb05 1202 	mla	r2, r5, r2, r1
 801ae44:	1412      	asrs	r2, r2, #16
 801ae46:	d402      	bmi.n	801ae4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ae48:	42b2      	cmp	r2, r6
 801ae4a:	f2c0 80c7 	blt.w	801afdc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ae4e:	2700      	movs	r7, #0
 801ae50:	19da      	adds	r2, r3, r7
 801ae52:	2a00      	cmp	r2, #0
 801ae54:	dc3e      	bgt.n	801aed4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ae56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae5a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ae5e:	f1bb 0f00 	cmp.w	fp, #0
 801ae62:	f340 8131 	ble.w	801b0c8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801ae66:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ae6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ae6e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ae72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ae74:	f1bb 0b01 	subs.w	fp, fp, #1
 801ae78:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ae7c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ae80:	eeb0 6a62 	vmov.f32	s12, s5
 801ae84:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ae88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae8c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ae90:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ae94:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ae98:	eeb0 6a43 	vmov.f32	s12, s6
 801ae9c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aea0:	ee12 2a90 	vmov	r2, s5
 801aea4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aea8:	fb92 f3f3 	sdiv	r3, r2, r3
 801aeac:	ee13 2a10 	vmov	r2, s6
 801aeb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aeb4:	9313      	str	r3, [sp, #76]	; 0x4c
 801aeb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aeb8:	fb92 f3f3 	sdiv	r3, r2, r3
 801aebc:	9a03      	ldr	r2, [sp, #12]
 801aebe:	9314      	str	r3, [sp, #80]	; 0x50
 801aec0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801aec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aec6:	eeb0 3a67 	vmov.f32	s6, s15
 801aeca:	bf08      	it	eq
 801aecc:	4613      	moveq	r3, r2
 801aece:	eef0 2a47 	vmov.f32	s5, s14
 801aed2:	e789      	b.n	801ade8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801aed4:	1405      	asrs	r5, r0, #16
 801aed6:	d435      	bmi.n	801af44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801aed8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801aedc:	42aa      	cmp	r2, r5
 801aede:	dd31      	ble.n	801af44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801aee0:	140e      	asrs	r6, r1, #16
 801aee2:	d42f      	bmi.n	801af44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801aee4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801aee8:	42b2      	cmp	r2, r6
 801aeea:	dd2b      	ble.n	801af44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801aeec:	9a00      	ldr	r2, [sp, #0]
 801aeee:	fb06 5502 	mla	r5, r6, r2, r5
 801aef2:	086a      	lsrs	r2, r5, #1
 801aef4:	9e01      	ldr	r6, [sp, #4]
 801aef6:	5cb2      	ldrb	r2, [r6, r2]
 801aef8:	07ee      	lsls	r6, r5, #31
 801aefa:	bf54      	ite	pl
 801aefc:	f002 020f 	andpl.w	r2, r2, #15
 801af00:	1112      	asrmi	r2, r2, #4
 801af02:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801af06:	b2d2      	uxtb	r2, r2
 801af08:	b1e2      	cbz	r2, 801af44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801af0a:	9d04      	ldr	r5, [sp, #16]
 801af0c:	436a      	muls	r2, r5
 801af0e:	1c55      	adds	r5, r2, #1
 801af10:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801af14:	4d6e      	ldr	r5, [pc, #440]	; (801b0d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801af16:	682d      	ldr	r5, [r5, #0]
 801af18:	1212      	asrs	r2, r2, #8
 801af1a:	0a2e      	lsrs	r6, r5, #8
 801af1c:	2aff      	cmp	r2, #255	; 0xff
 801af1e:	9605      	str	r6, [sp, #20]
 801af20:	d116      	bne.n	801af50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801af22:	f06f 0201 	mvn.w	r2, #1
 801af26:	fb02 fc07 	mul.w	ip, r2, r7
 801af2a:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801af2e:	096a      	lsrs	r2, r5, #5
 801af30:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801af34:	f026 0607 	bic.w	r6, r6, #7
 801af38:	4316      	orrs	r6, r2
 801af3a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801af3e:	432e      	orrs	r6, r5
 801af40:	f824 600c 	strh.w	r6, [r4, ip]
 801af44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801af46:	4410      	add	r0, r2
 801af48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801af4a:	3f01      	subs	r7, #1
 801af4c:	4411      	add	r1, r2
 801af4e:	e77f      	b.n	801ae50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801af50:	f06f 0601 	mvn.w	r6, #1
 801af54:	437e      	muls	r6, r7
 801af56:	fa1f fa82 	uxth.w	sl, r2
 801af5a:	f834 8006 	ldrh.w	r8, [r4, r6]
 801af5e:	9602      	str	r6, [sp, #8]
 801af60:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801af64:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801af68:	43d2      	mvns	r2, r2
 801af6a:	b2d2      	uxtb	r2, r2
 801af6c:	fb1c fc0a 	smulbb	ip, ip, sl
 801af70:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801af74:	fb0e ce02 	mla	lr, lr, r2, ip
 801af78:	b2ed      	uxtb	r5, r5
 801af7a:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801af7e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801af82:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801af86:	fa5f f888 	uxtb.w	r8, r8
 801af8a:	fb15 f50a 	smulbb	r5, r5, sl
 801af8e:	fb08 5502 	mla	r5, r8, r2, r5
 801af92:	fa1f fe8e 	uxth.w	lr, lr
 801af96:	fb16 f60a 	smulbb	r6, r6, sl
 801af9a:	b2ad      	uxth	r5, r5
 801af9c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801afa0:	fb0c 6c02 	mla	ip, ip, r2, r6
 801afa4:	f10e 0201 	add.w	r2, lr, #1
 801afa8:	1c6e      	adds	r6, r5, #1
 801afaa:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801afae:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801afb2:	fa1f fc8c 	uxth.w	ip, ip
 801afb6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801afba:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801afbe:	ea46 0e0e 	orr.w	lr, r6, lr
 801afc2:	f10c 0601 	add.w	r6, ip, #1
 801afc6:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801afca:	0976      	lsrs	r6, r6, #5
 801afcc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801afd0:	9a02      	ldr	r2, [sp, #8]
 801afd2:	ea4e 0e06 	orr.w	lr, lr, r6
 801afd6:	f824 e002 	strh.w	lr, [r4, r2]
 801afda:	e7b3      	b.n	801af44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801afdc:	f04f 0800 	mov.w	r8, #0
 801afe0:	eba3 0208 	sub.w	r2, r3, r8
 801afe4:	2a00      	cmp	r2, #0
 801afe6:	f77f af36 	ble.w	801ae56 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801afea:	9e00      	ldr	r6, [sp, #0]
 801afec:	1402      	asrs	r2, r0, #16
 801afee:	140d      	asrs	r5, r1, #16
 801aff0:	fb06 2505 	mla	r5, r6, r5, r2
 801aff4:	086a      	lsrs	r2, r5, #1
 801aff6:	9e01      	ldr	r6, [sp, #4]
 801aff8:	5cb2      	ldrb	r2, [r6, r2]
 801affa:	07ed      	lsls	r5, r5, #31
 801affc:	bf54      	ite	pl
 801affe:	f002 020f 	andpl.w	r2, r2, #15
 801b002:	1112      	asrmi	r2, r2, #4
 801b004:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b008:	b2d2      	uxtb	r2, r2
 801b00a:	b1c2      	cbz	r2, 801b03e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801b00c:	9d04      	ldr	r5, [sp, #16]
 801b00e:	436a      	muls	r2, r5
 801b010:	1c55      	adds	r5, r2, #1
 801b012:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801b016:	4d2e      	ldr	r5, [pc, #184]	; (801b0d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801b018:	1212      	asrs	r2, r2, #8
 801b01a:	682e      	ldr	r6, [r5, #0]
 801b01c:	2aff      	cmp	r2, #255	; 0xff
 801b01e:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801b022:	d113      	bne.n	801b04c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801b024:	0972      	lsrs	r2, r6, #5
 801b026:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801b02a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b02e:	f025 0507 	bic.w	r5, r5, #7
 801b032:	4315      	orrs	r5, r2
 801b034:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801b038:	4335      	orrs	r5, r6
 801b03a:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801b03e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b040:	4410      	add	r0, r2
 801b042:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b044:	f108 0801 	add.w	r8, r8, #1
 801b048:	4411      	add	r1, r2
 801b04a:	e7c9      	b.n	801afe0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801b04c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801b050:	fa1f fa82 	uxth.w	sl, r2
 801b054:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b058:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801b05c:	43d2      	mvns	r2, r2
 801b05e:	b2d2      	uxtb	r2, r2
 801b060:	fb17 f70a 	smulbb	r7, r7, sl
 801b064:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b068:	fb0c 7c02 	mla	ip, ip, r2, r7
 801b06c:	b2f6      	uxtb	r6, r6
 801b06e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801b072:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b076:	fa5f fe8e 	uxtb.w	lr, lr
 801b07a:	fb16 f60a 	smulbb	r6, r6, sl
 801b07e:	fb0e 6602 	mla	r6, lr, r2, r6
 801b082:	b2ed      	uxtb	r5, r5
 801b084:	fa1f fc8c 	uxth.w	ip, ip
 801b088:	fb15 f50a 	smulbb	r5, r5, sl
 801b08c:	b2b6      	uxth	r6, r6
 801b08e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b092:	fb07 5702 	mla	r7, r7, r2, r5
 801b096:	f10c 0201 	add.w	r2, ip, #1
 801b09a:	1c75      	adds	r5, r6, #1
 801b09c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b0a0:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801b0a4:	b2bf      	uxth	r7, r7
 801b0a6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b0aa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b0ae:	ea45 0c0c 	orr.w	ip, r5, ip
 801b0b2:	1c7d      	adds	r5, r7, #1
 801b0b4:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801b0b8:	096d      	lsrs	r5, r5, #5
 801b0ba:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b0be:	ea4c 0c05 	orr.w	ip, ip, r5
 801b0c2:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801b0c6:	e7ba      	b.n	801b03e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801b0c8:	b007      	add	sp, #28
 801b0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ce:	bf00      	nop
 801b0d0:	20014620 	.word	0x20014620

0801b0d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0d8:	b087      	sub	sp, #28
 801b0da:	f8df 830c 	ldr.w	r8, [pc, #780]	; 801b3e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801b0de:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b0e0:	9205      	str	r2, [sp, #20]
 801b0e2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b0e6:	9101      	str	r1, [sp, #4]
 801b0e8:	6841      	ldr	r1, [r0, #4]
 801b0ea:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801b0ee:	fb01 2404 	mla	r4, r1, r4, r2
 801b0f2:	6802      	ldr	r2, [r0, #0]
 801b0f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b0f8:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b0fc:	3201      	adds	r2, #1
 801b0fe:	f022 0201 	bic.w	r2, r2, #1
 801b102:	9202      	str	r2, [sp, #8]
 801b104:	f8db 2000 	ldr.w	r2, [fp]
 801b108:	9203      	str	r2, [sp, #12]
 801b10a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b10e:	9a01      	ldr	r2, [sp, #4]
 801b110:	2a00      	cmp	r2, #0
 801b112:	dc03      	bgt.n	801b11c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b114:	9a05      	ldr	r2, [sp, #20]
 801b116:	2a00      	cmp	r2, #0
 801b118:	f340 8162 	ble.w	801b3e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801b11c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b11e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801b122:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801b126:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b12a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b12c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b130:	2b00      	cmp	r3, #0
 801b132:	dd0e      	ble.n	801b152 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b134:	1402      	asrs	r2, r0, #16
 801b136:	d405      	bmi.n	801b144 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b138:	42ba      	cmp	r2, r7
 801b13a:	da03      	bge.n	801b144 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b13c:	140a      	asrs	r2, r1, #16
 801b13e:	d401      	bmi.n	801b144 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b140:	42b2      	cmp	r2, r6
 801b142:	db07      	blt.n	801b154 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b144:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b146:	4410      	add	r0, r2
 801b148:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b14a:	3b01      	subs	r3, #1
 801b14c:	4411      	add	r1, r2
 801b14e:	3402      	adds	r4, #2
 801b150:	e7ee      	b.n	801b130 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b152:	d017      	beq.n	801b184 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801b154:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b156:	1e5a      	subs	r2, r3, #1
 801b158:	fb05 0502 	mla	r5, r5, r2, r0
 801b15c:	142d      	asrs	r5, r5, #16
 801b15e:	d409      	bmi.n	801b174 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b160:	42bd      	cmp	r5, r7
 801b162:	da07      	bge.n	801b174 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b164:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b166:	fb05 1202 	mla	r2, r5, r2, r1
 801b16a:	1412      	asrs	r2, r2, #16
 801b16c:	d402      	bmi.n	801b174 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b16e:	42b2      	cmp	r2, r6
 801b170:	f2c0 80c3 	blt.w	801b2fa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801b174:	2500      	movs	r5, #0
 801b176:	195a      	adds	r2, r3, r5
 801b178:	2a00      	cmp	r2, #0
 801b17a:	dc3f      	bgt.n	801b1fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b17c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b180:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b184:	9b01      	ldr	r3, [sp, #4]
 801b186:	2b00      	cmp	r3, #0
 801b188:	f340 812a 	ble.w	801b3e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801b18c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b190:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b194:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b19a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b19e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b1a2:	eeb0 6a62 	vmov.f32	s12, s5
 801b1a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b1aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b1ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b1b2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b1b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b1ba:	eeb0 6a43 	vmov.f32	s12, s6
 801b1be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b1c2:	ee12 2a90 	vmov	r2, s5
 801b1c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b1ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801b1ce:	ee13 2a10 	vmov	r2, s6
 801b1d2:	9313      	str	r3, [sp, #76]	; 0x4c
 801b1d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b1d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b1da:	9314      	str	r3, [sp, #80]	; 0x50
 801b1dc:	9b01      	ldr	r3, [sp, #4]
 801b1de:	9a05      	ldr	r2, [sp, #20]
 801b1e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b1e4:	3b01      	subs	r3, #1
 801b1e6:	9301      	str	r3, [sp, #4]
 801b1e8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b1ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b1ee:	eeb0 3a67 	vmov.f32	s6, s15
 801b1f2:	bf08      	it	eq
 801b1f4:	4613      	moveq	r3, r2
 801b1f6:	eef0 2a47 	vmov.f32	s5, s14
 801b1fa:	e788      	b.n	801b10e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b1fc:	1406      	asrs	r6, r0, #16
 801b1fe:	d42c      	bmi.n	801b25a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b200:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b204:	42b2      	cmp	r2, r6
 801b206:	dd28      	ble.n	801b25a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b208:	140f      	asrs	r7, r1, #16
 801b20a:	d426      	bmi.n	801b25a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b20c:	f8db 200c 	ldr.w	r2, [fp, #12]
 801b210:	42ba      	cmp	r2, r7
 801b212:	dd22      	ble.n	801b25a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b214:	9a02      	ldr	r2, [sp, #8]
 801b216:	fb07 6602 	mla	r6, r7, r2, r6
 801b21a:	0872      	lsrs	r2, r6, #1
 801b21c:	9f03      	ldr	r7, [sp, #12]
 801b21e:	5cba      	ldrb	r2, [r7, r2]
 801b220:	07f6      	lsls	r6, r6, #31
 801b222:	bf54      	ite	pl
 801b224:	f002 020f 	andpl.w	r2, r2, #15
 801b228:	1112      	asrmi	r2, r2, #4
 801b22a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b22e:	b2d2      	uxtb	r2, r2
 801b230:	2aff      	cmp	r2, #255	; 0xff
 801b232:	d118      	bne.n	801b266 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801b234:	f8d8 2000 	ldr.w	r2, [r8]
 801b238:	f06f 0601 	mvn.w	r6, #1
 801b23c:	fb06 f705 	mul.w	r7, r6, r5
 801b240:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801b244:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801b248:	0956      	lsrs	r6, r2, #5
 801b24a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b24e:	ea4c 0606 	orr.w	r6, ip, r6
 801b252:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801b256:	4316      	orrs	r6, r2
 801b258:	53e6      	strh	r6, [r4, r7]
 801b25a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b25c:	4410      	add	r0, r2
 801b25e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b260:	3d01      	subs	r5, #1
 801b262:	4411      	add	r1, r2
 801b264:	e787      	b.n	801b176 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b266:	2a00      	cmp	r2, #0
 801b268:	d0f7      	beq.n	801b25a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b26a:	f06f 0601 	mvn.w	r6, #1
 801b26e:	436e      	muls	r6, r5
 801b270:	f8d8 c000 	ldr.w	ip, [r8]
 801b274:	f834 e006 	ldrh.w	lr, [r4, r6]
 801b278:	9604      	str	r6, [sp, #16]
 801b27a:	fa1f f982 	uxth.w	r9, r2
 801b27e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b282:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801b286:	43d2      	mvns	r2, r2
 801b288:	b2d2      	uxtb	r2, r2
 801b28a:	fb16 f609 	smulbb	r6, r6, r9
 801b28e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b292:	fb07 6702 	mla	r7, r7, r2, r6
 801b296:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801b29a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b29e:	fa5f fc8c 	uxtb.w	ip, ip
 801b2a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b2a6:	fa5f fe8e 	uxtb.w	lr, lr
 801b2aa:	fb1c fc09 	smulbb	ip, ip, r9
 801b2ae:	fb0e cc02 	mla	ip, lr, r2, ip
 801b2b2:	b2bf      	uxth	r7, r7
 801b2b4:	fb1a fa09 	smulbb	sl, sl, r9
 801b2b8:	fa1f fc8c 	uxth.w	ip, ip
 801b2bc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b2c0:	fb06 a602 	mla	r6, r6, r2, sl
 801b2c4:	1c7a      	adds	r2, r7, #1
 801b2c6:	f10c 0a01 	add.w	sl, ip, #1
 801b2ca:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b2ce:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801b2d2:	b2b6      	uxth	r6, r6
 801b2d4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b2d8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b2dc:	ea4a 0707 	orr.w	r7, sl, r7
 801b2e0:	f106 0a01 	add.w	sl, r6, #1
 801b2e4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b2e8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b2ec:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b2f0:	9a04      	ldr	r2, [sp, #16]
 801b2f2:	ea47 070a 	orr.w	r7, r7, sl
 801b2f6:	52a7      	strh	r7, [r4, r2]
 801b2f8:	e7af      	b.n	801b25a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b2fa:	f04f 0e00 	mov.w	lr, #0
 801b2fe:	eba3 020e 	sub.w	r2, r3, lr
 801b302:	2a00      	cmp	r2, #0
 801b304:	f77f af3a 	ble.w	801b17c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801b308:	9e02      	ldr	r6, [sp, #8]
 801b30a:	1402      	asrs	r2, r0, #16
 801b30c:	140d      	asrs	r5, r1, #16
 801b30e:	fb06 2505 	mla	r5, r6, r5, r2
 801b312:	086a      	lsrs	r2, r5, #1
 801b314:	9e03      	ldr	r6, [sp, #12]
 801b316:	5cb2      	ldrb	r2, [r6, r2]
 801b318:	07ed      	lsls	r5, r5, #31
 801b31a:	bf54      	ite	pl
 801b31c:	f002 020f 	andpl.w	r2, r2, #15
 801b320:	1112      	asrmi	r2, r2, #4
 801b322:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b326:	b2d2      	uxtb	r2, r2
 801b328:	2aff      	cmp	r2, #255	; 0xff
 801b32a:	d115      	bne.n	801b358 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801b32c:	f8d8 5000 	ldr.w	r5, [r8]
 801b330:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801b334:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801b338:	096a      	lsrs	r2, r5, #5
 801b33a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b33e:	4332      	orrs	r2, r6
 801b340:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b344:	432a      	orrs	r2, r5
 801b346:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801b34a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b34c:	4410      	add	r0, r2
 801b34e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b350:	f10e 0e01 	add.w	lr, lr, #1
 801b354:	4411      	add	r1, r2
 801b356:	e7d2      	b.n	801b2fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b358:	2a00      	cmp	r2, #0
 801b35a:	d0f6      	beq.n	801b34a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b35c:	f8d8 7000 	ldr.w	r7, [r8]
 801b360:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b364:	fa1f f982 	uxth.w	r9, r2
 801b368:	ea4f 262c 	mov.w	r6, ip, asr #8
 801b36c:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801b370:	43d2      	mvns	r2, r2
 801b372:	b2d2      	uxtb	r2, r2
 801b374:	fb15 f509 	smulbb	r5, r5, r9
 801b378:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b37c:	fb06 5602 	mla	r6, r6, r2, r5
 801b380:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801b384:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801b388:	b2ff      	uxtb	r7, r7
 801b38a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b38e:	fa5f fc8c 	uxtb.w	ip, ip
 801b392:	fb17 f709 	smulbb	r7, r7, r9
 801b396:	fb0c 7702 	mla	r7, ip, r2, r7
 801b39a:	b2b6      	uxth	r6, r6
 801b39c:	fb1a fa09 	smulbb	sl, sl, r9
 801b3a0:	b2bf      	uxth	r7, r7
 801b3a2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801b3a6:	fb05 a502 	mla	r5, r5, r2, sl
 801b3aa:	1c72      	adds	r2, r6, #1
 801b3ac:	f107 0a01 	add.w	sl, r7, #1
 801b3b0:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801b3b4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b3b8:	b2ad      	uxth	r5, r5
 801b3ba:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b3be:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801b3c2:	ea4a 0606 	orr.w	r6, sl, r6
 801b3c6:	f105 0a01 	add.w	sl, r5, #1
 801b3ca:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b3ce:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b3d2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b3d6:	ea46 060a 	orr.w	r6, r6, sl
 801b3da:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801b3de:	e7b4      	b.n	801b34a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b3e0:	b007      	add	sp, #28
 801b3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3e6:	bf00      	nop
 801b3e8:	20014620 	.word	0x20014620

0801b3ec <_ZN8touchgfx8LCD16bppD1Ev>:
 801b3ec:	4770      	bx	lr

0801b3ee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801b3ee:	4770      	bx	lr

0801b3f0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801b3f0:	4770      	bx	lr

0801b3f2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801b3f2:	4770      	bx	lr

0801b3f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801b3f4:	4770      	bx	lr

0801b3f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801b3f6:	4770      	bx	lr

0801b3f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801b3f8:	4770      	bx	lr

0801b3fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801b3fa:	4770      	bx	lr

0801b3fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b3fc:	4770      	bx	lr

0801b3fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b3fe:	4770      	bx	lr

0801b400 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b400:	4770      	bx	lr

0801b402 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b402:	4770      	bx	lr

0801b404 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b404:	4770      	bx	lr

0801b406 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801b406:	4770      	bx	lr

0801b408 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b408:	4770      	bx	lr

0801b40a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b40a:	4770      	bx	lr

0801b40c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b40c:	4770      	bx	lr

0801b40e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801b40e:	4770      	bx	lr

0801b410 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b410:	4770      	bx	lr

0801b412 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b412:	4770      	bx	lr

0801b414 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b414:	4770      	bx	lr

0801b416 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b416:	4770      	bx	lr

0801b418 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b418:	4770      	bx	lr

0801b41a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b41a:	4770      	bx	lr

0801b41c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b41c:	4770      	bx	lr

0801b41e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b41e:	4770      	bx	lr

0801b420 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b420:	4770      	bx	lr

0801b422 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b422:	4770      	bx	lr

0801b424 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b424:	4770      	bx	lr

0801b426 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801b426:	4770      	bx	lr

0801b428 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b428:	4770      	bx	lr

0801b42a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801b42a:	4770      	bx	lr

0801b42c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801b42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b430:	b088      	sub	sp, #32
 801b432:	ac08      	add	r4, sp, #32
 801b434:	4606      	mov	r6, r0
 801b436:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801b43a:	4620      	mov	r0, r4
 801b43c:	4688      	mov	r8, r1
 801b43e:	4691      	mov	r9, r2
 801b440:	f7fd fc62 	bl	8018d08 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b444:	6833      	ldr	r3, [r6, #0]
 801b446:	4605      	mov	r5, r0
 801b448:	4620      	mov	r0, r4
 801b44a:	699f      	ldr	r7, [r3, #24]
 801b44c:	f7fd fb70 	bl	8018b30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b450:	4682      	mov	sl, r0
 801b452:	4620      	mov	r0, r4
 801b454:	f7fd fba0 	bl	8018b98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b458:	9500      	str	r5, [sp, #0]
 801b45a:	e9cd a001 	strd	sl, r0, [sp, #4]
 801b45e:	464b      	mov	r3, r9
 801b460:	a806      	add	r0, sp, #24
 801b462:	4642      	mov	r2, r8
 801b464:	4631      	mov	r1, r6
 801b466:	47b8      	blx	r7
 801b468:	4628      	mov	r0, r5
 801b46a:	b008      	add	sp, #32
 801b46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b470 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801b470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b474:	2300      	movs	r3, #0
 801b476:	9300      	str	r3, [sp, #0]
 801b478:	4b3d      	ldr	r3, [pc, #244]	; (801b570 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801b47a:	781b      	ldrb	r3, [r3, #0]
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d137      	bne.n	801b4f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801b480:	4a3c      	ldr	r2, [pc, #240]	; (801b574 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b482:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b486:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d132      	bne.n	801b4f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801b48e:	4b3a      	ldr	r3, [pc, #232]	; (801b578 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801b490:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b494:	6808      	ldr	r0, [r1, #0]
 801b496:	6849      	ldr	r1, [r1, #4]
 801b498:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b49c:	ac02      	add	r4, sp, #8
 801b49e:	ab02      	add	r3, sp, #8
 801b4a0:	c303      	stmia	r3!, {r0, r1}
 801b4a2:	4669      	mov	r1, sp
 801b4a4:	4620      	mov	r0, r4
 801b4a6:	f7fa f887 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b4aa:	4668      	mov	r0, sp
 801b4ac:	f7fa f840 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b4b0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b4b4:	f8bd 2000 	ldrh.w	r2, [sp]
 801b4b8:	4d30      	ldr	r5, [pc, #192]	; (801b57c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801b4ba:	4413      	add	r3, r2
 801b4bc:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b4c0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b4c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b4c8:	6828      	ldr	r0, [r5, #0]
 801b4ca:	4413      	add	r3, r2
 801b4cc:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b4d0:	6803      	ldr	r3, [r0, #0]
 801b4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4d4:	4798      	blx	r3
 801b4d6:	f010 0f01 	tst.w	r0, #1
 801b4da:	462f      	mov	r7, r5
 801b4dc:	d00c      	beq.n	801b4f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801b4de:	6828      	ldr	r0, [r5, #0]
 801b4e0:	6803      	ldr	r3, [r0, #0]
 801b4e2:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b4e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b4e8:	4798      	blx	r3
 801b4ea:	b004      	add	sp, #16
 801b4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4f0:	4a21      	ldr	r2, [pc, #132]	; (801b578 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801b4f2:	e7c6      	b.n	801b482 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801b4f4:	4b1f      	ldr	r3, [pc, #124]	; (801b574 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b4f6:	e7cb      	b.n	801b490 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801b4f8:	6838      	ldr	r0, [r7, #0]
 801b4fa:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801b4fe:	6803      	ldr	r3, [r0, #0]
 801b500:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801b504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b506:	4798      	blx	r3
 801b508:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b50c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b510:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801b514:	fb16 3602 	smlabb	r6, r6, r2, r3
 801b518:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801b51c:	6838      	ldr	r0, [r7, #0]
 801b51e:	6803      	ldr	r3, [r0, #0]
 801b520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b522:	4798      	blx	r3
 801b524:	4a13      	ldr	r2, [pc, #76]	; (801b574 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b526:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801b52a:	8813      	ldrh	r3, [r2, #0]
 801b52c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801b530:	fb03 1404 	mla	r4, r3, r4, r1
 801b534:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b538:	435d      	muls	r5, r3
 801b53a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b53e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b542:	4691      	mov	r9, r2
 801b544:	6838      	ldr	r0, [r7, #0]
 801b546:	42ac      	cmp	r4, r5
 801b548:	6803      	ldr	r3, [r0, #0]
 801b54a:	d20e      	bcs.n	801b56a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801b54c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801b550:	4632      	mov	r2, r6
 801b552:	4643      	mov	r3, r8
 801b554:	4621      	mov	r1, r4
 801b556:	47d0      	blx	sl
 801b558:	f8b9 3000 	ldrh.w	r3, [r9]
 801b55c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b560:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801b564:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b568:	e7ec      	b.n	801b544 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801b56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b56c:	4798      	blx	r3
 801b56e:	e7bc      	b.n	801b4ea <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801b570:	20014608 	.word	0x20014608
 801b574:	2001460a 	.word	0x2001460a
 801b578:	2001460c 	.word	0x2001460c
 801b57c:	20014610 	.word	0x20014610

0801b580 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b584:	b08b      	sub	sp, #44	; 0x2c
 801b586:	460f      	mov	r7, r1
 801b588:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801b58c:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801b590:	4616      	mov	r6, r2
 801b592:	f1bb 0f00 	cmp.w	fp, #0
 801b596:	d04a      	beq.n	801b62e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801b598:	6810      	ldr	r0, [r2, #0]
 801b59a:	6851      	ldr	r1, [r2, #4]
 801b59c:	ad06      	add	r5, sp, #24
 801b59e:	c503      	stmia	r5!, {r0, r1}
 801b5a0:	6818      	ldr	r0, [r3, #0]
 801b5a2:	6859      	ldr	r1, [r3, #4]
 801b5a4:	ad08      	add	r5, sp, #32
 801b5a6:	c503      	stmia	r5!, {r0, r1}
 801b5a8:	a806      	add	r0, sp, #24
 801b5aa:	f7f9 ffc1 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b5ae:	4631      	mov	r1, r6
 801b5b0:	a808      	add	r0, sp, #32
 801b5b2:	f7fa f801 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b5b6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b5ba:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b5be:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801b5c2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801b5c6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801b5ca:	fb16 2103 	smlabb	r1, r6, r3, r2
 801b5ce:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801b5d2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b5d6:	4f5f      	ldr	r7, [pc, #380]	; (801b754 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801b5d8:	440a      	add	r2, r1
 801b5da:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b5de:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b5e2:	6838      	ldr	r0, [r7, #0]
 801b5e4:	4413      	add	r3, r2
 801b5e6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b5ea:	6803      	ldr	r3, [r0, #0]
 801b5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b5ee:	4798      	blx	r3
 801b5f0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b5f4:	46b9      	mov	r9, r7
 801b5f6:	d11d      	bne.n	801b634 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801b5f8:	b9fc      	cbnz	r4, 801b63a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801b5fa:	f010 0f01 	tst.w	r0, #1
 801b5fe:	d01c      	beq.n	801b63a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801b600:	f8d9 0000 	ldr.w	r0, [r9]
 801b604:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b608:	6801      	ldr	r1, [r0, #0]
 801b60a:	f8cd b00c 	str.w	fp, [sp, #12]
 801b60e:	2700      	movs	r7, #0
 801b610:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801b614:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801b618:	9402      	str	r4, [sp, #8]
 801b61a:	b2ad      	uxth	r5, r5
 801b61c:	fa1f f488 	uxth.w	r4, r8
 801b620:	9501      	str	r5, [sp, #4]
 801b622:	9400      	str	r4, [sp, #0]
 801b624:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801b626:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b62a:	4631      	mov	r1, r6
 801b62c:	47a0      	blx	r4
 801b62e:	b00b      	add	sp, #44	; 0x2c
 801b630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b634:	f010 0f04 	tst.w	r0, #4
 801b638:	e7e1      	b.n	801b5fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801b63a:	f8d9 0000 	ldr.w	r0, [r9]
 801b63e:	6803      	ldr	r3, [r0, #0]
 801b640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b642:	4798      	blx	r3
 801b644:	4b44      	ldr	r3, [pc, #272]	; (801b758 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801b646:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801b64a:	881a      	ldrh	r2, [r3, #0]
 801b64c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801b650:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b654:	fb02 1404 	mla	r4, r2, r4, r1
 801b658:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b65c:	469a      	mov	sl, r3
 801b65e:	fb05 f502 	mul.w	r5, r5, r2
 801b662:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801b666:	d059      	beq.n	801b71c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801b668:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801b66c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b670:	fa1f f28b 	uxth.w	r2, fp
 801b674:	fa1f f989 	uxth.w	r9, r9
 801b678:	469e      	mov	lr, r3
 801b67a:	42ac      	cmp	r4, r5
 801b67c:	d264      	bcs.n	801b748 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801b67e:	eb04 0a07 	add.w	sl, r4, r7
 801b682:	4554      	cmp	r4, sl
 801b684:	d23d      	bcs.n	801b702 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801b686:	8821      	ldrh	r1, [r4, #0]
 801b688:	f836 3b02 	ldrh.w	r3, [r6], #2
 801b68c:	1208      	asrs	r0, r1, #8
 801b68e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801b692:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b696:	fb10 f009 	smulbb	r0, r0, r9
 801b69a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801b69e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b6a2:	00c9      	lsls	r1, r1, #3
 801b6a4:	fb0c 0c02 	mla	ip, ip, r2, r0
 801b6a8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801b6ac:	10d8      	asrs	r0, r3, #3
 801b6ae:	b2c9      	uxtb	r1, r1
 801b6b0:	00db      	lsls	r3, r3, #3
 801b6b2:	fa1f fc8c 	uxth.w	ip, ip
 801b6b6:	fb1b fb09 	smulbb	fp, fp, r9
 801b6ba:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801b6be:	b2db      	uxtb	r3, r3
 801b6c0:	fb11 f109 	smulbb	r1, r1, r9
 801b6c4:	fb00 b002 	mla	r0, r0, r2, fp
 801b6c8:	fb03 1302 	mla	r3, r3, r2, r1
 801b6cc:	f10c 0b01 	add.w	fp, ip, #1
 801b6d0:	b29b      	uxth	r3, r3
 801b6d2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b6d6:	b280      	uxth	r0, r0
 801b6d8:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801b6dc:	f103 0c01 	add.w	ip, r3, #1
 801b6e0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b6e4:	1c43      	adds	r3, r0, #1
 801b6e6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b6ea:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b6ee:	0940      	lsrs	r0, r0, #5
 801b6f0:	ea4c 0c0b 	orr.w	ip, ip, fp
 801b6f4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b6f8:	ea4c 0c00 	orr.w	ip, ip, r0
 801b6fc:	f824 cb02 	strh.w	ip, [r4], #2
 801b700:	e7bf      	b.n	801b682 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801b702:	f8be 3000 	ldrh.w	r3, [lr]
 801b706:	eba3 0308 	sub.w	r3, r3, r8
 801b70a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b70e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b712:	eba3 0308 	sub.w	r3, r3, r8
 801b716:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b71a:	e7ae      	b.n	801b67a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801b71c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b720:	f8d9 0000 	ldr.w	r0, [r9]
 801b724:	42ac      	cmp	r4, r5
 801b726:	6803      	ldr	r3, [r0, #0]
 801b728:	d20e      	bcs.n	801b748 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801b72a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801b72e:	4632      	mov	r2, r6
 801b730:	463b      	mov	r3, r7
 801b732:	4621      	mov	r1, r4
 801b734:	47c0      	blx	r8
 801b736:	f8ba 3000 	ldrh.w	r3, [sl]
 801b73a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b73e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b742:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b746:	e7eb      	b.n	801b720 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801b748:	4b02      	ldr	r3, [pc, #8]	; (801b754 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801b74a:	6818      	ldr	r0, [r3, #0]
 801b74c:	6803      	ldr	r3, [r0, #0]
 801b74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b750:	4798      	blx	r3
 801b752:	e76c      	b.n	801b62e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801b754:	20014610 	.word	0x20014610
 801b758:	2001460a 	.word	0x2001460a

0801b75c <_ZN8touchgfx8LCD16bppD0Ev>:
 801b75c:	b510      	push	{r4, lr}
 801b75e:	2184      	movs	r1, #132	; 0x84
 801b760:	4604      	mov	r4, r0
 801b762:	f00b f948 	bl	80269f6 <_ZdlPvj>
 801b766:	4620      	mov	r0, r4
 801b768:	bd10      	pop	{r4, pc}

0801b76a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801b76a:	b510      	push	{r4, lr}
 801b76c:	2104      	movs	r1, #4
 801b76e:	4604      	mov	r4, r0
 801b770:	f00b f941 	bl	80269f6 <_ZdlPvj>
 801b774:	4620      	mov	r0, r4
 801b776:	bd10      	pop	{r4, pc}

0801b778 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801b778:	b510      	push	{r4, lr}
 801b77a:	2104      	movs	r1, #4
 801b77c:	4604      	mov	r4, r0
 801b77e:	f00b f93a 	bl	80269f6 <_ZdlPvj>
 801b782:	4620      	mov	r0, r4
 801b784:	bd10      	pop	{r4, pc}

0801b786 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801b786:	b510      	push	{r4, lr}
 801b788:	f640 0144 	movw	r1, #2116	; 0x844
 801b78c:	4604      	mov	r4, r0
 801b78e:	f00b f932 	bl	80269f6 <_ZdlPvj>
 801b792:	4620      	mov	r0, r4
 801b794:	bd10      	pop	{r4, pc}

0801b796 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b796:	b510      	push	{r4, lr}
 801b798:	2104      	movs	r1, #4
 801b79a:	4604      	mov	r4, r0
 801b79c:	f00b f92b 	bl	80269f6 <_ZdlPvj>
 801b7a0:	4620      	mov	r0, r4
 801b7a2:	bd10      	pop	{r4, pc}

0801b7a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801b7a4:	b510      	push	{r4, lr}
 801b7a6:	2104      	movs	r1, #4
 801b7a8:	4604      	mov	r4, r0
 801b7aa:	f00b f924 	bl	80269f6 <_ZdlPvj>
 801b7ae:	4620      	mov	r0, r4
 801b7b0:	bd10      	pop	{r4, pc}

0801b7b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b7b2:	b510      	push	{r4, lr}
 801b7b4:	2104      	movs	r1, #4
 801b7b6:	4604      	mov	r4, r0
 801b7b8:	f00b f91d 	bl	80269f6 <_ZdlPvj>
 801b7bc:	4620      	mov	r0, r4
 801b7be:	bd10      	pop	{r4, pc}

0801b7c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801b7c0:	b510      	push	{r4, lr}
 801b7c2:	2104      	movs	r1, #4
 801b7c4:	4604      	mov	r4, r0
 801b7c6:	f00b f916 	bl	80269f6 <_ZdlPvj>
 801b7ca:	4620      	mov	r0, r4
 801b7cc:	bd10      	pop	{r4, pc}

0801b7ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b7ce:	b510      	push	{r4, lr}
 801b7d0:	2104      	movs	r1, #4
 801b7d2:	4604      	mov	r4, r0
 801b7d4:	f00b f90f 	bl	80269f6 <_ZdlPvj>
 801b7d8:	4620      	mov	r0, r4
 801b7da:	bd10      	pop	{r4, pc}

0801b7dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801b7dc:	b510      	push	{r4, lr}
 801b7de:	2104      	movs	r1, #4
 801b7e0:	4604      	mov	r4, r0
 801b7e2:	f00b f908 	bl	80269f6 <_ZdlPvj>
 801b7e6:	4620      	mov	r0, r4
 801b7e8:	bd10      	pop	{r4, pc}

0801b7ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b7ea:	b510      	push	{r4, lr}
 801b7ec:	2104      	movs	r1, #4
 801b7ee:	4604      	mov	r4, r0
 801b7f0:	f00b f901 	bl	80269f6 <_ZdlPvj>
 801b7f4:	4620      	mov	r0, r4
 801b7f6:	bd10      	pop	{r4, pc}

0801b7f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801b7f8:	b510      	push	{r4, lr}
 801b7fa:	2104      	movs	r1, #4
 801b7fc:	4604      	mov	r4, r0
 801b7fe:	f00b f8fa 	bl	80269f6 <_ZdlPvj>
 801b802:	4620      	mov	r0, r4
 801b804:	bd10      	pop	{r4, pc}

0801b806 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b806:	b510      	push	{r4, lr}
 801b808:	2104      	movs	r1, #4
 801b80a:	4604      	mov	r4, r0
 801b80c:	f00b f8f3 	bl	80269f6 <_ZdlPvj>
 801b810:	4620      	mov	r0, r4
 801b812:	bd10      	pop	{r4, pc}

0801b814 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b814:	b510      	push	{r4, lr}
 801b816:	2104      	movs	r1, #4
 801b818:	4604      	mov	r4, r0
 801b81a:	f00b f8ec 	bl	80269f6 <_ZdlPvj>
 801b81e:	4620      	mov	r0, r4
 801b820:	bd10      	pop	{r4, pc}

0801b822 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b822:	b510      	push	{r4, lr}
 801b824:	2104      	movs	r1, #4
 801b826:	4604      	mov	r4, r0
 801b828:	f00b f8e5 	bl	80269f6 <_ZdlPvj>
 801b82c:	4620      	mov	r0, r4
 801b82e:	bd10      	pop	{r4, pc}

0801b830 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b830:	b510      	push	{r4, lr}
 801b832:	2104      	movs	r1, #4
 801b834:	4604      	mov	r4, r0
 801b836:	f00b f8de 	bl	80269f6 <_ZdlPvj>
 801b83a:	4620      	mov	r0, r4
 801b83c:	bd10      	pop	{r4, pc}

0801b83e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b83e:	b510      	push	{r4, lr}
 801b840:	2104      	movs	r1, #4
 801b842:	4604      	mov	r4, r0
 801b844:	f00b f8d7 	bl	80269f6 <_ZdlPvj>
 801b848:	4620      	mov	r0, r4
 801b84a:	bd10      	pop	{r4, pc}

0801b84c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801b84c:	b510      	push	{r4, lr}
 801b84e:	2104      	movs	r1, #4
 801b850:	4604      	mov	r4, r0
 801b852:	f00b f8d0 	bl	80269f6 <_ZdlPvj>
 801b856:	4620      	mov	r0, r4
 801b858:	bd10      	pop	{r4, pc}

0801b85a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b85a:	b510      	push	{r4, lr}
 801b85c:	2104      	movs	r1, #4
 801b85e:	4604      	mov	r4, r0
 801b860:	f00b f8c9 	bl	80269f6 <_ZdlPvj>
 801b864:	4620      	mov	r0, r4
 801b866:	bd10      	pop	{r4, pc}

0801b868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b868:	b510      	push	{r4, lr}
 801b86a:	2104      	movs	r1, #4
 801b86c:	4604      	mov	r4, r0
 801b86e:	f00b f8c2 	bl	80269f6 <_ZdlPvj>
 801b872:	4620      	mov	r0, r4
 801b874:	bd10      	pop	{r4, pc}

0801b876 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b876:	b510      	push	{r4, lr}
 801b878:	2104      	movs	r1, #4
 801b87a:	4604      	mov	r4, r0
 801b87c:	f00b f8bb 	bl	80269f6 <_ZdlPvj>
 801b880:	4620      	mov	r0, r4
 801b882:	bd10      	pop	{r4, pc}

0801b884 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801b884:	b510      	push	{r4, lr}
 801b886:	2104      	movs	r1, #4
 801b888:	4604      	mov	r4, r0
 801b88a:	f00b f8b4 	bl	80269f6 <_ZdlPvj>
 801b88e:	4620      	mov	r0, r4
 801b890:	bd10      	pop	{r4, pc}

0801b892 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b892:	b510      	push	{r4, lr}
 801b894:	2104      	movs	r1, #4
 801b896:	4604      	mov	r4, r0
 801b898:	f00b f8ad 	bl	80269f6 <_ZdlPvj>
 801b89c:	4620      	mov	r0, r4
 801b89e:	bd10      	pop	{r4, pc}

0801b8a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b8a0:	b510      	push	{r4, lr}
 801b8a2:	2104      	movs	r1, #4
 801b8a4:	4604      	mov	r4, r0
 801b8a6:	f00b f8a6 	bl	80269f6 <_ZdlPvj>
 801b8aa:	4620      	mov	r0, r4
 801b8ac:	bd10      	pop	{r4, pc}

0801b8ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b8ae:	b510      	push	{r4, lr}
 801b8b0:	2104      	movs	r1, #4
 801b8b2:	4604      	mov	r4, r0
 801b8b4:	f00b f89f 	bl	80269f6 <_ZdlPvj>
 801b8b8:	4620      	mov	r0, r4
 801b8ba:	bd10      	pop	{r4, pc}

0801b8bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b8bc:	b510      	push	{r4, lr}
 801b8be:	2104      	movs	r1, #4
 801b8c0:	4604      	mov	r4, r0
 801b8c2:	f00b f898 	bl	80269f6 <_ZdlPvj>
 801b8c6:	4620      	mov	r0, r4
 801b8c8:	bd10      	pop	{r4, pc}

0801b8ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b8ca:	b510      	push	{r4, lr}
 801b8cc:	2104      	movs	r1, #4
 801b8ce:	4604      	mov	r4, r0
 801b8d0:	f00b f891 	bl	80269f6 <_ZdlPvj>
 801b8d4:	4620      	mov	r0, r4
 801b8d6:	bd10      	pop	{r4, pc}

0801b8d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b8d8:	b510      	push	{r4, lr}
 801b8da:	2104      	movs	r1, #4
 801b8dc:	4604      	mov	r4, r0
 801b8de:	f00b f88a 	bl	80269f6 <_ZdlPvj>
 801b8e2:	4620      	mov	r0, r4
 801b8e4:	bd10      	pop	{r4, pc}

0801b8e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801b8e6:	b510      	push	{r4, lr}
 801b8e8:	2104      	movs	r1, #4
 801b8ea:	4604      	mov	r4, r0
 801b8ec:	f00b f883 	bl	80269f6 <_ZdlPvj>
 801b8f0:	4620      	mov	r0, r4
 801b8f2:	bd10      	pop	{r4, pc}

0801b8f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801b8f4:	b510      	push	{r4, lr}
 801b8f6:	2104      	movs	r1, #4
 801b8f8:	4604      	mov	r4, r0
 801b8fa:	f00b f87c 	bl	80269f6 <_ZdlPvj>
 801b8fe:	4620      	mov	r0, r4
 801b900:	bd10      	pop	{r4, pc}

0801b902 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801b902:	b510      	push	{r4, lr}
 801b904:	2104      	movs	r1, #4
 801b906:	4604      	mov	r4, r0
 801b908:	f00b f875 	bl	80269f6 <_ZdlPvj>
 801b90c:	4620      	mov	r0, r4
 801b90e:	bd10      	pop	{r4, pc}

0801b910 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801b910:	b510      	push	{r4, lr}
 801b912:	2104      	movs	r1, #4
 801b914:	4604      	mov	r4, r0
 801b916:	f00b f86e 	bl	80269f6 <_ZdlPvj>
 801b91a:	4620      	mov	r0, r4
 801b91c:	bd10      	pop	{r4, pc}
	...

0801b920 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b924:	b08f      	sub	sp, #60	; 0x3c
 801b926:	461c      	mov	r4, r3
 801b928:	9205      	str	r2, [sp, #20]
 801b92a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b92e:	9100      	str	r1, [sp, #0]
 801b930:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b932:	9201      	str	r2, [sp, #4]
 801b934:	2a00      	cmp	r2, #0
 801b936:	f000 8115 	beq.w	801bb64 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x244>
 801b93a:	6820      	ldr	r0, [r4, #0]
 801b93c:	6861      	ldr	r1, [r4, #4]
 801b93e:	aa0a      	add	r2, sp, #40	; 0x28
 801b940:	c203      	stmia	r2!, {r0, r1}
 801b942:	6818      	ldr	r0, [r3, #0]
 801b944:	6859      	ldr	r1, [r3, #4]
 801b946:	aa0c      	add	r2, sp, #48	; 0x30
 801b948:	c203      	stmia	r2!, {r0, r1}
 801b94a:	a80a      	add	r0, sp, #40	; 0x28
 801b94c:	f7f9 fdf0 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b950:	4621      	mov	r1, r4
 801b952:	a80c      	add	r0, sp, #48	; 0x30
 801b954:	f7f9 fe30 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b958:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801b95c:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801b960:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801b964:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b968:	bfde      	ittt	le
 801b96a:	b2b3      	uxthle	r3, r6
 801b96c:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801b970:	fb92 f3f3 	sdivle	r3, r2, r3
 801b974:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801b978:	bfc8      	it	gt
 801b97a:	2301      	movgt	r3, #1
 801b97c:	fb92 f1f3 	sdiv	r1, r2, r3
 801b980:	fa1f fc81 	uxth.w	ip, r1
 801b984:	fb0c 2413 	mls	r4, ip, r3, r2
 801b988:	fb14 f406 	smulbb	r4, r4, r6
 801b98c:	441d      	add	r5, r3
 801b98e:	4404      	add	r4, r0
 801b990:	4661      	mov	r1, ip
 801b992:	3d01      	subs	r5, #1
 801b994:	b2a4      	uxth	r4, r4
 801b996:	fb95 f5f3 	sdiv	r5, r5, r3
 801b99a:	b131      	cbz	r1, 801b9aa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x8a>
 801b99c:	9b05      	ldr	r3, [sp, #20]
 801b99e:	9900      	ldr	r1, [sp, #0]
 801b9a0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801b9a4:	ba1b      	rev	r3, r3
 801b9a6:	4419      	add	r1, r3
 801b9a8:	9100      	str	r1, [sp, #0]
 801b9aa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801b9ae:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801b9b2:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801b9b6:	4418      	add	r0, r3
 801b9b8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801b9bc:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801b9c0:	441a      	add	r2, r3
 801b9c2:	4b6a      	ldr	r3, [pc, #424]	; (801bb6c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801b9c4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801b9c8:	6818      	ldr	r0, [r3, #0]
 801b9ca:	6803      	ldr	r3, [r0, #0]
 801b9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b9ce:	4798      	blx	r3
 801b9d0:	4967      	ldr	r1, [pc, #412]	; (801bb70 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801b9d2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801b9d6:	880b      	ldrh	r3, [r1, #0]
 801b9d8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801b9dc:	9109      	str	r1, [sp, #36]	; 0x24
 801b9de:	fb03 c202 	mla	r2, r3, r2, ip
 801b9e2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801b9e6:	4373      	muls	r3, r6
 801b9e8:	b2ad      	uxth	r5, r5
 801b9ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b9ee:	00ad      	lsls	r5, r5, #2
 801b9f0:	9306      	str	r3, [sp, #24]
 801b9f2:	1d2b      	adds	r3, r5, #4
 801b9f4:	9307      	str	r3, [sp, #28]
 801b9f6:	9b01      	ldr	r3, [sp, #4]
 801b9f8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801b9fc:	9103      	str	r1, [sp, #12]
 801b9fe:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 801ba02:	2c00      	cmp	r4, #0
 801ba04:	bf0c      	ite	eq
 801ba06:	46c6      	moveq	lr, r8
 801ba08:	f04f 0e00 	movne.w	lr, #0
 801ba0c:	2300      	movs	r3, #0
 801ba0e:	b292      	uxth	r2, r2
 801ba10:	fa1f fe8e 	uxth.w	lr, lr
 801ba14:	9302      	str	r3, [sp, #8]
 801ba16:	9204      	str	r2, [sp, #16]
 801ba18:	9a06      	ldr	r2, [sp, #24]
 801ba1a:	4282      	cmp	r2, r0
 801ba1c:	f240 809d 	bls.w	801bb5a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23a>
 801ba20:	b963      	cbnz	r3, 801ba3c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11c>
 801ba22:	9b00      	ldr	r3, [sp, #0]
 801ba24:	781a      	ldrb	r2, [r3, #0]
 801ba26:	0993      	lsrs	r3, r2, #6
 801ba28:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801ba2c:	9202      	str	r2, [sp, #8]
 801ba2e:	1e5a      	subs	r2, r3, #1
 801ba30:	2a02      	cmp	r2, #2
 801ba32:	d815      	bhi.n	801ba60 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x140>
 801ba34:	9a00      	ldr	r2, [sp, #0]
 801ba36:	3201      	adds	r2, #1
 801ba38:	9200      	str	r2, [sp, #0]
 801ba3a:	b29b      	uxth	r3, r3
 801ba3c:	b1b4      	cbz	r4, 801ba6c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14c>
 801ba3e:	429c      	cmp	r4, r3
 801ba40:	bf95      	itete	ls
 801ba42:	1b1c      	subls	r4, r3, r4
 801ba44:	1ae4      	subhi	r4, r4, r3
 801ba46:	fa1f fa84 	uxthls.w	sl, r4
 801ba4a:	b2a4      	uxthhi	r4, r4
 801ba4c:	bf87      	ittee	hi
 801ba4e:	4671      	movhi	r1, lr
 801ba50:	f04f 0a00 	movhi.w	sl, #0
 801ba54:	fa1f f188 	uxthls.w	r1, r8
 801ba58:	2400      	movls	r4, #0
 801ba5a:	4653      	mov	r3, sl
 801ba5c:	468e      	mov	lr, r1
 801ba5e:	e7db      	b.n	801ba18 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf8>
 801ba60:	9a00      	ldr	r2, [sp, #0]
 801ba62:	9b00      	ldr	r3, [sp, #0]
 801ba64:	3202      	adds	r2, #2
 801ba66:	785b      	ldrb	r3, [r3, #1]
 801ba68:	9200      	str	r2, [sp, #0]
 801ba6a:	e7e7      	b.n	801ba3c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11c>
 801ba6c:	2202      	movs	r2, #2
 801ba6e:	4615      	mov	r5, r2
 801ba70:	9907      	ldr	r1, [sp, #28]
 801ba72:	9a02      	ldr	r2, [sp, #8]
 801ba74:	fb15 1202 	smlabb	r2, r5, r2, r1
 801ba78:	9905      	ldr	r1, [sp, #20]
 801ba7a:	4573      	cmp	r3, lr
 801ba7c:	f831 c002 	ldrh.w	ip, [r1, r2]
 801ba80:	9a01      	ldr	r2, [sp, #4]
 801ba82:	bf2b      	itete	cs
 801ba84:	eba3 0a0e 	subcs.w	sl, r3, lr
 801ba88:	ebae 0103 	subcc.w	r1, lr, r3
 801ba8c:	46f1      	movcs	r9, lr
 801ba8e:	4699      	movcc	r9, r3
 801ba90:	bf27      	ittee	cs
 801ba92:	fa1f fa8a 	uxthcs.w	sl, sl
 801ba96:	4621      	movcs	r1, r4
 801ba98:	b289      	uxthcc	r1, r1
 801ba9a:	46a2      	movcc	sl, r4
 801ba9c:	2aff      	cmp	r2, #255	; 0xff
 801ba9e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801baa2:	d105      	bne.n	801bab0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 801baa4:	4481      	add	r9, r0
 801baa6:	4581      	cmp	r9, r0
 801baa8:	d045      	beq.n	801bb36 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x216>
 801baaa:	f820 cb02 	strh.w	ip, [r0], #2
 801baae:	e7fa      	b.n	801baa6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 801bab0:	9d03      	ldr	r5, [sp, #12]
 801bab2:	ea4f 222c 	mov.w	r2, ip, asr #8
 801bab6:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801baba:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801babe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bac2:	436a      	muls	r2, r5
 801bac4:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801bac8:	fa5f fc8c 	uxtb.w	ip, ip
 801bacc:	9208      	str	r2, [sp, #32]
 801bace:	fb0b fb05 	mul.w	fp, fp, r5
 801bad2:	fb0c fc05 	mul.w	ip, ip, r5
 801bad6:	4481      	add	r9, r0
 801bad8:	4581      	cmp	r9, r0
 801bada:	d02c      	beq.n	801bb36 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x216>
 801badc:	8802      	ldrh	r2, [r0, #0]
 801bade:	9d04      	ldr	r5, [sp, #16]
 801bae0:	9f04      	ldr	r7, [sp, #16]
 801bae2:	1216      	asrs	r6, r2, #8
 801bae4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801bae8:	fb16 f605 	smulbb	r6, r6, r5
 801baec:	9d08      	ldr	r5, [sp, #32]
 801baee:	442e      	add	r6, r5
 801baf0:	10d5      	asrs	r5, r2, #3
 801baf2:	00d2      	lsls	r2, r2, #3
 801baf4:	b2d2      	uxtb	r2, r2
 801baf6:	fb12 f207 	smulbb	r2, r2, r7
 801bafa:	b2b6      	uxth	r6, r6
 801bafc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801bb00:	4462      	add	r2, ip
 801bb02:	fb15 f507 	smulbb	r5, r5, r7
 801bb06:	b292      	uxth	r2, r2
 801bb08:	1c77      	adds	r7, r6, #1
 801bb0a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801bb0e:	1c57      	adds	r7, r2, #1
 801bb10:	445d      	add	r5, fp
 801bb12:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801bb16:	b2ad      	uxth	r5, r5
 801bb18:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801bb1c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801bb20:	4316      	orrs	r6, r2
 801bb22:	1c6a      	adds	r2, r5, #1
 801bb24:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801bb28:	096d      	lsrs	r5, r5, #5
 801bb2a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bb2e:	432e      	orrs	r6, r5
 801bb30:	f820 6b02 	strh.w	r6, [r0], #2
 801bb34:	e7d0      	b.n	801bad8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1b8>
 801bb36:	4573      	cmp	r3, lr
 801bb38:	d38f      	bcc.n	801ba5a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13a>
 801bb3a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801bb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb40:	fa1f f188 	uxth.w	r1, r8
 801bb44:	1a64      	subs	r4, r4, r1
 801bb46:	881b      	ldrh	r3, [r3, #0]
 801bb48:	b2a4      	uxth	r4, r4
 801bb4a:	2c00      	cmp	r4, #0
 801bb4c:	eba3 0308 	sub.w	r3, r3, r8
 801bb50:	bf18      	it	ne
 801bb52:	2100      	movne	r1, #0
 801bb54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bb58:	e77f      	b.n	801ba5a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13a>
 801bb5a:	4b04      	ldr	r3, [pc, #16]	; (801bb6c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801bb5c:	6818      	ldr	r0, [r3, #0]
 801bb5e:	6803      	ldr	r3, [r0, #0]
 801bb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb62:	4798      	blx	r3
 801bb64:	b00f      	add	sp, #60	; 0x3c
 801bb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb6a:	bf00      	nop
 801bb6c:	20014610 	.word	0x20014610
 801bb70:	2001460a 	.word	0x2001460a

0801bb74 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb78:	b09f      	sub	sp, #124	; 0x7c
 801bb7a:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 801bb7e:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801bb82:	9209      	str	r2, [sp, #36]	; 0x24
 801bb84:	461d      	mov	r5, r3
 801bb86:	4604      	mov	r4, r0
 801bb88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb8a:	2a00      	cmp	r2, #0
 801bb8c:	f000 81eb 	beq.w	801bf66 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f2>
 801bb90:	6828      	ldr	r0, [r5, #0]
 801bb92:	6869      	ldr	r1, [r5, #4]
 801bb94:	aa1a      	add	r2, sp, #104	; 0x68
 801bb96:	c203      	stmia	r2!, {r0, r1}
 801bb98:	6818      	ldr	r0, [r3, #0]
 801bb9a:	6859      	ldr	r1, [r3, #4]
 801bb9c:	aa1c      	add	r2, sp, #112	; 0x70
 801bb9e:	c203      	stmia	r2!, {r0, r1}
 801bba0:	a81a      	add	r0, sp, #104	; 0x68
 801bba2:	f7f9 fcc5 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bba6:	4629      	mov	r1, r5
 801bba8:	a81c      	add	r0, sp, #112	; 0x70
 801bbaa:	f7f9 fd05 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bbae:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801bbb2:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
 801bbb6:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	; 0x76
 801bbba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bbbe:	bfd7      	itett	le
 801bbc0:	b29a      	uxthle	r2, r3
 801bbc2:	2201      	movgt	r2, #1
 801bbc4:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801bbc8:	fb91 f2f2 	sdivle	r2, r1, r2
 801bbcc:	9202      	str	r2, [sp, #8]
 801bbce:	9802      	ldr	r0, [sp, #8]
 801bbd0:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 801bbd4:	fb92 f0f0 	sdiv	r0, r2, r0
 801bbd8:	b280      	uxth	r0, r0
 801bbda:	9010      	str	r0, [sp, #64]	; 0x40
 801bbdc:	9902      	ldr	r1, [sp, #8]
 801bbde:	9802      	ldr	r0, [sp, #8]
 801bbe0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801bbe2:	4488      	add	r8, r1
 801bbe4:	fb05 2510 	mls	r5, r5, r0, r2
 801bbe8:	fb15 f503 	smulbb	r5, r5, r3
 801bbec:	f108 38ff 	add.w	r8, r8, #4294967295
 801bbf0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801bbf4:	fb98 f8f1 	sdiv	r8, r8, r1
 801bbf8:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 801bbfc:	440d      	add	r5, r1
 801bbfe:	4419      	add	r1, r3
 801bc00:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801bc04:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 801bc08:	441a      	add	r2, r3
 801bc0a:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801bc0e:	9304      	str	r3, [sp, #16]
 801bc10:	4b95      	ldr	r3, [pc, #596]	; (801be68 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 801bc12:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 801bc16:	6818      	ldr	r0, [r3, #0]
 801bc18:	6803      	ldr	r3, [r0, #0]
 801bc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc1c:	4798      	blx	r3
 801bc1e:	4b93      	ldr	r3, [pc, #588]	; (801be6c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801bc20:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 801bc24:	881a      	ldrh	r2, [r3, #0]
 801bc26:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801bc2a:	9318      	str	r3, [sp, #96]	; 0x60
 801bc2c:	fb02 7101 	mla	r1, r2, r1, r7
 801bc30:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801bc34:	4356      	muls	r6, r2
 801bc36:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801bc3a:	f108 0801 	add.w	r8, r8, #1
 801bc3e:	920a      	str	r2, [sp, #40]	; 0x28
 801bc40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc42:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801bc46:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc48:	fa1f f888 	uxth.w	r8, r8
 801bc4c:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801bc50:	f108 0204 	add.w	r2, r8, #4
 801bc54:	9211      	str	r2, [sp, #68]	; 0x44
 801bc56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bc58:	4b85      	ldr	r3, [pc, #532]	; (801be70 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801bc5a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801bc5e:	b2ad      	uxth	r5, r5
 801bc60:	9215      	str	r2, [sp, #84]	; 0x54
 801bc62:	2d00      	cmp	r5, #0
 801bc64:	9a04      	ldr	r2, [sp, #16]
 801bc66:	f04f 0100 	mov.w	r1, #0
 801bc6a:	bf18      	it	ne
 801bc6c:	2200      	movne	r2, #0
 801bc6e:	1b1b      	subs	r3, r3, r4
 801bc70:	b292      	uxth	r2, r2
 801bc72:	910d      	str	r1, [sp, #52]	; 0x34
 801bc74:	9319      	str	r3, [sp, #100]	; 0x64
 801bc76:	9910      	ldr	r1, [sp, #64]	; 0x40
 801bc78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc7a:	fa11 f383 	uxtah	r3, r1, r3
 801bc7e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801bc80:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801bc84:	3304      	adds	r3, #4
 801bc86:	9306      	str	r3, [sp, #24]
 801bc88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc8a:	4283      	cmp	r3, r0
 801bc8c:	f240 8166 	bls.w	801bf5c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e8>
 801bc90:	9902      	ldr	r1, [sp, #8]
 801bc92:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801bc96:	fbb5 f3f3 	udiv	r3, r5, r3
 801bc9a:	1acb      	subs	r3, r1, r3
 801bc9c:	b29b      	uxth	r3, r3
 801bc9e:	9316      	str	r3, [sp, #88]	; 0x58
 801bca0:	9b06      	ldr	r3, [sp, #24]
 801bca2:	9e06      	ldr	r6, [sp, #24]
 801bca4:	7859      	ldrb	r1, [r3, #1]
 801bca6:	789b      	ldrb	r3, [r3, #2]
 801bca8:	7836      	ldrb	r6, [r6, #0]
 801bcaa:	9612      	str	r6, [sp, #72]	; 0x48
 801bcac:	021b      	lsls	r3, r3, #8
 801bcae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801bcb2:	9906      	ldr	r1, [sp, #24]
 801bcb4:	78c9      	ldrb	r1, [r1, #3]
 801bcb6:	430b      	orrs	r3, r1
 801bcb8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801bcba:	3601      	adds	r6, #1
 801bcbc:	4419      	add	r1, r3
 801bcbe:	9605      	str	r6, [sp, #20]
 801bcc0:	1c4e      	adds	r6, r1, #1
 801bcc2:	9603      	str	r6, [sp, #12]
 801bcc4:	7849      	ldrb	r1, [r1, #1]
 801bcc6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bcc8:	0209      	lsls	r1, r1, #8
 801bcca:	5cf3      	ldrb	r3, [r6, r3]
 801bccc:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 801bcd0:	4319      	orrs	r1, r3
 801bcd2:	b28b      	uxth	r3, r1
 801bcd4:	930c      	str	r3, [sp, #48]	; 0x30
 801bcd6:	2300      	movs	r3, #0
 801bcd8:	f04f 0a01 	mov.w	sl, #1
 801bcdc:	9307      	str	r3, [sp, #28]
 801bcde:	469c      	mov	ip, r3
 801bce0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801bce4:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801bce8:	46d3      	mov	fp, sl
 801bcea:	4657      	mov	r7, sl
 801bcec:	930e      	str	r3, [sp, #56]	; 0x38
 801bcee:	2d00      	cmp	r5, #0
 801bcf0:	d07e      	beq.n	801bdf0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801bcf2:	42af      	cmp	r7, r5
 801bcf4:	d26e      	bcs.n	801bdd4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 801bcf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcf8:	9201      	str	r2, [sp, #4]
 801bcfa:	1bed      	subs	r5, r5, r7
 801bcfc:	4283      	cmp	r3, r0
 801bcfe:	b2ad      	uxth	r5, r5
 801bd00:	d802      	bhi.n	801bd08 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801bd02:	e073      	b.n	801bdec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d15f      	bne.n	801bdc8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 801bd08:	9b03      	ldr	r3, [sp, #12]
 801bd0a:	785b      	ldrb	r3, [r3, #1]
 801bd0c:	f1cb 0207 	rsb	r2, fp, #7
 801bd10:	4093      	lsls	r3, r2
 801bd12:	005b      	lsls	r3, r3, #1
 801bd14:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801bd18:	9b03      	ldr	r3, [sp, #12]
 801bd1a:	781b      	ldrb	r3, [r3, #0]
 801bd1c:	fa43 f30b 	asr.w	r3, r3, fp
 801bd20:	b2db      	uxtb	r3, r3
 801bd22:	4313      	orrs	r3, r2
 801bd24:	f10b 0201 	add.w	r2, fp, #1
 801bd28:	fa5f fb82 	uxtb.w	fp, r2
 801bd2c:	9a03      	ldr	r2, [sp, #12]
 801bd2e:	f1bb 0f08 	cmp.w	fp, #8
 801bd32:	bf15      	itete	ne
 801bd34:	3201      	addne	r2, #1
 801bd36:	3202      	addeq	r2, #2
 801bd38:	9203      	strne	r2, [sp, #12]
 801bd3a:	9203      	streq	r2, [sp, #12]
 801bd3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bd3e:	b29f      	uxth	r7, r3
 801bd40:	bf08      	it	eq
 801bd42:	f04f 0b00 	moveq.w	fp, #0
 801bd46:	42ba      	cmp	r2, r7
 801bd48:	d309      	bcc.n	801bd5e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 801bd4a:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801bd4e:	2301      	movs	r3, #1
 801bd50:	9a05      	ldr	r2, [sp, #20]
 801bd52:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801bd56:	d30e      	bcc.n	801bd76 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 801bd58:	469a      	mov	sl, r3
 801bd5a:	2600      	movs	r6, #0
 801bd5c:	e035      	b.n	801bdca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 801bd5e:	9b05      	ldr	r3, [sp, #20]
 801bd60:	429f      	cmp	r7, r3
 801bd62:	d318      	bcc.n	801bd96 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 801bd64:	eb04 030a 	add.w	r3, r4, sl
 801bd68:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 801bd6c:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 801bd70:	f10a 0301 	add.w	r3, sl, #1
 801bd74:	b29b      	uxth	r3, r3
 801bd76:	9a05      	ldr	r2, [sp, #20]
 801bd78:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801bd7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bd7e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bd82:	7116      	strb	r6, [r2, #4]
 801bd84:	f10a 0601 	add.w	r6, sl, #1
 801bd88:	80d1      	strh	r1, [r2, #6]
 801bd8a:	7156      	strb	r6, [r2, #5]
 801bd8c:	9a05      	ldr	r2, [sp, #20]
 801bd8e:	3201      	adds	r2, #1
 801bd90:	b292      	uxth	r2, r2
 801bd92:	9205      	str	r2, [sp, #20]
 801bd94:	e7e0      	b.n	801bd58 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 801bd96:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801bd9a:	463a      	mov	r2, r7
 801bd9c:	795b      	ldrb	r3, [r3, #5]
 801bd9e:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801bda2:	4426      	add	r6, r4
 801bda4:	9919      	ldr	r1, [sp, #100]	; 0x64
 801bda6:	eb01 0c06 	add.w	ip, r1, r6
 801bdaa:	f1bc 0f00 	cmp.w	ip, #0
 801bdae:	dd07      	ble.n	801bdc0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 801bdb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bdb4:	f892 c004 	ldrb.w	ip, [r2, #4]
 801bdb8:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801bdbc:	88d2      	ldrh	r2, [r2, #6]
 801bdbe:	e7f1      	b.n	801bda4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 801bdc0:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801bdc4:	b29b      	uxth	r3, r3
 801bdc6:	e7c3      	b.n	801bd50 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 801bdc8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801bdca:	970c      	str	r7, [sp, #48]	; 0x30
 801bdcc:	9a01      	ldr	r2, [sp, #4]
 801bdce:	46b4      	mov	ip, r6
 801bdd0:	461f      	mov	r7, r3
 801bdd2:	e78c      	b.n	801bcee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 801bdd4:	1b7b      	subs	r3, r7, r5
 801bdd6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801bdda:	9201      	str	r2, [sp, #4]
 801bddc:	eb0c 0605 	add.w	r6, ip, r5
 801bde0:	b29b      	uxth	r3, r3
 801bde2:	b2b6      	uxth	r6, r6
 801bde4:	2500      	movs	r5, #0
 801bde6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bde8:	4282      	cmp	r2, r0
 801bdea:	d88b      	bhi.n	801bd04 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 801bdec:	9a01      	ldr	r2, [sp, #4]
 801bdee:	e74b      	b.n	801bc88 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 801bdf0:	4297      	cmp	r7, r2
 801bdf2:	d332      	bcc.n	801be5a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e6>
 801bdf4:	1abb      	subs	r3, r7, r2
 801bdf6:	b29b      	uxth	r3, r3
 801bdf8:	9208      	str	r2, [sp, #32]
 801bdfa:	9501      	str	r5, [sp, #4]
 801bdfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bdfe:	29ff      	cmp	r1, #255	; 0xff
 801be00:	9908      	ldr	r1, [sp, #32]
 801be02:	eb0c 0601 	add.w	r6, ip, r1
 801be06:	d135      	bne.n	801be74 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 801be08:	f1a0 0e02 	sub.w	lr, r0, #2
 801be0c:	b2b6      	uxth	r6, r6
 801be0e:	45b4      	cmp	ip, r6
 801be10:	f040 808c 	bne.w	801bf2c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b8>
 801be14:	9908      	ldr	r1, [sp, #32]
 801be16:	4297      	cmp	r7, r2
 801be18:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801be1c:	d3e2      	bcc.n	801bde4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 801be1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801be20:	9904      	ldr	r1, [sp, #16]
 801be22:	8812      	ldrh	r2, [r2, #0]
 801be24:	1a52      	subs	r2, r2, r1
 801be26:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801be2a:	9a07      	ldr	r2, [sp, #28]
 801be2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801be2e:	3201      	adds	r2, #1
 801be30:	428a      	cmp	r2, r1
 801be32:	9207      	str	r2, [sp, #28]
 801be34:	f040 8087 	bne.w	801bf46 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d2>
 801be38:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801be3c:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 801be40:	9b04      	ldr	r3, [sp, #16]
 801be42:	1bed      	subs	r5, r5, r7
 801be44:	b2ad      	uxth	r5, r5
 801be46:	2d00      	cmp	r5, #0
 801be48:	bf08      	it	eq
 801be4a:	461a      	moveq	r2, r3
 801be4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801be4e:	bf18      	it	ne
 801be50:	2200      	movne	r2, #0
 801be52:	3301      	adds	r3, #1
 801be54:	930d      	str	r3, [sp, #52]	; 0x34
 801be56:	b292      	uxth	r2, r2
 801be58:	e70d      	b.n	801bc76 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 801be5a:	1bd1      	subs	r1, r2, r7
 801be5c:	b28b      	uxth	r3, r1
 801be5e:	9301      	str	r3, [sp, #4]
 801be60:	9708      	str	r7, [sp, #32]
 801be62:	462b      	mov	r3, r5
 801be64:	e7ca      	b.n	801bdfc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 801be66:	bf00      	nop
 801be68:	20014610 	.word	0x20014610
 801be6c:	2001460a 	.word	0x2001460a
 801be70:	fffff7fb 	.word	0xfffff7fb
 801be74:	b2b6      	uxth	r6, r6
 801be76:	900b      	str	r0, [sp, #44]	; 0x2c
 801be78:	45b4      	cmp	ip, r6
 801be7a:	d0cb      	beq.n	801be14 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 801be7c:	f10c 0101 	add.w	r1, ip, #1
 801be80:	44a4      	add	ip, r4
 801be82:	9117      	str	r1, [sp, #92]	; 0x5c
 801be84:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801be88:	9911      	ldr	r1, [sp, #68]	; 0x44
 801be8a:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801be8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801be90:	f8b1 c000 	ldrh.w	ip, [r1]
 801be94:	990e      	ldr	r1, [sp, #56]	; 0x38
 801be96:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801be9a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801be9e:	fb1e fe01 	smulbb	lr, lr, r1
 801bea2:	ea4f 2825 	mov.w	r8, r5, asr #8
 801bea6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801bea8:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801beac:	fb08 e801 	mla	r8, r8, r1, lr
 801beb0:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801beb4:	990e      	ldr	r1, [sp, #56]	; 0x38
 801beb6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801beba:	fb19 f901 	smulbb	r9, r9, r1
 801bebe:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801bec2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801bec4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801bec8:	fb0e 9e01 	mla	lr, lr, r1, r9
 801becc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bed0:	990e      	ldr	r1, [sp, #56]	; 0x38
 801bed2:	fa5f fc8c 	uxtb.w	ip, ip
 801bed6:	fb1c fc01 	smulbb	ip, ip, r1
 801beda:	00ed      	lsls	r5, r5, #3
 801bedc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801bede:	b2ed      	uxtb	r5, r5
 801bee0:	fb05 c501 	mla	r5, r5, r1, ip
 801bee4:	fa1f f888 	uxth.w	r8, r8
 801bee8:	fa1f fe8e 	uxth.w	lr, lr
 801beec:	b2ad      	uxth	r5, r5
 801beee:	f108 0c01 	add.w	ip, r8, #1
 801bef2:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801bef6:	f10e 0901 	add.w	r9, lr, #1
 801befa:	f105 0c01 	add.w	ip, r5, #1
 801befe:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801bf02:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801bf06:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801bf0a:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801bf0e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801bf12:	ea4c 0808 	orr.w	r8, ip, r8
 801bf16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bf18:	f8bd c05c 	ldrh.w	ip, [sp, #92]	; 0x5c
 801bf1c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801bf20:	ea48 0809 	orr.w	r8, r8, r9
 801bf24:	f821 8b02 	strh.w	r8, [r1], #2
 801bf28:	910b      	str	r1, [sp, #44]	; 0x2c
 801bf2a:	e7a5      	b.n	801be78 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 801bf2c:	f10c 0801 	add.w	r8, ip, #1
 801bf30:	44a4      	add	ip, r4
 801bf32:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bf34:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801bf38:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801bf3c:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801bf40:	fa1f fc88 	uxth.w	ip, r8
 801bf44:	e763      	b.n	801be0e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 801bf46:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801bf4a:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801bf4e:	1aad      	subs	r5, r5, r2
 801bf50:	b2ad      	uxth	r5, r5
 801bf52:	2d00      	cmp	r5, #0
 801bf54:	bf18      	it	ne
 801bf56:	2200      	movne	r2, #0
 801bf58:	9201      	str	r2, [sp, #4]
 801bf5a:	e744      	b.n	801bde6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 801bf5c:	4b03      	ldr	r3, [pc, #12]	; (801bf6c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f8>)
 801bf5e:	6818      	ldr	r0, [r3, #0]
 801bf60:	6803      	ldr	r3, [r0, #0]
 801bf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf64:	4798      	blx	r3
 801bf66:	b01f      	add	sp, #124	; 0x7c
 801bf68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf6c:	20014610 	.word	0x20014610

0801bf70 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf74:	b08f      	sub	sp, #60	; 0x3c
 801bf76:	461c      	mov	r4, r3
 801bf78:	9203      	str	r2, [sp, #12]
 801bf7a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bf7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bf80:	9202      	str	r2, [sp, #8]
 801bf82:	460f      	mov	r7, r1
 801bf84:	2a00      	cmp	r2, #0
 801bf86:	f000 8128 	beq.w	801c1da <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801bf8a:	6820      	ldr	r0, [r4, #0]
 801bf8c:	6861      	ldr	r1, [r4, #4]
 801bf8e:	aa0a      	add	r2, sp, #40	; 0x28
 801bf90:	c203      	stmia	r2!, {r0, r1}
 801bf92:	6818      	ldr	r0, [r3, #0]
 801bf94:	6859      	ldr	r1, [r3, #4]
 801bf96:	aa0c      	add	r2, sp, #48	; 0x30
 801bf98:	c203      	stmia	r2!, {r0, r1}
 801bf9a:	a80a      	add	r0, sp, #40	; 0x28
 801bf9c:	f7f9 fac8 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bfa0:	4621      	mov	r1, r4
 801bfa2:	a80c      	add	r0, sp, #48	; 0x30
 801bfa4:	f7f9 fb08 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bfa8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801bfac:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801bfb0:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801bfb4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801bfb8:	bfde      	ittt	le
 801bfba:	b2b3      	uxthle	r3, r6
 801bfbc:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801bfc0:	fb92 f3f3 	sdivle	r3, r2, r3
 801bfc4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801bfc8:	bfc8      	it	gt
 801bfca:	2301      	movgt	r3, #1
 801bfcc:	fb92 f1f3 	sdiv	r1, r2, r3
 801bfd0:	fa1f fc81 	uxth.w	ip, r1
 801bfd4:	fb0c 2413 	mls	r4, ip, r3, r2
 801bfd8:	fb14 f406 	smulbb	r4, r4, r6
 801bfdc:	441d      	add	r5, r3
 801bfde:	4404      	add	r4, r0
 801bfe0:	4661      	mov	r1, ip
 801bfe2:	3d01      	subs	r5, #1
 801bfe4:	b2a4      	uxth	r4, r4
 801bfe6:	fb95 f5f3 	sdiv	r5, r5, r3
 801bfea:	b121      	cbz	r1, 801bff6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x86>
 801bfec:	9b03      	ldr	r3, [sp, #12]
 801bfee:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801bff2:	ba1b      	rev	r3, r3
 801bff4:	441f      	add	r7, r3
 801bff6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801bffa:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801bffe:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801c002:	4418      	add	r0, r3
 801c004:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801c008:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801c00c:	441a      	add	r2, r3
 801c00e:	4b74      	ldr	r3, [pc, #464]	; (801c1e0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801c010:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801c014:	6818      	ldr	r0, [r3, #0]
 801c016:	6803      	ldr	r3, [r0, #0]
 801c018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c01a:	4798      	blx	r3
 801c01c:	4a71      	ldr	r2, [pc, #452]	; (801c1e4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801c01e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801c022:	8813      	ldrh	r3, [r2, #0]
 801c024:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801c028:	9209      	str	r2, [sp, #36]	; 0x24
 801c02a:	fb03 c101 	mla	r1, r3, r1, ip
 801c02e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801c032:	4373      	muls	r3, r6
 801c034:	b2ad      	uxth	r5, r5
 801c036:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c03a:	00ad      	lsls	r5, r5, #2
 801c03c:	2c00      	cmp	r4, #0
 801c03e:	9304      	str	r3, [sp, #16]
 801c040:	f105 0304 	add.w	r3, r5, #4
 801c044:	9305      	str	r3, [sp, #20]
 801c046:	bf0c      	ite	eq
 801c048:	46c8      	moveq	r8, r9
 801c04a:	f04f 0800 	movne.w	r8, #0
 801c04e:	2300      	movs	r3, #0
 801c050:	fa1f f888 	uxth.w	r8, r8
 801c054:	9301      	str	r3, [sp, #4]
 801c056:	9a04      	ldr	r2, [sp, #16]
 801c058:	4282      	cmp	r2, r0
 801c05a:	f240 80b9 	bls.w	801c1d0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801c05e:	b95b      	cbnz	r3, 801c078 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x108>
 801c060:	783a      	ldrb	r2, [r7, #0]
 801c062:	0993      	lsrs	r3, r2, #6
 801c064:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801c068:	9201      	str	r2, [sp, #4]
 801c06a:	1e5a      	subs	r2, r3, #1
 801c06c:	2a02      	cmp	r2, #2
 801c06e:	bf8d      	iteet	hi
 801c070:	787b      	ldrbhi	r3, [r7, #1]
 801c072:	3701      	addls	r7, #1
 801c074:	b29b      	uxthls	r3, r3
 801c076:	3702      	addhi	r7, #2
 801c078:	b184      	cbz	r4, 801c09c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801c07a:	429c      	cmp	r4, r3
 801c07c:	bf95      	itete	ls
 801c07e:	1b1c      	subls	r4, r3, r4
 801c080:	1ae4      	subhi	r4, r4, r3
 801c082:	fa1f fa84 	uxthls.w	sl, r4
 801c086:	b2a4      	uxthhi	r4, r4
 801c088:	bf87      	ittee	hi
 801c08a:	46c4      	movhi	ip, r8
 801c08c:	f04f 0a00 	movhi.w	sl, #0
 801c090:	fa1f fc89 	uxthls.w	ip, r9
 801c094:	2400      	movls	r4, #0
 801c096:	4653      	mov	r3, sl
 801c098:	46e0      	mov	r8, ip
 801c09a:	e7dc      	b.n	801c056 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe6>
 801c09c:	2204      	movs	r2, #4
 801c09e:	4615      	mov	r5, r2
 801c0a0:	9905      	ldr	r1, [sp, #20]
 801c0a2:	9a01      	ldr	r2, [sp, #4]
 801c0a4:	fb15 1202 	smlabb	r2, r5, r2, r1
 801c0a8:	9903      	ldr	r1, [sp, #12]
 801c0aa:	588a      	ldr	r2, [r1, r2]
 801c0ac:	4543      	cmp	r3, r8
 801c0ae:	bf27      	ittee	cs
 801c0b0:	eba3 0a08 	subcs.w	sl, r3, r8
 801c0b4:	46c6      	movcs	lr, r8
 801c0b6:	eba8 0c03 	subcc.w	ip, r8, r3
 801c0ba:	469e      	movcc	lr, r3
 801c0bc:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801c0c0:	bf27      	ittee	cs
 801c0c2:	fa1f fa8a 	uxthcs.w	sl, sl
 801c0c6:	46a4      	movcs	ip, r4
 801c0c8:	fa1f fc8c 	uxthcc.w	ip, ip
 801c0cc:	46a2      	movcc	sl, r4
 801c0ce:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801c0d2:	2900      	cmp	r1, #0
 801c0d4:	d066      	beq.n	801c1a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 801c0d6:	29ff      	cmp	r1, #255	; 0xff
 801c0d8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801c0dc:	d114      	bne.n	801c108 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801c0de:	9d02      	ldr	r5, [sp, #8]
 801c0e0:	2dff      	cmp	r5, #255	; 0xff
 801c0e2:	d111      	bne.n	801c108 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801c0e4:	0951      	lsrs	r1, r2, #5
 801c0e6:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801c0ea:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c0ee:	f026 0607 	bic.w	r6, r6, #7
 801c0f2:	430e      	orrs	r6, r1
 801c0f4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c0f8:	4316      	orrs	r6, r2
 801c0fa:	b2b6      	uxth	r6, r6
 801c0fc:	4486      	add	lr, r0
 801c0fe:	4586      	cmp	lr, r0
 801c100:	d051      	beq.n	801c1a6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801c102:	f820 6b02 	strh.w	r6, [r0], #2
 801c106:	e7fa      	b.n	801c0fe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801c108:	9d02      	ldr	r5, [sp, #8]
 801c10a:	4369      	muls	r1, r5
 801c10c:	1c4d      	adds	r5, r1, #1
 801c10e:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801c112:	122d      	asrs	r5, r5, #8
 801c114:	ea6f 0b05 	mvn.w	fp, r5
 801c118:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801c11c:	b2ad      	uxth	r5, r5
 801c11e:	b2f6      	uxtb	r6, r6
 801c120:	b2d2      	uxtb	r2, r2
 801c122:	fb11 f105 	smulbb	r1, r1, r5
 801c126:	fb16 f605 	smulbb	r6, r6, r5
 801c12a:	fb12 f205 	smulbb	r2, r2, r5
 801c12e:	b289      	uxth	r1, r1
 801c130:	b2b6      	uxth	r6, r6
 801c132:	b292      	uxth	r2, r2
 801c134:	9106      	str	r1, [sp, #24]
 801c136:	9607      	str	r6, [sp, #28]
 801c138:	9208      	str	r2, [sp, #32]
 801c13a:	4486      	add	lr, r0
 801c13c:	fa5f fb8b 	uxtb.w	fp, fp
 801c140:	4586      	cmp	lr, r0
 801c142:	d030      	beq.n	801c1a6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801c144:	8802      	ldrh	r2, [r0, #0]
 801c146:	9906      	ldr	r1, [sp, #24]
 801c148:	1216      	asrs	r6, r2, #8
 801c14a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c14e:	10d5      	asrs	r5, r2, #3
 801c150:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801c154:	fb06 160b 	mla	r6, r6, fp, r1
 801c158:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c15c:	9907      	ldr	r1, [sp, #28]
 801c15e:	00d2      	lsls	r2, r2, #3
 801c160:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801c164:	fb05 150b 	mla	r5, r5, fp, r1
 801c168:	b2d2      	uxtb	r2, r2
 801c16a:	9908      	ldr	r1, [sp, #32]
 801c16c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c170:	b2b6      	uxth	r6, r6
 801c172:	fb02 120b 	mla	r2, r2, fp, r1
 801c176:	b292      	uxth	r2, r2
 801c178:	1c71      	adds	r1, r6, #1
 801c17a:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801c17e:	1c51      	adds	r1, r2, #1
 801c180:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c184:	b2ad      	uxth	r5, r5
 801c186:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c18a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c18e:	4316      	orrs	r6, r2
 801c190:	1c6a      	adds	r2, r5, #1
 801c192:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801c196:	096d      	lsrs	r5, r5, #5
 801c198:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c19c:	432e      	orrs	r6, r5
 801c19e:	f820 6b02 	strh.w	r6, [r0], #2
 801c1a2:	e7cd      	b.n	801c140 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 801c1a4:	4470      	add	r0, lr
 801c1a6:	4543      	cmp	r3, r8
 801c1a8:	f4ff af75 	bcc.w	801c096 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x126>
 801c1ac:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801c1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1b2:	fa1f fc89 	uxth.w	ip, r9
 801c1b6:	eba4 040c 	sub.w	r4, r4, ip
 801c1ba:	881b      	ldrh	r3, [r3, #0]
 801c1bc:	b2a4      	uxth	r4, r4
 801c1be:	2c00      	cmp	r4, #0
 801c1c0:	eba3 0309 	sub.w	r3, r3, r9
 801c1c4:	bf18      	it	ne
 801c1c6:	f04f 0c00 	movne.w	ip, #0
 801c1ca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c1ce:	e762      	b.n	801c096 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x126>
 801c1d0:	4b03      	ldr	r3, [pc, #12]	; (801c1e0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801c1d2:	6818      	ldr	r0, [r3, #0]
 801c1d4:	6803      	ldr	r3, [r0, #0]
 801c1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c1d8:	4798      	blx	r3
 801c1da:	b00f      	add	sp, #60	; 0x3c
 801c1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1e0:	20014610 	.word	0x20014610
 801c1e4:	2001460a 	.word	0x2001460a

0801c1e8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801c1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1ec:	b093      	sub	sp, #76	; 0x4c
 801c1ee:	461c      	mov	r4, r3
 801c1f0:	9205      	str	r2, [sp, #20]
 801c1f2:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801c1f6:	9101      	str	r1, [sp, #4]
 801c1f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c1fa:	9202      	str	r2, [sp, #8]
 801c1fc:	2a00      	cmp	r2, #0
 801c1fe:	f000 812c 	beq.w	801c45a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801c202:	6820      	ldr	r0, [r4, #0]
 801c204:	6861      	ldr	r1, [r4, #4]
 801c206:	aa0e      	add	r2, sp, #56	; 0x38
 801c208:	c203      	stmia	r2!, {r0, r1}
 801c20a:	6818      	ldr	r0, [r3, #0]
 801c20c:	6859      	ldr	r1, [r3, #4]
 801c20e:	aa10      	add	r2, sp, #64	; 0x40
 801c210:	c203      	stmia	r2!, {r0, r1}
 801c212:	a80e      	add	r0, sp, #56	; 0x38
 801c214:	f7f9 f98c 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c218:	4621      	mov	r1, r4
 801c21a:	a810      	add	r0, sp, #64	; 0x40
 801c21c:	f7f9 f9cc 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c220:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801c224:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801c228:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801c22c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c230:	bfde      	ittt	le
 801c232:	b2b3      	uxthle	r3, r6
 801c234:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801c238:	fb92 f3f3 	sdivle	r3, r2, r3
 801c23c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801c240:	bfc8      	it	gt
 801c242:	2301      	movgt	r3, #1
 801c244:	fb92 f1f3 	sdiv	r1, r2, r3
 801c248:	fa1f fc81 	uxth.w	ip, r1
 801c24c:	fb0c 2413 	mls	r4, ip, r3, r2
 801c250:	fb14 f406 	smulbb	r4, r4, r6
 801c254:	441d      	add	r5, r3
 801c256:	4404      	add	r4, r0
 801c258:	4661      	mov	r1, ip
 801c25a:	3d01      	subs	r5, #1
 801c25c:	b2a4      	uxth	r4, r4
 801c25e:	fb95 f5f3 	sdiv	r5, r5, r3
 801c262:	b131      	cbz	r1, 801c272 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x8a>
 801c264:	9b05      	ldr	r3, [sp, #20]
 801c266:	9901      	ldr	r1, [sp, #4]
 801c268:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c26c:	ba1b      	rev	r3, r3
 801c26e:	4419      	add	r1, r3
 801c270:	9101      	str	r1, [sp, #4]
 801c272:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c276:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801c27a:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	; 0x46
 801c27e:	4418      	add	r0, r3
 801c280:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801c284:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801c288:	441a      	add	r2, r3
 801c28a:	4b75      	ldr	r3, [pc, #468]	; (801c460 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 801c28c:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801c290:	6818      	ldr	r0, [r3, #0]
 801c292:	6803      	ldr	r3, [r0, #0]
 801c294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c296:	4798      	blx	r3
 801c298:	4972      	ldr	r1, [pc, #456]	; (801c464 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801c29a:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 801c29e:	880b      	ldrh	r3, [r1, #0]
 801c2a0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801c2a4:	910d      	str	r1, [sp, #52]	; 0x34
 801c2a6:	fb03 c202 	mla	r2, r3, r2, ip
 801c2aa:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c2ae:	4373      	muls	r3, r6
 801c2b0:	b2ad      	uxth	r5, r5
 801c2b2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c2b6:	00ad      	lsls	r5, r5, #2
 801c2b8:	9308      	str	r3, [sp, #32]
 801c2ba:	1d2b      	adds	r3, r5, #4
 801c2bc:	9309      	str	r3, [sp, #36]	; 0x24
 801c2be:	9b02      	ldr	r3, [sp, #8]
 801c2c0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c2c4:	9106      	str	r1, [sp, #24]
 801c2c6:	43da      	mvns	r2, r3
 801c2c8:	2c00      	cmp	r4, #0
 801c2ca:	bf0c      	ite	eq
 801c2cc:	46dc      	moveq	ip, fp
 801c2ce:	f04f 0c00 	movne.w	ip, #0
 801c2d2:	2300      	movs	r3, #0
 801c2d4:	b2d2      	uxtb	r2, r2
 801c2d6:	fa1f fc8c 	uxth.w	ip, ip
 801c2da:	9303      	str	r3, [sp, #12]
 801c2dc:	9207      	str	r2, [sp, #28]
 801c2de:	9a08      	ldr	r2, [sp, #32]
 801c2e0:	4282      	cmp	r2, r0
 801c2e2:	f240 80b5 	bls.w	801c450 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801c2e6:	b963      	cbnz	r3, 801c302 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801c2e8:	9b01      	ldr	r3, [sp, #4]
 801c2ea:	781a      	ldrb	r2, [r3, #0]
 801c2ec:	0993      	lsrs	r3, r2, #6
 801c2ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801c2f2:	9203      	str	r2, [sp, #12]
 801c2f4:	1e5a      	subs	r2, r3, #1
 801c2f6:	2a02      	cmp	r2, #2
 801c2f8:	d815      	bhi.n	801c326 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 801c2fa:	9a01      	ldr	r2, [sp, #4]
 801c2fc:	3201      	adds	r2, #1
 801c2fe:	9201      	str	r2, [sp, #4]
 801c300:	b29b      	uxth	r3, r3
 801c302:	b1b4      	cbz	r4, 801c332 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 801c304:	429c      	cmp	r4, r3
 801c306:	bf95      	itete	ls
 801c308:	1b1c      	subls	r4, r3, r4
 801c30a:	1ae4      	subhi	r4, r4, r3
 801c30c:	fa1f f884 	uxthls.w	r8, r4
 801c310:	b2a4      	uxthhi	r4, r4
 801c312:	bf87      	ittee	hi
 801c314:	4666      	movhi	r6, ip
 801c316:	f04f 0800 	movhi.w	r8, #0
 801c31a:	fa1f f68b 	uxthls.w	r6, fp
 801c31e:	2400      	movls	r4, #0
 801c320:	4643      	mov	r3, r8
 801c322:	46b4      	mov	ip, r6
 801c324:	e7db      	b.n	801c2de <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801c326:	9a01      	ldr	r2, [sp, #4]
 801c328:	9b01      	ldr	r3, [sp, #4]
 801c32a:	3202      	adds	r2, #2
 801c32c:	785b      	ldrb	r3, [r3, #1]
 801c32e:	9201      	str	r2, [sp, #4]
 801c330:	e7e7      	b.n	801c302 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801c332:	2203      	movs	r2, #3
 801c334:	4615      	mov	r5, r2
 801c336:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c338:	9a03      	ldr	r2, [sp, #12]
 801c33a:	fb15 1202 	smlabb	r2, r5, r2, r1
 801c33e:	9905      	ldr	r1, [sp, #20]
 801c340:	4563      	cmp	r3, ip
 801c342:	eb01 0502 	add.w	r5, r1, r2
 801c346:	9902      	ldr	r1, [sp, #8]
 801c348:	bf29      	itett	cs
 801c34a:	eba3 080c 	subcs.w	r8, r3, ip
 801c34e:	ebac 0603 	subcc.w	r6, ip, r3
 801c352:	fa1f f888 	uxthcs.w	r8, r8
 801c356:	46e1      	movcs	r9, ip
 801c358:	bf2f      	iteee	cs
 801c35a:	4626      	movcs	r6, r4
 801c35c:	b2b6      	uxthcc	r6, r6
 801c35e:	4699      	movcc	r9, r3
 801c360:	46a0      	movcc	r8, r4
 801c362:	29ff      	cmp	r1, #255	; 0xff
 801c364:	d04a      	beq.n	801c3fc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x214>
 801c366:	9f06      	ldr	r7, [sp, #24]
 801c368:	78a9      	ldrb	r1, [r5, #2]
 801c36a:	9004      	str	r0, [sp, #16]
 801c36c:	4379      	muls	r1, r7
 801c36e:	910a      	str	r1, [sp, #40]	; 0x28
 801c370:	7869      	ldrb	r1, [r5, #1]
 801c372:	4379      	muls	r1, r7
 801c374:	910b      	str	r1, [sp, #44]	; 0x2c
 801c376:	9905      	ldr	r1, [sp, #20]
 801c378:	5c8a      	ldrb	r2, [r1, r2]
 801c37a:	437a      	muls	r2, r7
 801c37c:	920c      	str	r2, [sp, #48]	; 0x30
 801c37e:	46ca      	mov	sl, r9
 801c380:	f1ba 0f00 	cmp.w	sl, #0
 801c384:	d03d      	beq.n	801c402 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 801c386:	9a04      	ldr	r2, [sp, #16]
 801c388:	9f07      	ldr	r7, [sp, #28]
 801c38a:	8812      	ldrh	r2, [r2, #0]
 801c38c:	1215      	asrs	r5, r2, #8
 801c38e:	46be      	mov	lr, r7
 801c390:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c394:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c396:	10d1      	asrs	r1, r2, #3
 801c398:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801c39c:	fb05 750e 	mla	r5, r5, lr, r7
 801c3a0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c3a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c3a6:	00d2      	lsls	r2, r2, #3
 801c3a8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801c3ac:	fb01 710e 	mla	r1, r1, lr, r7
 801c3b0:	b2d2      	uxtb	r2, r2
 801c3b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c3b4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c3b8:	b2ad      	uxth	r5, r5
 801c3ba:	fb02 720e 	mla	r2, r2, lr, r7
 801c3be:	b292      	uxth	r2, r2
 801c3c0:	f105 0e01 	add.w	lr, r5, #1
 801c3c4:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801c3c8:	f102 0e01 	add.w	lr, r2, #1
 801c3cc:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801c3d0:	b289      	uxth	r1, r1
 801c3d2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c3d6:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801c3da:	4315      	orrs	r5, r2
 801c3dc:	1c4a      	adds	r2, r1, #1
 801c3de:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c3e2:	0949      	lsrs	r1, r1, #5
 801c3e4:	9a04      	ldr	r2, [sp, #16]
 801c3e6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c3ea:	430d      	orrs	r5, r1
 801c3ec:	f822 5b02 	strh.w	r5, [r2], #2
 801c3f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c3f4:	9204      	str	r2, [sp, #16]
 801c3f6:	fa1f fa8a 	uxth.w	sl, sl
 801c3fa:	e7c1      	b.n	801c380 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801c3fc:	4649      	mov	r1, r9
 801c3fe:	4686      	mov	lr, r0
 801c400:	b999      	cbnz	r1, 801c42a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x242>
 801c402:	4563      	cmp	r3, ip
 801c404:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 801c408:	d38a      	bcc.n	801c320 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 801c40a:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 801c40e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c410:	fa1f f68b 	uxth.w	r6, fp
 801c414:	1ba4      	subs	r4, r4, r6
 801c416:	881b      	ldrh	r3, [r3, #0]
 801c418:	b2a4      	uxth	r4, r4
 801c41a:	2c00      	cmp	r4, #0
 801c41c:	eba3 030b 	sub.w	r3, r3, fp
 801c420:	bf18      	it	ne
 801c422:	2600      	movne	r6, #0
 801c424:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c428:	e77a      	b.n	801c320 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 801c42a:	78aa      	ldrb	r2, [r5, #2]
 801c42c:	4f0e      	ldr	r7, [pc, #56]	; (801c468 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801c42e:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 801c432:	786a      	ldrb	r2, [r5, #1]
 801c434:	00d2      	lsls	r2, r2, #3
 801c436:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c43a:	ea4a 0202 	orr.w	r2, sl, r2
 801c43e:	f895 a000 	ldrb.w	sl, [r5]
 801c442:	3901      	subs	r1, #1
 801c444:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801c448:	f82e 2b02 	strh.w	r2, [lr], #2
 801c44c:	b289      	uxth	r1, r1
 801c44e:	e7d7      	b.n	801c400 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 801c450:	4b03      	ldr	r3, [pc, #12]	; (801c460 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 801c452:	6818      	ldr	r0, [r3, #0]
 801c454:	6803      	ldr	r3, [r0, #0]
 801c456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c458:	4798      	blx	r3
 801c45a:	b013      	add	sp, #76	; 0x4c
 801c45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c460:	20014610 	.word	0x20014610
 801c464:	2001460a 	.word	0x2001460a
 801c468:	fffff800 	.word	0xfffff800

0801c46c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801c46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c470:	b09d      	sub	sp, #116	; 0x74
 801c472:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 801c476:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 801c47a:	920e      	str	r2, [sp, #56]	; 0x38
 801c47c:	461c      	mov	r4, r3
 801c47e:	4683      	mov	fp, r0
 801c480:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c482:	2a00      	cmp	r2, #0
 801c484:	f000 81e0 	beq.w	801c848 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3dc>
 801c488:	6820      	ldr	r0, [r4, #0]
 801c48a:	6861      	ldr	r1, [r4, #4]
 801c48c:	aa18      	add	r2, sp, #96	; 0x60
 801c48e:	c203      	stmia	r2!, {r0, r1}
 801c490:	6818      	ldr	r0, [r3, #0]
 801c492:	6859      	ldr	r1, [r3, #4]
 801c494:	aa1a      	add	r2, sp, #104	; 0x68
 801c496:	c203      	stmia	r2!, {r0, r1}
 801c498:	a818      	add	r0, sp, #96	; 0x60
 801c49a:	f7f9 f849 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c49e:	4621      	mov	r1, r4
 801c4a0:	a81a      	add	r0, sp, #104	; 0x68
 801c4a2:	f7f9 f889 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c4a6:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801c4aa:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	; 0x66
 801c4ae:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801c4b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c4b6:	bfd7      	itett	le
 801c4b8:	b29a      	uxthle	r2, r3
 801c4ba:	2201      	movgt	r2, #1
 801c4bc:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801c4c0:	fb91 f2f2 	sdivle	r2, r1, r2
 801c4c4:	9202      	str	r2, [sp, #8]
 801c4c6:	9802      	ldr	r0, [sp, #8]
 801c4c8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 801c4cc:	fb92 f0f0 	sdiv	r0, r2, r0
 801c4d0:	b280      	uxth	r0, r0
 801c4d2:	900f      	str	r0, [sp, #60]	; 0x3c
 801c4d4:	9902      	ldr	r1, [sp, #8]
 801c4d6:	9802      	ldr	r0, [sp, #8]
 801c4d8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c4da:	440c      	add	r4, r1
 801c4dc:	fb05 2510 	mls	r5, r5, r0, r2
 801c4e0:	fb15 f503 	smulbb	r5, r5, r3
 801c4e4:	3c01      	subs	r4, #1
 801c4e6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801c4ea:	fb94 f4f1 	sdiv	r4, r4, r1
 801c4ee:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 801c4f2:	440d      	add	r5, r1
 801c4f4:	4419      	add	r1, r3
 801c4f6:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 801c4fa:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 801c4fe:	441a      	add	r2, r3
 801c500:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801c504:	9306      	str	r3, [sp, #24]
 801c506:	4bb3      	ldr	r3, [pc, #716]	; (801c7d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801c508:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 801c50c:	6818      	ldr	r0, [r3, #0]
 801c50e:	6803      	ldr	r3, [r0, #0]
 801c510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c512:	4798      	blx	r3
 801c514:	4bb0      	ldr	r3, [pc, #704]	; (801c7d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801c516:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 801c51a:	881a      	ldrh	r2, [r3, #0]
 801c51c:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 801c520:	9316      	str	r3, [sp, #88]	; 0x58
 801c522:	fb02 7101 	mla	r1, r2, r1, r7
 801c526:	3401      	adds	r4, #1
 801c528:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 801c52c:	b2a4      	uxth	r4, r4
 801c52e:	4356      	muls	r6, r2
 801c530:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 801c534:	00a4      	lsls	r4, r4, #2
 801c536:	920a      	str	r2, [sp, #40]	; 0x28
 801c538:	1d22      	adds	r2, r4, #4
 801c53a:	b2ad      	uxth	r5, r5
 801c53c:	9213      	str	r2, [sp, #76]	; 0x4c
 801c53e:	4ba7      	ldr	r3, [pc, #668]	; (801c7dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 801c540:	9a06      	ldr	r2, [sp, #24]
 801c542:	2d00      	cmp	r5, #0
 801c544:	bf0c      	ite	eq
 801c546:	4611      	moveq	r1, r2
 801c548:	2100      	movne	r1, #0
 801c54a:	2200      	movs	r2, #0
 801c54c:	eba3 030b 	sub.w	r3, r3, fp
 801c550:	b289      	uxth	r1, r1
 801c552:	920d      	str	r2, [sp, #52]	; 0x34
 801c554:	9317      	str	r3, [sp, #92]	; 0x5c
 801c556:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c55a:	fa12 f383 	uxtah	r3, r2, r3
 801c55e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c560:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c564:	3304      	adds	r3, #4
 801c566:	9308      	str	r3, [sp, #32]
 801c568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c56a:	4543      	cmp	r3, r8
 801c56c:	f240 8167 	bls.w	801c83e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d2>
 801c570:	9a02      	ldr	r2, [sp, #8]
 801c572:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801c576:	fbb5 f3f3 	udiv	r3, r5, r3
 801c57a:	1ad3      	subs	r3, r2, r3
 801c57c:	b29b      	uxth	r3, r3
 801c57e:	9314      	str	r3, [sp, #80]	; 0x50
 801c580:	9b08      	ldr	r3, [sp, #32]
 801c582:	9808      	ldr	r0, [sp, #32]
 801c584:	785a      	ldrb	r2, [r3, #1]
 801c586:	789b      	ldrb	r3, [r3, #2]
 801c588:	7800      	ldrb	r0, [r0, #0]
 801c58a:	9010      	str	r0, [sp, #64]	; 0x40
 801c58c:	021b      	lsls	r3, r3, #8
 801c58e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c592:	9a08      	ldr	r2, [sp, #32]
 801c594:	78d2      	ldrb	r2, [r2, #3]
 801c596:	4313      	orrs	r3, r2
 801c598:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c59a:	3001      	adds	r0, #1
 801c59c:	441a      	add	r2, r3
 801c59e:	9007      	str	r0, [sp, #28]
 801c5a0:	1c50      	adds	r0, r2, #1
 801c5a2:	9005      	str	r0, [sp, #20]
 801c5a4:	7852      	ldrb	r2, [r2, #1]
 801c5a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c5a8:	0212      	lsls	r2, r2, #8
 801c5aa:	5cc3      	ldrb	r3, [r0, r3]
 801c5ac:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801c5b0:	431a      	orrs	r2, r3
 801c5b2:	b293      	uxth	r3, r2
 801c5b4:	930b      	str	r3, [sp, #44]	; 0x2c
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	9309      	str	r3, [sp, #36]	; 0x24
 801c5ba:	2301      	movs	r3, #1
 801c5bc:	9301      	str	r3, [sp, #4]
 801c5be:	9304      	str	r3, [sp, #16]
 801c5c0:	2300      	movs	r3, #0
 801c5c2:	f88b 2804 	strb.w	r2, [fp, #2052]	; 0x804
 801c5c6:	9303      	str	r3, [sp, #12]
 801c5c8:	f04f 0e01 	mov.w	lr, #1
 801c5cc:	2d00      	cmp	r5, #0
 801c5ce:	d07c      	beq.n	801c6ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801c5d0:	45ae      	cmp	lr, r5
 801c5d2:	d26b      	bcs.n	801c6ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 801c5d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5d6:	eba5 050e 	sub.w	r5, r5, lr
 801c5da:	4543      	cmp	r3, r8
 801c5dc:	b2ad      	uxth	r5, r5
 801c5de:	460c      	mov	r4, r1
 801c5e0:	d802      	bhi.n	801c5e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 801c5e2:	e070      	b.n	801c6c6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d15c      	bne.n	801c6a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801c5e8:	9b05      	ldr	r3, [sp, #20]
 801c5ea:	9a04      	ldr	r2, [sp, #16]
 801c5ec:	785b      	ldrb	r3, [r3, #1]
 801c5ee:	9904      	ldr	r1, [sp, #16]
 801c5f0:	f1c2 0207 	rsb	r2, r2, #7
 801c5f4:	4093      	lsls	r3, r2
 801c5f6:	005b      	lsls	r3, r3, #1
 801c5f8:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801c5fc:	9b05      	ldr	r3, [sp, #20]
 801c5fe:	781b      	ldrb	r3, [r3, #0]
 801c600:	410b      	asrs	r3, r1
 801c602:	3101      	adds	r1, #1
 801c604:	b2c9      	uxtb	r1, r1
 801c606:	2908      	cmp	r1, #8
 801c608:	9104      	str	r1, [sp, #16]
 801c60a:	9905      	ldr	r1, [sp, #20]
 801c60c:	bf0a      	itet	eq
 801c60e:	3102      	addeq	r1, #2
 801c610:	3101      	addne	r1, #1
 801c612:	9105      	streq	r1, [sp, #20]
 801c614:	b2db      	uxtb	r3, r3
 801c616:	bf0a      	itet	eq
 801c618:	2100      	moveq	r1, #0
 801c61a:	9105      	strne	r1, [sp, #20]
 801c61c:	9104      	streq	r1, [sp, #16]
 801c61e:	4313      	orrs	r3, r2
 801c620:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c622:	b29a      	uxth	r2, r3
 801c624:	4291      	cmp	r1, r2
 801c626:	d30a      	bcc.n	801c63e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801c628:	f88b 3804 	strb.w	r3, [fp, #2052]	; 0x804
 801c62c:	2301      	movs	r3, #1
 801c62e:	9907      	ldr	r1, [sp, #28]
 801c630:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801c634:	d30f      	bcc.n	801c656 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 801c636:	2100      	movs	r1, #0
 801c638:	9301      	str	r3, [sp, #4]
 801c63a:	9103      	str	r1, [sp, #12]
 801c63c:	e032      	b.n	801c6a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 801c63e:	9b07      	ldr	r3, [sp, #28]
 801c640:	429a      	cmp	r2, r3
 801c642:	d318      	bcc.n	801c676 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801c644:	9b01      	ldr	r3, [sp, #4]
 801c646:	f89b 1804 	ldrb.w	r1, [fp, #2052]	; 0x804
 801c64a:	445b      	add	r3, fp
 801c64c:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801c650:	9b01      	ldr	r3, [sp, #4]
 801c652:	3301      	adds	r3, #1
 801c654:	b29b      	uxth	r3, r3
 801c656:	9907      	ldr	r1, [sp, #28]
 801c658:	f89b 0804 	ldrb.w	r0, [fp, #2052]	; 0x804
 801c65c:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801c660:	7108      	strb	r0, [r1, #4]
 801c662:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c664:	80c8      	strh	r0, [r1, #6]
 801c666:	9801      	ldr	r0, [sp, #4]
 801c668:	3001      	adds	r0, #1
 801c66a:	7148      	strb	r0, [r1, #5]
 801c66c:	9907      	ldr	r1, [sp, #28]
 801c66e:	3101      	adds	r1, #1
 801c670:	b289      	uxth	r1, r1
 801c672:	9107      	str	r1, [sp, #28]
 801c674:	e7df      	b.n	801c636 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 801c676:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 801c67a:	4611      	mov	r1, r2
 801c67c:	795b      	ldrb	r3, [r3, #5]
 801c67e:	f603 0004 	addw	r0, r3, #2052	; 0x804
 801c682:	4458      	add	r0, fp
 801c684:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801c686:	4406      	add	r6, r0
 801c688:	2e00      	cmp	r6, #0
 801c68a:	dd06      	ble.n	801c69a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 801c68c:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801c690:	790e      	ldrb	r6, [r1, #4]
 801c692:	f800 6d01 	strb.w	r6, [r0, #-1]!
 801c696:	88c9      	ldrh	r1, [r1, #6]
 801c698:	e7f4      	b.n	801c684 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 801c69a:	f88b 1804 	strb.w	r1, [fp, #2052]	; 0x804
 801c69e:	b29b      	uxth	r3, r3
 801c6a0:	e7c5      	b.n	801c62e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 801c6a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c6a4:	920b      	str	r2, [sp, #44]	; 0x2c
 801c6a6:	4621      	mov	r1, r4
 801c6a8:	469e      	mov	lr, r3
 801c6aa:	e78f      	b.n	801c5cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 801c6ac:	9a03      	ldr	r2, [sp, #12]
 801c6ae:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801c6b2:	442a      	add	r2, r5
 801c6b4:	ebae 0305 	sub.w	r3, lr, r5
 801c6b8:	b292      	uxth	r2, r2
 801c6ba:	b29b      	uxth	r3, r3
 801c6bc:	9203      	str	r2, [sp, #12]
 801c6be:	2500      	movs	r5, #0
 801c6c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c6c2:	4542      	cmp	r2, r8
 801c6c4:	d88e      	bhi.n	801c5e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 801c6c6:	4621      	mov	r1, r4
 801c6c8:	e74e      	b.n	801c568 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801c6ca:	458e      	cmp	lr, r1
 801c6cc:	bf29      	itett	cs
 801c6ce:	ebae 0301 	subcs.w	r3, lr, r1
 801c6d2:	eba1 040e 	subcc.w	r4, r1, lr
 801c6d6:	b29b      	uxthcs	r3, r3
 801c6d8:	910c      	strcs	r1, [sp, #48]	; 0x30
 801c6da:	bf2f      	iteee	cs
 801c6dc:	462c      	movcs	r4, r5
 801c6de:	b2a4      	uxthcc	r4, r4
 801c6e0:	f8cd e030 	strcc.w	lr, [sp, #48]	; 0x30
 801c6e4:	462b      	movcc	r3, r5
 801c6e6:	f04f 0900 	mov.w	r9, #0
 801c6ea:	9a03      	ldr	r2, [sp, #12]
 801c6ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c6ee:	444a      	add	r2, r9
 801c6f0:	4548      	cmp	r0, r9
 801c6f2:	b292      	uxth	r2, r2
 801c6f4:	d074      	beq.n	801c7e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>
 801c6f6:	445a      	add	r2, fp
 801c6f8:	2004      	movs	r0, #4
 801c6fa:	4605      	mov	r5, r0
 801c6fc:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 801c700:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c702:	fb15 0202 	smlabb	r2, r5, r2, r0
 801c706:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c708:	5880      	ldr	r0, [r0, r2]
 801c70a:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 801c70e:	d014      	beq.n	801c73a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 801c710:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c714:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801c718:	d112      	bne.n	801c740 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d4>
 801c71a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c71c:	2aff      	cmp	r2, #255	; 0xff
 801c71e:	d10f      	bne.n	801c740 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d4>
 801c720:	0942      	lsrs	r2, r0, #5
 801c722:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801c726:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c72a:	f025 0507 	bic.w	r5, r5, #7
 801c72e:	4315      	orrs	r5, r2
 801c730:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c734:	4305      	orrs	r5, r0
 801c736:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 801c73a:	f109 0901 	add.w	r9, r9, #1
 801c73e:	e7d4      	b.n	801c6ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x27e>
 801c740:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 801c744:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801c748:	f006 02fc 	and.w	r2, r6, #252	; 0xfc
 801c74c:	9215      	str	r2, [sp, #84]	; 0x54
 801c74e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c750:	fb02 fa0a 	mul.w	sl, r2, sl
 801c754:	f10a 0201 	add.w	r2, sl, #1
 801c758:	eb02 222a 	add.w	r2, r2, sl, asr #8
 801c75c:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c760:	1212      	asrs	r2, r2, #8
 801c762:	fa1f fa82 	uxth.w	sl, r2
 801c766:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801c76a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c76e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c772:	43d2      	mvns	r2, r2
 801c774:	b2d2      	uxtb	r2, r2
 801c776:	fb16 f60a 	smulbb	r6, r6, sl
 801c77a:	fa5f fc8c 	uxtb.w	ip, ip
 801c77e:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801c782:	b2c0      	uxtb	r0, r0
 801c784:	fb07 6702 	mla	r7, r7, r2, r6
 801c788:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801c78c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c78e:	fb10 f00a 	smulbb	r0, r0, sl
 801c792:	fb0c 0002 	mla	r0, ip, r2, r0
 801c796:	b2ed      	uxtb	r5, r5
 801c798:	b2bf      	uxth	r7, r7
 801c79a:	fb15 f50a 	smulbb	r5, r5, sl
 801c79e:	b280      	uxth	r0, r0
 801c7a0:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801c7a4:	fb06 5602 	mla	r6, r6, r2, r5
 801c7a8:	1c7a      	adds	r2, r7, #1
 801c7aa:	1c45      	adds	r5, r0, #1
 801c7ac:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c7b0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c7b4:	b2b6      	uxth	r6, r6
 801c7b6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c7ba:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c7be:	432f      	orrs	r7, r5
 801c7c0:	1c75      	adds	r5, r6, #1
 801c7c2:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801c7c6:	096d      	lsrs	r5, r5, #5
 801c7c8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c7cc:	432f      	orrs	r7, r5
 801c7ce:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 801c7d2:	e7b2      	b.n	801c73a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 801c7d4:	20014610 	.word	0x20014610
 801c7d8:	2001460a 	.word	0x2001460a
 801c7dc:	fffff7fb 	.word	0xfffff7fb
 801c7e0:	9203      	str	r2, [sp, #12]
 801c7e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c7e4:	458e      	cmp	lr, r1
 801c7e6:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801c7ea:	f4ff af68 	bcc.w	801c6be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 801c7ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c7f0:	9906      	ldr	r1, [sp, #24]
 801c7f2:	8812      	ldrh	r2, [r2, #0]
 801c7f4:	1a52      	subs	r2, r2, r1
 801c7f6:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801c7fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c7fc:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c7fe:	3201      	adds	r2, #1
 801c800:	428a      	cmp	r2, r1
 801c802:	9209      	str	r2, [sp, #36]	; 0x24
 801c804:	d111      	bne.n	801c82a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3be>
 801c806:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 801c80a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801c80e:	9b06      	ldr	r3, [sp, #24]
 801c810:	eba5 0509 	sub.w	r5, r5, r9
 801c814:	b2ad      	uxth	r5, r5
 801c816:	2d00      	cmp	r5, #0
 801c818:	bf08      	it	eq
 801c81a:	4619      	moveq	r1, r3
 801c81c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c81e:	bf18      	it	ne
 801c820:	2100      	movne	r1, #0
 801c822:	3301      	adds	r3, #1
 801c824:	930d      	str	r3, [sp, #52]	; 0x34
 801c826:	b289      	uxth	r1, r1
 801c828:	e695      	b.n	801c556 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801c82a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801c82e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801c832:	1b2d      	subs	r5, r5, r4
 801c834:	b2ad      	uxth	r5, r5
 801c836:	2d00      	cmp	r5, #0
 801c838:	bf18      	it	ne
 801c83a:	2400      	movne	r4, #0
 801c83c:	e740      	b.n	801c6c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 801c83e:	4b04      	ldr	r3, [pc, #16]	; (801c850 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 801c840:	6818      	ldr	r0, [r3, #0]
 801c842:	6803      	ldr	r3, [r0, #0]
 801c844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c846:	4798      	blx	r3
 801c848:	b01d      	add	sp, #116	; 0x74
 801c84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c84e:	bf00      	nop
 801c850:	20014610 	.word	0x20014610

0801c854 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801c854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c858:	b09f      	sub	sp, #124	; 0x7c
 801c85a:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 801c85e:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801c862:	920a      	str	r2, [sp, #40]	; 0x28
 801c864:	461d      	mov	r5, r3
 801c866:	4604      	mov	r4, r0
 801c868:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c86a:	2a00      	cmp	r2, #0
 801c86c:	f000 81fa 	beq.w	801cc64 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x410>
 801c870:	6828      	ldr	r0, [r5, #0]
 801c872:	6869      	ldr	r1, [r5, #4]
 801c874:	aa1a      	add	r2, sp, #104	; 0x68
 801c876:	c203      	stmia	r2!, {r0, r1}
 801c878:	6818      	ldr	r0, [r3, #0]
 801c87a:	6859      	ldr	r1, [r3, #4]
 801c87c:	aa1c      	add	r2, sp, #112	; 0x70
 801c87e:	c203      	stmia	r2!, {r0, r1}
 801c880:	a81a      	add	r0, sp, #104	; 0x68
 801c882:	f7f8 fe55 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c886:	4629      	mov	r1, r5
 801c888:	a81c      	add	r0, sp, #112	; 0x70
 801c88a:	f7f8 fe95 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c88e:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801c892:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801c896:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	; 0x76
 801c89a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c89e:	bfd7      	itett	le
 801c8a0:	b29a      	uxthle	r2, r3
 801c8a2:	2201      	movgt	r2, #1
 801c8a4:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801c8a8:	fb91 f2f2 	sdivle	r2, r1, r2
 801c8ac:	9201      	str	r2, [sp, #4]
 801c8ae:	9801      	ldr	r0, [sp, #4]
 801c8b0:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 801c8b4:	fb92 f0f0 	sdiv	r0, r2, r0
 801c8b8:	b280      	uxth	r0, r0
 801c8ba:	9010      	str	r0, [sp, #64]	; 0x40
 801c8bc:	9901      	ldr	r1, [sp, #4]
 801c8be:	9801      	ldr	r0, [sp, #4]
 801c8c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801c8c2:	440e      	add	r6, r1
 801c8c4:	fb05 2510 	mls	r5, r5, r0, r2
 801c8c8:	fb15 f503 	smulbb	r5, r5, r3
 801c8cc:	3e01      	subs	r6, #1
 801c8ce:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801c8d2:	fb96 f6f1 	sdiv	r6, r6, r1
 801c8d6:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 801c8da:	440d      	add	r5, r1
 801c8dc:	4419      	add	r1, r3
 801c8de:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801c8e2:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 801c8e6:	441a      	add	r2, r3
 801c8e8:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801c8ec:	9304      	str	r3, [sp, #16]
 801c8ee:	4b96      	ldr	r3, [pc, #600]	; (801cb48 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f4>)
 801c8f0:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 801c8f4:	6818      	ldr	r0, [r3, #0]
 801c8f6:	6803      	ldr	r3, [r0, #0]
 801c8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8fa:	4798      	blx	r3
 801c8fc:	4b93      	ldr	r3, [pc, #588]	; (801cb4c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801c8fe:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 801c902:	881a      	ldrh	r2, [r3, #0]
 801c904:	f9bd c070 	ldrsh.w	ip, [sp, #112]	; 0x70
 801c908:	9318      	str	r3, [sp, #96]	; 0x60
 801c90a:	fb02 c101 	mla	r1, r2, r1, ip
 801c90e:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 801c912:	4357      	muls	r7, r2
 801c914:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 801c918:	3601      	adds	r6, #1
 801c91a:	920b      	str	r2, [sp, #44]	; 0x2c
 801c91c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c91e:	4b8c      	ldr	r3, [pc, #560]	; (801cb50 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801c920:	b2b6      	uxth	r6, r6
 801c922:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c926:	1d32      	adds	r2, r6, #4
 801c928:	9206      	str	r2, [sp, #24]
 801c92a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c92c:	43d2      	mvns	r2, r2
 801c92e:	b2d2      	uxtb	r2, r2
 801c930:	b2ad      	uxth	r5, r5
 801c932:	9215      	str	r2, [sp, #84]	; 0x54
 801c934:	9a04      	ldr	r2, [sp, #16]
 801c936:	2d00      	cmp	r5, #0
 801c938:	bf0c      	ite	eq
 801c93a:	4611      	moveq	r1, r2
 801c93c:	2100      	movne	r1, #0
 801c93e:	2200      	movs	r2, #0
 801c940:	1b1b      	subs	r3, r3, r4
 801c942:	b289      	uxth	r1, r1
 801c944:	920d      	str	r2, [sp, #52]	; 0x34
 801c946:	9319      	str	r3, [sp, #100]	; 0x64
 801c948:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c94a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c94c:	fa12 f383 	uxtah	r3, r2, r3
 801c950:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c952:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c956:	3304      	adds	r3, #4
 801c958:	9307      	str	r3, [sp, #28]
 801c95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c95c:	455b      	cmp	r3, fp
 801c95e:	f240 817c 	bls.w	801cc5a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x406>
 801c962:	9a01      	ldr	r2, [sp, #4]
 801c964:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801c968:	fbb5 f3f3 	udiv	r3, r5, r3
 801c96c:	1ad3      	subs	r3, r2, r3
 801c96e:	b29b      	uxth	r3, r3
 801c970:	9316      	str	r3, [sp, #88]	; 0x58
 801c972:	9b07      	ldr	r3, [sp, #28]
 801c974:	9807      	ldr	r0, [sp, #28]
 801c976:	785a      	ldrb	r2, [r3, #1]
 801c978:	789b      	ldrb	r3, [r3, #2]
 801c97a:	7800      	ldrb	r0, [r0, #0]
 801c97c:	9011      	str	r0, [sp, #68]	; 0x44
 801c97e:	021b      	lsls	r3, r3, #8
 801c980:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c984:	9a07      	ldr	r2, [sp, #28]
 801c986:	78d2      	ldrb	r2, [r2, #3]
 801c988:	4313      	orrs	r3, r2
 801c98a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c98c:	3001      	adds	r0, #1
 801c98e:	441a      	add	r2, r3
 801c990:	9005      	str	r0, [sp, #20]
 801c992:	1c50      	adds	r0, r2, #1
 801c994:	9003      	str	r0, [sp, #12]
 801c996:	7852      	ldrb	r2, [r2, #1]
 801c998:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c99a:	0212      	lsls	r2, r2, #8
 801c99c:	5cc3      	ldrb	r3, [r0, r3]
 801c99e:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801c9a2:	431a      	orrs	r2, r3
 801c9a4:	b293      	uxth	r3, r2
 801c9a6:	930c      	str	r3, [sp, #48]	; 0x30
 801c9a8:	2300      	movs	r3, #0
 801c9aa:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801c9ae:	9308      	str	r3, [sp, #32]
 801c9b0:	461a      	mov	r2, r3
 801c9b2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801c9b6:	930e      	str	r3, [sp, #56]	; 0x38
 801c9b8:	f04f 0801 	mov.w	r8, #1
 801c9bc:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801c9c0:	f8cd 8008 	str.w	r8, [sp, #8]
 801c9c4:	46c4      	mov	ip, r8
 801c9c6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c9c8:	2d00      	cmp	r5, #0
 801c9ca:	d07c      	beq.n	801cac6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801c9cc:	45ac      	cmp	ip, r5
 801c9ce:	d26c      	bcs.n	801caaa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 801c9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c9d2:	eba5 050c 	sub.w	r5, r5, ip
 801c9d6:	455b      	cmp	r3, fp
 801c9d8:	b2ad      	uxth	r5, r5
 801c9da:	4608      	mov	r0, r1
 801c9dc:	d802      	bhi.n	801c9e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 801c9de:	e070      	b.n	801cac2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d15c      	bne.n	801ca9e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 801c9e4:	9b03      	ldr	r3, [sp, #12]
 801c9e6:	9a02      	ldr	r2, [sp, #8]
 801c9e8:	785b      	ldrb	r3, [r3, #1]
 801c9ea:	9902      	ldr	r1, [sp, #8]
 801c9ec:	f1c2 0207 	rsb	r2, r2, #7
 801c9f0:	4093      	lsls	r3, r2
 801c9f2:	005b      	lsls	r3, r3, #1
 801c9f4:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801c9f8:	9b03      	ldr	r3, [sp, #12]
 801c9fa:	781b      	ldrb	r3, [r3, #0]
 801c9fc:	410b      	asrs	r3, r1
 801c9fe:	3101      	adds	r1, #1
 801ca00:	b2c9      	uxtb	r1, r1
 801ca02:	2908      	cmp	r1, #8
 801ca04:	9102      	str	r1, [sp, #8]
 801ca06:	9903      	ldr	r1, [sp, #12]
 801ca08:	bf0a      	itet	eq
 801ca0a:	3102      	addeq	r1, #2
 801ca0c:	3101      	addne	r1, #1
 801ca0e:	9103      	streq	r1, [sp, #12]
 801ca10:	b2db      	uxtb	r3, r3
 801ca12:	bf0a      	itet	eq
 801ca14:	2100      	moveq	r1, #0
 801ca16:	9103      	strne	r1, [sp, #12]
 801ca18:	9102      	streq	r1, [sp, #8]
 801ca1a:	4313      	orrs	r3, r2
 801ca1c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ca1e:	b29a      	uxth	r2, r3
 801ca20:	4291      	cmp	r1, r2
 801ca22:	d30a      	bcc.n	801ca3a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e6>
 801ca24:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801ca28:	2301      	movs	r3, #1
 801ca2a:	9905      	ldr	r1, [sp, #20]
 801ca2c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801ca30:	d30f      	bcc.n	801ca52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1fe>
 801ca32:	2100      	movs	r1, #0
 801ca34:	4698      	mov	r8, r3
 801ca36:	9100      	str	r1, [sp, #0]
 801ca38:	e032      	b.n	801caa0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24c>
 801ca3a:	9b05      	ldr	r3, [sp, #20]
 801ca3c:	429a      	cmp	r2, r3
 801ca3e:	d318      	bcc.n	801ca72 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 801ca40:	eb04 0308 	add.w	r3, r4, r8
 801ca44:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 801ca48:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801ca4c:	f108 0301 	add.w	r3, r8, #1
 801ca50:	b29b      	uxth	r3, r3
 801ca52:	9905      	ldr	r1, [sp, #20]
 801ca54:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801ca58:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ca5c:	710e      	strb	r6, [r1, #4]
 801ca5e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ca60:	80ce      	strh	r6, [r1, #6]
 801ca62:	f108 0601 	add.w	r6, r8, #1
 801ca66:	714e      	strb	r6, [r1, #5]
 801ca68:	9905      	ldr	r1, [sp, #20]
 801ca6a:	3101      	adds	r1, #1
 801ca6c:	b289      	uxth	r1, r1
 801ca6e:	9105      	str	r1, [sp, #20]
 801ca70:	e7df      	b.n	801ca32 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1de>
 801ca72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ca76:	4611      	mov	r1, r2
 801ca78:	795b      	ldrb	r3, [r3, #5]
 801ca7a:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801ca7e:	4426      	add	r6, r4
 801ca80:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801ca82:	4437      	add	r7, r6
 801ca84:	2f00      	cmp	r7, #0
 801ca86:	dd06      	ble.n	801ca96 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x242>
 801ca88:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ca8c:	790f      	ldrb	r7, [r1, #4]
 801ca8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ca92:	88c9      	ldrh	r1, [r1, #6]
 801ca94:	e7f4      	b.n	801ca80 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22c>
 801ca96:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801ca9a:	b29b      	uxth	r3, r3
 801ca9c:	e7c5      	b.n	801ca2a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801ca9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801caa0:	920c      	str	r2, [sp, #48]	; 0x30
 801caa2:	4601      	mov	r1, r0
 801caa4:	9a00      	ldr	r2, [sp, #0]
 801caa6:	469c      	mov	ip, r3
 801caa8:	e78e      	b.n	801c9c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801caaa:	1957      	adds	r7, r2, r5
 801caac:	ebac 0305 	sub.w	r3, ip, r5
 801cab0:	b2ba      	uxth	r2, r7
 801cab2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801cab6:	9200      	str	r2, [sp, #0]
 801cab8:	b29b      	uxth	r3, r3
 801caba:	2500      	movs	r5, #0
 801cabc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cabe:	455a      	cmp	r2, fp
 801cac0:	d88e      	bhi.n	801c9e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18c>
 801cac2:	4601      	mov	r1, r0
 801cac4:	e749      	b.n	801c95a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x106>
 801cac6:	458c      	cmp	ip, r1
 801cac8:	bf2c      	ite	cs
 801caca:	4628      	movcs	r0, r5
 801cacc:	462b      	movcc	r3, r5
 801cace:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801cad0:	bf27      	ittee	cs
 801cad2:	9109      	strcs	r1, [sp, #36]	; 0x24
 801cad4:	ebac 0301 	subcs.w	r3, ip, r1
 801cad8:	eba1 000c 	subcc.w	r0, r1, ip
 801cadc:	f8cd c024 	strcc.w	ip, [sp, #36]	; 0x24
 801cae0:	bf2c      	ite	cs
 801cae2:	b29b      	uxthcs	r3, r3
 801cae4:	b280      	uxthcc	r0, r0
 801cae6:	2dff      	cmp	r5, #255	; 0xff
 801cae8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801caea:	eb02 0705 	add.w	r7, r2, r5
 801caee:	b2bd      	uxth	r5, r7
 801caf0:	9500      	str	r5, [sp, #0]
 801caf2:	d12f      	bne.n	801cb54 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>
 801caf4:	465e      	mov	r6, fp
 801caf6:	9d00      	ldr	r5, [sp, #0]
 801caf8:	42aa      	cmp	r2, r5
 801cafa:	f040 8084 	bne.w	801cc06 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b2>
 801cafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cb00:	458c      	cmp	ip, r1
 801cb02:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801cb06:	d3d8      	bcc.n	801caba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x266>
 801cb08:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cb0a:	9904      	ldr	r1, [sp, #16]
 801cb0c:	8812      	ldrh	r2, [r2, #0]
 801cb0e:	1a52      	subs	r2, r2, r1
 801cb10:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801cb14:	9a08      	ldr	r2, [sp, #32]
 801cb16:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cb18:	3201      	adds	r2, #1
 801cb1a:	428a      	cmp	r2, r1
 801cb1c:	9208      	str	r2, [sp, #32]
 801cb1e:	f040 8092 	bne.w	801cc46 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f2>
 801cb22:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801cb26:	f8bd c068 	ldrh.w	ip, [sp, #104]	; 0x68
 801cb2a:	9b04      	ldr	r3, [sp, #16]
 801cb2c:	eba5 050c 	sub.w	r5, r5, ip
 801cb30:	b2ad      	uxth	r5, r5
 801cb32:	2d00      	cmp	r5, #0
 801cb34:	bf08      	it	eq
 801cb36:	4619      	moveq	r1, r3
 801cb38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cb3a:	bf18      	it	ne
 801cb3c:	2100      	movne	r1, #0
 801cb3e:	3301      	adds	r3, #1
 801cb40:	930d      	str	r3, [sp, #52]	; 0x34
 801cb42:	b289      	uxth	r1, r1
 801cb44:	e700      	b.n	801c948 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 801cb46:	bf00      	nop
 801cb48:	20014610 	.word	0x20014610
 801cb4c:	2001460a 	.word	0x2001460a
 801cb50:	fffff7fb 	.word	0xfffff7fb
 801cb54:	46d9      	mov	r9, fp
 801cb56:	9d00      	ldr	r5, [sp, #0]
 801cb58:	42aa      	cmp	r2, r5
 801cb5a:	d0d0      	beq.n	801cafe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2aa>
 801cb5c:	1c55      	adds	r5, r2, #1
 801cb5e:	4422      	add	r2, r4
 801cb60:	9517      	str	r5, [sp, #92]	; 0x5c
 801cb62:	f892 e804 	ldrb.w	lr, [r2, #2052]	; 0x804
 801cb66:	9a06      	ldr	r2, [sp, #24]
 801cb68:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cb6c:	4472      	add	r2, lr
 801cb6e:	9212      	str	r2, [sp, #72]	; 0x48
 801cb70:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801cb72:	f8b9 2000 	ldrh.w	r2, [r9]
 801cb76:	f897 a002 	ldrb.w	sl, [r7, #2]
 801cb7a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801cb7c:	1216      	asrs	r6, r2, #8
 801cb7e:	fb1a fa07 	smulbb	sl, sl, r7
 801cb82:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cb86:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cb88:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801cb8c:	fb06 a607 	mla	r6, r6, r7, sl
 801cb90:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801cb92:	f897 a001 	ldrb.w	sl, [r7, #1]
 801cb96:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801cb98:	10d5      	asrs	r5, r2, #3
 801cb9a:	fb1a fa07 	smulbb	sl, sl, r7
 801cb9e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801cba2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cba4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801cba8:	fb05 a507 	mla	r5, r5, r7, sl
 801cbac:	9f06      	ldr	r7, [sp, #24]
 801cbae:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801cbb2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801cbb4:	00d2      	lsls	r2, r2, #3
 801cbb6:	fb1e fe07 	smulbb	lr, lr, r7
 801cbba:	b2d2      	uxtb	r2, r2
 801cbbc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cbbe:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cbc2:	b2b6      	uxth	r6, r6
 801cbc4:	fb02 e207 	mla	r2, r2, r7, lr
 801cbc8:	b292      	uxth	r2, r2
 801cbca:	b2ad      	uxth	r5, r5
 801cbcc:	f106 0a01 	add.w	sl, r6, #1
 801cbd0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801cbd4:	f102 0e01 	add.w	lr, r2, #1
 801cbd8:	f105 0a01 	add.w	sl, r5, #1
 801cbdc:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801cbe0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cbe4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801cbe8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801cbec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cbf0:	ea4e 0606 	orr.w	r6, lr, r6
 801cbf4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cbf8:	ea46 060a 	orr.w	r6, r6, sl
 801cbfc:	f829 6b02 	strh.w	r6, [r9], #2
 801cc00:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801cc04:	e7a7      	b.n	801cb56 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x302>
 801cc06:	f102 0e01 	add.w	lr, r2, #1
 801cc0a:	4422      	add	r2, r4
 801cc0c:	9f06      	ldr	r7, [sp, #24]
 801cc0e:	f892 5804 	ldrb.w	r5, [r2, #2052]	; 0x804
 801cc12:	9a06      	ldr	r2, [sp, #24]
 801cc14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc18:	eb02 0a05 	add.w	sl, r2, r5
 801cc1c:	4a13      	ldr	r2, [pc, #76]	; (801cc6c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>)
 801cc1e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801cc22:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 801cc26:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801cc2a:	00d2      	lsls	r2, r2, #3
 801cc2c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cc30:	ea49 0202 	orr.w	r2, r9, r2
 801cc34:	f817 9005 	ldrb.w	r9, [r7, r5]
 801cc38:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801cc3c:	f826 2b02 	strh.w	r2, [r6], #2
 801cc40:	fa1f f28e 	uxth.w	r2, lr
 801cc44:	e757      	b.n	801caf6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a2>
 801cc46:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801cc4a:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801cc4e:	1a2d      	subs	r5, r5, r0
 801cc50:	b2ad      	uxth	r5, r5
 801cc52:	2d00      	cmp	r5, #0
 801cc54:	bf18      	it	ne
 801cc56:	2000      	movne	r0, #0
 801cc58:	e730      	b.n	801cabc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801cc5a:	4b05      	ldr	r3, [pc, #20]	; (801cc70 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 801cc5c:	6818      	ldr	r0, [r3, #0]
 801cc5e:	6803      	ldr	r3, [r0, #0]
 801cc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc62:	4798      	blx	r3
 801cc64:	b01f      	add	sp, #124	; 0x7c
 801cc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc6a:	bf00      	nop
 801cc6c:	fffff800 	.word	0xfffff800
 801cc70:	20014610 	.word	0x20014610

0801cc74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801cc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc78:	b091      	sub	sp, #68	; 0x44
 801cc7a:	469b      	mov	fp, r3
 801cc7c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801cc80:	4616      	mov	r6, r2
 801cc82:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801cc86:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cc8a:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801cc8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cc92:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801cc96:	4604      	mov	r4, r0
 801cc98:	460d      	mov	r5, r1
 801cc9a:	4640      	mov	r0, r8
 801cc9c:	4659      	mov	r1, fp
 801cc9e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801cca2:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801cca6:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801ccaa:	f7f3 f8a1 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 801ccae:	4631      	mov	r1, r6
 801ccb0:	4640      	mov	r0, r8
 801ccb2:	f7f3 f89d 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 801ccb6:	4b74      	ldr	r3, [pc, #464]	; (801ce88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801ccb8:	8818      	ldrh	r0, [r3, #0]
 801ccba:	4b74      	ldr	r3, [pc, #464]	; (801ce8c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801ccbc:	8819      	ldrh	r1, [r3, #0]
 801ccbe:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	b202      	sxth	r2, r0
 801ccc6:	b20e      	sxth	r6, r1
 801ccc8:	da07      	bge.n	801ccda <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801ccca:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801ccce:	4463      	add	r3, ip
 801ccd0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801ccd4:	2300      	movs	r3, #0
 801ccd6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801ccda:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801ccde:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801cce2:	1ad2      	subs	r2, r2, r3
 801cce4:	4594      	cmp	ip, r2
 801cce6:	bfc4      	itt	gt
 801cce8:	1ac2      	subgt	r2, r0, r3
 801ccea:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801ccee:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ccf2:	2a00      	cmp	r2, #0
 801ccf4:	da07      	bge.n	801cd06 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801ccf6:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801ccfa:	4462      	add	r2, ip
 801ccfc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801cd00:	2200      	movs	r2, #0
 801cd02:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801cd06:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801cd0a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801cd0e:	eba6 060a 	sub.w	r6, r6, sl
 801cd12:	42b2      	cmp	r2, r6
 801cd14:	bfc4      	itt	gt
 801cd16:	eba1 020a 	subgt.w	r2, r1, sl
 801cd1a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801cd1e:	4a5c      	ldr	r2, [pc, #368]	; (801ce90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801cd20:	7812      	ldrb	r2, [r2, #0]
 801cd22:	b9a2      	cbnz	r2, 801cd4e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801cd24:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801cd28:	4286      	cmp	r6, r0
 801cd2a:	4640      	mov	r0, r8
 801cd2c:	9303      	str	r3, [sp, #12]
 801cd2e:	bf14      	ite	ne
 801cd30:	2600      	movne	r6, #0
 801cd32:	2601      	moveq	r6, #1
 801cd34:	f7f3 f89f 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cd38:	9b03      	ldr	r3, [sp, #12]
 801cd3a:	b160      	cbz	r0, 801cd56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801cd3c:	2300      	movs	r3, #0
 801cd3e:	8023      	strh	r3, [r4, #0]
 801cd40:	8063      	strh	r3, [r4, #2]
 801cd42:	80a3      	strh	r3, [r4, #4]
 801cd44:	4620      	mov	r0, r4
 801cd46:	80e3      	strh	r3, [r4, #6]
 801cd48:	b011      	add	sp, #68	; 0x44
 801cd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd4e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801cd52:	428e      	cmp	r6, r1
 801cd54:	e7e9      	b.n	801cd2a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801cd56:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801cd5a:	9205      	str	r2, [sp, #20]
 801cd5c:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801cd60:	9206      	str	r2, [sp, #24]
 801cd62:	f8bb 2000 	ldrh.w	r2, [fp]
 801cd66:	900e      	str	r0, [sp, #56]	; 0x38
 801cd68:	1a9b      	subs	r3, r3, r2
 801cd6a:	b21b      	sxth	r3, r3
 801cd6c:	9303      	str	r3, [sp, #12]
 801cd6e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801cd72:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801cd76:	ebaa 0a03 	sub.w	sl, sl, r3
 801cd7a:	fa0f f38a 	sxth.w	r3, sl
 801cd7e:	9304      	str	r3, [sp, #16]
 801cd80:	9b03      	ldr	r3, [sp, #12]
 801cd82:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801cd86:	9b04      	ldr	r3, [sp, #16]
 801cd88:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cd8c:	9b05      	ldr	r3, [sp, #20]
 801cd8e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801cd92:	a90e      	add	r1, sp, #56	; 0x38
 801cd94:	9b06      	ldr	r3, [sp, #24]
 801cd96:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801cd9a:	a80c      	add	r0, sp, #48	; 0x30
 801cd9c:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801cda0:	f7f8 fc0a 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cda4:	4640      	mov	r0, r8
 801cda6:	f7f8 fbc3 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cdaa:	a80e      	add	r0, sp, #56	; 0x38
 801cdac:	f7f8 fbc0 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cdb0:	4b38      	ldr	r3, [pc, #224]	; (801ce94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801cdb2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801cdb6:	881b      	ldrh	r3, [r3, #0]
 801cdb8:	9307      	str	r3, [sp, #28]
 801cdba:	682b      	ldr	r3, [r5, #0]
 801cdbc:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801ce98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801cdc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cdc2:	4628      	mov	r0, r5
 801cdc4:	4798      	blx	r3
 801cdc6:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801cdca:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801cdce:	4681      	mov	r9, r0
 801cdd0:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801cdd4:	f8db 0000 	ldr.w	r0, [fp]
 801cdd8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801cdda:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801cdde:	6803      	ldr	r3, [r0, #0]
 801cde0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cde2:	4798      	blx	r3
 801cde4:	4607      	mov	r7, r0
 801cde6:	f8db 0000 	ldr.w	r0, [fp]
 801cdea:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801cdee:	6803      	ldr	r3, [r0, #0]
 801cdf0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801cdf4:	9109      	str	r1, [sp, #36]	; 0x24
 801cdf6:	9208      	str	r2, [sp, #32]
 801cdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cdfa:	4798      	blx	r3
 801cdfc:	f010 0f01 	tst.w	r0, #1
 801ce00:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ce04:	d012      	beq.n	801ce2c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801ce06:	f8db 0000 	ldr.w	r0, [fp]
 801ce0a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801ce0e:	6803      	ldr	r3, [r0, #0]
 801ce10:	9200      	str	r2, [sp, #0]
 801ce12:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801ce14:	e898 0006 	ldmia.w	r8, {r1, r2}
 801ce18:	462b      	mov	r3, r5
 801ce1a:	47b0      	blx	r6
 801ce1c:	9b03      	ldr	r3, [sp, #12]
 801ce1e:	8023      	strh	r3, [r4, #0]
 801ce20:	9b04      	ldr	r3, [sp, #16]
 801ce22:	8063      	strh	r3, [r4, #2]
 801ce24:	9b05      	ldr	r3, [sp, #20]
 801ce26:	80a3      	strh	r3, [r4, #4]
 801ce28:	9b06      	ldr	r3, [sp, #24]
 801ce2a:	e78b      	b.n	801cd44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801ce2c:	fb09 f202 	mul.w	r2, r9, r2
 801ce30:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801ce34:	440f      	add	r7, r1
 801ce36:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801ce3a:	b166      	cbz	r6, 801ce56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801ce3c:	9a07      	ldr	r2, [sp, #28]
 801ce3e:	4592      	cmp	sl, r2
 801ce40:	d109      	bne.n	801ce56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801ce42:	f8db 0000 	ldr.w	r0, [fp]
 801ce46:	6802      	ldr	r2, [r0, #0]
 801ce48:	fb09 f303 	mul.w	r3, r9, r3
 801ce4c:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801ce4e:	4629      	mov	r1, r5
 801ce50:	463a      	mov	r2, r7
 801ce52:	47b0      	blx	r6
 801ce54:	e7e2      	b.n	801ce1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801ce56:	fb0a f303 	mul.w	r3, sl, r3
 801ce5a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801ce98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801ce5e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801ce62:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801ce66:	4545      	cmp	r5, r8
 801ce68:	d2d8      	bcs.n	801ce1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801ce6a:	f8db 0000 	ldr.w	r0, [fp]
 801ce6e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801ce72:	6802      	ldr	r2, [r0, #0]
 801ce74:	4629      	mov	r1, r5
 801ce76:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801ce7a:	005b      	lsls	r3, r3, #1
 801ce7c:	463a      	mov	r2, r7
 801ce7e:	47d0      	blx	sl
 801ce80:	444f      	add	r7, r9
 801ce82:	4435      	add	r5, r6
 801ce84:	e7ef      	b.n	801ce66 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801ce86:	bf00      	nop
 801ce88:	20014604 	.word	0x20014604
 801ce8c:	20014606 	.word	0x20014606
 801ce90:	20014608 	.word	0x20014608
 801ce94:	2001460a 	.word	0x2001460a
 801ce98:	20014610 	.word	0x20014610

0801ce9c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801ce9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce9e:	4606      	mov	r6, r0
 801cea0:	b087      	sub	sp, #28
 801cea2:	460c      	mov	r4, r1
 801cea4:	4617      	mov	r7, r2
 801cea6:	461d      	mov	r5, r3
 801cea8:	b333      	cbz	r3, 801cef8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ceaa:	4608      	mov	r0, r1
 801ceac:	f7f2 ffe3 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ceb0:	bb10      	cbnz	r0, 801cef8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ceb2:	6820      	ldr	r0, [r4, #0]
 801ceb4:	6861      	ldr	r1, [r4, #4]
 801ceb6:	4c1c      	ldr	r4, [pc, #112]	; (801cf28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801ceb8:	ab04      	add	r3, sp, #16
 801ceba:	c303      	stmia	r3!, {r0, r1}
 801cebc:	a804      	add	r0, sp, #16
 801cebe:	f7f8 fb37 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cec2:	6820      	ldr	r0, [r4, #0]
 801cec4:	6803      	ldr	r3, [r0, #0]
 801cec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cec8:	4798      	blx	r3
 801ceca:	2dff      	cmp	r5, #255	; 0xff
 801cecc:	d016      	beq.n	801cefc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801cece:	f010 0f08 	tst.w	r0, #8
 801ced2:	6820      	ldr	r0, [r4, #0]
 801ced4:	d015      	beq.n	801cf02 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801ced6:	2400      	movs	r4, #0
 801ced8:	6801      	ldr	r1, [r0, #0]
 801ceda:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cede:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cee2:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801cee6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801ceea:	9401      	str	r4, [sp, #4]
 801ceec:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801cef0:	9400      	str	r4, [sp, #0]
 801cef2:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801cef4:	4639      	mov	r1, r7
 801cef6:	47a0      	blx	r4
 801cef8:	b007      	add	sp, #28
 801cefa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cefc:	f010 0f02 	tst.w	r0, #2
 801cf00:	e7e7      	b.n	801ced2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801cf02:	6803      	ldr	r3, [r0, #0]
 801cf04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf06:	4798      	blx	r3
 801cf08:	4b08      	ldr	r3, [pc, #32]	; (801cf2c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801cf0a:	881a      	ldrh	r2, [r3, #0]
 801cf0c:	6833      	ldr	r3, [r6, #0]
 801cf0e:	e9cd 7500 	strd	r7, r5, [sp]
 801cf12:	4601      	mov	r1, r0
 801cf14:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801cf16:	4630      	mov	r0, r6
 801cf18:	ab04      	add	r3, sp, #16
 801cf1a:	47a8      	blx	r5
 801cf1c:	6820      	ldr	r0, [r4, #0]
 801cf1e:	6803      	ldr	r3, [r0, #0]
 801cf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf22:	4798      	blx	r3
 801cf24:	e7e8      	b.n	801cef8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cf26:	bf00      	nop
 801cf28:	20014610 	.word	0x20014610
 801cf2c:	2001460a 	.word	0x2001460a

0801cf30 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801cf30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf34:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801cf38:	9e08      	ldr	r6, [sp, #32]
 801cf3a:	4688      	mov	r8, r1
 801cf3c:	4614      	mov	r4, r2
 801cf3e:	461d      	mov	r5, r3
 801cf40:	2f00      	cmp	r7, #0
 801cf42:	f000 80a9 	beq.w	801d098 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801cf46:	4618      	mov	r0, r3
 801cf48:	f7f2 ff95 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cf4c:	2800      	cmp	r0, #0
 801cf4e:	f040 80a3 	bne.w	801d098 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801cf52:	f9b5 1000 	ldrsh.w	r1, [r5]
 801cf56:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801cf5a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801cf5e:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801cf62:	fb04 1303 	mla	r3, r4, r3, r1
 801cf66:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801cf6a:	4365      	muls	r5, r4
 801cf6c:	2fff      	cmp	r7, #255	; 0xff
 801cf6e:	eba4 0200 	sub.w	r2, r4, r0
 801cf72:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801cf76:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801cf7a:	d04a      	beq.n	801d012 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801cf7c:	b2bc      	uxth	r4, r7
 801cf7e:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801cf82:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801cf86:	fa5f f788 	uxtb.w	r7, r8
 801cf8a:	b2f3      	uxtb	r3, r6
 801cf8c:	0040      	lsls	r0, r0, #1
 801cf8e:	fb0e fe04 	mul.w	lr, lr, r4
 801cf92:	4367      	muls	r7, r4
 801cf94:	4363      	muls	r3, r4
 801cf96:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801cf9a:	fa1f fc8c 	uxth.w	ip, ip
 801cf9e:	42a9      	cmp	r1, r5
 801cfa0:	d27a      	bcs.n	801d098 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801cfa2:	eb01 0900 	add.w	r9, r1, r0
 801cfa6:	4549      	cmp	r1, r9
 801cfa8:	d231      	bcs.n	801d00e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801cfaa:	880a      	ldrh	r2, [r1, #0]
 801cfac:	1214      	asrs	r4, r2, #8
 801cfae:	10d6      	asrs	r6, r2, #3
 801cfb0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801cfb4:	00d2      	lsls	r2, r2, #3
 801cfb6:	b2d2      	uxtb	r2, r2
 801cfb8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801cfbc:	fb14 f40c 	smulbb	r4, r4, ip
 801cfc0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cfc4:	4474      	add	r4, lr
 801cfc6:	fb12 f20c 	smulbb	r2, r2, ip
 801cfca:	b2a4      	uxth	r4, r4
 801cfcc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cfd0:	441a      	add	r2, r3
 801cfd2:	b292      	uxth	r2, r2
 801cfd4:	f104 0a01 	add.w	sl, r4, #1
 801cfd8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801cfdc:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801cfe0:	fb16 f60c 	smulbb	r6, r6, ip
 801cfe4:	f102 0a01 	add.w	sl, r2, #1
 801cfe8:	443e      	add	r6, r7
 801cfea:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801cfee:	b2b6      	uxth	r6, r6
 801cff0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801cff4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cff8:	4322      	orrs	r2, r4
 801cffa:	1c74      	adds	r4, r6, #1
 801cffc:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801d000:	0976      	lsrs	r6, r6, #5
 801d002:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d006:	4332      	orrs	r2, r6
 801d008:	f821 2b02 	strh.w	r2, [r1], #2
 801d00c:	e7cb      	b.n	801cfa6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 801d00e:	4441      	add	r1, r8
 801d010:	e7c5      	b.n	801cf9e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 801d012:	4f22      	ldr	r7, [pc, #136]	; (801d09c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 801d014:	0973      	lsrs	r3, r6, #5
 801d016:	ea08 0707 	and.w	r7, r8, r7
 801d01a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d01e:	433b      	orrs	r3, r7
 801d020:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801d024:	4333      	orrs	r3, r6
 801d026:	07e7      	lsls	r7, r4, #31
 801d028:	b29b      	uxth	r3, r3
 801d02a:	d50b      	bpl.n	801d044 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801d02c:	0040      	lsls	r0, r0, #1
 801d02e:	0052      	lsls	r2, r2, #1
 801d030:	42a9      	cmp	r1, r5
 801d032:	d231      	bcs.n	801d098 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d034:	180c      	adds	r4, r1, r0
 801d036:	42a1      	cmp	r1, r4
 801d038:	d202      	bcs.n	801d040 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801d03a:	f821 3b02 	strh.w	r3, [r1], #2
 801d03e:	e7fa      	b.n	801d036 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 801d040:	4411      	add	r1, r2
 801d042:	e7f5      	b.n	801d030 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 801d044:	078e      	lsls	r6, r1, #30
 801d046:	d008      	beq.n	801d05a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801d048:	0066      	lsls	r6, r4, #1
 801d04a:	460a      	mov	r2, r1
 801d04c:	42aa      	cmp	r2, r5
 801d04e:	d202      	bcs.n	801d056 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801d050:	8013      	strh	r3, [r2, #0]
 801d052:	4432      	add	r2, r6
 801d054:	e7fa      	b.n	801d04c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 801d056:	3102      	adds	r1, #2
 801d058:	3801      	subs	r0, #1
 801d05a:	07c2      	lsls	r2, r0, #31
 801d05c:	d50b      	bpl.n	801d076 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801d05e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801d062:	3a01      	subs	r2, #1
 801d064:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801d068:	0066      	lsls	r6, r4, #1
 801d06a:	42aa      	cmp	r2, r5
 801d06c:	d202      	bcs.n	801d074 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801d06e:	8013      	strh	r3, [r2, #0]
 801d070:	4432      	add	r2, r6
 801d072:	e7fa      	b.n	801d06a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 801d074:	3801      	subs	r0, #1
 801d076:	b178      	cbz	r0, 801d098 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d078:	1040      	asrs	r0, r0, #1
 801d07a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801d07e:	0080      	lsls	r0, r0, #2
 801d080:	0064      	lsls	r4, r4, #1
 801d082:	42a9      	cmp	r1, r5
 801d084:	d208      	bcs.n	801d098 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d086:	180e      	adds	r6, r1, r0
 801d088:	460a      	mov	r2, r1
 801d08a:	42b2      	cmp	r2, r6
 801d08c:	d202      	bcs.n	801d094 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 801d08e:	f842 3b04 	str.w	r3, [r2], #4
 801d092:	e7fa      	b.n	801d08a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 801d094:	4421      	add	r1, r4
 801d096:	e7f4      	b.n	801d082 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 801d098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d09c:	00fff800 	.word	0x00fff800

0801d0a0 <_ZN8touchgfx8LCD16bppC1Ev>:
 801d0a0:	2200      	movs	r2, #0
 801d0a2:	4912      	ldr	r1, [pc, #72]	; (801d0ec <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 801d0a4:	6042      	str	r2, [r0, #4]
 801d0a6:	6001      	str	r1, [r0, #0]
 801d0a8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d0ac:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d0b0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d0b4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d0b8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d0bc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d0c0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d0c4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d0c8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d0cc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d0d0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801d0d4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801d0d8:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801d0dc:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801d0e0:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
 801d0e4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 801d0e8:	4770      	bx	lr
 801d0ea:	bf00      	nop
 801d0ec:	08029bf0 	.word	0x08029bf0

0801d0f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0f4:	460d      	mov	r5, r1
 801d0f6:	b08d      	sub	sp, #52	; 0x34
 801d0f8:	4604      	mov	r4, r0
 801d0fa:	6808      	ldr	r0, [r1, #0]
 801d0fc:	6849      	ldr	r1, [r1, #4]
 801d0fe:	4699      	mov	r9, r3
 801d100:	ab08      	add	r3, sp, #32
 801d102:	c303      	stmia	r3!, {r0, r1}
 801d104:	6810      	ldr	r0, [r2, #0]
 801d106:	6851      	ldr	r1, [r2, #4]
 801d108:	ab0a      	add	r3, sp, #40	; 0x28
 801d10a:	c303      	stmia	r3!, {r0, r1}
 801d10c:	a808      	add	r0, sp, #32
 801d10e:	f7f8 fa0f 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d112:	4629      	mov	r1, r5
 801d114:	a80a      	add	r0, sp, #40	; 0x28
 801d116:	f7f8 fa4f 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d11a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d11e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d122:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d126:	4d63      	ldr	r5, [pc, #396]	; (801d2b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d128:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801d12c:	6828      	ldr	r0, [r5, #0]
 801d12e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d132:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d136:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d13a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d13e:	440a      	add	r2, r1
 801d140:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d144:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d148:	4413      	add	r3, r2
 801d14a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d14e:	6803      	ldr	r3, [r0, #0]
 801d150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d152:	4798      	blx	r3
 801d154:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d158:	d119      	bne.n	801d18e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801d15a:	f010 0f20 	tst.w	r0, #32
 801d15e:	6828      	ldr	r0, [r5, #0]
 801d160:	d018      	beq.n	801d194 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801d162:	2500      	movs	r5, #0
 801d164:	6801      	ldr	r1, [r0, #0]
 801d166:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d16a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d16e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801d172:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801d176:	9502      	str	r5, [sp, #8]
 801d178:	b2b6      	uxth	r6, r6
 801d17a:	fa1f f588 	uxth.w	r5, r8
 801d17e:	9601      	str	r6, [sp, #4]
 801d180:	9500      	str	r5, [sp, #0]
 801d182:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801d184:	4621      	mov	r1, r4
 801d186:	47a8      	blx	r5
 801d188:	b00d      	add	sp, #52	; 0x34
 801d18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d18e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d192:	e7e4      	b.n	801d15e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801d194:	6803      	ldr	r3, [r0, #0]
 801d196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d198:	4798      	blx	r3
 801d19a:	4947      	ldr	r1, [pc, #284]	; (801d2b8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801d19c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d1a0:	880b      	ldrh	r3, [r1, #0]
 801d1a2:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801d1a6:	fb03 5202 	mla	r2, r3, r2, r5
 801d1aa:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d1ae:	4373      	muls	r3, r6
 801d1b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d1b4:	9307      	str	r3, [sp, #28]
 801d1b6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d1ba:	9306      	str	r3, [sp, #24]
 801d1bc:	468a      	mov	sl, r1
 801d1be:	9b07      	ldr	r3, [sp, #28]
 801d1c0:	4298      	cmp	r0, r3
 801d1c2:	d270      	bcs.n	801d2a6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801d1c4:	9b06      	ldr	r3, [sp, #24]
 801d1c6:	4621      	mov	r1, r4
 801d1c8:	eb00 0b03 	add.w	fp, r0, r3
 801d1cc:	4558      	cmp	r0, fp
 801d1ce:	d25d      	bcs.n	801d28c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801d1d0:	f851 4b04 	ldr.w	r4, [r1], #4
 801d1d4:	0e23      	lsrs	r3, r4, #24
 801d1d6:	d014      	beq.n	801d202 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d1d8:	2bff      	cmp	r3, #255	; 0xff
 801d1da:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801d1de:	d112      	bne.n	801d206 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d1e0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d1e4:	d10f      	bne.n	801d206 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d1e6:	0963      	lsrs	r3, r4, #5
 801d1e8:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801d1ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d1f0:	f02c 0c07 	bic.w	ip, ip, #7
 801d1f4:	ea43 0c0c 	orr.w	ip, r3, ip
 801d1f8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d1fc:	ea4c 0404 	orr.w	r4, ip, r4
 801d200:	8004      	strh	r4, [r0, #0]
 801d202:	3002      	adds	r0, #2
 801d204:	e7e2      	b.n	801d1cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801d206:	fb09 f303 	mul.w	r3, r9, r3
 801d20a:	8807      	ldrh	r7, [r0, #0]
 801d20c:	1c5a      	adds	r2, r3, #1
 801d20e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801d212:	1212      	asrs	r2, r2, #8
 801d214:	123e      	asrs	r6, r7, #8
 801d216:	b293      	uxth	r3, r2
 801d218:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801d21c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d220:	43d2      	mvns	r2, r2
 801d222:	b2d2      	uxtb	r2, r2
 801d224:	10fd      	asrs	r5, r7, #3
 801d226:	fb1e fe03 	smulbb	lr, lr, r3
 801d22a:	00ff      	lsls	r7, r7, #3
 801d22c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d230:	fb06 e602 	mla	r6, r6, r2, lr
 801d234:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d238:	b2ff      	uxtb	r7, r7
 801d23a:	fa5f fc8c 	uxtb.w	ip, ip
 801d23e:	b2e4      	uxtb	r4, r4
 801d240:	b2b6      	uxth	r6, r6
 801d242:	fb1c fc03 	smulbb	ip, ip, r3
 801d246:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d24a:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801d24e:	fb14 f403 	smulbb	r4, r4, r3
 801d252:	fb05 c502 	mla	r5, r5, r2, ip
 801d256:	f106 0e01 	add.w	lr, r6, #1
 801d25a:	fb07 4702 	mla	r7, r7, r2, r4
 801d25e:	b2ad      	uxth	r5, r5
 801d260:	b2bf      	uxth	r7, r7
 801d262:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801d266:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801d26a:	f105 0c01 	add.w	ip, r5, #1
 801d26e:	1c7e      	adds	r6, r7, #1
 801d270:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801d274:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d278:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d27c:	096d      	lsrs	r5, r5, #5
 801d27e:	ea46 060e 	orr.w	r6, r6, lr
 801d282:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d286:	432e      	orrs	r6, r5
 801d288:	8006      	strh	r6, [r0, #0]
 801d28a:	e7ba      	b.n	801d202 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d28c:	f8ba 3000 	ldrh.w	r3, [sl]
 801d290:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801d294:	eba3 0308 	sub.w	r3, r3, r8
 801d298:	eba4 0408 	sub.w	r4, r4, r8
 801d29c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d2a0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801d2a4:	e78b      	b.n	801d1be <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801d2a6:	4b03      	ldr	r3, [pc, #12]	; (801d2b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d2a8:	6818      	ldr	r0, [r3, #0]
 801d2aa:	6803      	ldr	r3, [r0, #0]
 801d2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2ae:	4798      	blx	r3
 801d2b0:	e76a      	b.n	801d188 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801d2b2:	bf00      	nop
 801d2b4:	20014610 	.word	0x20014610
 801d2b8:	2001460a 	.word	0x2001460a

0801d2bc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801d2bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d2c0:	460c      	mov	r4, r1
 801d2c2:	b085      	sub	sp, #20
 801d2c4:	6810      	ldr	r0, [r2, #0]
 801d2c6:	6851      	ldr	r1, [r2, #4]
 801d2c8:	466d      	mov	r5, sp
 801d2ca:	c503      	stmia	r5!, {r0, r1}
 801d2cc:	6818      	ldr	r0, [r3, #0]
 801d2ce:	6859      	ldr	r1, [r3, #4]
 801d2d0:	4616      	mov	r6, r2
 801d2d2:	c503      	stmia	r5!, {r0, r1}
 801d2d4:	4668      	mov	r0, sp
 801d2d6:	f7f8 f92b 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d2da:	4631      	mov	r1, r6
 801d2dc:	a802      	add	r0, sp, #8
 801d2de:	f7f8 f96b 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d2e2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801d2e6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801d2ea:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801d2ee:	4d28      	ldr	r5, [pc, #160]	; (801d390 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801d2f0:	4e28      	ldr	r6, [pc, #160]	; (801d394 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801d2f2:	6828      	ldr	r0, [r5, #0]
 801d2f4:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d2f8:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801d2fc:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d300:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d304:	f8bd 1000 	ldrh.w	r1, [sp]
 801d308:	440a      	add	r2, r1
 801d30a:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d30e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d312:	4413      	add	r3, r2
 801d314:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d318:	6803      	ldr	r3, [r0, #0]
 801d31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d31c:	4798      	blx	r3
 801d31e:	8833      	ldrh	r3, [r6, #0]
 801d320:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801d324:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801d328:	f8df e06c 	ldr.w	lr, [pc, #108]	; 801d398 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801d32c:	fb03 1202 	mla	r2, r3, r2, r1
 801d330:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d334:	fb08 f303 	mul.w	r3, r8, r3
 801d338:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d33c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801d340:	4298      	cmp	r0, r3
 801d342:	d21d      	bcs.n	801d380 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801d344:	eb00 080c 	add.w	r8, r0, ip
 801d348:	4540      	cmp	r0, r8
 801d34a:	d20f      	bcs.n	801d36c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801d34c:	f854 1b04 	ldr.w	r1, [r4], #4
 801d350:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801d354:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801d358:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d35c:	ea42 0209 	orr.w	r2, r2, r9
 801d360:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801d364:	430a      	orrs	r2, r1
 801d366:	f820 2b02 	strh.w	r2, [r0], #2
 801d36a:	e7ed      	b.n	801d348 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801d36c:	8832      	ldrh	r2, [r6, #0]
 801d36e:	1bd2      	subs	r2, r2, r7
 801d370:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d374:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801d378:	1bd2      	subs	r2, r2, r7
 801d37a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801d37e:	e7df      	b.n	801d340 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801d380:	6828      	ldr	r0, [r5, #0]
 801d382:	6803      	ldr	r3, [r0, #0]
 801d384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d386:	4798      	blx	r3
 801d388:	b005      	add	sp, #20
 801d38a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d38e:	bf00      	nop
 801d390:	20014610 	.word	0x20014610
 801d394:	2001460a 	.word	0x2001460a
 801d398:	fffff800 	.word	0xfffff800

0801d39c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801d39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3a0:	460e      	mov	r6, r1
 801d3a2:	b08e      	sub	sp, #56	; 0x38
 801d3a4:	4604      	mov	r4, r0
 801d3a6:	6808      	ldr	r0, [r1, #0]
 801d3a8:	6849      	ldr	r1, [r1, #4]
 801d3aa:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 801d584 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801d3ae:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801d588 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801d3b2:	461d      	mov	r5, r3
 801d3b4:	ab0a      	add	r3, sp, #40	; 0x28
 801d3b6:	c303      	stmia	r3!, {r0, r1}
 801d3b8:	6810      	ldr	r0, [r2, #0]
 801d3ba:	6851      	ldr	r1, [r2, #4]
 801d3bc:	ab0c      	add	r3, sp, #48	; 0x30
 801d3be:	c303      	stmia	r3!, {r0, r1}
 801d3c0:	a80a      	add	r0, sp, #40	; 0x28
 801d3c2:	f7f8 f8b5 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3c6:	4631      	mov	r1, r6
 801d3c8:	a80c      	add	r0, sp, #48	; 0x30
 801d3ca:	f7f8 f8f5 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d3ce:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d3d2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d3d6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d3da:	f8d8 0000 	ldr.w	r0, [r8]
 801d3de:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801d3e2:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801d3e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d3ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d3ee:	440c      	add	r4, r1
 801d3f0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d3f4:	440a      	add	r2, r1
 801d3f6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d3fa:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801d3fe:	4413      	add	r3, r2
 801d400:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d404:	6803      	ldr	r3, [r0, #0]
 801d406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d408:	4798      	blx	r3
 801d40a:	2dff      	cmp	r5, #255	; 0xff
 801d40c:	d124      	bne.n	801d458 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801d40e:	f010 0f01 	tst.w	r0, #1
 801d412:	f8d8 0000 	ldr.w	r0, [r8]
 801d416:	d022      	beq.n	801d45e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801d418:	2100      	movs	r1, #0
 801d41a:	f8d0 c000 	ldr.w	ip, [r0]
 801d41e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d422:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d426:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801d42a:	f04f 0e01 	mov.w	lr, #1
 801d42e:	f8cd e018 	str.w	lr, [sp, #24]
 801d432:	f8b9 e000 	ldrh.w	lr, [r9]
 801d436:	9503      	str	r5, [sp, #12]
 801d438:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801d43c:	b2b6      	uxth	r6, r6
 801d43e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d442:	9102      	str	r1, [sp, #8]
 801d444:	b2bf      	uxth	r7, r7
 801d446:	9601      	str	r6, [sp, #4]
 801d448:	9700      	str	r7, [sp, #0]
 801d44a:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801d44e:	4621      	mov	r1, r4
 801d450:	47a8      	blx	r5
 801d452:	b00e      	add	sp, #56	; 0x38
 801d454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d458:	f010 0f04 	tst.w	r0, #4
 801d45c:	e7d9      	b.n	801d412 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801d45e:	6803      	ldr	r3, [r0, #0]
 801d460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d462:	4798      	blx	r3
 801d464:	f8b9 3000 	ldrh.w	r3, [r9]
 801d468:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801d46c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d470:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d474:	fb03 1202 	mla	r2, r3, r2, r1
 801d478:	ebac 0c07 	sub.w	ip, ip, r7
 801d47c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d480:	435e      	muls	r6, r3
 801d482:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801d486:	2dff      	cmp	r5, #255	; 0xff
 801d488:	eba3 0707 	sub.w	r7, r3, r7
 801d48c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d490:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d494:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801d498:	d049      	beq.n	801d52e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801d49a:	43eb      	mvns	r3, r5
 801d49c:	fa1f f985 	uxth.w	r9, r5
 801d4a0:	b2db      	uxtb	r3, r3
 801d4a2:	42b0      	cmp	r0, r6
 801d4a4:	d266      	bcs.n	801d574 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d4a6:	eb00 0a0e 	add.w	sl, r0, lr
 801d4aa:	4550      	cmp	r0, sl
 801d4ac:	4621      	mov	r1, r4
 801d4ae:	f104 0403 	add.w	r4, r4, #3
 801d4b2:	d25b      	bcs.n	801d56c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801d4b4:	8802      	ldrh	r2, [r0, #0]
 801d4b6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d4ba:	ea4f 2822 	mov.w	r8, r2, asr #8
 801d4be:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801d4c2:	fb11 f109 	smulbb	r1, r1, r9
 801d4c6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801d4ca:	10d5      	asrs	r5, r2, #3
 801d4cc:	fb08 1803 	mla	r8, r8, r3, r1
 801d4d0:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801d4d4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d4d8:	fb11 f109 	smulbb	r1, r1, r9
 801d4dc:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d4e0:	fb05 1503 	mla	r5, r5, r3, r1
 801d4e4:	00d2      	lsls	r2, r2, #3
 801d4e6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d4ea:	b2d2      	uxtb	r2, r2
 801d4ec:	fb11 f109 	smulbb	r1, r1, r9
 801d4f0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d4f4:	fa1f f888 	uxth.w	r8, r8
 801d4f8:	fb02 1203 	mla	r2, r2, r3, r1
 801d4fc:	b292      	uxth	r2, r2
 801d4fe:	f108 0101 	add.w	r1, r8, #1
 801d502:	b2ad      	uxth	r5, r5
 801d504:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801d508:	1c51      	adds	r1, r2, #1
 801d50a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d50e:	1c69      	adds	r1, r5, #1
 801d510:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801d514:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801d518:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d51c:	096d      	lsrs	r5, r5, #5
 801d51e:	ea42 0208 	orr.w	r2, r2, r8
 801d522:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d526:	432a      	orrs	r2, r5
 801d528:	f820 2b02 	strh.w	r2, [r0], #2
 801d52c:	e7bd      	b.n	801d4aa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801d52e:	4a14      	ldr	r2, [pc, #80]	; (801d580 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801d530:	42b0      	cmp	r0, r6
 801d532:	d21f      	bcs.n	801d574 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d534:	eb00 050e 	add.w	r5, r0, lr
 801d538:	42a8      	cmp	r0, r5
 801d53a:	4621      	mov	r1, r4
 801d53c:	f104 0403 	add.w	r4, r4, #3
 801d540:	d210      	bcs.n	801d564 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801d542:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801d546:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d54a:	00db      	lsls	r3, r3, #3
 801d54c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801d550:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d554:	430b      	orrs	r3, r1
 801d556:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d55a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801d55e:	f820 3b02 	strh.w	r3, [r0], #2
 801d562:	e7e9      	b.n	801d538 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801d564:	4438      	add	r0, r7
 801d566:	eb01 040c 	add.w	r4, r1, ip
 801d56a:	e7e1      	b.n	801d530 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801d56c:	4438      	add	r0, r7
 801d56e:	eb01 040c 	add.w	r4, r1, ip
 801d572:	e796      	b.n	801d4a2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801d574:	4b03      	ldr	r3, [pc, #12]	; (801d584 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801d576:	6818      	ldr	r0, [r3, #0]
 801d578:	6803      	ldr	r3, [r0, #0]
 801d57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d57c:	4798      	blx	r3
 801d57e:	e768      	b.n	801d452 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801d580:	fffff800 	.word	0xfffff800
 801d584:	20014610 	.word	0x20014610
 801d588:	2001460a 	.word	0x2001460a

0801d58c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d58c:	b4f0      	push	{r4, r5, r6, r7}
 801d58e:	4616      	mov	r6, r2
 801d590:	2e01      	cmp	r6, #1
 801d592:	461c      	mov	r4, r3
 801d594:	460d      	mov	r5, r1
 801d596:	9a04      	ldr	r2, [sp, #16]
 801d598:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d59c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801d5a0:	d012      	beq.n	801d5c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801d5a2:	d303      	bcc.n	801d5ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801d5a4:	2e02      	cmp	r6, #2
 801d5a6:	d00a      	beq.n	801d5be <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801d5a8:	bcf0      	pop	{r4, r5, r6, r7}
 801d5aa:	4770      	bx	lr
 801d5ac:	6805      	ldr	r5, [r0, #0]
 801d5ae:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801d5b2:	68ed      	ldr	r5, [r5, #12]
 801d5b4:	4613      	mov	r3, r2
 801d5b6:	46ac      	mov	ip, r5
 801d5b8:	4622      	mov	r2, r4
 801d5ba:	bcf0      	pop	{r4, r5, r6, r7}
 801d5bc:	4760      	bx	ip
 801d5be:	4621      	mov	r1, r4
 801d5c0:	4628      	mov	r0, r5
 801d5c2:	bcf0      	pop	{r4, r5, r6, r7}
 801d5c4:	f7ff bd94 	b.w	801d0f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d5c8:	4621      	mov	r1, r4
 801d5ca:	4628      	mov	r0, r5
 801d5cc:	bcf0      	pop	{r4, r5, r6, r7}
 801d5ce:	f7ff bee5 	b.w	801d39c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801d5d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5d8:	4681      	mov	r9, r0
 801d5da:	b093      	sub	sp, #76	; 0x4c
 801d5dc:	6810      	ldr	r0, [r2, #0]
 801d5de:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801d5e2:	4f6d      	ldr	r7, [pc, #436]	; (801d798 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801d5e4:	4688      	mov	r8, r1
 801d5e6:	6851      	ldr	r1, [r2, #4]
 801d5e8:	ac0e      	add	r4, sp, #56	; 0x38
 801d5ea:	c403      	stmia	r4!, {r0, r1}
 801d5ec:	6818      	ldr	r0, [r3, #0]
 801d5ee:	6859      	ldr	r1, [r3, #4]
 801d5f0:	ac10      	add	r4, sp, #64	; 0x40
 801d5f2:	4616      	mov	r6, r2
 801d5f4:	c403      	stmia	r4!, {r0, r1}
 801d5f6:	a80e      	add	r0, sp, #56	; 0x38
 801d5f8:	f7f7 ff9a 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d5fc:	4631      	mov	r1, r6
 801d5fe:	a810      	add	r0, sp, #64	; 0x40
 801d600:	f7f7 ffda 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d604:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d608:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d60c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d610:	4e62      	ldr	r6, [pc, #392]	; (801d79c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801d612:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801d616:	6830      	ldr	r0, [r6, #0]
 801d618:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801d61c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d620:	4489      	add	r9, r1
 801d622:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d626:	440a      	add	r2, r1
 801d628:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d62c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d630:	4413      	add	r3, r2
 801d632:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d636:	6803      	ldr	r3, [r0, #0]
 801d638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d63a:	4798      	blx	r3
 801d63c:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d640:	6830      	ldr	r0, [r6, #0]
 801d642:	d01d      	beq.n	801d680 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801d644:	2200      	movs	r2, #0
 801d646:	6801      	ldr	r1, [r0, #0]
 801d648:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d64c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d650:	220b      	movs	r2, #11
 801d652:	9207      	str	r2, [sp, #28]
 801d654:	883a      	ldrh	r2, [r7, #0]
 801d656:	9206      	str	r2, [sp, #24]
 801d658:	2201      	movs	r2, #1
 801d65a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801d65e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d662:	9203      	str	r2, [sp, #12]
 801d664:	b2a4      	uxth	r4, r4
 801d666:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d66a:	9200      	str	r2, [sp, #0]
 801d66c:	b2ad      	uxth	r5, r5
 801d66e:	9502      	str	r5, [sp, #8]
 801d670:	9401      	str	r4, [sp, #4]
 801d672:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801d674:	4642      	mov	r2, r8
 801d676:	4649      	mov	r1, r9
 801d678:	47a0      	blx	r4
 801d67a:	b013      	add	sp, #76	; 0x4c
 801d67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d680:	6803      	ldr	r3, [r0, #0]
 801d682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d684:	4798      	blx	r3
 801d686:	883b      	ldrh	r3, [r7, #0]
 801d688:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801d68c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801d690:	fb03 1202 	mla	r2, r3, r2, r1
 801d694:	435d      	muls	r5, r3
 801d696:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d69a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801d69e:	920c      	str	r2, [sp, #48]	; 0x30
 801d6a0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801d6a4:	1b12      	subs	r2, r2, r4
 801d6a6:	920d      	str	r2, [sp, #52]	; 0x34
 801d6a8:	0062      	lsls	r2, r4, #1
 801d6aa:	1b1c      	subs	r4, r3, r4
 801d6ac:	0063      	lsls	r3, r4, #1
 801d6ae:	920a      	str	r2, [sp, #40]	; 0x28
 801d6b0:	930b      	str	r3, [sp, #44]	; 0x2c
 801d6b2:	f04f 0e04 	mov.w	lr, #4
 801d6b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6b8:	4298      	cmp	r0, r3
 801d6ba:	d266      	bcs.n	801d78a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801d6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d6be:	eb00 0b03 	add.w	fp, r0, r3
 801d6c2:	4558      	cmp	r0, fp
 801d6c4:	d25c      	bcs.n	801d780 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801d6c6:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d6ca:	fb1e e303 	smlabb	r3, lr, r3, lr
 801d6ce:	f858 2003 	ldr.w	r2, [r8, r3]
 801d6d2:	0e11      	lsrs	r1, r2, #24
 801d6d4:	d012      	beq.n	801d6fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d6d6:	29ff      	cmp	r1, #255	; 0xff
 801d6d8:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801d6dc:	d110      	bne.n	801d700 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d6de:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d6e2:	d10d      	bne.n	801d700 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d6e4:	0953      	lsrs	r3, r2, #5
 801d6e6:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801d6ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d6ee:	f027 0707 	bic.w	r7, r7, #7
 801d6f2:	431f      	orrs	r7, r3
 801d6f4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d6f8:	433a      	orrs	r2, r7
 801d6fa:	8002      	strh	r2, [r0, #0]
 801d6fc:	3002      	adds	r0, #2
 801d6fe:	e7e0      	b.n	801d6c2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801d700:	fb0a f101 	mul.w	r1, sl, r1
 801d704:	8806      	ldrh	r6, [r0, #0]
 801d706:	1c4b      	adds	r3, r1, #1
 801d708:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801d70c:	1235      	asrs	r5, r6, #8
 801d70e:	10f4      	asrs	r4, r6, #3
 801d710:	121b      	asrs	r3, r3, #8
 801d712:	00f6      	lsls	r6, r6, #3
 801d714:	b299      	uxth	r1, r3
 801d716:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801d71a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d71e:	b2f6      	uxtb	r6, r6
 801d720:	43db      	mvns	r3, r3
 801d722:	b2d2      	uxtb	r2, r2
 801d724:	b2db      	uxtb	r3, r3
 801d726:	fb1c fc01 	smulbb	ip, ip, r1
 801d72a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801d72e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d732:	fb12 f201 	smulbb	r2, r2, r1
 801d736:	fb05 c503 	mla	r5, r5, r3, ip
 801d73a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d73e:	b2ff      	uxtb	r7, r7
 801d740:	fb06 2203 	mla	r2, r6, r3, r2
 801d744:	b2ad      	uxth	r5, r5
 801d746:	fb17 f701 	smulbb	r7, r7, r1
 801d74a:	b292      	uxth	r2, r2
 801d74c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801d750:	fb04 7403 	mla	r4, r4, r3, r7
 801d754:	f105 0c01 	add.w	ip, r5, #1
 801d758:	1c57      	adds	r7, r2, #1
 801d75a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d75e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d762:	b2a4      	uxth	r4, r4
 801d764:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d768:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d76c:	433d      	orrs	r5, r7
 801d76e:	1c67      	adds	r7, r4, #1
 801d770:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801d774:	0964      	lsrs	r4, r4, #5
 801d776:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d77a:	4325      	orrs	r5, r4
 801d77c:	8005      	strh	r5, [r0, #0]
 801d77e:	e7bd      	b.n	801d6fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d782:	4418      	add	r0, r3
 801d784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d786:	4499      	add	r9, r3
 801d788:	e795      	b.n	801d6b6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801d78a:	4b04      	ldr	r3, [pc, #16]	; (801d79c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801d78c:	6818      	ldr	r0, [r3, #0]
 801d78e:	6803      	ldr	r3, [r0, #0]
 801d790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d792:	4798      	blx	r3
 801d794:	e771      	b.n	801d67a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801d796:	bf00      	nop
 801d798:	2001460a 	.word	0x2001460a
 801d79c:	20014610 	.word	0x20014610

0801d7a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7a4:	b087      	sub	sp, #28
 801d7a6:	4680      	mov	r8, r0
 801d7a8:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801d7ac:	460d      	mov	r5, r1
 801d7ae:	4614      	mov	r4, r2
 801d7b0:	2e00      	cmp	r6, #0
 801d7b2:	f000 80b9 	beq.w	801d928 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801d7b6:	6810      	ldr	r0, [r2, #0]
 801d7b8:	6851      	ldr	r1, [r2, #4]
 801d7ba:	af02      	add	r7, sp, #8
 801d7bc:	c703      	stmia	r7!, {r0, r1}
 801d7be:	6818      	ldr	r0, [r3, #0]
 801d7c0:	6859      	ldr	r1, [r3, #4]
 801d7c2:	af04      	add	r7, sp, #16
 801d7c4:	c703      	stmia	r7!, {r0, r1}
 801d7c6:	a802      	add	r0, sp, #8
 801d7c8:	f7f7 feb2 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d7cc:	4621      	mov	r1, r4
 801d7ce:	a804      	add	r0, sp, #16
 801d7d0:	f7f7 fef2 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d7d4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d7d8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d7dc:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801d7e0:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801d7e4:	fb14 2103 	smlabb	r1, r4, r3, r2
 801d7e8:	eb08 0401 	add.w	r4, r8, r1
 801d7ec:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d7f0:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d7f4:	440a      	add	r2, r1
 801d7f6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d7fa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d7fe:	4413      	add	r3, r2
 801d800:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d804:	4b4a      	ldr	r3, [pc, #296]	; (801d930 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d806:	6818      	ldr	r0, [r3, #0]
 801d808:	6803      	ldr	r3, [r0, #0]
 801d80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d80c:	4798      	blx	r3
 801d80e:	4b49      	ldr	r3, [pc, #292]	; (801d934 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801d810:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801d814:	881a      	ldrh	r2, [r3, #0]
 801d816:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801d81a:	2eff      	cmp	r6, #255	; 0xff
 801d81c:	fb02 c101 	mla	r1, r2, r1, ip
 801d820:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801d824:	fb02 f207 	mul.w	r2, r2, r7
 801d828:	f105 0104 	add.w	r1, r5, #4
 801d82c:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801d830:	461d      	mov	r5, r3
 801d832:	d05a      	beq.n	801d8ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801d834:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801d838:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d83c:	b2b6      	uxth	r6, r6
 801d83e:	fa1f fe8e 	uxth.w	lr, lr
 801d842:	9301      	str	r3, [sp, #4]
 801d844:	4282      	cmp	r2, r0
 801d846:	d96a      	bls.n	801d91e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d848:	eb00 0b0a 	add.w	fp, r0, sl
 801d84c:	4583      	cmp	fp, r0
 801d84e:	d940      	bls.n	801d8d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801d850:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d854:	8805      	ldrh	r5, [r0, #0]
 801d856:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d85a:	122f      	asrs	r7, r5, #8
 801d85c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d860:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d864:	fb17 f70e 	smulbb	r7, r7, lr
 801d868:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d86c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d870:	00ed      	lsls	r5, r5, #3
 801d872:	fb0c 7c06 	mla	ip, ip, r6, r7
 801d876:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d87a:	10df      	asrs	r7, r3, #3
 801d87c:	b2ed      	uxtb	r5, r5
 801d87e:	00db      	lsls	r3, r3, #3
 801d880:	fa1f fc8c 	uxth.w	ip, ip
 801d884:	fb19 f90e 	smulbb	r9, r9, lr
 801d888:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d88c:	b2db      	uxtb	r3, r3
 801d88e:	fb15 f50e 	smulbb	r5, r5, lr
 801d892:	fb07 9706 	mla	r7, r7, r6, r9
 801d896:	fb03 5306 	mla	r3, r3, r6, r5
 801d89a:	f10c 0901 	add.w	r9, ip, #1
 801d89e:	b29b      	uxth	r3, r3
 801d8a0:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801d8a4:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801d8a8:	f103 0c01 	add.w	ip, r3, #1
 801d8ac:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d8b0:	b2bf      	uxth	r7, r7
 801d8b2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d8b6:	ea4c 0c09 	orr.w	ip, ip, r9
 801d8ba:	f107 0901 	add.w	r9, r7, #1
 801d8be:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d8c2:	097f      	lsrs	r7, r7, #5
 801d8c4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d8c8:	ea4c 0c07 	orr.w	ip, ip, r7
 801d8cc:	f820 cb02 	strh.w	ip, [r0], #2
 801d8d0:	e7bc      	b.n	801d84c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801d8d2:	9b01      	ldr	r3, [sp, #4]
 801d8d4:	881b      	ldrh	r3, [r3, #0]
 801d8d6:	eba3 0308 	sub.w	r3, r3, r8
 801d8da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d8de:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d8e2:	eba3 0308 	sub.w	r3, r3, r8
 801d8e6:	441c      	add	r4, r3
 801d8e8:	e7ac      	b.n	801d844 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801d8ea:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d8ee:	4282      	cmp	r2, r0
 801d8f0:	d915      	bls.n	801d91e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d8f2:	eb00 060a 	add.w	r6, r0, sl
 801d8f6:	4286      	cmp	r6, r0
 801d8f8:	d906      	bls.n	801d908 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801d8fa:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d8fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d902:	f820 3b02 	strh.w	r3, [r0], #2
 801d906:	e7f6      	b.n	801d8f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801d908:	882b      	ldrh	r3, [r5, #0]
 801d90a:	eba3 0308 	sub.w	r3, r3, r8
 801d90e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d912:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d916:	eba3 0308 	sub.w	r3, r3, r8
 801d91a:	441c      	add	r4, r3
 801d91c:	e7e7      	b.n	801d8ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801d91e:	4b04      	ldr	r3, [pc, #16]	; (801d930 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d920:	6818      	ldr	r0, [r3, #0]
 801d922:	6803      	ldr	r3, [r0, #0]
 801d924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d926:	4798      	blx	r3
 801d928:	b007      	add	sp, #28
 801d92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d92e:	bf00      	nop
 801d930:	20014610 	.word	0x20014610
 801d934:	2001460a 	.word	0x2001460a

0801d938 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d93c:	b091      	sub	sp, #68	; 0x44
 801d93e:	4680      	mov	r8, r0
 801d940:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801d944:	460f      	mov	r7, r1
 801d946:	4614      	mov	r4, r2
 801d948:	2d00      	cmp	r5, #0
 801d94a:	d051      	beq.n	801d9f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801d94c:	6810      	ldr	r0, [r2, #0]
 801d94e:	6851      	ldr	r1, [r2, #4]
 801d950:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801db54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801d954:	ae0c      	add	r6, sp, #48	; 0x30
 801d956:	c603      	stmia	r6!, {r0, r1}
 801d958:	6818      	ldr	r0, [r3, #0]
 801d95a:	6859      	ldr	r1, [r3, #4]
 801d95c:	ae0e      	add	r6, sp, #56	; 0x38
 801d95e:	c603      	stmia	r6!, {r0, r1}
 801d960:	a80c      	add	r0, sp, #48	; 0x30
 801d962:	f7f7 fde5 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d966:	4621      	mov	r1, r4
 801d968:	a80e      	add	r0, sp, #56	; 0x38
 801d96a:	f7f7 fe25 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d96e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d972:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d976:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d97a:	f8d9 0000 	ldr.w	r0, [r9]
 801d97e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801d982:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801d986:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d98a:	eb08 0401 	add.w	r4, r8, r1
 801d98e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d992:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801db58 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801d996:	440a      	add	r2, r1
 801d998:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d99c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d9a0:	4413      	add	r3, r2
 801d9a2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d9a6:	6803      	ldr	r3, [r0, #0]
 801d9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9aa:	4798      	blx	r3
 801d9ac:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d9b0:	f8d9 0000 	ldr.w	r0, [r9]
 801d9b4:	d01f      	beq.n	801d9f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d9b6:	2200      	movs	r2, #0
 801d9b8:	6801      	ldr	r1, [r0, #0]
 801d9ba:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d9be:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d9c2:	220b      	movs	r2, #11
 801d9c4:	9207      	str	r2, [sp, #28]
 801d9c6:	f8b8 2000 	ldrh.w	r2, [r8]
 801d9ca:	9206      	str	r2, [sp, #24]
 801d9cc:	2201      	movs	r2, #1
 801d9ce:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801d9d2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d9d6:	9203      	str	r2, [sp, #12]
 801d9d8:	fa1f f28a 	uxth.w	r2, sl
 801d9dc:	9202      	str	r2, [sp, #8]
 801d9de:	b2b6      	uxth	r6, r6
 801d9e0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d9e4:	9200      	str	r2, [sp, #0]
 801d9e6:	9601      	str	r6, [sp, #4]
 801d9e8:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801d9ea:	463a      	mov	r2, r7
 801d9ec:	4621      	mov	r1, r4
 801d9ee:	47a8      	blx	r5
 801d9f0:	b011      	add	sp, #68	; 0x44
 801d9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9f6:	6803      	ldr	r3, [r0, #0]
 801d9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9fa:	4798      	blx	r3
 801d9fc:	f8b8 2000 	ldrh.w	r2, [r8]
 801da00:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801da04:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801da08:	2dff      	cmp	r5, #255	; 0xff
 801da0a:	fb02 1303 	mla	r3, r2, r3, r1
 801da0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801da12:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801da16:	fb0a fa02 	mul.w	sl, sl, r2
 801da1a:	d062      	beq.n	801dae2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801da1c:	ea6f 0c05 	mvn.w	ip, r5
 801da20:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801da24:	930a      	str	r3, [sp, #40]	; 0x28
 801da26:	b2ad      	uxth	r5, r5
 801da28:	fa5f fc8c 	uxtb.w	ip, ip
 801da2c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801da30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da32:	4298      	cmp	r0, r3
 801da34:	f080 8085 	bcs.w	801db42 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801da38:	eb00 0b09 	add.w	fp, r0, r9
 801da3c:	4558      	cmp	r0, fp
 801da3e:	d246      	bcs.n	801dace <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801da40:	f814 eb01 	ldrb.w	lr, [r4], #1
 801da44:	2303      	movs	r3, #3
 801da46:	2204      	movs	r2, #4
 801da48:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801da4c:	eb07 0a0e 	add.w	sl, r7, lr
 801da50:	8803      	ldrh	r3, [r0, #0]
 801da52:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801da56:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801da5a:	1219      	asrs	r1, r3, #8
 801da5c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801da60:	fb18 f805 	smulbb	r8, r8, r5
 801da64:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801da68:	10da      	asrs	r2, r3, #3
 801da6a:	fb01 810c 	mla	r1, r1, ip, r8
 801da6e:	00db      	lsls	r3, r3, #3
 801da70:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801da74:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801da78:	b2db      	uxtb	r3, r3
 801da7a:	fb18 f805 	smulbb	r8, r8, r5
 801da7e:	fb1e fe05 	smulbb	lr, lr, r5
 801da82:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801da86:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801da8a:	b289      	uxth	r1, r1
 801da8c:	fb02 820c 	mla	r2, r2, ip, r8
 801da90:	fb03 e30c 	mla	r3, r3, ip, lr
 801da94:	b292      	uxth	r2, r2
 801da96:	b29b      	uxth	r3, r3
 801da98:	f101 0801 	add.w	r8, r1, #1
 801da9c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801daa0:	f103 0e01 	add.w	lr, r3, #1
 801daa4:	f102 0801 	add.w	r8, r2, #1
 801daa8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801daac:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801dab0:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801dab4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801dab8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801dabc:	ea4e 0101 	orr.w	r1, lr, r1
 801dac0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801dac4:	ea41 0108 	orr.w	r1, r1, r8
 801dac8:	f820 1b02 	strh.w	r1, [r0], #2
 801dacc:	e7b6      	b.n	801da3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801dace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dad0:	881b      	ldrh	r3, [r3, #0]
 801dad2:	1b9b      	subs	r3, r3, r6
 801dad4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dad8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801dadc:	1b9b      	subs	r3, r3, r6
 801dade:	441c      	add	r4, r3
 801dae0:	e7a6      	b.n	801da30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801dae2:	491b      	ldr	r1, [pc, #108]	; (801db50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801dae4:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801dae8:	2203      	movs	r2, #3
 801daea:	2504      	movs	r5, #4
 801daec:	4550      	cmp	r0, sl
 801daee:	d228      	bcs.n	801db42 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801daf0:	eb00 0c09 	add.w	ip, r0, r9
 801daf4:	4560      	cmp	r0, ip
 801daf6:	4623      	mov	r3, r4
 801daf8:	d219      	bcs.n	801db2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801dafa:	f893 e000 	ldrb.w	lr, [r3]
 801dafe:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801db02:	eb07 0b0e 	add.w	fp, r7, lr
 801db06:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801db0a:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801db0e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801db12:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801db16:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801db1a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801db1e:	ea43 030b 	orr.w	r3, r3, fp
 801db22:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801db26:	3401      	adds	r4, #1
 801db28:	f820 3b02 	strh.w	r3, [r0], #2
 801db2c:	e7e2      	b.n	801daf4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801db2e:	f8b8 3000 	ldrh.w	r3, [r8]
 801db32:	1b9b      	subs	r3, r3, r6
 801db34:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801db38:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801db3c:	1b9b      	subs	r3, r3, r6
 801db3e:	441c      	add	r4, r3
 801db40:	e7d4      	b.n	801daec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801db42:	4b04      	ldr	r3, [pc, #16]	; (801db54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801db44:	6818      	ldr	r0, [r3, #0]
 801db46:	6803      	ldr	r3, [r0, #0]
 801db48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db4a:	4798      	blx	r3
 801db4c:	e750      	b.n	801d9f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801db4e:	bf00      	nop
 801db50:	fffff800 	.word	0xfffff800
 801db54:	20014610 	.word	0x20014610
 801db58:	2001460a 	.word	0x2001460a

0801db5c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801db5c:	b4f0      	push	{r4, r5, r6, r7}
 801db5e:	460c      	mov	r4, r1
 801db60:	4611      	mov	r1, r2
 801db62:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801db66:	780f      	ldrb	r7, [r1, #0]
 801db68:	784e      	ldrb	r6, [r1, #1]
 801db6a:	2f01      	cmp	r7, #1
 801db6c:	461a      	mov	r2, r3
 801db6e:	9b04      	ldr	r3, [sp, #16]
 801db70:	d036      	beq.n	801dbe0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 801db72:	d31e      	bcc.n	801dbb2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 801db74:	2f02      	cmp	r7, #2
 801db76:	d14a      	bne.n	801dc0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801db78:	2e03      	cmp	r6, #3
 801db7a:	d848      	bhi.n	801dc0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801db7c:	e8df f006 	tbb	[pc, r6]
 801db80:	16140702 	.word	0x16140702
 801db84:	9504      	str	r5, [sp, #16]
 801db86:	4620      	mov	r0, r4
 801db88:	bcf0      	pop	{r4, r5, r6, r7}
 801db8a:	f7ff be09 	b.w	801d7a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801db8e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801db90:	2800      	cmp	r0, #0
 801db92:	d03c      	beq.n	801dc0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801db94:	6806      	ldr	r6, [r0, #0]
 801db96:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801db9a:	68b5      	ldr	r5, [r6, #8]
 801db9c:	4613      	mov	r3, r2
 801db9e:	46ac      	mov	ip, r5
 801dba0:	460a      	mov	r2, r1
 801dba2:	4621      	mov	r1, r4
 801dba4:	bcf0      	pop	{r4, r5, r6, r7}
 801dba6:	4760      	bx	ip
 801dba8:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801dbaa:	e7f1      	b.n	801db90 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801dbac:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801dbb0:	e7ee      	b.n	801db90 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801dbb2:	2e03      	cmp	r6, #3
 801dbb4:	d82b      	bhi.n	801dc0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801dbb6:	e8df f006 	tbb	[pc, r6]
 801dbba:	0702      	.short	0x0702
 801dbbc:	100e      	.short	0x100e
 801dbbe:	9504      	str	r5, [sp, #16]
 801dbc0:	4620      	mov	r0, r4
 801dbc2:	bcf0      	pop	{r4, r5, r6, r7}
 801dbc4:	f7ff bd06 	b.w	801d5d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801dbc8:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801dbca:	b300      	cbz	r0, 801dc0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801dbcc:	6806      	ldr	r6, [r0, #0]
 801dbce:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801dbd2:	68f5      	ldr	r5, [r6, #12]
 801dbd4:	e7e2      	b.n	801db9c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801dbd6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801dbd8:	e7f7      	b.n	801dbca <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 801dbda:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801dbde:	e7f4      	b.n	801dbca <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 801dbe0:	2e03      	cmp	r6, #3
 801dbe2:	d814      	bhi.n	801dc0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801dbe4:	e8df f006 	tbb	[pc, r6]
 801dbe8:	100e0702 	.word	0x100e0702
 801dbec:	9504      	str	r5, [sp, #16]
 801dbee:	4620      	mov	r0, r4
 801dbf0:	bcf0      	pop	{r4, r5, r6, r7}
 801dbf2:	f7ff bea1 	b.w	801d938 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801dbf6:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801dbf8:	b148      	cbz	r0, 801dc0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 801dbfa:	6806      	ldr	r6, [r0, #0]
 801dbfc:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801dc00:	6935      	ldr	r5, [r6, #16]
 801dc02:	e7cb      	b.n	801db9c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801dc04:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 801dc06:	e7f7      	b.n	801dbf8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 801dc08:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 801dc0c:	e7f4      	b.n	801dbf8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 801dc0e:	bcf0      	pop	{r4, r5, r6, r7}
 801dc10:	4770      	bx	lr
	...

0801dc14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801dc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc18:	4604      	mov	r4, r0
 801dc1a:	b087      	sub	sp, #28
 801dc1c:	6810      	ldr	r0, [r2, #0]
 801dc1e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801dc22:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801de5c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801dc26:	460e      	mov	r6, r1
 801dc28:	6851      	ldr	r1, [r2, #4]
 801dc2a:	ad02      	add	r5, sp, #8
 801dc2c:	c503      	stmia	r5!, {r0, r1}
 801dc2e:	6818      	ldr	r0, [r3, #0]
 801dc30:	6859      	ldr	r1, [r3, #4]
 801dc32:	ad04      	add	r5, sp, #16
 801dc34:	4617      	mov	r7, r2
 801dc36:	c503      	stmia	r5!, {r0, r1}
 801dc38:	a802      	add	r0, sp, #8
 801dc3a:	f7f7 fc79 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc3e:	4639      	mov	r1, r7
 801dc40:	a804      	add	r0, sp, #16
 801dc42:	f7f7 fcb9 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dc46:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801dc4a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dc4e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801dc52:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801dc56:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801dc5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dc5e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801dc62:	440e      	add	r6, r1
 801dc64:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801dc68:	440a      	add	r2, r1
 801dc6a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801dc6e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801dc72:	4413      	add	r3, r2
 801dc74:	f8ad 3012 	strh.w	r3, [sp, #18]
 801dc78:	4b77      	ldr	r3, [pc, #476]	; (801de58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801dc7a:	6818      	ldr	r0, [r3, #0]
 801dc7c:	6803      	ldr	r3, [r0, #0]
 801dc7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc80:	4798      	blx	r3
 801dc82:	f8b9 b000 	ldrh.w	fp, [r9]
 801dc86:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dc8a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801dc8e:	fb0b 2303 	mla	r3, fp, r3, r2
 801dc92:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dc96:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dc9a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801dc9e:	fb05 f50b 	mul.w	r5, r5, fp
 801dca2:	9300      	str	r3, [sp, #0]
 801dca4:	d069      	beq.n	801dd7a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801dca6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801dcaa:	4558      	cmp	r0, fp
 801dcac:	f080 80cc 	bcs.w	801de48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801dcb0:	9b00      	ldr	r3, [sp, #0]
 801dcb2:	18c3      	adds	r3, r0, r3
 801dcb4:	9301      	str	r3, [sp, #4]
 801dcb6:	4631      	mov	r1, r6
 801dcb8:	9b01      	ldr	r3, [sp, #4]
 801dcba:	4298      	cmp	r0, r3
 801dcbc:	d24f      	bcs.n	801dd5e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801dcbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dcc2:	2a00      	cmp	r2, #0
 801dcc4:	d048      	beq.n	801dd58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801dcc6:	fb0a f202 	mul.w	r2, sl, r2
 801dcca:	1c53      	adds	r3, r2, #1
 801dccc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dcd0:	121b      	asrs	r3, r3, #8
 801dcd2:	d041      	beq.n	801dd58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801dcd4:	8802      	ldrh	r2, [r0, #0]
 801dcd6:	f8b4 c000 	ldrh.w	ip, [r4]
 801dcda:	b29e      	uxth	r6, r3
 801dcdc:	1215      	asrs	r5, r2, #8
 801dcde:	43db      	mvns	r3, r3
 801dce0:	b2db      	uxtb	r3, r3
 801dce2:	ea4f 272c 	mov.w	r7, ip, asr #8
 801dce6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801dcea:	fb15 f503 	smulbb	r5, r5, r3
 801dcee:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801dcf2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dcf6:	00d2      	lsls	r2, r2, #3
 801dcf8:	fb07 5706 	mla	r7, r7, r6, r5
 801dcfc:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801dd00:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801dd04:	b2d2      	uxtb	r2, r2
 801dd06:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801dd0a:	b2bf      	uxth	r7, r7
 801dd0c:	fb1e fe03 	smulbb	lr, lr, r3
 801dd10:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801dd14:	fa5f fc8c 	uxtb.w	ip, ip
 801dd18:	fb12 f203 	smulbb	r2, r2, r3
 801dd1c:	fb05 e506 	mla	r5, r5, r6, lr
 801dd20:	fb0c 2c06 	mla	ip, ip, r6, r2
 801dd24:	f107 0e01 	add.w	lr, r7, #1
 801dd28:	fa1f fc8c 	uxth.w	ip, ip
 801dd2c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801dd30:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801dd34:	f10c 0701 	add.w	r7, ip, #1
 801dd38:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801dd3c:	b2ad      	uxth	r5, r5
 801dd3e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801dd42:	ea47 070e 	orr.w	r7, r7, lr
 801dd46:	f105 0e01 	add.w	lr, r5, #1
 801dd4a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801dd4e:	096d      	lsrs	r5, r5, #5
 801dd50:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dd54:	432f      	orrs	r7, r5
 801dd56:	8007      	strh	r7, [r0, #0]
 801dd58:	3002      	adds	r0, #2
 801dd5a:	3402      	adds	r4, #2
 801dd5c:	e7ac      	b.n	801dcb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801dd5e:	f8b9 3000 	ldrh.w	r3, [r9]
 801dd62:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801dd66:	eba3 0308 	sub.w	r3, r3, r8
 801dd6a:	eba6 0608 	sub.w	r6, r6, r8
 801dd6e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801dd72:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dd76:	440e      	add	r6, r1
 801dd78:	e797      	b.n	801dcaa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801dd7a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801dd7e:	42a8      	cmp	r0, r5
 801dd80:	d262      	bcs.n	801de48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801dd82:	9b00      	ldr	r3, [sp, #0]
 801dd84:	4631      	mov	r1, r6
 801dd86:	eb00 0b03 	add.w	fp, r0, r3
 801dd8a:	4558      	cmp	r0, fp
 801dd8c:	d24e      	bcs.n	801de2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801dd8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dd92:	b12b      	cbz	r3, 801dda0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801dd94:	2bff      	cmp	r3, #255	; 0xff
 801dd96:	f8b4 e000 	ldrh.w	lr, [r4]
 801dd9a:	d104      	bne.n	801dda6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801dd9c:	f8a0 e000 	strh.w	lr, [r0]
 801dda0:	3002      	adds	r0, #2
 801dda2:	3402      	adds	r4, #2
 801dda4:	e7f1      	b.n	801dd8a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801dda6:	8802      	ldrh	r2, [r0, #0]
 801dda8:	b29f      	uxth	r7, r3
 801ddaa:	1216      	asrs	r6, r2, #8
 801ddac:	43db      	mvns	r3, r3
 801ddae:	b2db      	uxtb	r3, r3
 801ddb0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ddb4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ddb8:	fb16 f603 	smulbb	r6, r6, r3
 801ddbc:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801ddc0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ddc4:	00d2      	lsls	r2, r2, #3
 801ddc6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ddca:	b2d2      	uxtb	r2, r2
 801ddcc:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ddd0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ddd4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ddd8:	fb1a fa03 	smulbb	sl, sl, r3
 801dddc:	fa1f fc8c 	uxth.w	ip, ip
 801dde0:	fb12 f303 	smulbb	r3, r2, r3
 801dde4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801dde8:	fa5f fe8e 	uxtb.w	lr, lr
 801ddec:	fb06 a607 	mla	r6, r6, r7, sl
 801ddf0:	f10c 0201 	add.w	r2, ip, #1
 801ddf4:	fb0e 3307 	mla	r3, lr, r7, r3
 801ddf8:	b2b6      	uxth	r6, r6
 801ddfa:	b29b      	uxth	r3, r3
 801ddfc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801de00:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801de04:	f106 0a01 	add.w	sl, r6, #1
 801de08:	f103 0c01 	add.w	ip, r3, #1
 801de0c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801de10:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801de14:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801de18:	0976      	lsrs	r6, r6, #5
 801de1a:	ea4c 0c02 	orr.w	ip, ip, r2
 801de1e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801de22:	ea4c 0c06 	orr.w	ip, ip, r6
 801de26:	f8a0 c000 	strh.w	ip, [r0]
 801de2a:	e7b9      	b.n	801dda0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801de2c:	f8b9 3000 	ldrh.w	r3, [r9]
 801de30:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801de34:	eba3 0308 	sub.w	r3, r3, r8
 801de38:	eba6 0608 	sub.w	r6, r6, r8
 801de3c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801de40:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801de44:	440e      	add	r6, r1
 801de46:	e79a      	b.n	801dd7e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801de48:	4b03      	ldr	r3, [pc, #12]	; (801de58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801de4a:	6818      	ldr	r0, [r3, #0]
 801de4c:	6803      	ldr	r3, [r0, #0]
 801de4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801de50:	4798      	blx	r3
 801de52:	b007      	add	sp, #28
 801de54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de58:	20014610 	.word	0x20014610
 801de5c:	2001460a 	.word	0x2001460a

0801de60 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801de60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de64:	b089      	sub	sp, #36	; 0x24
 801de66:	4682      	mov	sl, r0
 801de68:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801de6c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801de6e:	460f      	mov	r7, r1
 801de70:	4691      	mov	r9, r2
 801de72:	4698      	mov	r8, r3
 801de74:	2e00      	cmp	r6, #0
 801de76:	d03d      	beq.n	801def4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801de78:	4608      	mov	r0, r1
 801de7a:	f7fa fe59 	bl	8018b30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801de7e:	4605      	mov	r5, r0
 801de80:	4638      	mov	r0, r7
 801de82:	f7fa fe89 	bl	8018b98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801de86:	f8ad 000e 	strh.w	r0, [sp, #14]
 801de8a:	4638      	mov	r0, r7
 801de8c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801de90:	f8ad 500c 	strh.w	r5, [sp, #12]
 801de94:	f8ad 800a 	strh.w	r8, [sp, #10]
 801de98:	f7fa ff36 	bl	8018d08 <_ZNK8touchgfx6Bitmap7getDataEv>
 801de9c:	4605      	mov	r5, r0
 801de9e:	4638      	mov	r0, r7
 801dea0:	f7fa ff62 	bl	8018d68 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801dea4:	4681      	mov	r9, r0
 801dea6:	4638      	mov	r0, r7
 801dea8:	f7fa ffb2 	bl	8018e10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801deac:	280b      	cmp	r0, #11
 801deae:	d821      	bhi.n	801def4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801deb0:	e8df f000 	tbb	[pc, r0]
 801deb4:	2006aebe 	.word	0x2006aebe
 801deb8:	20202020 	.word	0x20202020
 801debc:	b5202020 	.word	0xb5202020
 801dec0:	4bb0      	ldr	r3, [pc, #704]	; (801e184 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801dec2:	6818      	ldr	r0, [r3, #0]
 801dec4:	6803      	ldr	r3, [r0, #0]
 801dec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dec8:	4798      	blx	r3
 801deca:	2eff      	cmp	r6, #255	; 0xff
 801decc:	d101      	bne.n	801ded2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 801dece:	0683      	lsls	r3, r0, #26
 801ded0:	d506      	bpl.n	801dee0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 801ded2:	4633      	mov	r3, r6
 801ded4:	4622      	mov	r2, r4
 801ded6:	a902      	add	r1, sp, #8
 801ded8:	4628      	mov	r0, r5
 801deda:	f7ff f909 	bl	801d0f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dede:	e009      	b.n	801def4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dee0:	4638      	mov	r0, r7
 801dee2:	f7fa fed9 	bl	8018c98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801dee6:	b940      	cbnz	r0, 801defa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 801dee8:	4623      	mov	r3, r4
 801deea:	aa02      	add	r2, sp, #8
 801deec:	4629      	mov	r1, r5
 801deee:	4650      	mov	r0, sl
 801def0:	f7ff f9e4 	bl	801d2bc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801def4:	b009      	add	sp, #36	; 0x24
 801def6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801defa:	f10d 0818 	add.w	r8, sp, #24
 801defe:	4639      	mov	r1, r7
 801df00:	4640      	mov	r0, r8
 801df02:	f7fa fe7d 	bl	8018c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801df06:	e898 0003 	ldmia.w	r8, {r0, r1}
 801df0a:	af04      	add	r7, sp, #16
 801df0c:	e887 0003 	stmia.w	r7, {r0, r1}
 801df10:	4638      	mov	r0, r7
 801df12:	4621      	mov	r1, r4
 801df14:	f7f1 ff6c 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 801df18:	4638      	mov	r0, r7
 801df1a:	f7f1 ffac 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 801df1e:	2800      	cmp	r0, #0
 801df20:	d1d7      	bne.n	801ded2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 801df22:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801df26:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801df2a:	4293      	cmp	r3, r2
 801df2c:	dd12      	ble.n	801df54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 801df2e:	1a9b      	subs	r3, r3, r2
 801df30:	f9b4 0000 	ldrsh.w	r0, [r4]
 801df34:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801df38:	f8ad 0018 	strh.w	r0, [sp, #24]
 801df3c:	f8ad 201a 	strh.w	r2, [sp, #26]
 801df40:	f8ad 101c 	strh.w	r1, [sp, #28]
 801df44:	f8ad 301e 	strh.w	r3, [sp, #30]
 801df48:	4642      	mov	r2, r8
 801df4a:	4633      	mov	r3, r6
 801df4c:	a902      	add	r1, sp, #8
 801df4e:	4628      	mov	r0, r5
 801df50:	f7ff f8ce 	bl	801d0f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801df54:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801df58:	f9b4 2000 	ldrsh.w	r2, [r4]
 801df5c:	4293      	cmp	r3, r2
 801df5e:	dd12      	ble.n	801df86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 801df60:	1a9b      	subs	r3, r3, r2
 801df62:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801df66:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801df6a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801df6e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801df72:	f8ad 301c 	strh.w	r3, [sp, #28]
 801df76:	f8ad 101e 	strh.w	r1, [sp, #30]
 801df7a:	23ff      	movs	r3, #255	; 0xff
 801df7c:	4642      	mov	r2, r8
 801df7e:	a902      	add	r1, sp, #8
 801df80:	4628      	mov	r0, r5
 801df82:	f7ff f8b5 	bl	801d0f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801df86:	463b      	mov	r3, r7
 801df88:	aa02      	add	r2, sp, #8
 801df8a:	4629      	mov	r1, r5
 801df8c:	4650      	mov	r0, sl
 801df8e:	f7ff f995 	bl	801d2bc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801df92:	88a2      	ldrh	r2, [r4, #4]
 801df94:	8823      	ldrh	r3, [r4, #0]
 801df96:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801df9a:	4413      	add	r3, r2
 801df9c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dfa0:	440a      	add	r2, r1
 801dfa2:	b29b      	uxth	r3, r3
 801dfa4:	b292      	uxth	r2, r2
 801dfa6:	b211      	sxth	r1, r2
 801dfa8:	b218      	sxth	r0, r3
 801dfaa:	4288      	cmp	r0, r1
 801dfac:	dd12      	ble.n	801dfd4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801dfae:	1a9b      	subs	r3, r3, r2
 801dfb0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801dfb4:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801dfb8:	f8ad 1018 	strh.w	r1, [sp, #24]
 801dfbc:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dfc0:	f8ad 001e 	strh.w	r0, [sp, #30]
 801dfc4:	23ff      	movs	r3, #255	; 0xff
 801dfc6:	4642      	mov	r2, r8
 801dfc8:	a902      	add	r1, sp, #8
 801dfca:	4628      	mov	r0, r5
 801dfcc:	f8ad 601a 	strh.w	r6, [sp, #26]
 801dfd0:	f7ff f88e 	bl	801d0f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dfd4:	88e2      	ldrh	r2, [r4, #6]
 801dfd6:	8863      	ldrh	r3, [r4, #2]
 801dfd8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801dfdc:	4413      	add	r3, r2
 801dfde:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801dfe2:	440a      	add	r2, r1
 801dfe4:	b29b      	uxth	r3, r3
 801dfe6:	b292      	uxth	r2, r2
 801dfe8:	b211      	sxth	r1, r2
 801dfea:	b218      	sxth	r0, r3
 801dfec:	4288      	cmp	r0, r1
 801dfee:	dd81      	ble.n	801def4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801dff0:	1a9b      	subs	r3, r3, r2
 801dff2:	f9b4 6000 	ldrsh.w	r6, [r4]
 801dff6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801dffa:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dffe:	f8ad 6018 	strh.w	r6, [sp, #24]
 801e002:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e006:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e00a:	23ff      	movs	r3, #255	; 0xff
 801e00c:	4642      	mov	r2, r8
 801e00e:	e762      	b.n	801ded6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e010:	4633      	mov	r3, r6
 801e012:	4622      	mov	r2, r4
 801e014:	a902      	add	r1, sp, #8
 801e016:	4628      	mov	r0, r5
 801e018:	f7ff f9c0 	bl	801d39c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801e01c:	e76a      	b.n	801def4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e01e:	e9cd 4600 	strd	r4, r6, [sp]
 801e022:	ab02      	add	r3, sp, #8
 801e024:	464a      	mov	r2, r9
 801e026:	4629      	mov	r1, r5
 801e028:	4650      	mov	r0, sl
 801e02a:	f7ff fd97 	bl	801db5c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e02e:	e761      	b.n	801def4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e030:	4638      	mov	r0, r7
 801e032:	f7fa fe31 	bl	8018c98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801e036:	b950      	cbnz	r0, 801e04e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 801e038:	e9cd 6000 	strd	r6, r0, [sp]
 801e03c:	f8da 3000 	ldr.w	r3, [sl]
 801e040:	aa02      	add	r2, sp, #8
 801e042:	68de      	ldr	r6, [r3, #12]
 801e044:	4629      	mov	r1, r5
 801e046:	4623      	mov	r3, r4
 801e048:	4650      	mov	r0, sl
 801e04a:	47b0      	blx	r6
 801e04c:	e752      	b.n	801def4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e04e:	f10d 0818 	add.w	r8, sp, #24
 801e052:	4639      	mov	r1, r7
 801e054:	4640      	mov	r0, r8
 801e056:	f7fa fdd3 	bl	8018c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801e05a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801e05e:	af04      	add	r7, sp, #16
 801e060:	e887 0003 	stmia.w	r7, {r0, r1}
 801e064:	4638      	mov	r0, r7
 801e066:	4621      	mov	r1, r4
 801e068:	f7f1 fec2 	bl	800fdf0 <_ZN8touchgfx4RectaNERKS0_>
 801e06c:	4638      	mov	r0, r7
 801e06e:	f7f1 ff02 	bl	800fe76 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e072:	b138      	cbz	r0, 801e084 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 801e074:	9600      	str	r6, [sp, #0]
 801e076:	4623      	mov	r3, r4
 801e078:	aa02      	add	r2, sp, #8
 801e07a:	4649      	mov	r1, r9
 801e07c:	4628      	mov	r0, r5
 801e07e:	f7ff fdc9 	bl	801dc14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e082:	e737      	b.n	801def4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e084:	e9cd 6000 	strd	r6, r0, [sp]
 801e088:	f8da 3000 	ldr.w	r3, [sl]
 801e08c:	aa02      	add	r2, sp, #8
 801e08e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801e092:	4629      	mov	r1, r5
 801e094:	463b      	mov	r3, r7
 801e096:	4650      	mov	r0, sl
 801e098:	47d8      	blx	fp
 801e09a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e09e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e0a2:	4293      	cmp	r3, r2
 801e0a4:	dd13      	ble.n	801e0ce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 801e0a6:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e0aa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e0ae:	f8ad 0018 	strh.w	r0, [sp, #24]
 801e0b2:	1a9b      	subs	r3, r3, r2
 801e0b4:	f8ad 201a 	strh.w	r2, [sp, #26]
 801e0b8:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e0bc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e0c0:	9600      	str	r6, [sp, #0]
 801e0c2:	4643      	mov	r3, r8
 801e0c4:	aa02      	add	r2, sp, #8
 801e0c6:	4649      	mov	r1, r9
 801e0c8:	4628      	mov	r0, r5
 801e0ca:	f7ff fda3 	bl	801dc14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e0ce:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801e0d2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e0d6:	4293      	cmp	r3, r2
 801e0d8:	dd13      	ble.n	801e102 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 801e0da:	1a9b      	subs	r3, r3, r2
 801e0dc:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801e0e0:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801e0e4:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e0e8:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e0ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e0f0:	f8ad 101e 	strh.w	r1, [sp, #30]
 801e0f4:	9600      	str	r6, [sp, #0]
 801e0f6:	4643      	mov	r3, r8
 801e0f8:	aa02      	add	r2, sp, #8
 801e0fa:	4649      	mov	r1, r9
 801e0fc:	4628      	mov	r0, r5
 801e0fe:	f7ff fd89 	bl	801dc14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e102:	88a2      	ldrh	r2, [r4, #4]
 801e104:	8823      	ldrh	r3, [r4, #0]
 801e106:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e10a:	4413      	add	r3, r2
 801e10c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e110:	440a      	add	r2, r1
 801e112:	b29b      	uxth	r3, r3
 801e114:	b292      	uxth	r2, r2
 801e116:	b211      	sxth	r1, r2
 801e118:	b218      	sxth	r0, r3
 801e11a:	4288      	cmp	r0, r1
 801e11c:	dd13      	ble.n	801e146 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 801e11e:	1a9b      	subs	r3, r3, r2
 801e120:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801e124:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801e128:	f8ad 1018 	strh.w	r1, [sp, #24]
 801e12c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e130:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e134:	9600      	str	r6, [sp, #0]
 801e136:	4643      	mov	r3, r8
 801e138:	aa02      	add	r2, sp, #8
 801e13a:	4649      	mov	r1, r9
 801e13c:	4628      	mov	r0, r5
 801e13e:	f8ad 701a 	strh.w	r7, [sp, #26]
 801e142:	f7ff fd67 	bl	801dc14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e146:	88e2      	ldrh	r2, [r4, #6]
 801e148:	8863      	ldrh	r3, [r4, #2]
 801e14a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801e14e:	4413      	add	r3, r2
 801e150:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e154:	440a      	add	r2, r1
 801e156:	b29b      	uxth	r3, r3
 801e158:	b292      	uxth	r2, r2
 801e15a:	b211      	sxth	r1, r2
 801e15c:	b218      	sxth	r0, r3
 801e15e:	4288      	cmp	r0, r1
 801e160:	f77f aec8 	ble.w	801def4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801e164:	f9b4 7000 	ldrsh.w	r7, [r4]
 801e168:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e16c:	f8ad 7018 	strh.w	r7, [sp, #24]
 801e170:	1a9b      	subs	r3, r3, r2
 801e172:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e176:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e17a:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e17e:	9600      	str	r6, [sp, #0]
 801e180:	4643      	mov	r3, r8
 801e182:	e779      	b.n	801e078 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 801e184:	20014610 	.word	0x20014610

0801e188 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801e188:	b180      	cbz	r0, 801e1ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801e18a:	2903      	cmp	r1, #3
 801e18c:	d81c      	bhi.n	801e1c8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801e18e:	e8df f001 	tbb	[pc, r1]
 801e192:	1d02      	.short	0x1d02
 801e194:	1f08      	.short	0x1f08
 801e196:	4b10      	ldr	r3, [pc, #64]	; (801e1d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e198:	8818      	ldrh	r0, [r3, #0]
 801e19a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e19e:	4240      	negs	r0, r0
 801e1a0:	4770      	bx	lr
 801e1a2:	4b0d      	ldr	r3, [pc, #52]	; (801e1d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e1a4:	8818      	ldrh	r0, [r3, #0]
 801e1a6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e1aa:	4770      	bx	lr
 801e1ac:	2903      	cmp	r1, #3
 801e1ae:	d80b      	bhi.n	801e1c8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801e1b0:	a301      	add	r3, pc, #4	; (adr r3, 801e1b8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801e1b2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e1b6:	bf00      	nop
 801e1b8:	0801e1cd 	.word	0x0801e1cd
 801e1bc:	0801e1a3 	.word	0x0801e1a3
 801e1c0:	0801e1d1 	.word	0x0801e1d1
 801e1c4:	0801e197 	.word	0x0801e197
 801e1c8:	2000      	movs	r0, #0
 801e1ca:	4770      	bx	lr
 801e1cc:	2001      	movs	r0, #1
 801e1ce:	4770      	bx	lr
 801e1d0:	f04f 30ff 	mov.w	r0, #4294967295
 801e1d4:	4770      	bx	lr
 801e1d6:	bf00      	nop
 801e1d8:	2001460a 	.word	0x2001460a

0801e1dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801e1dc:	b180      	cbz	r0, 801e200 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801e1de:	2903      	cmp	r1, #3
 801e1e0:	d81c      	bhi.n	801e21c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801e1e2:	e8df f001 	tbb	[pc, r1]
 801e1e6:	021d      	.short	0x021d
 801e1e8:	071f      	.short	0x071f
 801e1ea:	4b10      	ldr	r3, [pc, #64]	; (801e22c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e1ec:	8818      	ldrh	r0, [r3, #0]
 801e1ee:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e1f2:	4770      	bx	lr
 801e1f4:	4b0d      	ldr	r3, [pc, #52]	; (801e22c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e1f6:	8818      	ldrh	r0, [r3, #0]
 801e1f8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e1fc:	4240      	negs	r0, r0
 801e1fe:	4770      	bx	lr
 801e200:	2903      	cmp	r1, #3
 801e202:	d80b      	bhi.n	801e21c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801e204:	a301      	add	r3, pc, #4	; (adr r3, 801e20c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801e206:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e20a:	bf00      	nop
 801e20c:	0801e1eb 	.word	0x0801e1eb
 801e210:	0801e225 	.word	0x0801e225
 801e214:	0801e1f5 	.word	0x0801e1f5
 801e218:	0801e221 	.word	0x0801e221
 801e21c:	2000      	movs	r0, #0
 801e21e:	4770      	bx	lr
 801e220:	2001      	movs	r0, #1
 801e222:	4770      	bx	lr
 801e224:	f04f 30ff 	mov.w	r0, #4294967295
 801e228:	4770      	bx	lr
 801e22a:	bf00      	nop
 801e22c:	2001460a 	.word	0x2001460a

0801e230 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e234:	b099      	sub	sp, #100	; 0x64
 801e236:	910b      	str	r1, [sp, #44]	; 0x2c
 801e238:	a914      	add	r1, sp, #80	; 0x50
 801e23a:	e881 000c 	stmia.w	r1, {r2, r3}
 801e23e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801e242:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801e246:	f891 900d 	ldrb.w	r9, [r1, #13]
 801e24a:	9309      	str	r3, [sp, #36]	; 0x24
 801e24c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801e250:	9310      	str	r3, [sp, #64]	; 0x40
 801e252:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801e256:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801e25a:	930c      	str	r3, [sp, #48]	; 0x30
 801e25c:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801e260:	798f      	ldrb	r7, [r1, #6]
 801e262:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801e266:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801e26a:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801e26e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801e272:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801e276:	431f      	orrs	r7, r3
 801e278:	f000 8195 	beq.w	801e5a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e27c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801e280:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801e284:	f891 9007 	ldrb.w	r9, [r1, #7]
 801e288:	ea59 0903 	orrs.w	r9, r9, r3
 801e28c:	f000 818b 	beq.w	801e5a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e290:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e294:	b29b      	uxth	r3, r3
 801e296:	2d00      	cmp	r5, #0
 801e298:	f000 812e 	beq.w	801e4f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801e29c:	1aed      	subs	r5, r5, r3
 801e29e:	b2ad      	uxth	r5, r5
 801e2a0:	042b      	lsls	r3, r5, #16
 801e2a2:	d502      	bpl.n	801e2aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801e2a4:	1b64      	subs	r4, r4, r5
 801e2a6:	b224      	sxth	r4, r4
 801e2a8:	2500      	movs	r5, #0
 801e2aa:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e2ae:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801e2b2:	428c      	cmp	r4, r1
 801e2b4:	b28b      	uxth	r3, r1
 801e2b6:	bfbf      	itttt	lt
 801e2b8:	18ed      	addlt	r5, r5, r3
 801e2ba:	1b2c      	sublt	r4, r5, r4
 801e2bc:	b2a5      	uxthlt	r5, r4
 801e2be:	460c      	movlt	r4, r1
 801e2c0:	8891      	ldrh	r1, [r2, #4]
 801e2c2:	440b      	add	r3, r1
 801e2c4:	b21b      	sxth	r3, r3
 801e2c6:	930f      	str	r3, [sp, #60]	; 0x3c
 801e2c8:	88d3      	ldrh	r3, [r2, #6]
 801e2ca:	8852      	ldrh	r2, [r2, #2]
 801e2cc:	4413      	add	r3, r2
 801e2ce:	b21b      	sxth	r3, r3
 801e2d0:	930d      	str	r3, [sp, #52]	; 0x34
 801e2d2:	4bbe      	ldr	r3, [pc, #760]	; (801e5cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801e2d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e2d6:	f893 b000 	ldrb.w	fp, [r3]
 801e2da:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e2de:	f1dc 0300 	rsbs	r3, ip, #0
 801e2e2:	eb43 030c 	adc.w	r3, r3, ip
 801e2e6:	930e      	str	r3, [sp, #56]	; 0x38
 801e2e8:	4621      	mov	r1, r4
 801e2ea:	4653      	mov	r3, sl
 801e2ec:	a814      	add	r0, sp, #80	; 0x50
 801e2ee:	f7f6 ff94 	bl	801521a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e2f2:	4621      	mov	r1, r4
 801e2f4:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801e2f8:	4653      	mov	r3, sl
 801e2fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e2fc:	a814      	add	r0, sp, #80	; 0x50
 801e2fe:	f7f6 ffa9 	bl	8015254 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e302:	a918      	add	r1, sp, #96	; 0x60
 801e304:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e308:	a817      	add	r0, sp, #92	; 0x5c
 801e30a:	f7f7 f8cf 	bl	80154ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e30e:	f1ba 0f00 	cmp.w	sl, #0
 801e312:	f040 80f4 	bne.w	801e4fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801e316:	f1bb 0f01 	cmp.w	fp, #1
 801e31a:	f040 80f8 	bne.w	801e50e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801e31e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e320:	2b00      	cmp	r3, #0
 801e322:	f040 8145 	bne.w	801e5b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801e326:	b2ba      	uxth	r2, r7
 801e328:	b905      	cbnz	r5, 801e32c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801e32a:	b16e      	cbz	r6, 801e348 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801e32c:	fb06 5302 	mla	r3, r6, r2, r5
 801e330:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801e332:	fb08 f303 	mul.w	r3, r8, r3
 801e336:	4631      	mov	r1, r6
 801e338:	f003 0607 	and.w	r6, r3, #7
 801e33c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801e340:	9328      	str	r3, [sp, #160]	; 0xa0
 801e342:	eba9 0301 	sub.w	r3, r9, r1
 801e346:	930a      	str	r3, [sp, #40]	; 0x28
 801e348:	4651      	mov	r1, sl
 801e34a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e34c:	f7ff ff1c 	bl	801e188 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801e350:	4681      	mov	r9, r0
 801e352:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e354:	f7ff ff42 	bl	801e1dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801e358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e35a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e35c:	eba3 0a01 	sub.w	sl, r3, r1
 801e360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e362:	459a      	cmp	sl, r3
 801e364:	bfa8      	it	ge
 801e366:	469a      	movge	sl, r3
 801e368:	f1ba 0f00 	cmp.w	sl, #0
 801e36c:	4683      	mov	fp, r0
 801e36e:	f340 811a 	ble.w	801e5a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e374:	1b64      	subs	r4, r4, r5
 801e376:	1b1c      	subs	r4, r3, r4
 801e378:	42bc      	cmp	r4, r7
 801e37a:	bfd4      	ite	le
 801e37c:	ebc5 0504 	rsble	r5, r5, r4
 801e380:	ebc5 0507 	rsbgt	r5, r5, r7
 801e384:	2d00      	cmp	r5, #0
 801e386:	f340 810e 	ble.w	801e5a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e38a:	1b52      	subs	r2, r2, r5
 801e38c:	fb08 f302 	mul.w	r3, r8, r2
 801e390:	930f      	str	r3, [sp, #60]	; 0x3c
 801e392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e394:	2b00      	cmp	r3, #0
 801e396:	f040 8116 	bne.w	801e5c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801e39a:	4b8d      	ldr	r3, [pc, #564]	; (801e5d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801e39c:	6818      	ldr	r0, [r3, #0]
 801e39e:	6803      	ldr	r3, [r0, #0]
 801e3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3a2:	4798      	blx	r3
 801e3a4:	2301      	movs	r3, #1
 801e3a6:	fa03 f308 	lsl.w	r3, r3, r8
 801e3aa:	4a8a      	ldr	r2, [pc, #552]	; (801e5d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801e3ac:	3b01      	subs	r3, #1
 801e3ae:	b2db      	uxtb	r3, r3
 801e3b0:	8811      	ldrh	r1, [r2, #0]
 801e3b2:	930e      	str	r3, [sp, #56]	; 0x38
 801e3b4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e3b8:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801e3bc:	fb01 2303 	mla	r3, r1, r3, r2
 801e3c0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e3c4:	930a      	str	r3, [sp, #40]	; 0x28
 801e3c6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e3c8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e3cc:	9313      	str	r3, [sp, #76]	; 0x4c
 801e3ce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e3d0:	0a19      	lsrs	r1, r3, #8
 801e3d2:	b2cb      	uxtb	r3, r1
 801e3d4:	9312      	str	r3, [sp, #72]	; 0x48
 801e3d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e3d8:	b2db      	uxtb	r3, r3
 801e3da:	9311      	str	r3, [sp, #68]	; 0x44
 801e3dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e3de:	095a      	lsrs	r2, r3, #5
 801e3e0:	4b7d      	ldr	r3, [pc, #500]	; (801e5d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801e3e2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e3e6:	400b      	ands	r3, r1
 801e3e8:	4313      	orrs	r3, r2
 801e3ea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e3ec:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e3f0:	4313      	orrs	r3, r2
 801e3f2:	b29b      	uxth	r3, r3
 801e3f4:	9310      	str	r3, [sp, #64]	; 0x40
 801e3f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e3f8:	781a      	ldrb	r2, [r3, #0]
 801e3fa:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801e3fe:	4132      	asrs	r2, r6
 801e400:	fb05 b919 	mls	r9, r5, r9, fp
 801e404:	fb03 fb05 	mul.w	fp, r3, r5
 801e408:	b2d2      	uxtb	r2, r2
 801e40a:	930d      	str	r3, [sp, #52]	; 0x34
 801e40c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801e410:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801e414:	f0c0 80f5 	bcc.w	801e602 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801e418:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801e41c:	46ae      	mov	lr, r5
 801e41e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801e422:	f0c0 80dd 	bcc.w	801e5e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801e426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e428:	4013      	ands	r3, r2
 801e42a:	d055      	beq.n	801e4d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801e42c:	20ff      	movs	r0, #255	; 0xff
 801e42e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e430:	fb90 f1f1 	sdiv	r1, r0, r1
 801e434:	434b      	muls	r3, r1
 801e436:	2bfe      	cmp	r3, #254	; 0xfe
 801e438:	dd03      	ble.n	801e442 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801e43a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e43c:	4281      	cmp	r1, r0
 801e43e:	f000 80cd 	beq.w	801e5dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801e442:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e444:	f8bc 4000 	ldrh.w	r4, [ip]
 801e448:	fb11 f303 	smulbb	r3, r1, r3
 801e44c:	b29b      	uxth	r3, r3
 801e44e:	1c59      	adds	r1, r3, #1
 801e450:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801e454:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e458:	b29f      	uxth	r7, r3
 801e45a:	43db      	mvns	r3, r3
 801e45c:	b2db      	uxtb	r3, r3
 801e45e:	9309      	str	r3, [sp, #36]	; 0x24
 801e460:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e462:	1220      	asrs	r0, r4, #8
 801e464:	fb13 f907 	smulbb	r9, r3, r7
 801e468:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e46e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e472:	fb00 9003 	mla	r0, r0, r3, r9
 801e476:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e478:	10e1      	asrs	r1, r4, #3
 801e47a:	fb13 f907 	smulbb	r9, r3, r7
 801e47e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e484:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801e488:	fb01 9103 	mla	r1, r1, r3, r9
 801e48c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e48e:	00e4      	lsls	r4, r4, #3
 801e490:	fb13 f707 	smulbb	r7, r3, r7
 801e494:	b2e4      	uxtb	r4, r4
 801e496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e498:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e49c:	fb04 7403 	mla	r4, r4, r3, r7
 801e4a0:	b280      	uxth	r0, r0
 801e4a2:	b2a4      	uxth	r4, r4
 801e4a4:	1c43      	adds	r3, r0, #1
 801e4a6:	f104 0901 	add.w	r9, r4, #1
 801e4aa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e4ae:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801e4b2:	b289      	uxth	r1, r1
 801e4b4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801e4b8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e4bc:	ea49 0000 	orr.w	r0, r9, r0
 801e4c0:	f101 0901 	add.w	r9, r1, #1
 801e4c4:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801e4c8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e4cc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e4d0:	ea40 0009 	orr.w	r0, r0, r9
 801e4d4:	f8ac 0000 	strh.w	r0, [ip]
 801e4d8:	4446      	add	r6, r8
 801e4da:	b2b6      	uxth	r6, r6
 801e4dc:	2e07      	cmp	r6, #7
 801e4de:	bf81      	itttt	hi
 801e4e0:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801e4e2:	785a      	ldrbhi	r2, [r3, #1]
 801e4e4:	3301      	addhi	r3, #1
 801e4e6:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801e4e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e4ea:	bf9a      	itte	ls
 801e4ec:	fa42 f208 	asrls.w	r2, r2, r8
 801e4f0:	b2d2      	uxtbls	r2, r2
 801e4f2:	2600      	movhi	r6, #0
 801e4f4:	449c      	add	ip, r3
 801e4f6:	e792      	b.n	801e41e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801e4f8:	441c      	add	r4, r3
 801e4fa:	b224      	sxth	r4, r4
 801e4fc:	e6d5      	b.n	801e2aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801e4fe:	f1ba 0f01 	cmp.w	sl, #1
 801e502:	f47f af0c 	bne.w	801e31e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e506:	f1bb 0f01 	cmp.w	fp, #1
 801e50a:	f47f af08 	bne.w	801e31e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e50e:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 801e5d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801e512:	f8db 0000 	ldr.w	r0, [fp]
 801e516:	6803      	ldr	r3, [r0, #0]
 801e518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e51a:	4798      	blx	r3
 801e51c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801e520:	465a      	mov	r2, fp
 801e522:	d006      	beq.n	801e532 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801e524:	f1b8 0f04 	cmp.w	r8, #4
 801e528:	d140      	bne.n	801e5ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801e52a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e52c:	3300      	adds	r3, #0
 801e52e:	bf18      	it	ne
 801e530:	2301      	movne	r3, #1
 801e532:	0580      	lsls	r0, r0, #22
 801e534:	d56e      	bpl.n	801e614 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801e536:	f1b8 0f08 	cmp.w	r8, #8
 801e53a:	d16b      	bne.n	801e614 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	bf0c      	ite	eq
 801e540:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801e544:	f44f 7180 	movne.w	r1, #256	; 0x100
 801e548:	2d00      	cmp	r5, #0
 801e54a:	f47f aee8 	bne.w	801e31e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e54e:	2e00      	cmp	r6, #0
 801e550:	f47f aee5 	bne.w	801e31e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e554:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e556:	19e3      	adds	r3, r4, r7
 801e558:	4283      	cmp	r3, r0
 801e55a:	f73f aee0 	bgt.w	801e31e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e560:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e562:	444b      	add	r3, r9
 801e564:	4283      	cmp	r3, r0
 801e566:	f73f aeda 	bgt.w	801e31e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e56a:	6810      	ldr	r0, [r2, #0]
 801e56c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801e570:	6804      	ldr	r4, [r0, #0]
 801e572:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801e576:	b2bf      	uxth	r7, r7
 801e578:	f1b8 0f08 	cmp.w	r8, #8
 801e57c:	f04f 0500 	mov.w	r5, #0
 801e580:	bf18      	it	ne
 801e582:	3701      	addne	r7, #1
 801e584:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801e588:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e58a:	9104      	str	r1, [sp, #16]
 801e58c:	bf18      	it	ne
 801e58e:	f027 0701 	bicne.w	r7, r7, #1
 801e592:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e594:	bf18      	it	ne
 801e596:	b2bf      	uxthne	r7, r7
 801e598:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801e59c:	e9cd 7900 	strd	r7, r9, [sp]
 801e5a0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e5a2:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801e5a4:	47a0      	blx	r4
 801e5a6:	b019      	add	sp, #100	; 0x64
 801e5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5ac:	2300      	movs	r3, #0
 801e5ae:	e7c0      	b.n	801e532 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801e5b0:	2208      	movs	r2, #8
 801e5b2:	fb92 f3f8 	sdiv	r3, r2, r8
 801e5b6:	1e5a      	subs	r2, r3, #1
 801e5b8:	443a      	add	r2, r7
 801e5ba:	fb92 f2f3 	sdiv	r2, r2, r3
 801e5be:	fb12 f203 	smulbb	r2, r2, r3
 801e5c2:	b292      	uxth	r2, r2
 801e5c4:	e6b0      	b.n	801e328 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801e5c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e5c8:	e6ec      	b.n	801e3a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801e5ca:	bf00      	nop
 801e5cc:	20014608 	.word	0x20014608
 801e5d0:	20014610 	.word	0x20014610
 801e5d4:	2001460a 	.word	0x2001460a
 801e5d8:	00fff800 	.word	0x00fff800
 801e5dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e5de:	e779      	b.n	801e4d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801e5e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e5e2:	b153      	cbz	r3, 801e5fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801e5e4:	441e      	add	r6, r3
 801e5e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e5e8:	b2b6      	uxth	r6, r6
 801e5ea:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801e5ee:	f006 0607 	and.w	r6, r6, #7
 801e5f2:	781a      	ldrb	r2, [r3, #0]
 801e5f4:	9328      	str	r3, [sp, #160]	; 0xa0
 801e5f6:	4132      	asrs	r2, r6
 801e5f8:	b2d2      	uxtb	r2, r2
 801e5fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5fc:	445b      	add	r3, fp
 801e5fe:	930a      	str	r3, [sp, #40]	; 0x28
 801e600:	e706      	b.n	801e410 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801e602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e604:	2b00      	cmp	r3, #0
 801e606:	d1ce      	bne.n	801e5a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e608:	4b05      	ldr	r3, [pc, #20]	; (801e620 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801e60a:	6818      	ldr	r0, [r3, #0]
 801e60c:	6803      	ldr	r3, [r0, #0]
 801e60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e610:	4798      	blx	r3
 801e612:	e7c8      	b.n	801e5a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801e614:	2b00      	cmp	r3, #0
 801e616:	f43f ae82 	beq.w	801e31e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e61a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e61e:	e793      	b.n	801e548 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801e620:	20014610 	.word	0x20014610

0801e624 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801e624:	b538      	push	{r3, r4, r5, lr}
 801e626:	4c15      	ldr	r4, [pc, #84]	; (801e67c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801e628:	7823      	ldrb	r3, [r4, #0]
 801e62a:	f3bf 8f5b 	dmb	ish
 801e62e:	07da      	lsls	r2, r3, #31
 801e630:	4605      	mov	r5, r0
 801e632:	d40b      	bmi.n	801e64c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801e634:	4620      	mov	r0, r4
 801e636:	f008 f9e0 	bl	80269fa <__cxa_guard_acquire>
 801e63a:	b138      	cbz	r0, 801e64c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801e63c:	4620      	mov	r0, r4
 801e63e:	f008 f9e8 	bl	8026a12 <__cxa_guard_release>
 801e642:	4a0f      	ldr	r2, [pc, #60]	; (801e680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e644:	490f      	ldr	r1, [pc, #60]	; (801e684 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801e646:	4810      	ldr	r0, [pc, #64]	; (801e688 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e648:	f008 f9d0 	bl	80269ec <__aeabi_atexit>
 801e64c:	4c0f      	ldr	r4, [pc, #60]	; (801e68c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801e64e:	7823      	ldrb	r3, [r4, #0]
 801e650:	f3bf 8f5b 	dmb	ish
 801e654:	07db      	lsls	r3, r3, #31
 801e656:	d40b      	bmi.n	801e670 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801e658:	4620      	mov	r0, r4
 801e65a:	f008 f9ce 	bl	80269fa <__cxa_guard_acquire>
 801e65e:	b138      	cbz	r0, 801e670 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801e660:	4620      	mov	r0, r4
 801e662:	f008 f9d6 	bl	8026a12 <__cxa_guard_release>
 801e666:	4a06      	ldr	r2, [pc, #24]	; (801e680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e668:	4909      	ldr	r1, [pc, #36]	; (801e690 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801e66a:	480a      	ldr	r0, [pc, #40]	; (801e694 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801e66c:	f008 f9be 	bl	80269ec <__aeabi_atexit>
 801e670:	4b05      	ldr	r3, [pc, #20]	; (801e688 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e672:	612b      	str	r3, [r5, #16]
 801e674:	4b07      	ldr	r3, [pc, #28]	; (801e694 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801e676:	616b      	str	r3, [r5, #20]
 801e678:	bd38      	pop	{r3, r4, r5, pc}
 801e67a:	bf00      	nop
 801e67c:	200146f0 	.word	0x200146f0
 801e680:	20000000 	.word	0x20000000
 801e684:	0801b427 	.word	0x0801b427
 801e688:	200000dc 	.word	0x200000dc
 801e68c:	200146f4 	.word	0x200146f4
 801e690:	0801b425 	.word	0x0801b425
 801e694:	200000e0 	.word	0x200000e0

0801e698 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801e698:	b538      	push	{r3, r4, r5, lr}
 801e69a:	4c15      	ldr	r4, [pc, #84]	; (801e6f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801e69c:	7823      	ldrb	r3, [r4, #0]
 801e69e:	f3bf 8f5b 	dmb	ish
 801e6a2:	07da      	lsls	r2, r3, #31
 801e6a4:	4605      	mov	r5, r0
 801e6a6:	d40b      	bmi.n	801e6c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801e6a8:	4620      	mov	r0, r4
 801e6aa:	f008 f9a6 	bl	80269fa <__cxa_guard_acquire>
 801e6ae:	b138      	cbz	r0, 801e6c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801e6b0:	4620      	mov	r0, r4
 801e6b2:	f008 f9ae 	bl	8026a12 <__cxa_guard_release>
 801e6b6:	4a0f      	ldr	r2, [pc, #60]	; (801e6f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e6b8:	490f      	ldr	r1, [pc, #60]	; (801e6f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801e6ba:	4810      	ldr	r0, [pc, #64]	; (801e6fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e6bc:	f008 f996 	bl	80269ec <__aeabi_atexit>
 801e6c0:	4c0f      	ldr	r4, [pc, #60]	; (801e700 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801e6c2:	7823      	ldrb	r3, [r4, #0]
 801e6c4:	f3bf 8f5b 	dmb	ish
 801e6c8:	07db      	lsls	r3, r3, #31
 801e6ca:	d40b      	bmi.n	801e6e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801e6cc:	4620      	mov	r0, r4
 801e6ce:	f008 f994 	bl	80269fa <__cxa_guard_acquire>
 801e6d2:	b138      	cbz	r0, 801e6e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801e6d4:	4620      	mov	r0, r4
 801e6d6:	f008 f99c 	bl	8026a12 <__cxa_guard_release>
 801e6da:	4a06      	ldr	r2, [pc, #24]	; (801e6f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e6dc:	4909      	ldr	r1, [pc, #36]	; (801e704 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801e6de:	480a      	ldr	r0, [pc, #40]	; (801e708 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801e6e0:	f008 f984 	bl	80269ec <__aeabi_atexit>
 801e6e4:	4b05      	ldr	r3, [pc, #20]	; (801e6fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e6e6:	60ab      	str	r3, [r5, #8]
 801e6e8:	4b07      	ldr	r3, [pc, #28]	; (801e708 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801e6ea:	60eb      	str	r3, [r5, #12]
 801e6ec:	bd38      	pop	{r3, r4, r5, pc}
 801e6ee:	bf00      	nop
 801e6f0:	200146c8 	.word	0x200146c8
 801e6f4:	20000000 	.word	0x20000000
 801e6f8:	0801b42b 	.word	0x0801b42b
 801e6fc:	200000b4 	.word	0x200000b4
 801e700:	200146cc 	.word	0x200146cc
 801e704:	0801b429 	.word	0x0801b429
 801e708:	200000b8 	.word	0x200000b8

0801e70c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801e70c:	b510      	push	{r4, lr}
 801e70e:	4604      	mov	r4, r0
 801e710:	f7ff ff88 	bl	801e624 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801e714:	4620      	mov	r0, r4
 801e716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e71a:	f7ff bfbd 	b.w	801e698 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801e720 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e720:	b538      	push	{r3, r4, r5, lr}
 801e722:	4c15      	ldr	r4, [pc, #84]	; (801e778 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e724:	7823      	ldrb	r3, [r4, #0]
 801e726:	f3bf 8f5b 	dmb	ish
 801e72a:	07da      	lsls	r2, r3, #31
 801e72c:	4605      	mov	r5, r0
 801e72e:	d40b      	bmi.n	801e748 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e730:	4620      	mov	r0, r4
 801e732:	f008 f962 	bl	80269fa <__cxa_guard_acquire>
 801e736:	b138      	cbz	r0, 801e748 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e738:	4620      	mov	r0, r4
 801e73a:	f008 f96a 	bl	8026a12 <__cxa_guard_release>
 801e73e:	4a0f      	ldr	r2, [pc, #60]	; (801e77c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e740:	490f      	ldr	r1, [pc, #60]	; (801e780 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e742:	4810      	ldr	r0, [pc, #64]	; (801e784 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e744:	f008 f952 	bl	80269ec <__aeabi_atexit>
 801e748:	4c0f      	ldr	r4, [pc, #60]	; (801e788 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e74a:	7823      	ldrb	r3, [r4, #0]
 801e74c:	f3bf 8f5b 	dmb	ish
 801e750:	07db      	lsls	r3, r3, #31
 801e752:	d40b      	bmi.n	801e76c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e754:	4620      	mov	r0, r4
 801e756:	f008 f950 	bl	80269fa <__cxa_guard_acquire>
 801e75a:	b138      	cbz	r0, 801e76c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e75c:	4620      	mov	r0, r4
 801e75e:	f008 f958 	bl	8026a12 <__cxa_guard_release>
 801e762:	4a06      	ldr	r2, [pc, #24]	; (801e77c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e764:	4909      	ldr	r1, [pc, #36]	; (801e78c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e766:	480a      	ldr	r0, [pc, #40]	; (801e790 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e768:	f008 f940 	bl	80269ec <__aeabi_atexit>
 801e76c:	4b05      	ldr	r3, [pc, #20]	; (801e784 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e76e:	622b      	str	r3, [r5, #32]
 801e770:	4b07      	ldr	r3, [pc, #28]	; (801e790 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e772:	626b      	str	r3, [r5, #36]	; 0x24
 801e774:	bd38      	pop	{r3, r4, r5, pc}
 801e776:	bf00      	nop
 801e778:	200146f8 	.word	0x200146f8
 801e77c:	20000000 	.word	0x20000000
 801e780:	0801b41f 	.word	0x0801b41f
 801e784:	200000e4 	.word	0x200000e4
 801e788:	200146fc 	.word	0x200146fc
 801e78c:	0801b41d 	.word	0x0801b41d
 801e790:	200000e8 	.word	0x200000e8

0801e794 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e794:	b538      	push	{r3, r4, r5, lr}
 801e796:	4c15      	ldr	r4, [pc, #84]	; (801e7ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e798:	7823      	ldrb	r3, [r4, #0]
 801e79a:	f3bf 8f5b 	dmb	ish
 801e79e:	07da      	lsls	r2, r3, #31
 801e7a0:	4605      	mov	r5, r0
 801e7a2:	d40b      	bmi.n	801e7bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e7a4:	4620      	mov	r0, r4
 801e7a6:	f008 f928 	bl	80269fa <__cxa_guard_acquire>
 801e7aa:	b138      	cbz	r0, 801e7bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e7ac:	4620      	mov	r0, r4
 801e7ae:	f008 f930 	bl	8026a12 <__cxa_guard_release>
 801e7b2:	4a0f      	ldr	r2, [pc, #60]	; (801e7f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e7b4:	490f      	ldr	r1, [pc, #60]	; (801e7f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e7b6:	4810      	ldr	r0, [pc, #64]	; (801e7f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e7b8:	f008 f918 	bl	80269ec <__aeabi_atexit>
 801e7bc:	4c0f      	ldr	r4, [pc, #60]	; (801e7fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e7be:	7823      	ldrb	r3, [r4, #0]
 801e7c0:	f3bf 8f5b 	dmb	ish
 801e7c4:	07db      	lsls	r3, r3, #31
 801e7c6:	d40b      	bmi.n	801e7e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e7c8:	4620      	mov	r0, r4
 801e7ca:	f008 f916 	bl	80269fa <__cxa_guard_acquire>
 801e7ce:	b138      	cbz	r0, 801e7e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e7d0:	4620      	mov	r0, r4
 801e7d2:	f008 f91e 	bl	8026a12 <__cxa_guard_release>
 801e7d6:	4a06      	ldr	r2, [pc, #24]	; (801e7f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e7d8:	4909      	ldr	r1, [pc, #36]	; (801e800 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e7da:	480a      	ldr	r0, [pc, #40]	; (801e804 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e7dc:	f008 f906 	bl	80269ec <__aeabi_atexit>
 801e7e0:	4b05      	ldr	r3, [pc, #20]	; (801e7f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e7e2:	61ab      	str	r3, [r5, #24]
 801e7e4:	4b07      	ldr	r3, [pc, #28]	; (801e804 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e7e6:	61eb      	str	r3, [r5, #28]
 801e7e8:	bd38      	pop	{r3, r4, r5, pc}
 801e7ea:	bf00      	nop
 801e7ec:	200146d0 	.word	0x200146d0
 801e7f0:	20000000 	.word	0x20000000
 801e7f4:	0801b423 	.word	0x0801b423
 801e7f8:	200000bc 	.word	0x200000bc
 801e7fc:	200146d4 	.word	0x200146d4
 801e800:	0801b421 	.word	0x0801b421
 801e804:	200000c0 	.word	0x200000c0

0801e808 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801e808:	b510      	push	{r4, lr}
 801e80a:	4604      	mov	r4, r0
 801e80c:	f7ff ff88 	bl	801e720 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e810:	4620      	mov	r0, r4
 801e812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e816:	f7ff bfbd 	b.w	801e794 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e81c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e81c:	b538      	push	{r3, r4, r5, lr}
 801e81e:	4c15      	ldr	r4, [pc, #84]	; (801e874 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e820:	7823      	ldrb	r3, [r4, #0]
 801e822:	f3bf 8f5b 	dmb	ish
 801e826:	07da      	lsls	r2, r3, #31
 801e828:	4605      	mov	r5, r0
 801e82a:	d40b      	bmi.n	801e844 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e82c:	4620      	mov	r0, r4
 801e82e:	f008 f8e4 	bl	80269fa <__cxa_guard_acquire>
 801e832:	b138      	cbz	r0, 801e844 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e834:	4620      	mov	r0, r4
 801e836:	f008 f8ec 	bl	8026a12 <__cxa_guard_release>
 801e83a:	4a0f      	ldr	r2, [pc, #60]	; (801e878 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e83c:	490f      	ldr	r1, [pc, #60]	; (801e87c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e83e:	4810      	ldr	r0, [pc, #64]	; (801e880 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e840:	f008 f8d4 	bl	80269ec <__aeabi_atexit>
 801e844:	4c0f      	ldr	r4, [pc, #60]	; (801e884 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e846:	7823      	ldrb	r3, [r4, #0]
 801e848:	f3bf 8f5b 	dmb	ish
 801e84c:	07db      	lsls	r3, r3, #31
 801e84e:	d40b      	bmi.n	801e868 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e850:	4620      	mov	r0, r4
 801e852:	f008 f8d2 	bl	80269fa <__cxa_guard_acquire>
 801e856:	b138      	cbz	r0, 801e868 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e858:	4620      	mov	r0, r4
 801e85a:	f008 f8da 	bl	8026a12 <__cxa_guard_release>
 801e85e:	4a06      	ldr	r2, [pc, #24]	; (801e878 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e860:	4909      	ldr	r1, [pc, #36]	; (801e888 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e862:	480a      	ldr	r0, [pc, #40]	; (801e88c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e864:	f008 f8c2 	bl	80269ec <__aeabi_atexit>
 801e868:	4b05      	ldr	r3, [pc, #20]	; (801e880 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e86a:	632b      	str	r3, [r5, #48]	; 0x30
 801e86c:	4b07      	ldr	r3, [pc, #28]	; (801e88c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e86e:	636b      	str	r3, [r5, #52]	; 0x34
 801e870:	bd38      	pop	{r3, r4, r5, pc}
 801e872:	bf00      	nop
 801e874:	20014708 	.word	0x20014708
 801e878:	20000000 	.word	0x20000000
 801e87c:	0801b417 	.word	0x0801b417
 801e880:	200000f4 	.word	0x200000f4
 801e884:	2001470c 	.word	0x2001470c
 801e888:	0801b415 	.word	0x0801b415
 801e88c:	200000f8 	.word	0x200000f8

0801e890 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e890:	b538      	push	{r3, r4, r5, lr}
 801e892:	4c15      	ldr	r4, [pc, #84]	; (801e8e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e894:	7823      	ldrb	r3, [r4, #0]
 801e896:	f3bf 8f5b 	dmb	ish
 801e89a:	07da      	lsls	r2, r3, #31
 801e89c:	4605      	mov	r5, r0
 801e89e:	d40b      	bmi.n	801e8b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e8a0:	4620      	mov	r0, r4
 801e8a2:	f008 f8aa 	bl	80269fa <__cxa_guard_acquire>
 801e8a6:	b138      	cbz	r0, 801e8b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e8a8:	4620      	mov	r0, r4
 801e8aa:	f008 f8b2 	bl	8026a12 <__cxa_guard_release>
 801e8ae:	4a0f      	ldr	r2, [pc, #60]	; (801e8ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e8b0:	490f      	ldr	r1, [pc, #60]	; (801e8f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e8b2:	4810      	ldr	r0, [pc, #64]	; (801e8f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e8b4:	f008 f89a 	bl	80269ec <__aeabi_atexit>
 801e8b8:	4c0f      	ldr	r4, [pc, #60]	; (801e8f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e8ba:	7823      	ldrb	r3, [r4, #0]
 801e8bc:	f3bf 8f5b 	dmb	ish
 801e8c0:	07db      	lsls	r3, r3, #31
 801e8c2:	d40b      	bmi.n	801e8dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e8c4:	4620      	mov	r0, r4
 801e8c6:	f008 f898 	bl	80269fa <__cxa_guard_acquire>
 801e8ca:	b138      	cbz	r0, 801e8dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e8cc:	4620      	mov	r0, r4
 801e8ce:	f008 f8a0 	bl	8026a12 <__cxa_guard_release>
 801e8d2:	4a06      	ldr	r2, [pc, #24]	; (801e8ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e8d4:	4909      	ldr	r1, [pc, #36]	; (801e8fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e8d6:	480a      	ldr	r0, [pc, #40]	; (801e900 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e8d8:	f008 f888 	bl	80269ec <__aeabi_atexit>
 801e8dc:	4b05      	ldr	r3, [pc, #20]	; (801e8f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e8de:	62ab      	str	r3, [r5, #40]	; 0x28
 801e8e0:	4b07      	ldr	r3, [pc, #28]	; (801e900 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e8e2:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e8e4:	bd38      	pop	{r3, r4, r5, pc}
 801e8e6:	bf00      	nop
 801e8e8:	200146d8 	.word	0x200146d8
 801e8ec:	20000000 	.word	0x20000000
 801e8f0:	0801b41b 	.word	0x0801b41b
 801e8f4:	200000c4 	.word	0x200000c4
 801e8f8:	200146dc 	.word	0x200146dc
 801e8fc:	0801b419 	.word	0x0801b419
 801e900:	200000c8 	.word	0x200000c8

0801e904 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e904:	b510      	push	{r4, lr}
 801e906:	4604      	mov	r4, r0
 801e908:	f7ff ff88 	bl	801e81c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e90c:	4620      	mov	r0, r4
 801e90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e912:	f7ff bfbd 	b.w	801e890 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e918 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801e918:	b538      	push	{r3, r4, r5, lr}
 801e91a:	4c15      	ldr	r4, [pc, #84]	; (801e970 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e91c:	7823      	ldrb	r3, [r4, #0]
 801e91e:	f3bf 8f5b 	dmb	ish
 801e922:	07da      	lsls	r2, r3, #31
 801e924:	4605      	mov	r5, r0
 801e926:	d40b      	bmi.n	801e940 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e928:	4620      	mov	r0, r4
 801e92a:	f008 f866 	bl	80269fa <__cxa_guard_acquire>
 801e92e:	b138      	cbz	r0, 801e940 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801e930:	4620      	mov	r0, r4
 801e932:	f008 f86e 	bl	8026a12 <__cxa_guard_release>
 801e936:	4a0f      	ldr	r2, [pc, #60]	; (801e974 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e938:	490f      	ldr	r1, [pc, #60]	; (801e978 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e93a:	4810      	ldr	r0, [pc, #64]	; (801e97c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e93c:	f008 f856 	bl	80269ec <__aeabi_atexit>
 801e940:	4c0f      	ldr	r4, [pc, #60]	; (801e980 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801e942:	7823      	ldrb	r3, [r4, #0]
 801e944:	f3bf 8f5b 	dmb	ish
 801e948:	07db      	lsls	r3, r3, #31
 801e94a:	d40b      	bmi.n	801e964 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e94c:	4620      	mov	r0, r4
 801e94e:	f008 f854 	bl	80269fa <__cxa_guard_acquire>
 801e952:	b138      	cbz	r0, 801e964 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801e954:	4620      	mov	r0, r4
 801e956:	f008 f85c 	bl	8026a12 <__cxa_guard_release>
 801e95a:	4a06      	ldr	r2, [pc, #24]	; (801e974 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e95c:	4909      	ldr	r1, [pc, #36]	; (801e984 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e95e:	480a      	ldr	r0, [pc, #40]	; (801e988 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e960:	f008 f844 	bl	80269ec <__aeabi_atexit>
 801e964:	4b05      	ldr	r3, [pc, #20]	; (801e97c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e966:	652b      	str	r3, [r5, #80]	; 0x50
 801e968:	4b07      	ldr	r3, [pc, #28]	; (801e988 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801e96a:	656b      	str	r3, [r5, #84]	; 0x54
 801e96c:	bd38      	pop	{r3, r4, r5, pc}
 801e96e:	bf00      	nop
 801e970:	20014710 	.word	0x20014710
 801e974:	20000000 	.word	0x20000000
 801e978:	0801b407 	.word	0x0801b407
 801e97c:	200000fc 	.word	0x200000fc
 801e980:	20014714 	.word	0x20014714
 801e984:	0801b405 	.word	0x0801b405
 801e988:	20000100 	.word	0x20000100

0801e98c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801e98c:	b538      	push	{r3, r4, r5, lr}
 801e98e:	4c15      	ldr	r4, [pc, #84]	; (801e9e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801e990:	7823      	ldrb	r3, [r4, #0]
 801e992:	f3bf 8f5b 	dmb	ish
 801e996:	07da      	lsls	r2, r3, #31
 801e998:	4605      	mov	r5, r0
 801e99a:	d40b      	bmi.n	801e9b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e99c:	4620      	mov	r0, r4
 801e99e:	f008 f82c 	bl	80269fa <__cxa_guard_acquire>
 801e9a2:	b138      	cbz	r0, 801e9b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801e9a4:	4620      	mov	r0, r4
 801e9a6:	f008 f834 	bl	8026a12 <__cxa_guard_release>
 801e9aa:	4a0f      	ldr	r2, [pc, #60]	; (801e9e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e9ac:	490f      	ldr	r1, [pc, #60]	; (801e9ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801e9ae:	4810      	ldr	r0, [pc, #64]	; (801e9f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e9b0:	f008 f81c 	bl	80269ec <__aeabi_atexit>
 801e9b4:	4c0f      	ldr	r4, [pc, #60]	; (801e9f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801e9b6:	7823      	ldrb	r3, [r4, #0]
 801e9b8:	f3bf 8f5b 	dmb	ish
 801e9bc:	07db      	lsls	r3, r3, #31
 801e9be:	d40b      	bmi.n	801e9d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e9c0:	4620      	mov	r0, r4
 801e9c2:	f008 f81a 	bl	80269fa <__cxa_guard_acquire>
 801e9c6:	b138      	cbz	r0, 801e9d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801e9c8:	4620      	mov	r0, r4
 801e9ca:	f008 f822 	bl	8026a12 <__cxa_guard_release>
 801e9ce:	4a06      	ldr	r2, [pc, #24]	; (801e9e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e9d0:	4909      	ldr	r1, [pc, #36]	; (801e9f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801e9d2:	480a      	ldr	r0, [pc, #40]	; (801e9fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e9d4:	f008 f80a 	bl	80269ec <__aeabi_atexit>
 801e9d8:	4b05      	ldr	r3, [pc, #20]	; (801e9f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801e9da:	64ab      	str	r3, [r5, #72]	; 0x48
 801e9dc:	4b07      	ldr	r3, [pc, #28]	; (801e9fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801e9de:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e9e0:	bd38      	pop	{r3, r4, r5, pc}
 801e9e2:	bf00      	nop
 801e9e4:	20014718 	.word	0x20014718
 801e9e8:	20000000 	.word	0x20000000
 801e9ec:	0801b40b 	.word	0x0801b40b
 801e9f0:	20000104 	.word	0x20000104
 801e9f4:	2001471c 	.word	0x2001471c
 801e9f8:	0801b409 	.word	0x0801b409
 801e9fc:	20000108 	.word	0x20000108

0801ea00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801ea00:	b538      	push	{r3, r4, r5, lr}
 801ea02:	4c15      	ldr	r4, [pc, #84]	; (801ea58 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801ea04:	7823      	ldrb	r3, [r4, #0]
 801ea06:	f3bf 8f5b 	dmb	ish
 801ea0a:	07da      	lsls	r2, r3, #31
 801ea0c:	4605      	mov	r5, r0
 801ea0e:	d40b      	bmi.n	801ea28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801ea10:	4620      	mov	r0, r4
 801ea12:	f007 fff2 	bl	80269fa <__cxa_guard_acquire>
 801ea16:	b138      	cbz	r0, 801ea28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801ea18:	4620      	mov	r0, r4
 801ea1a:	f007 fffa 	bl	8026a12 <__cxa_guard_release>
 801ea1e:	4a0f      	ldr	r2, [pc, #60]	; (801ea5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801ea20:	490f      	ldr	r1, [pc, #60]	; (801ea60 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801ea22:	4810      	ldr	r0, [pc, #64]	; (801ea64 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801ea24:	f007 ffe2 	bl	80269ec <__aeabi_atexit>
 801ea28:	4c0f      	ldr	r4, [pc, #60]	; (801ea68 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801ea2a:	7823      	ldrb	r3, [r4, #0]
 801ea2c:	f3bf 8f5b 	dmb	ish
 801ea30:	07db      	lsls	r3, r3, #31
 801ea32:	d40b      	bmi.n	801ea4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801ea34:	4620      	mov	r0, r4
 801ea36:	f007 ffe0 	bl	80269fa <__cxa_guard_acquire>
 801ea3a:	b138      	cbz	r0, 801ea4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801ea3c:	4620      	mov	r0, r4
 801ea3e:	f007 ffe8 	bl	8026a12 <__cxa_guard_release>
 801ea42:	4a06      	ldr	r2, [pc, #24]	; (801ea5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801ea44:	4909      	ldr	r1, [pc, #36]	; (801ea6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801ea46:	480a      	ldr	r0, [pc, #40]	; (801ea70 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801ea48:	f007 ffd0 	bl	80269ec <__aeabi_atexit>
 801ea4c:	4b05      	ldr	r3, [pc, #20]	; (801ea64 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801ea4e:	642b      	str	r3, [r5, #64]	; 0x40
 801ea50:	4b07      	ldr	r3, [pc, #28]	; (801ea70 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801ea52:	646b      	str	r3, [r5, #68]	; 0x44
 801ea54:	bd38      	pop	{r3, r4, r5, pc}
 801ea56:	bf00      	nop
 801ea58:	200146e0 	.word	0x200146e0
 801ea5c:	20000000 	.word	0x20000000
 801ea60:	0801b40f 	.word	0x0801b40f
 801ea64:	200000cc 	.word	0x200000cc
 801ea68:	200146e4 	.word	0x200146e4
 801ea6c:	0801b40d 	.word	0x0801b40d
 801ea70:	200000d0 	.word	0x200000d0

0801ea74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801ea74:	b538      	push	{r3, r4, r5, lr}
 801ea76:	4c15      	ldr	r4, [pc, #84]	; (801eacc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801ea78:	7823      	ldrb	r3, [r4, #0]
 801ea7a:	f3bf 8f5b 	dmb	ish
 801ea7e:	07da      	lsls	r2, r3, #31
 801ea80:	4605      	mov	r5, r0
 801ea82:	d40b      	bmi.n	801ea9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801ea84:	4620      	mov	r0, r4
 801ea86:	f007 ffb8 	bl	80269fa <__cxa_guard_acquire>
 801ea8a:	b138      	cbz	r0, 801ea9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801ea8c:	4620      	mov	r0, r4
 801ea8e:	f007 ffc0 	bl	8026a12 <__cxa_guard_release>
 801ea92:	4a0f      	ldr	r2, [pc, #60]	; (801ead0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801ea94:	490f      	ldr	r1, [pc, #60]	; (801ead4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801ea96:	4810      	ldr	r0, [pc, #64]	; (801ead8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801ea98:	f007 ffa8 	bl	80269ec <__aeabi_atexit>
 801ea9c:	4c0f      	ldr	r4, [pc, #60]	; (801eadc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801ea9e:	7823      	ldrb	r3, [r4, #0]
 801eaa0:	f3bf 8f5b 	dmb	ish
 801eaa4:	07db      	lsls	r3, r3, #31
 801eaa6:	d40b      	bmi.n	801eac0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801eaa8:	4620      	mov	r0, r4
 801eaaa:	f007 ffa6 	bl	80269fa <__cxa_guard_acquire>
 801eaae:	b138      	cbz	r0, 801eac0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801eab0:	4620      	mov	r0, r4
 801eab2:	f007 ffae 	bl	8026a12 <__cxa_guard_release>
 801eab6:	4a06      	ldr	r2, [pc, #24]	; (801ead0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801eab8:	4909      	ldr	r1, [pc, #36]	; (801eae0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801eaba:	480a      	ldr	r0, [pc, #40]	; (801eae4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801eabc:	f007 ff96 	bl	80269ec <__aeabi_atexit>
 801eac0:	4b05      	ldr	r3, [pc, #20]	; (801ead8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801eac2:	63ab      	str	r3, [r5, #56]	; 0x38
 801eac4:	4b07      	ldr	r3, [pc, #28]	; (801eae4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801eac6:	63eb      	str	r3, [r5, #60]	; 0x3c
 801eac8:	bd38      	pop	{r3, r4, r5, pc}
 801eaca:	bf00      	nop
 801eacc:	20014700 	.word	0x20014700
 801ead0:	20000000 	.word	0x20000000
 801ead4:	0801b413 	.word	0x0801b413
 801ead8:	200000ec 	.word	0x200000ec
 801eadc:	20014704 	.word	0x20014704
 801eae0:	0801b411 	.word	0x0801b411
 801eae4:	200000f0 	.word	0x200000f0

0801eae8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801eae8:	b510      	push	{r4, lr}
 801eaea:	4604      	mov	r4, r0
 801eaec:	f7ff ff14 	bl	801e918 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801eaf0:	4620      	mov	r0, r4
 801eaf2:	f7ff ff85 	bl	801ea00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801eaf6:	4620      	mov	r0, r4
 801eaf8:	f7ff ff48 	bl	801e98c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801eafc:	4620      	mov	r0, r4
 801eafe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb02:	f7ff bfb7 	b.w	801ea74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801eb08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801eb08:	b538      	push	{r3, r4, r5, lr}
 801eb0a:	4c15      	ldr	r4, [pc, #84]	; (801eb60 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801eb0c:	7823      	ldrb	r3, [r4, #0]
 801eb0e:	f3bf 8f5b 	dmb	ish
 801eb12:	07da      	lsls	r2, r3, #31
 801eb14:	4605      	mov	r5, r0
 801eb16:	d40b      	bmi.n	801eb30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801eb18:	4620      	mov	r0, r4
 801eb1a:	f007 ff6e 	bl	80269fa <__cxa_guard_acquire>
 801eb1e:	b138      	cbz	r0, 801eb30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801eb20:	4620      	mov	r0, r4
 801eb22:	f007 ff76 	bl	8026a12 <__cxa_guard_release>
 801eb26:	4a0f      	ldr	r2, [pc, #60]	; (801eb64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801eb28:	490f      	ldr	r1, [pc, #60]	; (801eb68 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801eb2a:	4810      	ldr	r0, [pc, #64]	; (801eb6c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801eb2c:	f007 ff5e 	bl	80269ec <__aeabi_atexit>
 801eb30:	4c0f      	ldr	r4, [pc, #60]	; (801eb70 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801eb32:	7823      	ldrb	r3, [r4, #0]
 801eb34:	f3bf 8f5b 	dmb	ish
 801eb38:	07db      	lsls	r3, r3, #31
 801eb3a:	d40b      	bmi.n	801eb54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801eb3c:	4620      	mov	r0, r4
 801eb3e:	f007 ff5c 	bl	80269fa <__cxa_guard_acquire>
 801eb42:	b138      	cbz	r0, 801eb54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801eb44:	4620      	mov	r0, r4
 801eb46:	f007 ff64 	bl	8026a12 <__cxa_guard_release>
 801eb4a:	4a06      	ldr	r2, [pc, #24]	; (801eb64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801eb4c:	4909      	ldr	r1, [pc, #36]	; (801eb74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801eb4e:	480a      	ldr	r0, [pc, #40]	; (801eb78 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801eb50:	f007 ff4c 	bl	80269ec <__aeabi_atexit>
 801eb54:	4b05      	ldr	r3, [pc, #20]	; (801eb6c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801eb56:	662b      	str	r3, [r5, #96]	; 0x60
 801eb58:	4b07      	ldr	r3, [pc, #28]	; (801eb78 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801eb5a:	666b      	str	r3, [r5, #100]	; 0x64
 801eb5c:	bd38      	pop	{r3, r4, r5, pc}
 801eb5e:	bf00      	nop
 801eb60:	200146e8 	.word	0x200146e8
 801eb64:	20000000 	.word	0x20000000
 801eb68:	0801b3ff 	.word	0x0801b3ff
 801eb6c:	200000d4 	.word	0x200000d4
 801eb70:	200146ec 	.word	0x200146ec
 801eb74:	0801b3fd 	.word	0x0801b3fd
 801eb78:	200000d8 	.word	0x200000d8

0801eb7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801eb7c:	b538      	push	{r3, r4, r5, lr}
 801eb7e:	4c15      	ldr	r4, [pc, #84]	; (801ebd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801eb80:	7823      	ldrb	r3, [r4, #0]
 801eb82:	f3bf 8f5b 	dmb	ish
 801eb86:	07da      	lsls	r2, r3, #31
 801eb88:	4605      	mov	r5, r0
 801eb8a:	d40b      	bmi.n	801eba4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801eb8c:	4620      	mov	r0, r4
 801eb8e:	f007 ff34 	bl	80269fa <__cxa_guard_acquire>
 801eb92:	b138      	cbz	r0, 801eba4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801eb94:	4620      	mov	r0, r4
 801eb96:	f007 ff3c 	bl	8026a12 <__cxa_guard_release>
 801eb9a:	4a0f      	ldr	r2, [pc, #60]	; (801ebd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801eb9c:	490f      	ldr	r1, [pc, #60]	; (801ebdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801eb9e:	4810      	ldr	r0, [pc, #64]	; (801ebe0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801eba0:	f007 ff24 	bl	80269ec <__aeabi_atexit>
 801eba4:	4c0f      	ldr	r4, [pc, #60]	; (801ebe4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801eba6:	7823      	ldrb	r3, [r4, #0]
 801eba8:	f3bf 8f5b 	dmb	ish
 801ebac:	07db      	lsls	r3, r3, #31
 801ebae:	d40b      	bmi.n	801ebc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ebb0:	4620      	mov	r0, r4
 801ebb2:	f007 ff22 	bl	80269fa <__cxa_guard_acquire>
 801ebb6:	b138      	cbz	r0, 801ebc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ebb8:	4620      	mov	r0, r4
 801ebba:	f007 ff2a 	bl	8026a12 <__cxa_guard_release>
 801ebbe:	4a06      	ldr	r2, [pc, #24]	; (801ebd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ebc0:	4909      	ldr	r1, [pc, #36]	; (801ebe8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ebc2:	480a      	ldr	r0, [pc, #40]	; (801ebec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ebc4:	f007 ff12 	bl	80269ec <__aeabi_atexit>
 801ebc8:	4b05      	ldr	r3, [pc, #20]	; (801ebe0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ebca:	65ab      	str	r3, [r5, #88]	; 0x58
 801ebcc:	4b07      	ldr	r3, [pc, #28]	; (801ebec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ebce:	65eb      	str	r3, [r5, #92]	; 0x5c
 801ebd0:	bd38      	pop	{r3, r4, r5, pc}
 801ebd2:	bf00      	nop
 801ebd4:	200146c0 	.word	0x200146c0
 801ebd8:	20000000 	.word	0x20000000
 801ebdc:	0801b403 	.word	0x0801b403
 801ebe0:	200000ac 	.word	0x200000ac
 801ebe4:	200146c4 	.word	0x200146c4
 801ebe8:	0801b401 	.word	0x0801b401
 801ebec:	200000b0 	.word	0x200000b0

0801ebf0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801ebf0:	b510      	push	{r4, lr}
 801ebf2:	4604      	mov	r4, r0
 801ebf4:	f7ff ff88 	bl	801eb08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ebf8:	4620      	mov	r0, r4
 801ebfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ebfe:	f7ff bfbd 	b.w	801eb7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ec04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ec04:	b538      	push	{r3, r4, r5, lr}
 801ec06:	4c15      	ldr	r4, [pc, #84]	; (801ec5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ec08:	7823      	ldrb	r3, [r4, #0]
 801ec0a:	f3bf 8f5b 	dmb	ish
 801ec0e:	07da      	lsls	r2, r3, #31
 801ec10:	4605      	mov	r5, r0
 801ec12:	d40b      	bmi.n	801ec2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ec14:	4620      	mov	r0, r4
 801ec16:	f007 fef0 	bl	80269fa <__cxa_guard_acquire>
 801ec1a:	b138      	cbz	r0, 801ec2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ec1c:	4620      	mov	r0, r4
 801ec1e:	f007 fef8 	bl	8026a12 <__cxa_guard_release>
 801ec22:	4a0f      	ldr	r2, [pc, #60]	; (801ec60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ec24:	490f      	ldr	r1, [pc, #60]	; (801ec64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ec26:	4810      	ldr	r0, [pc, #64]	; (801ec68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ec28:	f007 fee0 	bl	80269ec <__aeabi_atexit>
 801ec2c:	4c0f      	ldr	r4, [pc, #60]	; (801ec6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ec2e:	7823      	ldrb	r3, [r4, #0]
 801ec30:	f3bf 8f5b 	dmb	ish
 801ec34:	07db      	lsls	r3, r3, #31
 801ec36:	d40b      	bmi.n	801ec50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ec38:	4620      	mov	r0, r4
 801ec3a:	f007 fede 	bl	80269fa <__cxa_guard_acquire>
 801ec3e:	b138      	cbz	r0, 801ec50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ec40:	4620      	mov	r0, r4
 801ec42:	f007 fee6 	bl	8026a12 <__cxa_guard_release>
 801ec46:	4a06      	ldr	r2, [pc, #24]	; (801ec60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ec48:	4909      	ldr	r1, [pc, #36]	; (801ec70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ec4a:	480a      	ldr	r0, [pc, #40]	; (801ec74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ec4c:	f007 fece 	bl	80269ec <__aeabi_atexit>
 801ec50:	4b05      	ldr	r3, [pc, #20]	; (801ec68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ec52:	672b      	str	r3, [r5, #112]	; 0x70
 801ec54:	4b07      	ldr	r3, [pc, #28]	; (801ec74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ec56:	676b      	str	r3, [r5, #116]	; 0x74
 801ec58:	bd38      	pop	{r3, r4, r5, pc}
 801ec5a:	bf00      	nop
 801ec5c:	200146b8 	.word	0x200146b8
 801ec60:	20000000 	.word	0x20000000
 801ec64:	0801b3f7 	.word	0x0801b3f7
 801ec68:	200000a4 	.word	0x200000a4
 801ec6c:	200146bc 	.word	0x200146bc
 801ec70:	0801b3f5 	.word	0x0801b3f5
 801ec74:	200000a8 	.word	0x200000a8

0801ec78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ec78:	b538      	push	{r3, r4, r5, lr}
 801ec7a:	4c15      	ldr	r4, [pc, #84]	; (801ecd0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ec7c:	7823      	ldrb	r3, [r4, #0]
 801ec7e:	f3bf 8f5b 	dmb	ish
 801ec82:	07da      	lsls	r2, r3, #31
 801ec84:	4605      	mov	r5, r0
 801ec86:	d40b      	bmi.n	801eca0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ec88:	4620      	mov	r0, r4
 801ec8a:	f007 feb6 	bl	80269fa <__cxa_guard_acquire>
 801ec8e:	b138      	cbz	r0, 801eca0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ec90:	4620      	mov	r0, r4
 801ec92:	f007 febe 	bl	8026a12 <__cxa_guard_release>
 801ec96:	4a0f      	ldr	r2, [pc, #60]	; (801ecd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ec98:	490f      	ldr	r1, [pc, #60]	; (801ecd8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ec9a:	4810      	ldr	r0, [pc, #64]	; (801ecdc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ec9c:	f007 fea6 	bl	80269ec <__aeabi_atexit>
 801eca0:	4c0f      	ldr	r4, [pc, #60]	; (801ece0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801eca2:	7823      	ldrb	r3, [r4, #0]
 801eca4:	f3bf 8f5b 	dmb	ish
 801eca8:	07db      	lsls	r3, r3, #31
 801ecaa:	d40b      	bmi.n	801ecc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ecac:	4620      	mov	r0, r4
 801ecae:	f007 fea4 	bl	80269fa <__cxa_guard_acquire>
 801ecb2:	b138      	cbz	r0, 801ecc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ecb4:	4620      	mov	r0, r4
 801ecb6:	f007 feac 	bl	8026a12 <__cxa_guard_release>
 801ecba:	4a06      	ldr	r2, [pc, #24]	; (801ecd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ecbc:	4909      	ldr	r1, [pc, #36]	; (801ece4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ecbe:	480a      	ldr	r0, [pc, #40]	; (801ece8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ecc0:	f007 fe94 	bl	80269ec <__aeabi_atexit>
 801ecc4:	4b05      	ldr	r3, [pc, #20]	; (801ecdc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ecc6:	66ab      	str	r3, [r5, #104]	; 0x68
 801ecc8:	4b07      	ldr	r3, [pc, #28]	; (801ece8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ecca:	66eb      	str	r3, [r5, #108]	; 0x6c
 801eccc:	bd38      	pop	{r3, r4, r5, pc}
 801ecce:	bf00      	nop
 801ecd0:	200146b0 	.word	0x200146b0
 801ecd4:	20000000 	.word	0x20000000
 801ecd8:	0801b3fb 	.word	0x0801b3fb
 801ecdc:	2000009c 	.word	0x2000009c
 801ece0:	200146b4 	.word	0x200146b4
 801ece4:	0801b3f9 	.word	0x0801b3f9
 801ece8:	200000a0 	.word	0x200000a0

0801ecec <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801ecec:	b510      	push	{r4, lr}
 801ecee:	4604      	mov	r4, r0
 801ecf0:	f7ff ff88 	bl	801ec04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ecf4:	4620      	mov	r0, r4
 801ecf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ecfa:	f7ff bfbd 	b.w	801ec78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801ecfe <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801ecfe:	b510      	push	{r4, lr}
 801ed00:	4604      	mov	r4, r0
 801ed02:	f7ff fff3 	bl	801ecec <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801ed06:	4620      	mov	r0, r4
 801ed08:	f7ff ff72 	bl	801ebf0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801ed0c:	4620      	mov	r0, r4
 801ed0e:	f7ff fdf9 	bl	801e904 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801ed12:	4620      	mov	r0, r4
 801ed14:	f7ff fcfa 	bl	801e70c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801ed18:	4620      	mov	r0, r4
 801ed1a:	f7ff fd75 	bl	801e808 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801ed1e:	4620      	mov	r0, r4
 801ed20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed24:	f7ff bee0 	b.w	801eae8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801ed28 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 801ed28:	b538      	push	{r3, r4, r5, lr}
 801ed2a:	4c0b      	ldr	r4, [pc, #44]	; (801ed58 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 801ed2c:	7823      	ldrb	r3, [r4, #0]
 801ed2e:	f3bf 8f5b 	dmb	ish
 801ed32:	07db      	lsls	r3, r3, #31
 801ed34:	4605      	mov	r5, r0
 801ed36:	d40b      	bmi.n	801ed50 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801ed38:	4620      	mov	r0, r4
 801ed3a:	f007 fe5e 	bl	80269fa <__cxa_guard_acquire>
 801ed3e:	b138      	cbz	r0, 801ed50 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801ed40:	4620      	mov	r0, r4
 801ed42:	f007 fe66 	bl	8026a12 <__cxa_guard_release>
 801ed46:	4a05      	ldr	r2, [pc, #20]	; (801ed5c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 801ed48:	4905      	ldr	r1, [pc, #20]	; (801ed60 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 801ed4a:	4806      	ldr	r0, [pc, #24]	; (801ed64 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 801ed4c:	f007 fe4e 	bl	80269ec <__aeabi_atexit>
 801ed50:	4b04      	ldr	r3, [pc, #16]	; (801ed64 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 801ed52:	67ab      	str	r3, [r5, #120]	; 0x78
 801ed54:	bd38      	pop	{r3, r4, r5, pc}
 801ed56:	bf00      	nop
 801ed58:	200146a4 	.word	0x200146a4
 801ed5c:	20000000 	.word	0x20000000
 801ed60:	0801b3f3 	.word	0x0801b3f3
 801ed64:	20000094 	.word	0x20000094

0801ed68 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 801ed68:	b538      	push	{r3, r4, r5, lr}
 801ed6a:	4c0b      	ldr	r4, [pc, #44]	; (801ed98 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 801ed6c:	7823      	ldrb	r3, [r4, #0]
 801ed6e:	f3bf 8f5b 	dmb	ish
 801ed72:	07db      	lsls	r3, r3, #31
 801ed74:	4605      	mov	r5, r0
 801ed76:	d40b      	bmi.n	801ed90 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 801ed78:	4620      	mov	r0, r4
 801ed7a:	f007 fe3e 	bl	80269fa <__cxa_guard_acquire>
 801ed7e:	b138      	cbz	r0, 801ed90 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 801ed80:	4620      	mov	r0, r4
 801ed82:	f007 fe46 	bl	8026a12 <__cxa_guard_release>
 801ed86:	4a05      	ldr	r2, [pc, #20]	; (801ed9c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 801ed88:	4905      	ldr	r1, [pc, #20]	; (801eda0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 801ed8a:	4806      	ldr	r0, [pc, #24]	; (801eda4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 801ed8c:	f007 fe2e 	bl	80269ec <__aeabi_atexit>
 801ed90:	4b04      	ldr	r3, [pc, #16]	; (801eda4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 801ed92:	67eb      	str	r3, [r5, #124]	; 0x7c
 801ed94:	bd38      	pop	{r3, r4, r5, pc}
 801ed96:	bf00      	nop
 801ed98:	200146a8 	.word	0x200146a8
 801ed9c:	20000000 	.word	0x20000000
 801eda0:	0801b3f1 	.word	0x0801b3f1
 801eda4:	20000098 	.word	0x20000098

0801eda8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 801eda8:	b570      	push	{r4, r5, r6, lr}
 801edaa:	4d0d      	ldr	r5, [pc, #52]	; (801ede0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801edac:	4c0d      	ldr	r4, [pc, #52]	; (801ede4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801edae:	782b      	ldrb	r3, [r5, #0]
 801edb0:	f3bf 8f5b 	dmb	ish
 801edb4:	f013 0f01 	tst.w	r3, #1
 801edb8:	4606      	mov	r6, r0
 801edba:	d10d      	bne.n	801edd8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 801edbc:	4628      	mov	r0, r5
 801edbe:	f007 fe1c 	bl	80269fa <__cxa_guard_acquire>
 801edc2:	b148      	cbz	r0, 801edd8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 801edc4:	4b08      	ldr	r3, [pc, #32]	; (801ede8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801edc6:	6023      	str	r3, [r4, #0]
 801edc8:	4628      	mov	r0, r5
 801edca:	f007 fe22 	bl	8026a12 <__cxa_guard_release>
 801edce:	4a07      	ldr	r2, [pc, #28]	; (801edec <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801edd0:	4907      	ldr	r1, [pc, #28]	; (801edf0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 801edd2:	4620      	mov	r0, r4
 801edd4:	f007 fe0a 	bl	80269ec <__aeabi_atexit>
 801edd8:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
 801eddc:	bd70      	pop	{r4, r5, r6, pc}
 801edde:	bf00      	nop
 801ede0:	200146ac 	.word	0x200146ac
 801ede4:	20014720 	.word	0x20014720
 801ede8:	080299a4 	.word	0x080299a4
 801edec:	20000000 	.word	0x20000000
 801edf0:	0801b3ef 	.word	0x0801b3ef

0801edf4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 801edf4:	b510      	push	{r4, lr}
 801edf6:	4604      	mov	r4, r0
 801edf8:	f7ff ff96 	bl	801ed28 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 801edfc:	4620      	mov	r0, r4
 801edfe:	f7ff ffb3 	bl	801ed68 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 801ee02:	4620      	mov	r0, r4
 801ee04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee08:	f7ff bfce 	b.w	801eda8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

0801ee0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801ee0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee10:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801ee14:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801ee18:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801ee1c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801ee20:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801ee24:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801ee28:	8808      	ldrh	r0, [r1, #0]
 801ee2a:	fb05 4c0e 	mla	ip, r5, lr, r4
 801ee2e:	2d00      	cmp	r5, #0
 801ee30:	eb02 0a0c 	add.w	sl, r2, ip
 801ee34:	f2c0 80b0 	blt.w	801ef98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801ee38:	45ab      	cmp	fp, r5
 801ee3a:	f340 80ad 	ble.w	801ef98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801ee3e:	2c00      	cmp	r4, #0
 801ee40:	f2c0 80a8 	blt.w	801ef94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801ee44:	45a6      	cmp	lr, r4
 801ee46:	f340 80a5 	ble.w	801ef94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801ee4a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801ee4e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801ee52:	1c62      	adds	r2, r4, #1
 801ee54:	f100 80a3 	bmi.w	801ef9e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801ee58:	4596      	cmp	lr, r2
 801ee5a:	f340 80a0 	ble.w	801ef9e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801ee5e:	f1b9 0f00 	cmp.w	r9, #0
 801ee62:	f000 809c 	beq.w	801ef9e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801ee66:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ee6a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801ee6e:	3501      	adds	r5, #1
 801ee70:	f100 8099 	bmi.w	801efa6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801ee74:	45ab      	cmp	fp, r5
 801ee76:	f340 8096 	ble.w	801efa6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801ee7a:	2f00      	cmp	r7, #0
 801ee7c:	f000 8093 	beq.w	801efa6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801ee80:	2c00      	cmp	r4, #0
 801ee82:	f2c0 808e 	blt.w	801efa2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801ee86:	45a6      	cmp	lr, r4
 801ee88:	f340 808b 	ble.w	801efa2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801ee8c:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801ee90:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801ee94:	3401      	adds	r4, #1
 801ee96:	f100 8089 	bmi.w	801efac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801ee9a:	45a6      	cmp	lr, r4
 801ee9c:	f340 8086 	ble.w	801efac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801eea0:	f1b9 0f00 	cmp.w	r9, #0
 801eea4:	f000 8082 	beq.w	801efac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801eea8:	44d6      	add	lr, sl
 801eeaa:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801eeae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801eeb2:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801eeb6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801eeba:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801eebe:	fb19 fe07 	smulbb	lr, r9, r7
 801eec2:	ea44 0808 	orr.w	r8, r4, r8
 801eec6:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801eeca:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801eece:	f1c7 0210 	rsb	r2, r7, #16
 801eed2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801eed6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801eeda:	ea44 0c0c 	orr.w	ip, r4, ip
 801eede:	eba2 0209 	sub.w	r2, r2, r9
 801eee2:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801eee6:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801eeea:	fb04 f40c 	mul.w	r4, r4, ip
 801eeee:	fb02 4808 	mla	r8, r2, r8, r4
 801eef2:	041a      	lsls	r2, r3, #16
 801eef4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801eef8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801eefc:	4313      	orrs	r3, r2
 801eefe:	042a      	lsls	r2, r5, #16
 801ef00:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ef04:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801ef08:	fb0e 8303 	mla	r3, lr, r3, r8
 801ef0c:	432a      	orrs	r2, r5
 801ef0e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801ef12:	fb07 3202 	mla	r2, r7, r2, r3
 801ef16:	0d53      	lsrs	r3, r2, #21
 801ef18:	0952      	lsrs	r2, r2, #5
 801ef1a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ef1e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ef22:	431a      	orrs	r2, r3
 801ef24:	b293      	uxth	r3, r2
 801ef26:	b2b4      	uxth	r4, r6
 801ef28:	1202      	asrs	r2, r0, #8
 801ef2a:	43f6      	mvns	r6, r6
 801ef2c:	b2f6      	uxtb	r6, r6
 801ef2e:	121d      	asrs	r5, r3, #8
 801ef30:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ef34:	fb12 f206 	smulbb	r2, r2, r6
 801ef38:	10c7      	asrs	r7, r0, #3
 801ef3a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ef3e:	00c0      	lsls	r0, r0, #3
 801ef40:	fb05 2504 	mla	r5, r5, r4, r2
 801ef44:	b2c0      	uxtb	r0, r0
 801ef46:	10da      	asrs	r2, r3, #3
 801ef48:	00db      	lsls	r3, r3, #3
 801ef4a:	b2db      	uxtb	r3, r3
 801ef4c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ef50:	fb10 f006 	smulbb	r0, r0, r6
 801ef54:	b2ad      	uxth	r5, r5
 801ef56:	fb03 0004 	mla	r0, r3, r4, r0
 801ef5a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ef5e:	fb17 f706 	smulbb	r7, r7, r6
 801ef62:	b280      	uxth	r0, r0
 801ef64:	1c6b      	adds	r3, r5, #1
 801ef66:	fb02 7204 	mla	r2, r2, r4, r7
 801ef6a:	b292      	uxth	r2, r2
 801ef6c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ef70:	1c43      	adds	r3, r0, #1
 801ef72:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ef76:	1c50      	adds	r0, r2, #1
 801ef78:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ef7c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ef80:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ef84:	0952      	lsrs	r2, r2, #5
 801ef86:	432b      	orrs	r3, r5
 801ef88:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ef8c:	4313      	orrs	r3, r2
 801ef8e:	800b      	strh	r3, [r1, #0]
 801ef90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef94:	4680      	mov	r8, r0
 801ef96:	e75c      	b.n	801ee52 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801ef98:	4684      	mov	ip, r0
 801ef9a:	4680      	mov	r8, r0
 801ef9c:	e767      	b.n	801ee6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801ef9e:	4684      	mov	ip, r0
 801efa0:	e765      	b.n	801ee6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801efa2:	4605      	mov	r5, r0
 801efa4:	e776      	b.n	801ee94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801efa6:	4603      	mov	r3, r0
 801efa8:	4605      	mov	r5, r0
 801efaa:	e782      	b.n	801eeb2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801efac:	4603      	mov	r3, r0
 801efae:	e780      	b.n	801eeb2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801efb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801efb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efb4:	b099      	sub	sp, #100	; 0x64
 801efb6:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801efba:	9215      	str	r2, [sp, #84]	; 0x54
 801efbc:	9309      	str	r3, [sp, #36]	; 0x24
 801efbe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801efc0:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801efc4:	930d      	str	r3, [sp, #52]	; 0x34
 801efc6:	910c      	str	r1, [sp, #48]	; 0x30
 801efc8:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801efcc:	9016      	str	r0, [sp, #88]	; 0x58
 801efce:	6850      	ldr	r0, [r2, #4]
 801efd0:	6812      	ldr	r2, [r2, #0]
 801efd2:	fb00 1303 	mla	r3, r0, r3, r1
 801efd6:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801efda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801efdc:	681b      	ldr	r3, [r3, #0]
 801efde:	930b      	str	r3, [sp, #44]	; 0x2c
 801efe0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801efe2:	685e      	ldr	r6, [r3, #4]
 801efe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801efe6:	43db      	mvns	r3, r3
 801efe8:	b2db      	uxtb	r3, r3
 801efea:	3604      	adds	r6, #4
 801efec:	930a      	str	r3, [sp, #40]	; 0x28
 801efee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eff0:	2b00      	cmp	r3, #0
 801eff2:	dc03      	bgt.n	801effc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801eff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	f340 8225 	ble.w	801f446 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801effc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801effe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f002:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f006:	1e48      	subs	r0, r1, #1
 801f008:	1e57      	subs	r7, r2, #1
 801f00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f00c:	2b00      	cmp	r3, #0
 801f00e:	f340 80e3 	ble.w	801f1d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f012:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801f016:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f01a:	d406      	bmi.n	801f02a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f01c:	4584      	cmp	ip, r0
 801f01e:	da04      	bge.n	801f02a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f020:	2b00      	cmp	r3, #0
 801f022:	db02      	blt.n	801f02a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f024:	42bb      	cmp	r3, r7
 801f026:	f2c0 80d8 	blt.w	801f1da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801f02a:	f11c 0c01 	adds.w	ip, ip, #1
 801f02e:	f100 80c9 	bmi.w	801f1c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f032:	4561      	cmp	r1, ip
 801f034:	f2c0 80c6 	blt.w	801f1c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f038:	3301      	adds	r3, #1
 801f03a:	f100 80c3 	bmi.w	801f1c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f03e:	429a      	cmp	r2, r3
 801f040:	f2c0 80c0 	blt.w	801f1c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f044:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801f048:	4647      	mov	r7, r8
 801f04a:	f1bb 0f00 	cmp.w	fp, #0
 801f04e:	f340 80e3 	ble.w	801f218 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801f052:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f054:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f056:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f05a:	689b      	ldr	r3, [r3, #8]
 801f05c:	ea5f 422a 	movs.w	r2, sl, asr #16
 801f060:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f064:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801f068:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f06c:	f100 8121 	bmi.w	801f2b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f070:	f103 39ff 	add.w	r9, r3, #4294967295
 801f074:	454a      	cmp	r2, r9
 801f076:	f280 811c 	bge.w	801f2b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f07a:	f1bc 0f00 	cmp.w	ip, #0
 801f07e:	f2c0 8118 	blt.w	801f2b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f082:	f10e 39ff 	add.w	r9, lr, #4294967295
 801f086:	45cc      	cmp	ip, r9
 801f088:	f280 8113 	bge.w	801f2b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f08c:	b21b      	sxth	r3, r3
 801f08e:	fb0c 2203 	mla	r2, ip, r3, r2
 801f092:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f094:	eb04 0902 	add.w	r9, r4, r2
 801f098:	5ca2      	ldrb	r2, [r4, r2]
 801f09a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801f09e:	2800      	cmp	r0, #0
 801f0a0:	f000 80fe 	beq.w	801f2a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801f0a4:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f0a8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801f0ac:	9211      	str	r2, [sp, #68]	; 0x44
 801f0ae:	b151      	cbz	r1, 801f0c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f0b0:	eb09 0203 	add.w	r2, r9, r3
 801f0b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f0b8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f0bc:	930f      	str	r3, [sp, #60]	; 0x3c
 801f0be:	7853      	ldrb	r3, [r2, #1]
 801f0c0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f0c4:	9312      	str	r3, [sp, #72]	; 0x48
 801f0c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f0c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f0ca:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f0ce:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f0d2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f0d6:	ea4c 0c03 	orr.w	ip, ip, r3
 801f0da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f0dc:	041b      	lsls	r3, r3, #16
 801f0de:	fb10 f201 	smulbb	r2, r0, r1
 801f0e2:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801f0e6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f0ea:	10d2      	asrs	r2, r2, #3
 801f0ec:	4323      	orrs	r3, r4
 801f0ee:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801f0f2:	4353      	muls	r3, r2
 801f0f4:	fb09 330c 	mla	r3, r9, ip, r3
 801f0f8:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f0fc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f100:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f104:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f108:	f1c1 0c10 	rsb	ip, r1, #16
 801f10c:	ebac 0c00 	sub.w	ip, ip, r0
 801f110:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f114:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f11a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f11c:	0418      	lsls	r0, r3, #16
 801f11e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f122:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f126:	4318      	orrs	r0, r3
 801f128:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f12c:	fb02 c200 	mla	r2, r2, r0, ip
 801f130:	0d53      	lsrs	r3, r2, #21
 801f132:	0952      	lsrs	r2, r2, #5
 801f134:	8838      	ldrh	r0, [r7, #0]
 801f136:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f13a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f13e:	431a      	orrs	r2, r3
 801f140:	b292      	uxth	r2, r2
 801f142:	1201      	asrs	r1, r0, #8
 801f144:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801f148:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801f14c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f150:	fb11 f104 	smulbb	r1, r1, r4
 801f154:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801f158:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f15c:	00c0      	lsls	r0, r0, #3
 801f15e:	fb0c 1c03 	mla	ip, ip, r3, r1
 801f162:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f166:	10d1      	asrs	r1, r2, #3
 801f168:	b2c0      	uxtb	r0, r0
 801f16a:	00d2      	lsls	r2, r2, #3
 801f16c:	b2d2      	uxtb	r2, r2
 801f16e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f172:	fb1e fe04 	smulbb	lr, lr, r4
 801f176:	fb10 f004 	smulbb	r0, r0, r4
 801f17a:	fa1f fc8c 	uxth.w	ip, ip
 801f17e:	fb01 e103 	mla	r1, r1, r3, lr
 801f182:	fb02 0303 	mla	r3, r2, r3, r0
 801f186:	b29a      	uxth	r2, r3
 801f188:	f10c 0301 	add.w	r3, ip, #1
 801f18c:	b289      	uxth	r1, r1
 801f18e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f192:	1c53      	adds	r3, r2, #1
 801f194:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f198:	1c4a      	adds	r2, r1, #1
 801f19a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f19e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f1a2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f1a6:	0949      	lsrs	r1, r1, #5
 801f1a8:	ea43 030c 	orr.w	r3, r3, ip
 801f1ac:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f1b0:	430b      	orrs	r3, r1
 801f1b2:	803b      	strh	r3, [r7, #0]
 801f1b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f1b6:	449a      	add	sl, r3
 801f1b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f1ba:	3702      	adds	r7, #2
 801f1bc:	441d      	add	r5, r3
 801f1be:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f1c2:	e742      	b.n	801f04a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f1c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f1c6:	449a      	add	sl, r3
 801f1c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f1ca:	441d      	add	r5, r3
 801f1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1ce:	3b01      	subs	r3, #1
 801f1d0:	9309      	str	r3, [sp, #36]	; 0x24
 801f1d2:	f108 0802 	add.w	r8, r8, #2
 801f1d6:	e718      	b.n	801f00a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f1d8:	d023      	beq.n	801f222 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801f1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1dc:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f1de:	3b01      	subs	r3, #1
 801f1e0:	fb00 a003 	mla	r0, r0, r3, sl
 801f1e4:	1400      	asrs	r0, r0, #16
 801f1e6:	f53f af2d 	bmi.w	801f044 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f1ea:	3901      	subs	r1, #1
 801f1ec:	4288      	cmp	r0, r1
 801f1ee:	f6bf af29 	bge.w	801f044 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f1f2:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f1f4:	fb01 5303 	mla	r3, r1, r3, r5
 801f1f8:	141b      	asrs	r3, r3, #16
 801f1fa:	f53f af23 	bmi.w	801f044 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f1fe:	3a01      	subs	r2, #1
 801f200:	4293      	cmp	r3, r2
 801f202:	f6bf af1f 	bge.w	801f044 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f206:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f20a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801f20e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801f212:	f1be 0f00 	cmp.w	lr, #0
 801f216:	dc6c      	bgt.n	801f2f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801f218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f21a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f21e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801f222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f224:	2b00      	cmp	r3, #0
 801f226:	f340 810e 	ble.w	801f446 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801f22a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f22e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f232:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f236:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f238:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f23c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f240:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f244:	eef0 6a62 	vmov.f32	s13, s5
 801f248:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f24c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f250:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f254:	ee16 aa90 	vmov	sl, s13
 801f258:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f25c:	eef0 6a43 	vmov.f32	s13, s6
 801f260:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f264:	ee12 2a90 	vmov	r2, s5
 801f268:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f26c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f270:	ee13 2a10 	vmov	r2, s6
 801f274:	9325      	str	r3, [sp, #148]	; 0x94
 801f276:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f278:	fb92 f3f3 	sdiv	r3, r2, r3
 801f27c:	9326      	str	r3, [sp, #152]	; 0x98
 801f27e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f280:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f282:	3b01      	subs	r3, #1
 801f284:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f288:	930c      	str	r3, [sp, #48]	; 0x30
 801f28a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f28c:	bf08      	it	eq
 801f28e:	4613      	moveq	r3, r2
 801f290:	ee16 5a90 	vmov	r5, s13
 801f294:	9309      	str	r3, [sp, #36]	; 0x24
 801f296:	eeb0 3a67 	vmov.f32	s6, s15
 801f29a:	eef0 2a47 	vmov.f32	s5, s14
 801f29e:	e6a6      	b.n	801efee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f2a0:	2900      	cmp	r1, #0
 801f2a2:	f43f af10 	beq.w	801f0c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f2a6:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f2aa:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f2ae:	930f      	str	r3, [sp, #60]	; 0x3c
 801f2b0:	e709      	b.n	801f0c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f2b2:	f112 0901 	adds.w	r9, r2, #1
 801f2b6:	f53f af7d 	bmi.w	801f1b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f2ba:	454b      	cmp	r3, r9
 801f2bc:	f6ff af7a 	blt.w	801f1b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f2c0:	f11c 0901 	adds.w	r9, ip, #1
 801f2c4:	f53f af76 	bmi.w	801f1b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f2c8:	45ce      	cmp	lr, r9
 801f2ca:	f6ff af73 	blt.w	801f1b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f2ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f2d0:	9202      	str	r2, [sp, #8]
 801f2d2:	b21b      	sxth	r3, r3
 801f2d4:	fa0f f28e 	sxth.w	r2, lr
 801f2d8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f2dc:	e9cd c003 	strd	ip, r0, [sp, #12]
 801f2e0:	9201      	str	r2, [sp, #4]
 801f2e2:	9300      	str	r3, [sp, #0]
 801f2e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f2e6:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f2e8:	4633      	mov	r3, r6
 801f2ea:	4639      	mov	r1, r7
 801f2ec:	f7ff fd8e 	bl	801ee0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801f2f0:	e760      	b.n	801f1b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f2f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f2f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f2f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f2fa:	ea4f 422a 	mov.w	r2, sl, asr #16
 801f2fe:	1429      	asrs	r1, r5, #16
 801f300:	fb03 2101 	mla	r1, r3, r1, r2
 801f304:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f306:	440a      	add	r2, r1
 801f308:	5c61      	ldrb	r1, [r4, r1]
 801f30a:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801f30e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f312:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801f316:	f1bc 0f00 	cmp.w	ip, #0
 801f31a:	f000 808c 	beq.w	801f436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801f31e:	7857      	ldrb	r7, [r2, #1]
 801f320:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801f324:	9413      	str	r4, [sp, #76]	; 0x4c
 801f326:	b140      	cbz	r0, 801f33a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f328:	18d7      	adds	r7, r2, r3
 801f32a:	5cd3      	ldrb	r3, [r2, r3]
 801f32c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f330:	9310      	str	r3, [sp, #64]	; 0x40
 801f332:	787b      	ldrb	r3, [r7, #1]
 801f334:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f338:	9314      	str	r3, [sp, #80]	; 0x50
 801f33a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f33c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f33e:	fb1c f200 	smulbb	r2, ip, r0
 801f342:	041f      	lsls	r7, r3, #16
 801f344:	10d2      	asrs	r2, r2, #3
 801f346:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f34a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801f34e:	431f      	orrs	r7, r3
 801f350:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801f354:	9317      	str	r3, [sp, #92]	; 0x5c
 801f356:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f358:	041b      	lsls	r3, r3, #16
 801f35a:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801f35e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f362:	ea43 030b 	orr.w	r3, r3, fp
 801f366:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f368:	4353      	muls	r3, r2
 801f36a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f36e:	fb04 3707 	mla	r7, r4, r7, r3
 801f372:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f376:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801f37a:	ea43 0b01 	orr.w	fp, r3, r1
 801f37e:	f1c0 0110 	rsb	r1, r0, #16
 801f382:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f384:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f386:	eba1 0c0c 	sub.w	ip, r1, ip
 801f38a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f38e:	fb0c 770b 	mla	r7, ip, fp, r7
 801f392:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f396:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801f39a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f39e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f3a2:	ea4c 0c0b 	orr.w	ip, ip, fp
 801f3a6:	fb02 770c 	mla	r7, r2, ip, r7
 801f3aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f3ac:	0d79      	lsrs	r1, r7, #21
 801f3ae:	097f      	lsrs	r7, r7, #5
 801f3b0:	8812      	ldrh	r2, [r2, #0]
 801f3b2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f3b6:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f3ba:	430f      	orrs	r7, r1
 801f3bc:	b2bb      	uxth	r3, r7
 801f3be:	1211      	asrs	r1, r2, #8
 801f3c0:	1218      	asrs	r0, r3, #8
 801f3c2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f3c6:	fb11 f104 	smulbb	r1, r1, r4
 801f3ca:	10d7      	asrs	r7, r2, #3
 801f3cc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f3d0:	00d2      	lsls	r2, r2, #3
 801f3d2:	fb00 1009 	mla	r0, r0, r9, r1
 801f3d6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f3da:	10d9      	asrs	r1, r3, #3
 801f3dc:	b2d2      	uxtb	r2, r2
 801f3de:	00db      	lsls	r3, r3, #3
 801f3e0:	fb17 f704 	smulbb	r7, r7, r4
 801f3e4:	fb12 f204 	smulbb	r2, r2, r4
 801f3e8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f3ec:	b2db      	uxtb	r3, r3
 801f3ee:	b280      	uxth	r0, r0
 801f3f0:	fb01 7109 	mla	r1, r1, r9, r7
 801f3f4:	fb03 2309 	mla	r3, r3, r9, r2
 801f3f8:	b29b      	uxth	r3, r3
 801f3fa:	b289      	uxth	r1, r1
 801f3fc:	1c42      	adds	r2, r0, #1
 801f3fe:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f402:	1c4f      	adds	r7, r1, #1
 801f404:	1c5a      	adds	r2, r3, #1
 801f406:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f40a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801f40e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f412:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f416:	0949      	lsrs	r1, r1, #5
 801f418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f41a:	4310      	orrs	r0, r2
 801f41c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f420:	4308      	orrs	r0, r1
 801f422:	f823 0b02 	strh.w	r0, [r3], #2
 801f426:	930e      	str	r3, [sp, #56]	; 0x38
 801f428:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f42a:	449a      	add	sl, r3
 801f42c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f42e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f432:	441d      	add	r5, r3
 801f434:	e6ed      	b.n	801f212 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801f436:	2800      	cmp	r0, #0
 801f438:	f43f af7f 	beq.w	801f33a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f43c:	5cd3      	ldrb	r3, [r2, r3]
 801f43e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f442:	9310      	str	r3, [sp, #64]	; 0x40
 801f444:	e779      	b.n	801f33a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f446:	b019      	add	sp, #100	; 0x64
 801f448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f44c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801f44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f450:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801f454:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801f458:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801f45c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801f460:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801f464:	8808      	ldrh	r0, [r1, #0]
 801f466:	fb08 470e 	mla	r7, r8, lr, r4
 801f46a:	f1b8 0f00 	cmp.w	r8, #0
 801f46e:	eb02 0907 	add.w	r9, r2, r7
 801f472:	db67      	blt.n	801f544 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801f474:	45c2      	cmp	sl, r8
 801f476:	dd65      	ble.n	801f544 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801f478:	2c00      	cmp	r4, #0
 801f47a:	db61      	blt.n	801f540 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801f47c:	45a6      	cmp	lr, r4
 801f47e:	dd5f      	ble.n	801f540 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801f480:	5dd2      	ldrb	r2, [r2, r7]
 801f482:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801f486:	1c62      	adds	r2, r4, #1
 801f488:	d45f      	bmi.n	801f54a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f48a:	4596      	cmp	lr, r2
 801f48c:	dd5d      	ble.n	801f54a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f48e:	2d00      	cmp	r5, #0
 801f490:	d05b      	beq.n	801f54a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f492:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f496:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801f49a:	f118 0801 	adds.w	r8, r8, #1
 801f49e:	d458      	bmi.n	801f552 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f4a0:	45c2      	cmp	sl, r8
 801f4a2:	dd56      	ble.n	801f552 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f4a4:	2e00      	cmp	r6, #0
 801f4a6:	d054      	beq.n	801f552 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f4a8:	2c00      	cmp	r4, #0
 801f4aa:	db50      	blt.n	801f54e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801f4ac:	45a6      	cmp	lr, r4
 801f4ae:	dd4e      	ble.n	801f54e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801f4b0:	f819 200e 	ldrb.w	r2, [r9, lr]
 801f4b4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f4b8:	3401      	adds	r4, #1
 801f4ba:	d407      	bmi.n	801f4cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f4bc:	45a6      	cmp	lr, r4
 801f4be:	dd05      	ble.n	801f4cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f4c0:	b125      	cbz	r5, 801f4cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f4c2:	44ce      	add	lr, r9
 801f4c4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801f4c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801f4cc:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801f4d0:	fb15 f406 	smulbb	r4, r5, r6
 801f4d4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f4d8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801f4dc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f4e0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801f4e4:	ea43 0c0c 	orr.w	ip, r3, ip
 801f4e8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f4ec:	f1c6 0310 	rsb	r3, r6, #16
 801f4f0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f4f4:	1b5b      	subs	r3, r3, r5
 801f4f6:	ea4e 0707 	orr.w	r7, lr, r7
 801f4fa:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801f4fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f502:	437d      	muls	r5, r7
 801f504:	fb03 5c0c 	mla	ip, r3, ip, r5
 801f508:	0403      	lsls	r3, r0, #16
 801f50a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f50e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f512:	4318      	orrs	r0, r3
 801f514:	0413      	lsls	r3, r2, #16
 801f516:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f51a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f51e:	4313      	orrs	r3, r2
 801f520:	fb04 c000 	mla	r0, r4, r0, ip
 801f524:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801f528:	fb06 0003 	mla	r0, r6, r3, r0
 801f52c:	0d43      	lsrs	r3, r0, #21
 801f52e:	0940      	lsrs	r0, r0, #5
 801f530:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f534:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f538:	4318      	orrs	r0, r3
 801f53a:	8008      	strh	r0, [r1, #0]
 801f53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f540:	4684      	mov	ip, r0
 801f542:	e7a0      	b.n	801f486 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801f544:	4607      	mov	r7, r0
 801f546:	4684      	mov	ip, r0
 801f548:	e7a7      	b.n	801f49a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801f54a:	4607      	mov	r7, r0
 801f54c:	e7a5      	b.n	801f49a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801f54e:	4602      	mov	r2, r0
 801f550:	e7b2      	b.n	801f4b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801f552:	4602      	mov	r2, r0
 801f554:	e7ba      	b.n	801f4cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801f556 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f55a:	b093      	sub	sp, #76	; 0x4c
 801f55c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801f560:	920f      	str	r2, [sp, #60]	; 0x3c
 801f562:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f564:	9108      	str	r1, [sp, #32]
 801f566:	9306      	str	r3, [sp, #24]
 801f568:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801f56c:	9010      	str	r0, [sp, #64]	; 0x40
 801f56e:	6850      	ldr	r0, [r2, #4]
 801f570:	6812      	ldr	r2, [r2, #0]
 801f572:	fb00 1303 	mla	r3, r0, r3, r1
 801f576:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801f57a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f57c:	681b      	ldr	r3, [r3, #0]
 801f57e:	9307      	str	r3, [sp, #28]
 801f580:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f582:	685f      	ldr	r7, [r3, #4]
 801f584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f588:	3704      	adds	r7, #4
 801f58a:	9b08      	ldr	r3, [sp, #32]
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	dc03      	bgt.n	801f598 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f592:	2b00      	cmp	r3, #0
 801f594:	f340 81b2 	ble.w	801f8fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801f598:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f59a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f59e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f5a2:	1e48      	subs	r0, r1, #1
 801f5a4:	f102 3cff 	add.w	ip, r2, #4294967295
 801f5a8:	9b06      	ldr	r3, [sp, #24]
 801f5aa:	2b00      	cmp	r3, #0
 801f5ac:	f340 80a9 	ble.w	801f702 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f5b0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f5b4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f5b8:	d406      	bmi.n	801f5c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f5ba:	4586      	cmp	lr, r0
 801f5bc:	da04      	bge.n	801f5c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	db02      	blt.n	801f5c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f5c2:	4563      	cmp	r3, ip
 801f5c4:	f2c0 809e 	blt.w	801f704 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f5c8:	f11e 0e01 	adds.w	lr, lr, #1
 801f5cc:	f100 808f 	bmi.w	801f6ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f5d0:	4571      	cmp	r1, lr
 801f5d2:	f2c0 808c 	blt.w	801f6ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f5d6:	3301      	adds	r3, #1
 801f5d8:	f100 8089 	bmi.w	801f6ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f5dc:	429a      	cmp	r2, r3
 801f5de:	f2c0 8086 	blt.w	801f6ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f5e2:	f8dd b018 	ldr.w	fp, [sp, #24]
 801f5e6:	46c8      	mov	r8, r9
 801f5e8:	f1bb 0f00 	cmp.w	fp, #0
 801f5ec:	f340 80a6 	ble.w	801f73c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f5f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f5f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f5f4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f5f8:	689b      	ldr	r3, [r3, #8]
 801f5fa:	1422      	asrs	r2, r4, #16
 801f5fc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f600:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801f604:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f608:	f100 80e3 	bmi.w	801f7d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f60c:	f103 3aff 	add.w	sl, r3, #4294967295
 801f610:	4552      	cmp	r2, sl
 801f612:	f280 80de 	bge.w	801f7d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f616:	f1bc 0f00 	cmp.w	ip, #0
 801f61a:	f2c0 80da 	blt.w	801f7d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f61e:	f10e 3aff 	add.w	sl, lr, #4294967295
 801f622:	45d4      	cmp	ip, sl
 801f624:	f280 80d5 	bge.w	801f7d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f628:	b21b      	sxth	r3, r3
 801f62a:	fb0c 2203 	mla	r2, ip, r3, r2
 801f62e:	9d07      	ldr	r5, [sp, #28]
 801f630:	eb05 0a02 	add.w	sl, r5, r2
 801f634:	5caa      	ldrb	r2, [r5, r2]
 801f636:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801f63a:	2800      	cmp	r0, #0
 801f63c:	f000 80c0 	beq.w	801f7c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f640:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f644:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801f648:	920b      	str	r2, [sp, #44]	; 0x2c
 801f64a:	b151      	cbz	r1, 801f662 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f64c:	eb0a 0203 	add.w	r2, sl, r3
 801f650:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f654:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f658:	9309      	str	r3, [sp, #36]	; 0x24
 801f65a:	7853      	ldrb	r3, [r2, #1]
 801f65c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f660:	930c      	str	r3, [sp, #48]	; 0x30
 801f662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f664:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f666:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f66a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f66e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f672:	ea4c 0c03 	orr.w	ip, ip, r3
 801f676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f678:	041b      	lsls	r3, r3, #16
 801f67a:	fb10 f201 	smulbb	r2, r0, r1
 801f67e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f682:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f686:	10d2      	asrs	r2, r2, #3
 801f688:	432b      	orrs	r3, r5
 801f68a:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801f68e:	4353      	muls	r3, r2
 801f690:	fb0a 330c 	mla	r3, sl, ip, r3
 801f694:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f698:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f69c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f6a0:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f6a4:	f1c1 0c10 	rsb	ip, r1, #16
 801f6a8:	ebac 0c00 	sub.w	ip, ip, r0
 801f6ac:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f6b0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6b6:	0418      	lsls	r0, r3, #16
 801f6b8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f6bc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f6c0:	4318      	orrs	r0, r3
 801f6c2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f6c6:	fb02 c200 	mla	r2, r2, r0, ip
 801f6ca:	0d53      	lsrs	r3, r2, #21
 801f6cc:	0952      	lsrs	r2, r2, #5
 801f6ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f6d2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f6d6:	431a      	orrs	r2, r3
 801f6d8:	f8a8 2000 	strh.w	r2, [r8]
 801f6dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f6de:	441c      	add	r4, r3
 801f6e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f6e2:	f108 0802 	add.w	r8, r8, #2
 801f6e6:	441e      	add	r6, r3
 801f6e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f6ec:	e77c      	b.n	801f5e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f6ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f6f0:	441c      	add	r4, r3
 801f6f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f6f4:	441e      	add	r6, r3
 801f6f6:	9b06      	ldr	r3, [sp, #24]
 801f6f8:	3b01      	subs	r3, #1
 801f6fa:	9306      	str	r3, [sp, #24]
 801f6fc:	f109 0902 	add.w	r9, r9, #2
 801f700:	e752      	b.n	801f5a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f702:	d020      	beq.n	801f746 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f704:	9b06      	ldr	r3, [sp, #24]
 801f706:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f708:	3b01      	subs	r3, #1
 801f70a:	fb00 4003 	mla	r0, r0, r3, r4
 801f70e:	1400      	asrs	r0, r0, #16
 801f710:	f53f af67 	bmi.w	801f5e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f714:	3901      	subs	r1, #1
 801f716:	4288      	cmp	r0, r1
 801f718:	f6bf af63 	bge.w	801f5e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f71c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801f71e:	fb01 6303 	mla	r3, r1, r3, r6
 801f722:	141b      	asrs	r3, r3, #16
 801f724:	f53f af5d 	bmi.w	801f5e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f728:	3a01      	subs	r2, #1
 801f72a:	4293      	cmp	r3, r2
 801f72c:	f6bf af59 	bge.w	801f5e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f730:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f734:	46ca      	mov	sl, r9
 801f736:	f1b8 0f00 	cmp.w	r8, #0
 801f73a:	dc67      	bgt.n	801f80c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f73c:	9b06      	ldr	r3, [sp, #24]
 801f73e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801f742:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801f746:	9b08      	ldr	r3, [sp, #32]
 801f748:	2b00      	cmp	r3, #0
 801f74a:	f340 80d7 	ble.w	801f8fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801f74e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f752:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f756:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f75a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f75c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f760:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f764:	eeb0 6a62 	vmov.f32	s12, s5
 801f768:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f76c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f770:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f774:	ee16 4a10 	vmov	r4, s12
 801f778:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f77c:	eeb0 6a43 	vmov.f32	s12, s6
 801f780:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f784:	ee12 2a90 	vmov	r2, s5
 801f788:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f78c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f790:	ee13 2a10 	vmov	r2, s6
 801f794:	931f      	str	r3, [sp, #124]	; 0x7c
 801f796:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f798:	fb92 f3f3 	sdiv	r3, r2, r3
 801f79c:	9320      	str	r3, [sp, #128]	; 0x80
 801f79e:	9b08      	ldr	r3, [sp, #32]
 801f7a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f7a2:	3b01      	subs	r3, #1
 801f7a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7a8:	9308      	str	r3, [sp, #32]
 801f7aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f7ac:	bf08      	it	eq
 801f7ae:	4613      	moveq	r3, r2
 801f7b0:	ee16 6a10 	vmov	r6, s12
 801f7b4:	9306      	str	r3, [sp, #24]
 801f7b6:	eeb0 3a67 	vmov.f32	s6, s15
 801f7ba:	eef0 2a47 	vmov.f32	s5, s14
 801f7be:	e6e4      	b.n	801f58a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f7c0:	2900      	cmp	r1, #0
 801f7c2:	f43f af4e 	beq.w	801f662 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f7c6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f7ca:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f7ce:	9309      	str	r3, [sp, #36]	; 0x24
 801f7d0:	e747      	b.n	801f662 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f7d2:	f112 0a01 	adds.w	sl, r2, #1
 801f7d6:	d481      	bmi.n	801f6dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f7d8:	4553      	cmp	r3, sl
 801f7da:	f6ff af7f 	blt.w	801f6dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f7de:	f11c 0a01 	adds.w	sl, ip, #1
 801f7e2:	f53f af7b 	bmi.w	801f6dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f7e6:	45d6      	cmp	lr, sl
 801f7e8:	f6ff af78 	blt.w	801f6dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f7ec:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801f7f0:	b21b      	sxth	r3, r3
 801f7f2:	fa0f f28e 	sxth.w	r2, lr
 801f7f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f7fa:	9201      	str	r2, [sp, #4]
 801f7fc:	9300      	str	r3, [sp, #0]
 801f7fe:	9a07      	ldr	r2, [sp, #28]
 801f800:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f802:	463b      	mov	r3, r7
 801f804:	4641      	mov	r1, r8
 801f806:	f7ff fe21 	bl	801f44c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801f80a:	e767      	b.n	801f6dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f80c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f80e:	9d07      	ldr	r5, [sp, #28]
 801f810:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f814:	1422      	asrs	r2, r4, #16
 801f816:	1431      	asrs	r1, r6, #16
 801f818:	fb03 2101 	mla	r1, r3, r1, r2
 801f81c:	9a07      	ldr	r2, [sp, #28]
 801f81e:	440a      	add	r2, r1
 801f820:	5c69      	ldrb	r1, [r5, r1]
 801f822:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801f826:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f82a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801f82e:	f1be 0f00 	cmp.w	lr, #0
 801f832:	d05c      	beq.n	801f8ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801f834:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f838:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801f83c:	950d      	str	r5, [sp, #52]	; 0x34
 801f83e:	b150      	cbz	r0, 801f856 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f840:	eb02 0c03 	add.w	ip, r2, r3
 801f844:	5cd3      	ldrb	r3, [r2, r3]
 801f846:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f84a:	930a      	str	r3, [sp, #40]	; 0x28
 801f84c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f850:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f854:	930e      	str	r3, [sp, #56]	; 0x38
 801f856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f858:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f85a:	fb1e f200 	smulbb	r2, lr, r0
 801f85e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f862:	10d2      	asrs	r2, r2, #3
 801f864:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f868:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f86c:	ea4c 0c03 	orr.w	ip, ip, r3
 801f870:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801f874:	9311      	str	r3, [sp, #68]	; 0x44
 801f876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f878:	041b      	lsls	r3, r3, #16
 801f87a:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801f87e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f882:	ea43 030b 	orr.w	r3, r3, fp
 801f886:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f888:	4353      	muls	r3, r2
 801f88a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f88e:	fb05 3c0c 	mla	ip, r5, ip, r3
 801f892:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f896:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801f89a:	ea43 0b01 	orr.w	fp, r3, r1
 801f89e:	f1c0 0110 	rsb	r1, r0, #16
 801f8a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8a4:	eba1 0e0e 	sub.w	lr, r1, lr
 801f8a8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801f8ac:	fb0e cc0b 	mla	ip, lr, fp, ip
 801f8b0:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801f8b4:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801f8b8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f8bc:	ea4b 0e0e 	orr.w	lr, fp, lr
 801f8c0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f8c4:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f8c8:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801f8cc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f8d0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f8d4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f8d8:	ea43 0c0c 	orr.w	ip, r3, ip
 801f8dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f8de:	f82a cb02 	strh.w	ip, [sl], #2
 801f8e2:	441c      	add	r4, r3
 801f8e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f8e6:	f108 38ff 	add.w	r8, r8, #4294967295
 801f8ea:	441e      	add	r6, r3
 801f8ec:	e723      	b.n	801f736 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f8ee:	2800      	cmp	r0, #0
 801f8f0:	d0b1      	beq.n	801f856 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f8f2:	5cd3      	ldrb	r3, [r2, r3]
 801f8f4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f8f8:	930a      	str	r3, [sp, #40]	; 0x28
 801f8fa:	e7ac      	b.n	801f856 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f8fc:	b013      	add	sp, #76	; 0x4c
 801f8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f902 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801f902:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f906:	880d      	ldrh	r5, [r1, #0]
 801f908:	b087      	sub	sp, #28
 801f90a:	10ef      	asrs	r7, r5, #3
 801f90c:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801f910:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f914:	00ed      	lsls	r5, r5, #3
 801f916:	9701      	str	r7, [sp, #4]
 801f918:	b2ed      	uxtb	r5, r5
 801f91a:	9502      	str	r5, [sp, #8]
 801f91c:	9d01      	ldr	r5, [sp, #4]
 801f91e:	9103      	str	r1, [sp, #12]
 801f920:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801f924:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801f928:	9902      	ldr	r1, [sp, #8]
 801f92a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801f92e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801f932:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801f936:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801f93a:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801f93e:	022d      	lsls	r5, r5, #8
 801f940:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801f944:	fb06 0709 	mla	r7, r6, r9, r0
 801f948:	430d      	orrs	r5, r1
 801f94a:	2e00      	cmp	r6, #0
 801f94c:	eb02 0c07 	add.w	ip, r2, r7
 801f950:	9505      	str	r5, [sp, #20]
 801f952:	f2c0 80b6 	blt.w	801fac2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801f956:	45b3      	cmp	fp, r6
 801f958:	f340 80b3 	ble.w	801fac2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801f95c:	2800      	cmp	r0, #0
 801f95e:	f2c0 80ae 	blt.w	801fabe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801f962:	4581      	cmp	r9, r0
 801f964:	f340 80ab 	ble.w	801fabe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801f968:	5dd7      	ldrb	r7, [r2, r7]
 801f96a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f96e:	441f      	add	r7, r3
 801f970:	1c42      	adds	r2, r0, #1
 801f972:	f100 80a9 	bmi.w	801fac8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f976:	4591      	cmp	r9, r2
 801f978:	f340 80a6 	ble.w	801fac8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f97c:	2c00      	cmp	r4, #0
 801f97e:	f000 80a3 	beq.w	801fac8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f982:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f98a:	441d      	add	r5, r3
 801f98c:	3601      	adds	r6, #1
 801f98e:	f100 809f 	bmi.w	801fad0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f992:	45b3      	cmp	fp, r6
 801f994:	f340 809c 	ble.w	801fad0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f998:	f1be 0f00 	cmp.w	lr, #0
 801f99c:	f000 8098 	beq.w	801fad0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f9a0:	2800      	cmp	r0, #0
 801f9a2:	f2c0 8093 	blt.w	801facc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f9a6:	4581      	cmp	r9, r0
 801f9a8:	f340 8090 	ble.w	801facc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f9ac:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801f9b0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f9b4:	441e      	add	r6, r3
 801f9b6:	3001      	adds	r0, #1
 801f9b8:	f100 808d 	bmi.w	801fad6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f9bc:	4581      	cmp	r9, r0
 801f9be:	f340 808a 	ble.w	801fad6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f9c2:	2c00      	cmp	r4, #0
 801f9c4:	f000 8087 	beq.w	801fad6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f9c8:	44e1      	add	r9, ip
 801f9ca:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f9ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f9d2:	4413      	add	r3, r2
 801f9d4:	b2a4      	uxth	r4, r4
 801f9d6:	fa1f fe8e 	uxth.w	lr, lr
 801f9da:	fb04 fb0e 	mul.w	fp, r4, lr
 801f9de:	0124      	lsls	r4, r4, #4
 801f9e0:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801f9e4:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801f9e8:	eba4 040b 	sub.w	r4, r4, fp
 801f9ec:	fa1f f08e 	uxth.w	r0, lr
 801f9f0:	b2a2      	uxth	r2, r4
 801f9f2:	78ac      	ldrb	r4, [r5, #2]
 801f9f4:	f897 c002 	ldrb.w	ip, [r7, #2]
 801f9f8:	9901      	ldr	r1, [sp, #4]
 801f9fa:	eba9 0900 	sub.w	r9, r9, r0
 801f9fe:	fa1f f989 	uxth.w	r9, r9
 801fa02:	4354      	muls	r4, r2
 801fa04:	fb09 440c 	mla	r4, r9, ip, r4
 801fa08:	f896 c002 	ldrb.w	ip, [r6, #2]
 801fa0c:	fb00 440c 	mla	r4, r0, ip, r4
 801fa10:	f893 c002 	ldrb.w	ip, [r3, #2]
 801fa14:	fa1f fe88 	uxth.w	lr, r8
 801fa18:	ea6f 0808 	mvn.w	r8, r8
 801fa1c:	fa5f f888 	uxtb.w	r8, r8
 801fa20:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801fa24:	fb1a fa08 	smulbb	sl, sl, r8
 801fa28:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801fa2c:	fb0c ac0e 	mla	ip, ip, lr, sl
 801fa30:	f895 a001 	ldrb.w	sl, [r5, #1]
 801fa34:	787c      	ldrb	r4, [r7, #1]
 801fa36:	782d      	ldrb	r5, [r5, #0]
 801fa38:	783f      	ldrb	r7, [r7, #0]
 801fa3a:	fb02 fa0a 	mul.w	sl, r2, sl
 801fa3e:	fb09 aa04 	mla	sl, r9, r4, sl
 801fa42:	7874      	ldrb	r4, [r6, #1]
 801fa44:	436a      	muls	r2, r5
 801fa46:	7835      	ldrb	r5, [r6, #0]
 801fa48:	fb00 aa04 	mla	sl, r0, r4, sl
 801fa4c:	fb09 2207 	mla	r2, r9, r7, r2
 801fa50:	785c      	ldrb	r4, [r3, #1]
 801fa52:	781b      	ldrb	r3, [r3, #0]
 801fa54:	fb00 2005 	mla	r0, r0, r5, r2
 801fa58:	fb0b a404 	mla	r4, fp, r4, sl
 801fa5c:	fb0b 0b03 	mla	fp, fp, r3, r0
 801fa60:	9b02      	ldr	r3, [sp, #8]
 801fa62:	fb11 fa08 	smulbb	sl, r1, r8
 801fa66:	fa1f fc8c 	uxth.w	ip, ip
 801fa6a:	fb13 f808 	smulbb	r8, r3, r8
 801fa6e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801fa72:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801fa76:	fb04 a40e 	mla	r4, r4, lr, sl
 801fa7a:	f10c 0301 	add.w	r3, ip, #1
 801fa7e:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801fa82:	fa1f fe8e 	uxth.w	lr, lr
 801fa86:	b2a4      	uxth	r4, r4
 801fa88:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fa8c:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801fa90:	f104 0a01 	add.w	sl, r4, #1
 801fa94:	f10e 0c01 	add.w	ip, lr, #1
 801fa98:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fa9c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801faa0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801faa4:	0964      	lsrs	r4, r4, #5
 801faa6:	ea4c 0c03 	orr.w	ip, ip, r3
 801faaa:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801faae:	9b03      	ldr	r3, [sp, #12]
 801fab0:	ea4c 0c04 	orr.w	ip, ip, r4
 801fab4:	f8a3 c000 	strh.w	ip, [r3]
 801fab8:	b007      	add	sp, #28
 801faba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fabe:	af05      	add	r7, sp, #20
 801fac0:	e756      	b.n	801f970 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801fac2:	ad05      	add	r5, sp, #20
 801fac4:	462f      	mov	r7, r5
 801fac6:	e761      	b.n	801f98c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801fac8:	ad05      	add	r5, sp, #20
 801faca:	e75f      	b.n	801f98c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801facc:	ae05      	add	r6, sp, #20
 801face:	e772      	b.n	801f9b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801fad0:	ab05      	add	r3, sp, #20
 801fad2:	461e      	mov	r6, r3
 801fad4:	e77e      	b.n	801f9d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801fad6:	ab05      	add	r3, sp, #20
 801fad8:	e77c      	b.n	801f9d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801fada <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fade:	b095      	sub	sp, #84	; 0x54
 801fae0:	9212      	str	r2, [sp, #72]	; 0x48
 801fae2:	9309      	str	r3, [sp, #36]	; 0x24
 801fae4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fae6:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801faea:	930f      	str	r3, [sp, #60]	; 0x3c
 801faec:	910e      	str	r1, [sp, #56]	; 0x38
 801faee:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801faf2:	9013      	str	r0, [sp, #76]	; 0x4c
 801faf4:	6850      	ldr	r0, [r2, #4]
 801faf6:	6812      	ldr	r2, [r2, #0]
 801faf8:	fb00 1303 	mla	r3, r0, r3, r1
 801fafc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fb00:	930a      	str	r3, [sp, #40]	; 0x28
 801fb02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fb04:	681b      	ldr	r3, [r3, #0]
 801fb06:	930d      	str	r3, [sp, #52]	; 0x34
 801fb08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fb0a:	685c      	ldr	r4, [r3, #4]
 801fb0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fb0e:	43db      	mvns	r3, r3
 801fb10:	b2db      	uxtb	r3, r3
 801fb12:	3404      	adds	r4, #4
 801fb14:	930b      	str	r3, [sp, #44]	; 0x2c
 801fb16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb18:	2b00      	cmp	r3, #0
 801fb1a:	dc03      	bgt.n	801fb24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fb1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fb1e:	2b00      	cmp	r3, #0
 801fb20:	f340 8255 	ble.w	801ffce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801fb24:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fb26:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fb2a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fb2e:	1e48      	subs	r0, r1, #1
 801fb30:	1e55      	subs	r5, r2, #1
 801fb32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	f340 80f9 	ble.w	801fd2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801fb3a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801fb3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fb3e:	1436      	asrs	r6, r6, #16
 801fb40:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fb44:	d406      	bmi.n	801fb54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fb46:	4286      	cmp	r6, r0
 801fb48:	da04      	bge.n	801fb54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	db02      	blt.n	801fb54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fb4e:	42ab      	cmp	r3, r5
 801fb50:	f2c0 80ed 	blt.w	801fd2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801fb54:	3601      	adds	r6, #1
 801fb56:	f100 80da 	bmi.w	801fd0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fb5a:	42b1      	cmp	r1, r6
 801fb5c:	f2c0 80d7 	blt.w	801fd0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fb60:	3301      	adds	r3, #1
 801fb62:	f100 80d4 	bmi.w	801fd0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fb66:	429a      	cmp	r2, r3
 801fb68:	f2c0 80d1 	blt.w	801fd0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fb6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb6e:	9311      	str	r3, [sp, #68]	; 0x44
 801fb70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb72:	930c      	str	r3, [sp, #48]	; 0x30
 801fb74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	f340 80fa 	ble.w	801fd70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801fb7c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801fb7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fb80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fb82:	68c6      	ldr	r6, [r0, #12]
 801fb84:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801fb86:	141d      	asrs	r5, r3, #16
 801fb88:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fb8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fb8e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fb90:	1400      	asrs	r0, r0, #16
 801fb92:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fb96:	6892      	ldr	r2, [r2, #8]
 801fb98:	f100 813e 	bmi.w	801fe18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fb9c:	1e57      	subs	r7, r2, #1
 801fb9e:	42b8      	cmp	r0, r7
 801fba0:	f280 813a 	bge.w	801fe18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fba4:	2d00      	cmp	r5, #0
 801fba6:	f2c0 8137 	blt.w	801fe18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fbaa:	1e77      	subs	r7, r6, #1
 801fbac:	42bd      	cmp	r5, r7
 801fbae:	f280 8133 	bge.w	801fe18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fbb2:	b212      	sxth	r2, r2
 801fbb4:	fb05 0002 	mla	r0, r5, r2, r0
 801fbb8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fbba:	f815 a000 	ldrb.w	sl, [r5, r0]
 801fbbe:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801fbc2:	182e      	adds	r6, r5, r0
 801fbc4:	eb04 050a 	add.w	r5, r4, sl
 801fbc8:	2b00      	cmp	r3, #0
 801fbca:	f000 8117 	beq.w	801fdfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fbce:	f896 c001 	ldrb.w	ip, [r6, #1]
 801fbd2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fbd6:	44a4      	add	ip, r4
 801fbd8:	2900      	cmp	r1, #0
 801fbda:	f000 8117 	beq.w	801fe0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801fbde:	18b0      	adds	r0, r6, r2
 801fbe0:	5cb2      	ldrb	r2, [r6, r2]
 801fbe2:	7840      	ldrb	r0, [r0, #1]
 801fbe4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fbe8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fbec:	4422      	add	r2, r4
 801fbee:	4420      	add	r0, r4
 801fbf0:	b29b      	uxth	r3, r3
 801fbf2:	b289      	uxth	r1, r1
 801fbf4:	fb03 f901 	mul.w	r9, r3, r1
 801fbf8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fbfc:	011b      	lsls	r3, r3, #4
 801fbfe:	b289      	uxth	r1, r1
 801fc00:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801fc04:	f895 b002 	ldrb.w	fp, [r5, #2]
 801fc08:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fc0a:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801fc0e:	f8b6 e000 	ldrh.w	lr, [r6]
 801fc12:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801fc16:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801fc1a:	eba3 0309 	sub.w	r3, r3, r9
 801fc1e:	b29b      	uxth	r3, r3
 801fc20:	eba8 0801 	sub.w	r8, r8, r1
 801fc24:	fa1f f888 	uxth.w	r8, r8
 801fc28:	435f      	muls	r7, r3
 801fc2a:	fb08 770b 	mla	r7, r8, fp, r7
 801fc2e:	f892 b002 	ldrb.w	fp, [r2, #2]
 801fc32:	9310      	str	r3, [sp, #64]	; 0x40
 801fc34:	fb01 770b 	mla	r7, r1, fp, r7
 801fc38:	f890 b002 	ldrb.w	fp, [r0, #2]
 801fc3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc3e:	fb09 770b 	mla	r7, r9, fp, r7
 801fc42:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801fc46:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801fc4a:	fb1b fb03 	smulbb	fp, fp, r3
 801fc4e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801fc52:	fb07 b706 	mla	r7, r7, r6, fp
 801fc56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc58:	f895 b001 	ldrb.w	fp, [r5, #1]
 801fc5c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801fc60:	f89c c000 	ldrb.w	ip, [ip]
 801fc64:	435d      	muls	r5, r3
 801fc66:	fb08 550b 	mla	r5, r8, fp, r5
 801fc6a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fc6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc70:	fb01 550b 	mla	r5, r1, fp, r5
 801fc74:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fc78:	fb09 550b 	mla	r5, r9, fp, r5
 801fc7c:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801fc80:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801fc84:	fb1b fb03 	smulbb	fp, fp, r3
 801fc88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc8a:	fb03 f30c 	mul.w	r3, r3, ip
 801fc8e:	f892 c000 	ldrb.w	ip, [r2]
 801fc92:	fb08 330a 	mla	r3, r8, sl, r3
 801fc96:	fb01 330c 	mla	r3, r1, ip, r3
 801fc9a:	f890 c000 	ldrb.w	ip, [r0]
 801fc9e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fca2:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fca8:	fa5f fe8e 	uxtb.w	lr, lr
 801fcac:	b2bf      	uxth	r7, r7
 801fcae:	fb1e fe03 	smulbb	lr, lr, r3
 801fcb2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801fcb6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801fcba:	fb05 b506 	mla	r5, r5, r6, fp
 801fcbe:	1c7b      	adds	r3, r7, #1
 801fcc0:	fb0c e606 	mla	r6, ip, r6, lr
 801fcc4:	b2ad      	uxth	r5, r5
 801fcc6:	b2b6      	uxth	r6, r6
 801fcc8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801fccc:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801fcd0:	f105 0b01 	add.w	fp, r5, #1
 801fcd4:	1c77      	adds	r7, r6, #1
 801fcd6:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801fcda:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801fcde:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fce2:	096d      	lsrs	r5, r5, #5
 801fce4:	431f      	orrs	r7, r3
 801fce6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fcea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fcec:	433d      	orrs	r5, r7
 801fcee:	801d      	strh	r5, [r3, #0]
 801fcf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fcf2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fcf4:	3302      	adds	r3, #2
 801fcf6:	930c      	str	r3, [sp, #48]	; 0x30
 801fcf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fcfa:	4413      	add	r3, r2
 801fcfc:	931f      	str	r3, [sp, #124]	; 0x7c
 801fcfe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801fd00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fd02:	4413      	add	r3, r2
 801fd04:	9320      	str	r3, [sp, #128]	; 0x80
 801fd06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fd08:	3b01      	subs	r3, #1
 801fd0a:	9311      	str	r3, [sp, #68]	; 0x44
 801fd0c:	e732      	b.n	801fb74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801fd0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fd10:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801fd12:	4433      	add	r3, r6
 801fd14:	931f      	str	r3, [sp, #124]	; 0x7c
 801fd16:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801fd18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fd1a:	4433      	add	r3, r6
 801fd1c:	9320      	str	r3, [sp, #128]	; 0x80
 801fd1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd20:	3b01      	subs	r3, #1
 801fd22:	9309      	str	r3, [sp, #36]	; 0x24
 801fd24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd26:	3302      	adds	r3, #2
 801fd28:	930a      	str	r3, [sp, #40]	; 0x28
 801fd2a:	e702      	b.n	801fb32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801fd2c:	d027      	beq.n	801fd7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801fd2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd30:	9821      	ldr	r0, [sp, #132]	; 0x84
 801fd32:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801fd34:	3b01      	subs	r3, #1
 801fd36:	fb00 5003 	mla	r0, r0, r3, r5
 801fd3a:	1400      	asrs	r0, r0, #16
 801fd3c:	f53f af16 	bmi.w	801fb6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd40:	3901      	subs	r1, #1
 801fd42:	4288      	cmp	r0, r1
 801fd44:	f6bf af12 	bge.w	801fb6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd48:	9922      	ldr	r1, [sp, #136]	; 0x88
 801fd4a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801fd4c:	fb01 0303 	mla	r3, r1, r3, r0
 801fd50:	141b      	asrs	r3, r3, #16
 801fd52:	f53f af0b 	bmi.w	801fb6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd56:	3a01      	subs	r2, #1
 801fd58:	4293      	cmp	r3, r2
 801fd5a:	f6bf af07 	bge.w	801fb6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd60:	9311      	str	r3, [sp, #68]	; 0x44
 801fd62:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801fd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd68:	930c      	str	r3, [sp, #48]	; 0x30
 801fd6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fd6c:	2b00      	cmp	r3, #0
 801fd6e:	dc70      	bgt.n	801fe52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801fd70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fd74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd78:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fd7c:	930a      	str	r3, [sp, #40]	; 0x28
 801fd7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd80:	2b00      	cmp	r3, #0
 801fd82:	f340 8124 	ble.w	801ffce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801fd86:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fd8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fd92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fd94:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd98:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fda0:	eef0 6a62 	vmov.f32	s13, s5
 801fda4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fda8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdac:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fdb0:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801fdb4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fdb8:	eef0 6a43 	vmov.f32	s13, s6
 801fdbc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fdc0:	ee12 2a90 	vmov	r2, s5
 801fdc4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fdc8:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdcc:	ee13 2a10 	vmov	r2, s6
 801fdd0:	9321      	str	r3, [sp, #132]	; 0x84
 801fdd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fdd4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdd8:	9322      	str	r3, [sp, #136]	; 0x88
 801fdda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fdde:	3b01      	subs	r3, #1
 801fde0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fde4:	930e      	str	r3, [sp, #56]	; 0x38
 801fde6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fde8:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801fdec:	bf08      	it	eq
 801fdee:	4613      	moveq	r3, r2
 801fdf0:	9309      	str	r3, [sp, #36]	; 0x24
 801fdf2:	eeb0 3a67 	vmov.f32	s6, s15
 801fdf6:	eef0 2a47 	vmov.f32	s5, s14
 801fdfa:	e68c      	b.n	801fb16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fdfc:	b149      	cbz	r1, 801fe12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801fdfe:	5cb2      	ldrb	r2, [r6, r2]
 801fe00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fe04:	4422      	add	r2, r4
 801fe06:	4628      	mov	r0, r5
 801fe08:	46ac      	mov	ip, r5
 801fe0a:	e6f1      	b.n	801fbf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fe0c:	4628      	mov	r0, r5
 801fe0e:	462a      	mov	r2, r5
 801fe10:	e6ee      	b.n	801fbf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fe12:	4628      	mov	r0, r5
 801fe14:	462a      	mov	r2, r5
 801fe16:	e7f7      	b.n	801fe08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801fe18:	1c47      	adds	r7, r0, #1
 801fe1a:	f53f af69 	bmi.w	801fcf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fe1e:	42ba      	cmp	r2, r7
 801fe20:	f6ff af66 	blt.w	801fcf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fe24:	1c6f      	adds	r7, r5, #1
 801fe26:	f53f af63 	bmi.w	801fcf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fe2a:	42be      	cmp	r6, r7
 801fe2c:	f6ff af60 	blt.w	801fcf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fe30:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801fe32:	9002      	str	r0, [sp, #8]
 801fe34:	b236      	sxth	r6, r6
 801fe36:	b212      	sxth	r2, r2
 801fe38:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801fe3c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801fe40:	9200      	str	r2, [sp, #0]
 801fe42:	9601      	str	r6, [sp, #4]
 801fe44:	4623      	mov	r3, r4
 801fe46:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801fe4a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fe4c:	f7ff fd59 	bl	801f902 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801fe50:	e74e      	b.n	801fcf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fe52:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fe54:	9820      	ldr	r0, [sp, #128]	; 0x80
 801fe56:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801fe58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fe5a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fe5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fe60:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fe64:	142d      	asrs	r5, r5, #16
 801fe66:	1400      	asrs	r0, r0, #16
 801fe68:	fb02 5000 	mla	r0, r2, r0, r5
 801fe6c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fe6e:	f815 9000 	ldrb.w	r9, [r5, r0]
 801fe72:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fe76:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fe7a:	182e      	adds	r6, r5, r0
 801fe7c:	eb04 0509 	add.w	r5, r4, r9
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	f000 8096 	beq.w	801ffb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801fe86:	7877      	ldrb	r7, [r6, #1]
 801fe88:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fe8c:	4427      	add	r7, r4
 801fe8e:	2900      	cmp	r1, #0
 801fe90:	f000 8097 	beq.w	801ffc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801fe94:	18b0      	adds	r0, r6, r2
 801fe96:	5cb2      	ldrb	r2, [r6, r2]
 801fe98:	7840      	ldrb	r0, [r0, #1]
 801fe9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fe9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fea2:	4422      	add	r2, r4
 801fea4:	4420      	add	r0, r4
 801fea6:	b29b      	uxth	r3, r3
 801fea8:	b289      	uxth	r1, r1
 801feaa:	fb03 f801 	mul.w	r8, r3, r1
 801feae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801feb0:	f895 b002 	ldrb.w	fp, [r5, #2]
 801feb4:	f8b6 c000 	ldrh.w	ip, [r6]
 801feb8:	78be      	ldrb	r6, [r7, #2]
 801feba:	f814 9009 	ldrb.w	r9, [r4, r9]
 801febe:	011b      	lsls	r3, r3, #4
 801fec0:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801fec4:	b289      	uxth	r1, r1
 801fec6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801feca:	eba3 0308 	sub.w	r3, r3, r8
 801fece:	b29b      	uxth	r3, r3
 801fed0:	ebae 0e01 	sub.w	lr, lr, r1
 801fed4:	fa1f fe8e 	uxth.w	lr, lr
 801fed8:	435e      	muls	r6, r3
 801feda:	fb0e 660b 	mla	r6, lr, fp, r6
 801fede:	f892 b002 	ldrb.w	fp, [r2, #2]
 801fee2:	9310      	str	r3, [sp, #64]	; 0x40
 801fee4:	fb01 660b 	mla	r6, r1, fp, r6
 801fee8:	f890 b002 	ldrb.w	fp, [r0, #2]
 801feec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801feee:	fb08 660b 	mla	r6, r8, fp, r6
 801fef2:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801fef6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801fefa:	fb1b fb03 	smulbb	fp, fp, r3
 801fefe:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ff02:	fb06 b60a 	mla	r6, r6, sl, fp
 801ff06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff08:	f895 b001 	ldrb.w	fp, [r5, #1]
 801ff0c:	787d      	ldrb	r5, [r7, #1]
 801ff0e:	783f      	ldrb	r7, [r7, #0]
 801ff10:	435d      	muls	r5, r3
 801ff12:	fb0e 550b 	mla	r5, lr, fp, r5
 801ff16:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ff1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff1c:	fb01 550b 	mla	r5, r1, fp, r5
 801ff20:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ff24:	fb08 550b 	mla	r5, r8, fp, r5
 801ff28:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801ff2c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801ff30:	fb1b fb03 	smulbb	fp, fp, r3
 801ff34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff36:	437b      	muls	r3, r7
 801ff38:	7817      	ldrb	r7, [r2, #0]
 801ff3a:	fb0e 3309 	mla	r3, lr, r9, r3
 801ff3e:	fb01 3307 	mla	r3, r1, r7, r3
 801ff42:	7807      	ldrb	r7, [r0, #0]
 801ff44:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ff48:	fb08 3707 	mla	r7, r8, r7, r3
 801ff4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff4e:	fa5f fc8c 	uxtb.w	ip, ip
 801ff52:	fb1c fc03 	smulbb	ip, ip, r3
 801ff56:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801ff5a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ff5e:	fb05 b50a 	mla	r5, r5, sl, fp
 801ff62:	fb07 c70a 	mla	r7, r7, sl, ip
 801ff66:	b2b6      	uxth	r6, r6
 801ff68:	b2ad      	uxth	r5, r5
 801ff6a:	b2bf      	uxth	r7, r7
 801ff6c:	1c73      	adds	r3, r6, #1
 801ff6e:	1c7a      	adds	r2, r7, #1
 801ff70:	f105 0b01 	add.w	fp, r5, #1
 801ff74:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801ff78:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801ff7c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801ff80:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ff84:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801ff88:	096d      	lsrs	r5, r5, #5
 801ff8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ff8c:	4316      	orrs	r6, r2
 801ff8e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ff92:	432e      	orrs	r6, r5
 801ff94:	f823 6b02 	strh.w	r6, [r3], #2
 801ff98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ff9a:	930c      	str	r3, [sp, #48]	; 0x30
 801ff9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ff9e:	4413      	add	r3, r2
 801ffa0:	931f      	str	r3, [sp, #124]	; 0x7c
 801ffa2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801ffa4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ffa6:	4413      	add	r3, r2
 801ffa8:	9320      	str	r3, [sp, #128]	; 0x80
 801ffaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ffac:	3b01      	subs	r3, #1
 801ffae:	9311      	str	r3, [sp, #68]	; 0x44
 801ffb0:	e6db      	b.n	801fd6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801ffb2:	b149      	cbz	r1, 801ffc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801ffb4:	5cb2      	ldrb	r2, [r6, r2]
 801ffb6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ffba:	4422      	add	r2, r4
 801ffbc:	4628      	mov	r0, r5
 801ffbe:	462f      	mov	r7, r5
 801ffc0:	e771      	b.n	801fea6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801ffc2:	4628      	mov	r0, r5
 801ffc4:	462a      	mov	r2, r5
 801ffc6:	e76e      	b.n	801fea6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801ffc8:	4628      	mov	r0, r5
 801ffca:	462a      	mov	r2, r5
 801ffcc:	e7f7      	b.n	801ffbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801ffce:	b015      	add	sp, #84	; 0x54
 801ffd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ffd4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801ffd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffd8:	880f      	ldrh	r7, [r1, #0]
 801ffda:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801ffde:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801ffe2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801ffe6:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801ffea:	023c      	lsls	r4, r7, #8
 801ffec:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801fff0:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801fff4:	017c      	lsls	r4, r7, #5
 801fff6:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801fffa:	00ff      	lsls	r7, r7, #3
 801fffc:	ea4b 0404 	orr.w	r4, fp, r4
 8020000:	b2ff      	uxtb	r7, r7
 8020002:	fb05 ca0e 	mla	sl, r5, lr, ip
 8020006:	4327      	orrs	r7, r4
 8020008:	2d00      	cmp	r5, #0
 802000a:	eb02 080a 	add.w	r8, r2, sl
 802000e:	9701      	str	r7, [sp, #4]
 8020010:	db7e      	blt.n	8020110 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8020012:	45a9      	cmp	r9, r5
 8020014:	dd7c      	ble.n	8020110 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8020016:	f1bc 0f00 	cmp.w	ip, #0
 802001a:	db77      	blt.n	802010c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 802001c:	45e6      	cmp	lr, ip
 802001e:	dd75      	ble.n	802010c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8020020:	f812 700a 	ldrb.w	r7, [r2, sl]
 8020024:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020028:	441f      	add	r7, r3
 802002a:	f11c 0201 	adds.w	r2, ip, #1
 802002e:	d472      	bmi.n	8020116 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020030:	4596      	cmp	lr, r2
 8020032:	dd70      	ble.n	8020116 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020034:	2800      	cmp	r0, #0
 8020036:	d06e      	beq.n	8020116 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020038:	f898 4001 	ldrb.w	r4, [r8, #1]
 802003c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020040:	441c      	add	r4, r3
 8020042:	3501      	adds	r5, #1
 8020044:	d46b      	bmi.n	802011e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8020046:	45a9      	cmp	r9, r5
 8020048:	dd69      	ble.n	802011e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802004a:	2e00      	cmp	r6, #0
 802004c:	d067      	beq.n	802011e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802004e:	f1bc 0f00 	cmp.w	ip, #0
 8020052:	db62      	blt.n	802011a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8020054:	45e6      	cmp	lr, ip
 8020056:	dd60      	ble.n	802011a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8020058:	f818 500e 	ldrb.w	r5, [r8, lr]
 802005c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020060:	441d      	add	r5, r3
 8020062:	f11c 0201 	adds.w	r2, ip, #1
 8020066:	d45d      	bmi.n	8020124 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020068:	4596      	cmp	lr, r2
 802006a:	dd5b      	ble.n	8020124 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 802006c:	2800      	cmp	r0, #0
 802006e:	d059      	beq.n	8020124 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020070:	44c6      	add	lr, r8
 8020072:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020076:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802007a:	4413      	add	r3, r2
 802007c:	b280      	uxth	r0, r0
 802007e:	b2b2      	uxth	r2, r6
 8020080:	fb00 f602 	mul.w	r6, r0, r2
 8020084:	0100      	lsls	r0, r0, #4
 8020086:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802008a:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 802008e:	1b80      	subs	r0, r0, r6
 8020090:	fa1f fc82 	uxth.w	ip, r2
 8020094:	b282      	uxth	r2, r0
 8020096:	78a0      	ldrb	r0, [r4, #2]
 8020098:	f897 e002 	ldrb.w	lr, [r7, #2]
 802009c:	f897 9000 	ldrb.w	r9, [r7]
 80200a0:	787f      	ldrb	r7, [r7, #1]
 80200a2:	eba8 080c 	sub.w	r8, r8, ip
 80200a6:	fa1f f888 	uxth.w	r8, r8
 80200aa:	4350      	muls	r0, r2
 80200ac:	fb08 0e0e 	mla	lr, r8, lr, r0
 80200b0:	78a8      	ldrb	r0, [r5, #2]
 80200b2:	fb0c e000 	mla	r0, ip, r0, lr
 80200b6:	f893 e002 	ldrb.w	lr, [r3, #2]
 80200ba:	fb06 0e0e 	mla	lr, r6, lr, r0
 80200be:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 80200c2:	f894 e000 	ldrb.w	lr, [r4]
 80200c6:	fb02 fe0e 	mul.w	lr, r2, lr
 80200ca:	fb08 e909 	mla	r9, r8, r9, lr
 80200ce:	f895 e000 	ldrb.w	lr, [r5]
 80200d2:	fb0c 990e 	mla	r9, ip, lr, r9
 80200d6:	f893 e000 	ldrb.w	lr, [r3]
 80200da:	785b      	ldrb	r3, [r3, #1]
 80200dc:	fb06 9e0e 	mla	lr, r6, lr, r9
 80200e0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80200e4:	ea4e 0e00 	orr.w	lr, lr, r0
 80200e8:	7860      	ldrb	r0, [r4, #1]
 80200ea:	4350      	muls	r0, r2
 80200ec:	786a      	ldrb	r2, [r5, #1]
 80200ee:	fb08 0007 	mla	r0, r8, r7, r0
 80200f2:	fb0c 0202 	mla	r2, ip, r2, r0
 80200f6:	fb06 2303 	mla	r3, r6, r3, r2
 80200fa:	095b      	lsrs	r3, r3, #5
 80200fc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020100:	ea4e 0303 	orr.w	r3, lr, r3
 8020104:	800b      	strh	r3, [r1, #0]
 8020106:	b003      	add	sp, #12
 8020108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802010c:	af01      	add	r7, sp, #4
 802010e:	e78c      	b.n	802002a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8020110:	ac01      	add	r4, sp, #4
 8020112:	4627      	mov	r7, r4
 8020114:	e795      	b.n	8020042 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8020116:	ac01      	add	r4, sp, #4
 8020118:	e793      	b.n	8020042 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802011a:	ad01      	add	r5, sp, #4
 802011c:	e7a1      	b.n	8020062 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 802011e:	ab01      	add	r3, sp, #4
 8020120:	461d      	mov	r5, r3
 8020122:	e7ab      	b.n	802007c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8020124:	ab01      	add	r3, sp, #4
 8020126:	e7a9      	b.n	802007c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08020128 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802012c:	b08f      	sub	sp, #60	; 0x3c
 802012e:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8020132:	920c      	str	r2, [sp, #48]	; 0x30
 8020134:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8020136:	910a      	str	r1, [sp, #40]	; 0x28
 8020138:	9306      	str	r3, [sp, #24]
 802013a:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 802013e:	900d      	str	r0, [sp, #52]	; 0x34
 8020140:	6850      	ldr	r0, [r2, #4]
 8020142:	6812      	ldr	r2, [r2, #0]
 8020144:	fb00 1303 	mla	r3, r0, r3, r1
 8020148:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802014c:	9307      	str	r3, [sp, #28]
 802014e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020150:	681b      	ldr	r3, [r3, #0]
 8020152:	9308      	str	r3, [sp, #32]
 8020154:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020156:	685c      	ldr	r4, [r3, #4]
 8020158:	3404      	adds	r4, #4
 802015a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802015c:	2b00      	cmp	r3, #0
 802015e:	dc03      	bgt.n	8020168 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020162:	2b00      	cmp	r3, #0
 8020164:	f340 81d6 	ble.w	8020514 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8020168:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802016a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802016e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020172:	1e48      	subs	r0, r1, #1
 8020174:	1e56      	subs	r6, r2, #1
 8020176:	9b06      	ldr	r3, [sp, #24]
 8020178:	2b00      	cmp	r3, #0
 802017a:	f340 80b7 	ble.w	80202ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 802017e:	ea5f 472b 	movs.w	r7, fp, asr #16
 8020182:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020186:	d406      	bmi.n	8020196 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020188:	4287      	cmp	r7, r0
 802018a:	da04      	bge.n	8020196 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802018c:	2b00      	cmp	r3, #0
 802018e:	db02      	blt.n	8020196 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020190:	42b3      	cmp	r3, r6
 8020192:	f2c0 80ac 	blt.w	80202ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8020196:	3701      	adds	r7, #1
 8020198:	f100 809d 	bmi.w	80202d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802019c:	42b9      	cmp	r1, r7
 802019e:	f2c0 809a 	blt.w	80202d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80201a2:	3301      	adds	r3, #1
 80201a4:	f100 8097 	bmi.w	80202d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80201a8:	429a      	cmp	r2, r3
 80201aa:	f2c0 8094 	blt.w	80202d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80201ae:	9b06      	ldr	r3, [sp, #24]
 80201b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80201b2:	9b07      	ldr	r3, [sp, #28]
 80201b4:	9309      	str	r3, [sp, #36]	; 0x24
 80201b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201b8:	2b00      	cmp	r3, #0
 80201ba:	f340 80b5 	ble.w	8020328 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80201be:	9820      	ldr	r0, [sp, #128]	; 0x80
 80201c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80201c2:	68c7      	ldr	r7, [r0, #12]
 80201c4:	6892      	ldr	r2, [r2, #8]
 80201c6:	ea5f 402b 	movs.w	r0, fp, asr #16
 80201ca:	ea4f 4625 	mov.w	r6, r5, asr #16
 80201ce:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80201d2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80201d6:	f100 80fb 	bmi.w	80203d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80201da:	f102 3cff 	add.w	ip, r2, #4294967295
 80201de:	4560      	cmp	r0, ip
 80201e0:	f280 80f6 	bge.w	80203d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80201e4:	2e00      	cmp	r6, #0
 80201e6:	f2c0 80f3 	blt.w	80203d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80201ea:	f107 3cff 	add.w	ip, r7, #4294967295
 80201ee:	4566      	cmp	r6, ip
 80201f0:	f280 80ee 	bge.w	80203d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80201f4:	b212      	sxth	r2, r2
 80201f6:	fb06 0002 	mla	r0, r6, r2, r0
 80201fa:	9e08      	ldr	r6, [sp, #32]
 80201fc:	1837      	adds	r7, r6, r0
 80201fe:	5c30      	ldrb	r0, [r6, r0]
 8020200:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8020204:	eb04 0c08 	add.w	ip, r4, r8
 8020208:	2b00      	cmp	r3, #0
 802020a:	f000 80d3 	beq.w	80203b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802020e:	787e      	ldrb	r6, [r7, #1]
 8020210:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020214:	4426      	add	r6, r4
 8020216:	2900      	cmp	r1, #0
 8020218:	f000 80d4 	beq.w	80203c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802021c:	18b8      	adds	r0, r7, r2
 802021e:	5cba      	ldrb	r2, [r7, r2]
 8020220:	7840      	ldrb	r0, [r0, #1]
 8020222:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020226:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802022a:	4422      	add	r2, r4
 802022c:	4420      	add	r0, r4
 802022e:	b29b      	uxth	r3, r3
 8020230:	b289      	uxth	r1, r1
 8020232:	fb03 f901 	mul.w	r9, r3, r1
 8020236:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802023a:	011b      	lsls	r3, r3, #4
 802023c:	b289      	uxth	r1, r1
 802023e:	78b7      	ldrb	r7, [r6, #2]
 8020240:	f89c a002 	ldrb.w	sl, [ip, #2]
 8020244:	f89c c001 	ldrb.w	ip, [ip, #1]
 8020248:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802024c:	eba3 0309 	sub.w	r3, r3, r9
 8020250:	b29b      	uxth	r3, r3
 8020252:	ebae 0e01 	sub.w	lr, lr, r1
 8020256:	fa1f fe8e 	uxth.w	lr, lr
 802025a:	435f      	muls	r7, r3
 802025c:	fb0e 770a 	mla	r7, lr, sl, r7
 8020260:	f892 a002 	ldrb.w	sl, [r2, #2]
 8020264:	fb01 770a 	mla	r7, r1, sl, r7
 8020268:	f890 a002 	ldrb.w	sl, [r0, #2]
 802026c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8020270:	f814 7008 	ldrb.w	r7, [r4, r8]
 8020274:	f896 8000 	ldrb.w	r8, [r6]
 8020278:	7876      	ldrb	r6, [r6, #1]
 802027a:	fb03 f808 	mul.w	r8, r3, r8
 802027e:	fb0e 8807 	mla	r8, lr, r7, r8
 8020282:	7817      	ldrb	r7, [r2, #0]
 8020284:	fb01 8807 	mla	r8, r1, r7, r8
 8020288:	7807      	ldrb	r7, [r0, #0]
 802028a:	fb09 8707 	mla	r7, r9, r7, r8
 802028e:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8020292:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020296:	ea47 070a 	orr.w	r7, r7, sl
 802029a:	4373      	muls	r3, r6
 802029c:	f892 a001 	ldrb.w	sl, [r2, #1]
 80202a0:	fb0e 330c 	mla	r3, lr, ip, r3
 80202a4:	fb01 310a 	mla	r1, r1, sl, r3
 80202a8:	f890 a001 	ldrb.w	sl, [r0, #1]
 80202ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202ae:	fb09 1a0a 	mla	sl, r9, sl, r1
 80202b2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80202b6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80202ba:	ea47 070a 	orr.w	r7, r7, sl
 80202be:	801f      	strh	r7, [r3, #0]
 80202c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202c2:	3302      	adds	r3, #2
 80202c4:	9309      	str	r3, [sp, #36]	; 0x24
 80202c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80202c8:	449b      	add	fp, r3
 80202ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80202cc:	441d      	add	r5, r3
 80202ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80202d0:	3b01      	subs	r3, #1
 80202d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80202d4:	e76f      	b.n	80201b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80202d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80202d8:	449b      	add	fp, r3
 80202da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80202dc:	441d      	add	r5, r3
 80202de:	9b06      	ldr	r3, [sp, #24]
 80202e0:	3b01      	subs	r3, #1
 80202e2:	9306      	str	r3, [sp, #24]
 80202e4:	9b07      	ldr	r3, [sp, #28]
 80202e6:	3302      	adds	r3, #2
 80202e8:	9307      	str	r3, [sp, #28]
 80202ea:	e744      	b.n	8020176 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80202ec:	d023      	beq.n	8020336 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80202ee:	9b06      	ldr	r3, [sp, #24]
 80202f0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80202f2:	3b01      	subs	r3, #1
 80202f4:	fb00 b003 	mla	r0, r0, r3, fp
 80202f8:	1400      	asrs	r0, r0, #16
 80202fa:	f53f af58 	bmi.w	80201ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80202fe:	3901      	subs	r1, #1
 8020300:	4288      	cmp	r0, r1
 8020302:	f6bf af54 	bge.w	80201ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020306:	991c      	ldr	r1, [sp, #112]	; 0x70
 8020308:	fb01 5303 	mla	r3, r1, r3, r5
 802030c:	141b      	asrs	r3, r3, #16
 802030e:	f53f af4e 	bmi.w	80201ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020312:	3a01      	subs	r2, #1
 8020314:	4293      	cmp	r3, r2
 8020316:	f6bf af4a 	bge.w	80201ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802031a:	9b06      	ldr	r3, [sp, #24]
 802031c:	9309      	str	r3, [sp, #36]	; 0x24
 802031e:	9b07      	ldr	r3, [sp, #28]
 8020320:	930b      	str	r3, [sp, #44]	; 0x2c
 8020322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020324:	2b00      	cmp	r3, #0
 8020326:	dc70      	bgt.n	802040a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8020328:	9b06      	ldr	r3, [sp, #24]
 802032a:	9a07      	ldr	r2, [sp, #28]
 802032c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020330:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020334:	9307      	str	r3, [sp, #28]
 8020336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020338:	2b00      	cmp	r3, #0
 802033a:	f340 80eb 	ble.w	8020514 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 802033e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020346:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802034a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802034c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020350:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020354:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020358:	eef0 6a62 	vmov.f32	s13, s5
 802035c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020360:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020364:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020368:	ee16 ba90 	vmov	fp, s13
 802036c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020370:	eef0 6a43 	vmov.f32	s13, s6
 8020374:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020378:	ee12 2a90 	vmov	r2, s5
 802037c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020380:	fb92 f3f3 	sdiv	r3, r2, r3
 8020384:	ee13 2a10 	vmov	r2, s6
 8020388:	931b      	str	r3, [sp, #108]	; 0x6c
 802038a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802038c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020390:	931c      	str	r3, [sp, #112]	; 0x70
 8020392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020394:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020396:	3b01      	subs	r3, #1
 8020398:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802039c:	930a      	str	r3, [sp, #40]	; 0x28
 802039e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80203a0:	bf08      	it	eq
 80203a2:	4613      	moveq	r3, r2
 80203a4:	ee16 5a90 	vmov	r5, s13
 80203a8:	9306      	str	r3, [sp, #24]
 80203aa:	eeb0 3a67 	vmov.f32	s6, s15
 80203ae:	eef0 2a47 	vmov.f32	s5, s14
 80203b2:	e6d2      	b.n	802015a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80203b4:	b149      	cbz	r1, 80203ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80203b6:	5cba      	ldrb	r2, [r7, r2]
 80203b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80203bc:	4422      	add	r2, r4
 80203be:	4660      	mov	r0, ip
 80203c0:	4666      	mov	r6, ip
 80203c2:	e734      	b.n	802022e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80203c4:	4660      	mov	r0, ip
 80203c6:	4662      	mov	r2, ip
 80203c8:	e731      	b.n	802022e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80203ca:	4660      	mov	r0, ip
 80203cc:	4662      	mov	r2, ip
 80203ce:	e7f7      	b.n	80203c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80203d0:	f110 0c01 	adds.w	ip, r0, #1
 80203d4:	f53f af74 	bmi.w	80202c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80203d8:	4562      	cmp	r2, ip
 80203da:	f6ff af71 	blt.w	80202c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80203de:	f116 0c01 	adds.w	ip, r6, #1
 80203e2:	f53f af6d 	bmi.w	80202c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80203e6:	4567      	cmp	r7, ip
 80203e8:	f6ff af6a 	blt.w	80202c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80203ec:	b23f      	sxth	r7, r7
 80203ee:	b212      	sxth	r2, r2
 80203f0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80203f4:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80203f8:	9200      	str	r2, [sp, #0]
 80203fa:	9701      	str	r7, [sp, #4]
 80203fc:	4623      	mov	r3, r4
 80203fe:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020402:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020404:	f7ff fde6 	bl	801ffd4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8020408:	e75a      	b.n	80202c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802040a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802040c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020410:	ea4f 462b 	mov.w	r6, fp, asr #16
 8020414:	1428      	asrs	r0, r5, #16
 8020416:	fb02 6000 	mla	r0, r2, r0, r6
 802041a:	9e08      	ldr	r6, [sp, #32]
 802041c:	f816 8000 	ldrb.w	r8, [r6, r0]
 8020420:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020424:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020428:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802042c:	1837      	adds	r7, r6, r0
 802042e:	eb04 0c08 	add.w	ip, r4, r8
 8020432:	2b00      	cmp	r3, #0
 8020434:	d060      	beq.n	80204f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8020436:	787e      	ldrb	r6, [r7, #1]
 8020438:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802043c:	4426      	add	r6, r4
 802043e:	2900      	cmp	r1, #0
 8020440:	d062      	beq.n	8020508 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 8020442:	18b8      	adds	r0, r7, r2
 8020444:	5cba      	ldrb	r2, [r7, r2]
 8020446:	7840      	ldrb	r0, [r0, #1]
 8020448:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802044c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020450:	4422      	add	r2, r4
 8020452:	4420      	add	r0, r4
 8020454:	b29b      	uxth	r3, r3
 8020456:	b289      	uxth	r1, r1
 8020458:	fb03 f901 	mul.w	r9, r3, r1
 802045c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020460:	011b      	lsls	r3, r3, #4
 8020462:	b289      	uxth	r1, r1
 8020464:	78b7      	ldrb	r7, [r6, #2]
 8020466:	f89c a002 	ldrb.w	sl, [ip, #2]
 802046a:	f89c c001 	ldrb.w	ip, [ip, #1]
 802046e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020472:	eba3 0309 	sub.w	r3, r3, r9
 8020476:	b29b      	uxth	r3, r3
 8020478:	ebae 0e01 	sub.w	lr, lr, r1
 802047c:	fa1f fe8e 	uxth.w	lr, lr
 8020480:	435f      	muls	r7, r3
 8020482:	fb0e 770a 	mla	r7, lr, sl, r7
 8020486:	f892 a002 	ldrb.w	sl, [r2, #2]
 802048a:	fb01 770a 	mla	r7, r1, sl, r7
 802048e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8020492:	fb09 7a0a 	mla	sl, r9, sl, r7
 8020496:	f814 7008 	ldrb.w	r7, [r4, r8]
 802049a:	f896 8000 	ldrb.w	r8, [r6]
 802049e:	7876      	ldrb	r6, [r6, #1]
 80204a0:	fb03 f808 	mul.w	r8, r3, r8
 80204a4:	fb0e 8807 	mla	r8, lr, r7, r8
 80204a8:	7817      	ldrb	r7, [r2, #0]
 80204aa:	fb01 8807 	mla	r8, r1, r7, r8
 80204ae:	7807      	ldrb	r7, [r0, #0]
 80204b0:	fb09 8707 	mla	r7, r9, r7, r8
 80204b4:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80204b8:	4373      	muls	r3, r6
 80204ba:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80204be:	7856      	ldrb	r6, [r2, #1]
 80204c0:	ea47 070a 	orr.w	r7, r7, sl
 80204c4:	fb0e 330c 	mla	r3, lr, ip, r3
 80204c8:	f890 a001 	ldrb.w	sl, [r0, #1]
 80204cc:	fb01 3306 	mla	r3, r1, r6, r3
 80204d0:	fb09 3a0a 	mla	sl, r9, sl, r3
 80204d4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80204d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80204da:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80204de:	ea47 070a 	orr.w	r7, r7, sl
 80204e2:	f823 7b02 	strh.w	r7, [r3], #2
 80204e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80204e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80204ea:	449b      	add	fp, r3
 80204ec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80204ee:	441d      	add	r5, r3
 80204f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204f2:	3b01      	subs	r3, #1
 80204f4:	9309      	str	r3, [sp, #36]	; 0x24
 80204f6:	e714      	b.n	8020322 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80204f8:	b149      	cbz	r1, 802050e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80204fa:	5cba      	ldrb	r2, [r7, r2]
 80204fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020500:	4422      	add	r2, r4
 8020502:	4660      	mov	r0, ip
 8020504:	4666      	mov	r6, ip
 8020506:	e7a5      	b.n	8020454 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020508:	4660      	mov	r0, ip
 802050a:	4662      	mov	r2, ip
 802050c:	e7a2      	b.n	8020454 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802050e:	4660      	mov	r0, ip
 8020510:	4662      	mov	r2, ip
 8020512:	e7f7      	b.n	8020504 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8020514:	b00f      	add	sp, #60	; 0x3c
 8020516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802051a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 802051a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802051e:	b085      	sub	sp, #20
 8020520:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8020524:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020528:	9102      	str	r1, [sp, #8]
 802052a:	2c00      	cmp	r4, #0
 802052c:	fb04 710c 	mla	r1, r4, ip, r7
 8020530:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8020534:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8020538:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 802053c:	eb02 0e01 	add.w	lr, r2, r1
 8020540:	f2c0 8122 	blt.w	8020788 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8020544:	45a0      	cmp	r8, r4
 8020546:	f340 811f 	ble.w	8020788 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802054a:	2f00      	cmp	r7, #0
 802054c:	f2c0 811a 	blt.w	8020784 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8020550:	45bc      	cmp	ip, r7
 8020552:	f340 8117 	ble.w	8020784 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8020556:	5c52      	ldrb	r2, [r2, r1]
 8020558:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802055c:	1c7a      	adds	r2, r7, #1
 802055e:	f100 8116 	bmi.w	802078e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8020562:	4594      	cmp	ip, r2
 8020564:	f340 8113 	ble.w	802078e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8020568:	2e00      	cmp	r6, #0
 802056a:	f000 8112 	beq.w	8020792 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 802056e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020572:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020576:	3401      	adds	r4, #1
 8020578:	f100 810f 	bmi.w	802079a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802057c:	45a0      	cmp	r8, r4
 802057e:	f340 810c 	ble.w	802079a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8020582:	2800      	cmp	r0, #0
 8020584:	f000 810c 	beq.w	80207a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8020588:	2f00      	cmp	r7, #0
 802058a:	f2c0 8104 	blt.w	8020796 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802058e:	45bc      	cmp	ip, r7
 8020590:	f340 8101 	ble.w	8020796 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8020594:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8020598:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 802059c:	3701      	adds	r7, #1
 802059e:	f100 8102 	bmi.w	80207a6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80205a2:	45bc      	cmp	ip, r7
 80205a4:	f340 80ff 	ble.w	80207a6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80205a8:	2e00      	cmp	r6, #0
 80205aa:	f000 80fe 	beq.w	80207aa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 80205ae:	44f4      	add	ip, lr
 80205b0:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80205b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80205b8:	b2b6      	uxth	r6, r6
 80205ba:	b280      	uxth	r0, r0
 80205bc:	fb00 fe06 	mul.w	lr, r0, r6
 80205c0:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80205c4:	0136      	lsls	r6, r6, #4
 80205c6:	eba6 070e 	sub.w	r7, r6, lr
 80205ca:	b280      	uxth	r0, r0
 80205cc:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80205d0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80205d4:	b2bf      	uxth	r7, r7
 80205d6:	1a1b      	subs	r3, r3, r0
 80205d8:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80205dc:	b29b      	uxth	r3, r3
 80205de:	fb0a f607 	mul.w	r6, sl, r7
 80205e2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80205e6:	fb0b 6603 	mla	r6, fp, r3, r6
 80205ea:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80205ee:	fb00 6609 	mla	r6, r0, r9, r6
 80205f2:	fb0e 6608 	mla	r6, lr, r8, r6
 80205f6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80205fa:	9600      	str	r6, [sp, #0]
 80205fc:	2e00      	cmp	r6, #0
 80205fe:	f000 80be 	beq.w	802077e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8020602:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020606:	fb0b fc0c 	mul.w	ip, fp, ip
 802060a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802060e:	fb0b f505 	mul.w	r5, fp, r5
 8020612:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020616:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802061a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802061e:	44dc      	add	ip, fp
 8020620:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020624:	9501      	str	r5, [sp, #4]
 8020626:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802062a:	9503      	str	r5, [sp, #12]
 802062c:	9d01      	ldr	r5, [sp, #4]
 802062e:	9e02      	ldr	r6, [sp, #8]
 8020630:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8020634:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020638:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802063c:	fb0a fc0c 	mul.w	ip, sl, ip
 8020640:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8020644:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8020648:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802064c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020650:	4465      	add	r5, ip
 8020652:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020656:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802065a:	fb09 fc0c 	mul.w	ip, r9, ip
 802065e:	fb09 f904 	mul.w	r9, r9, r4
 8020662:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8020666:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802066a:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802066e:	fb08 f404 	mul.w	r4, r8, r4
 8020672:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020676:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802067a:	fb08 f802 	mul.w	r8, r8, r2
 802067e:	fb0a fa01 	mul.w	sl, sl, r1
 8020682:	0a22      	lsrs	r2, r4, #8
 8020684:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8020688:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802068c:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8020690:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8020694:	4414      	add	r4, r2
 8020696:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802069a:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802069e:	0a2d      	lsrs	r5, r5, #8
 80206a0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80206a4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80206a8:	9a03      	ldr	r2, [sp, #12]
 80206aa:	8836      	ldrh	r6, [r6, #0]
 80206ac:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80206b0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80206b4:	437d      	muls	r5, r7
 80206b6:	4461      	add	r1, ip
 80206b8:	0a24      	lsrs	r4, r4, #8
 80206ba:	fb02 5503 	mla	r5, r2, r3, r5
 80206be:	0a09      	lsrs	r1, r1, #8
 80206c0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80206c4:	fb04 540e 	mla	r4, r4, lr, r5
 80206c8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80206cc:	fb01 4100 	mla	r1, r1, r0, r4
 80206d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80206d4:	0a09      	lsrs	r1, r1, #8
 80206d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80206da:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80206de:	fb07 f70a 	mul.w	r7, r7, sl
 80206e2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80206e6:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80206ea:	fb03 7101 	mla	r1, r3, r1, r7
 80206ee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80206f2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80206f6:	fb0e 1e08 	mla	lr, lr, r8, r1
 80206fa:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80206fe:	fb00 e101 	mla	r1, r0, r1, lr
 8020702:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8020706:	9a00      	ldr	r2, [sp, #0]
 8020708:	b287      	uxth	r7, r0
 802070a:	437a      	muls	r2, r7
 802070c:	0a09      	lsrs	r1, r1, #8
 802070e:	1c53      	adds	r3, r2, #1
 8020710:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020714:	4321      	orrs	r1, r4
 8020716:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802071a:	1235      	asrs	r5, r6, #8
 802071c:	0c0a      	lsrs	r2, r1, #16
 802071e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020722:	b2db      	uxtb	r3, r3
 8020724:	fb12 f207 	smulbb	r2, r2, r7
 8020728:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802072c:	fb05 2503 	mla	r5, r5, r3, r2
 8020730:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8020734:	10f2      	asrs	r2, r6, #3
 8020736:	b2c8      	uxtb	r0, r1
 8020738:	00f6      	lsls	r6, r6, #3
 802073a:	fb14 f407 	smulbb	r4, r4, r7
 802073e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020742:	b2f6      	uxtb	r6, r6
 8020744:	fb10 f007 	smulbb	r0, r0, r7
 8020748:	fb02 4203 	mla	r2, r2, r3, r4
 802074c:	b2ad      	uxth	r5, r5
 802074e:	fb06 0303 	mla	r3, r6, r3, r0
 8020752:	b299      	uxth	r1, r3
 8020754:	b294      	uxth	r4, r2
 8020756:	1c6b      	adds	r3, r5, #1
 8020758:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802075c:	1c62      	adds	r2, r4, #1
 802075e:	1c4b      	adds	r3, r1, #1
 8020760:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020764:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020768:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802076c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020770:	0952      	lsrs	r2, r2, #5
 8020772:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020776:	432b      	orrs	r3, r5
 8020778:	4313      	orrs	r3, r2
 802077a:	9a02      	ldr	r2, [sp, #8]
 802077c:	8013      	strh	r3, [r2, #0]
 802077e:	b005      	add	sp, #20
 8020780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020784:	2500      	movs	r5, #0
 8020786:	e6e9      	b.n	802055c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8020788:	2100      	movs	r1, #0
 802078a:	460d      	mov	r5, r1
 802078c:	e6f3      	b.n	8020576 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802078e:	2100      	movs	r1, #0
 8020790:	e6f1      	b.n	8020576 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8020792:	4631      	mov	r1, r6
 8020794:	e6ef      	b.n	8020576 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8020796:	2400      	movs	r4, #0
 8020798:	e700      	b.n	802059c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 802079a:	2200      	movs	r2, #0
 802079c:	4614      	mov	r4, r2
 802079e:	e70b      	b.n	80205b8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80207a0:	4602      	mov	r2, r0
 80207a2:	4604      	mov	r4, r0
 80207a4:	e708      	b.n	80205b8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80207a6:	2200      	movs	r2, #0
 80207a8:	e706      	b.n	80205b8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80207aa:	4632      	mov	r2, r6
 80207ac:	e704      	b.n	80205b8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

080207ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80207ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207b2:	b09f      	sub	sp, #124	; 0x7c
 80207b4:	921b      	str	r2, [sp, #108]	; 0x6c
 80207b6:	9309      	str	r3, [sp, #36]	; 0x24
 80207b8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80207ba:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80207be:	931c      	str	r3, [sp, #112]	; 0x70
 80207c0:	9119      	str	r1, [sp, #100]	; 0x64
 80207c2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80207c6:	901d      	str	r0, [sp, #116]	; 0x74
 80207c8:	6850      	ldr	r0, [r2, #4]
 80207ca:	6812      	ldr	r2, [r2, #0]
 80207cc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80207ce:	fb00 1303 	mla	r3, r0, r3, r1
 80207d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80207d6:	930c      	str	r3, [sp, #48]	; 0x30
 80207d8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80207da:	681b      	ldr	r3, [r3, #0]
 80207dc:	9312      	str	r3, [sp, #72]	; 0x48
 80207de:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80207e0:	685e      	ldr	r6, [r3, #4]
 80207e2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80207e6:	930d      	str	r3, [sp, #52]	; 0x34
 80207e8:	3604      	adds	r6, #4
 80207ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80207ec:	2b00      	cmp	r3, #0
 80207ee:	dc03      	bgt.n	80207f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80207f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	f340 8388 	ble.w	8020f08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 80207f8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80207fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80207fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020802:	1e48      	subs	r0, r1, #1
 8020804:	1e57      	subs	r7, r2, #1
 8020806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020808:	2b00      	cmp	r3, #0
 802080a:	f340 8195 	ble.w	8020b38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802080e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020810:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020814:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020818:	d406      	bmi.n	8020828 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802081a:	4584      	cmp	ip, r0
 802081c:	da04      	bge.n	8020828 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802081e:	2b00      	cmp	r3, #0
 8020820:	db02      	blt.n	8020828 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020822:	42bb      	cmp	r3, r7
 8020824:	f2c0 8189 	blt.w	8020b3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8020828:	f11c 0c01 	adds.w	ip, ip, #1
 802082c:	f100 8177 	bmi.w	8020b1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020830:	4561      	cmp	r1, ip
 8020832:	f2c0 8174 	blt.w	8020b1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020836:	3301      	adds	r3, #1
 8020838:	f100 8171 	bmi.w	8020b1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802083c:	429a      	cmp	r2, r3
 802083e:	f2c0 816e 	blt.w	8020b1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020844:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020846:	931a      	str	r3, [sp, #104]	; 0x68
 8020848:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802084a:	2b00      	cmp	r3, #0
 802084c:	f340 8193 	ble.w	8020b76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8020850:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020852:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020856:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020858:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802085c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802085e:	141b      	asrs	r3, r3, #16
 8020860:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020864:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020868:	f100 81d6 	bmi.w	8020c18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802086c:	f100 38ff 	add.w	r8, r0, #4294967295
 8020870:	4543      	cmp	r3, r8
 8020872:	f280 81d1 	bge.w	8020c18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8020876:	f1bc 0f00 	cmp.w	ip, #0
 802087a:	f2c0 81cd 	blt.w	8020c18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802087e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020882:	45c4      	cmp	ip, r8
 8020884:	f280 81c8 	bge.w	8020c18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8020888:	b200      	sxth	r0, r0
 802088a:	fb0c 3300 	mla	r3, ip, r0, r3
 802088e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020890:	eb04 0803 	add.w	r8, r4, r3
 8020894:	5ce3      	ldrb	r3, [r4, r3]
 8020896:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802089a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802089e:	2a00      	cmp	r2, #0
 80208a0:	f000 81af 	beq.w	8020c02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80208a4:	f898 c001 	ldrb.w	ip, [r8, #1]
 80208a8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80208ac:	940e      	str	r4, [sp, #56]	; 0x38
 80208ae:	0e24      	lsrs	r4, r4, #24
 80208b0:	9415      	str	r4, [sp, #84]	; 0x54
 80208b2:	b179      	cbz	r1, 80208d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80208b4:	eb08 0c00 	add.w	ip, r8, r0
 80208b8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80208bc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80208c0:	900a      	str	r0, [sp, #40]	; 0x28
 80208c2:	0e00      	lsrs	r0, r0, #24
 80208c4:	9013      	str	r0, [sp, #76]	; 0x4c
 80208c6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80208ca:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80208ce:	900f      	str	r0, [sp, #60]	; 0x3c
 80208d0:	0e00      	lsrs	r0, r0, #24
 80208d2:	9016      	str	r0, [sp, #88]	; 0x58
 80208d4:	b292      	uxth	r2, r2
 80208d6:	b289      	uxth	r1, r1
 80208d8:	fb02 f901 	mul.w	r9, r2, r1
 80208dc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80208e0:	0112      	lsls	r2, r2, #4
 80208e2:	eba2 0809 	sub.w	r8, r2, r9
 80208e6:	b289      	uxth	r1, r1
 80208e8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80208ec:	9815      	ldr	r0, [sp, #84]	; 0x54
 80208ee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80208f0:	fa1f f888 	uxth.w	r8, r8
 80208f4:	1a52      	subs	r2, r2, r1
 80208f6:	b292      	uxth	r2, r2
 80208f8:	fb08 f000 	mul.w	r0, r8, r0
 80208fc:	fb02 000e 	mla	r0, r2, lr, r0
 8020900:	fb01 0004 	mla	r0, r1, r4, r0
 8020904:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020906:	fb09 0004 	mla	r0, r9, r4, r0
 802090a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802090e:	2800      	cmp	r0, #0
 8020910:	f000 80fa 	beq.w	8020b08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020914:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020918:	d01b      	beq.n	8020952 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802091a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802091e:	fb0e fa0a 	mul.w	sl, lr, sl
 8020922:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020926:	fb0e fe03 	mul.w	lr, lr, r3
 802092a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802092e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020932:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020936:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802093a:	4453      	add	r3, sl
 802093c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020940:	0a1b      	lsrs	r3, r3, #8
 8020942:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020946:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802094a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802094e:	ea43 030c 	orr.w	r3, r3, ip
 8020952:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020954:	2cff      	cmp	r4, #255	; 0xff
 8020956:	d021      	beq.n	802099c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020958:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802095a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802095e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020960:	fb04 fb0b 	mul.w	fp, r4, fp
 8020964:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020966:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802096a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802096c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020970:	fb04 fa0a 	mul.w	sl, r4, sl
 8020974:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020978:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802097c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020980:	44de      	add	lr, fp
 8020982:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020986:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802098a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802098e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020992:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020996:	ea4e 040a 	orr.w	r4, lr, sl
 802099a:	940e      	str	r4, [sp, #56]	; 0x38
 802099c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802099e:	2cff      	cmp	r4, #255	; 0xff
 80209a0:	d021      	beq.n	80209e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80209a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80209a4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80209a8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80209aa:	fb04 fb0b 	mul.w	fp, r4, fp
 80209ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80209b0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80209b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80209b6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80209ba:	fb04 fa0a 	mul.w	sl, r4, sl
 80209be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209c2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80209c6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80209ca:	44de      	add	lr, fp
 80209cc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80209d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80209d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209dc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80209e0:	ea4e 040a 	orr.w	r4, lr, sl
 80209e4:	940a      	str	r4, [sp, #40]	; 0x28
 80209e6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80209e8:	2cff      	cmp	r4, #255	; 0xff
 80209ea:	d021      	beq.n	8020a30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80209ec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80209ee:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80209f2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80209f4:	fb04 fb0b 	mul.w	fp, r4, fp
 80209f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80209fa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80209fe:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020a00:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020a04:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a0c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020a10:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020a14:	44de      	add	lr, fp
 8020a16:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a22:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a2a:	ea4e 040a 	orr.w	r4, lr, sl
 8020a2e:	940f      	str	r4, [sp, #60]	; 0x3c
 8020a30:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020a32:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020a36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020a38:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020a3c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020a40:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020a44:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020a48:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020a4a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020a4e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020a52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020a54:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020a58:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020a5c:	fb08 f80e 	mul.w	r8, r8, lr
 8020a60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a64:	fb02 8303 	mla	r3, r2, r3, r8
 8020a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020a6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020a6c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020a70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020a72:	fb01 330a 	mla	r3, r1, sl, r3
 8020a76:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8020a7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020a7c:	fb09 3901 	mla	r9, r9, r1, r3
 8020a80:	4342      	muls	r2, r0
 8020a82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a86:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020a8a:	883b      	ldrh	r3, [r7, #0]
 8020a8c:	1c50      	adds	r0, r2, #1
 8020a8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a92:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020a96:	ea4c 0c09 	orr.w	ip, ip, r9
 8020a9a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020a9e:	1219      	asrs	r1, r3, #8
 8020aa0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8020aa4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020aa8:	b2c0      	uxtb	r0, r0
 8020aaa:	fb12 f204 	smulbb	r2, r2, r4
 8020aae:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020ab2:	fb01 2100 	mla	r1, r1, r0, r2
 8020ab6:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8020aba:	10da      	asrs	r2, r3, #3
 8020abc:	fa5f fc8c 	uxtb.w	ip, ip
 8020ac0:	00db      	lsls	r3, r3, #3
 8020ac2:	fb1c fc04 	smulbb	ip, ip, r4
 8020ac6:	b2db      	uxtb	r3, r3
 8020ac8:	b289      	uxth	r1, r1
 8020aca:	fb03 c300 	mla	r3, r3, r0, ip
 8020ace:	fa1f fc83 	uxth.w	ip, r3
 8020ad2:	1c4b      	adds	r3, r1, #1
 8020ad4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020ad8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020adc:	fb1e fe04 	smulbb	lr, lr, r4
 8020ae0:	f10c 0301 	add.w	r3, ip, #1
 8020ae4:	fb02 e200 	mla	r2, r2, r0, lr
 8020ae8:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8020aec:	b292      	uxth	r2, r2
 8020aee:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020af2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020af6:	430b      	orrs	r3, r1
 8020af8:	1c51      	adds	r1, r2, #1
 8020afa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020afe:	0952      	lsrs	r2, r2, #5
 8020b00:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020b04:	4313      	orrs	r3, r2
 8020b06:	803b      	strh	r3, [r7, #0]
 8020b08:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020b0a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020b0c:	441a      	add	r2, r3
 8020b0e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020b10:	9229      	str	r2, [sp, #164]	; 0xa4
 8020b12:	441d      	add	r5, r3
 8020b14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020b16:	3b01      	subs	r3, #1
 8020b18:	3702      	adds	r7, #2
 8020b1a:	931a      	str	r3, [sp, #104]	; 0x68
 8020b1c:	e694      	b.n	8020848 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020b1e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020b20:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020b22:	441c      	add	r4, r3
 8020b24:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020b26:	9429      	str	r4, [sp, #164]	; 0xa4
 8020b28:	441d      	add	r5, r3
 8020b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b2c:	3b01      	subs	r3, #1
 8020b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8020b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b32:	3302      	adds	r3, #2
 8020b34:	930c      	str	r3, [sp, #48]	; 0x30
 8020b36:	e666      	b.n	8020806 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020b38:	d024      	beq.n	8020b84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 8020b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b3c:	982b      	ldr	r0, [sp, #172]	; 0xac
 8020b3e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020b40:	3b01      	subs	r3, #1
 8020b42:	fb00 4003 	mla	r0, r0, r3, r4
 8020b46:	1400      	asrs	r0, r0, #16
 8020b48:	f53f ae7b 	bmi.w	8020842 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020b4c:	3901      	subs	r1, #1
 8020b4e:	4288      	cmp	r0, r1
 8020b50:	f6bf ae77 	bge.w	8020842 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020b54:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020b56:	fb01 5303 	mla	r3, r1, r3, r5
 8020b5a:	141b      	asrs	r3, r3, #16
 8020b5c:	f53f ae71 	bmi.w	8020842 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020b60:	3a01      	subs	r2, #1
 8020b62:	4293      	cmp	r3, r2
 8020b64:	f6bf ae6d 	bge.w	8020842 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020b68:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020b6c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8020b70:	f1bb 0f00 	cmp.w	fp, #0
 8020b74:	dc70      	bgt.n	8020c58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8020b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b78:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020b7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b7e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020b82:	930c      	str	r3, [sp, #48]	; 0x30
 8020b84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020b86:	2b00      	cmp	r3, #0
 8020b88:	f340 81be 	ble.w	8020f08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8020b8c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020b94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020b98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020b9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020ba2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020ba6:	eef0 6a62 	vmov.f32	s13, s5
 8020baa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020bae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020bb2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020bb6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020bba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020bbe:	eef0 6a43 	vmov.f32	s13, s6
 8020bc2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020bc6:	ee12 2a90 	vmov	r2, s5
 8020bca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020bce:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bd2:	ee13 2a10 	vmov	r2, s6
 8020bd6:	932b      	str	r3, [sp, #172]	; 0xac
 8020bd8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020bda:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bde:	932c      	str	r3, [sp, #176]	; 0xb0
 8020be0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020be2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020be4:	3b01      	subs	r3, #1
 8020be6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020bea:	9319      	str	r3, [sp, #100]	; 0x64
 8020bec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020bee:	bf08      	it	eq
 8020bf0:	4613      	moveq	r3, r2
 8020bf2:	ee16 5a90 	vmov	r5, s13
 8020bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8020bf8:	eeb0 3a67 	vmov.f32	s6, s15
 8020bfc:	eef0 2a47 	vmov.f32	s5, s14
 8020c00:	e5f3      	b.n	80207ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020c02:	2900      	cmp	r1, #0
 8020c04:	f43f ae66 	beq.w	80208d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020c08:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020c0c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020c10:	900a      	str	r0, [sp, #40]	; 0x28
 8020c12:	0e00      	lsrs	r0, r0, #24
 8020c14:	9013      	str	r0, [sp, #76]	; 0x4c
 8020c16:	e65d      	b.n	80208d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020c18:	f113 0801 	adds.w	r8, r3, #1
 8020c1c:	f53f af74 	bmi.w	8020b08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020c20:	4540      	cmp	r0, r8
 8020c22:	f6ff af71 	blt.w	8020b08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020c26:	f11c 0801 	adds.w	r8, ip, #1
 8020c2a:	f53f af6d 	bmi.w	8020b08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020c2e:	45c6      	cmp	lr, r8
 8020c30:	f6ff af6a 	blt.w	8020b08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020c34:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020c36:	9302      	str	r3, [sp, #8]
 8020c38:	b200      	sxth	r0, r0
 8020c3a:	fa0f f38e 	sxth.w	r3, lr
 8020c3e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020c42:	e9cd c203 	strd	ip, r2, [sp, #12]
 8020c46:	9301      	str	r3, [sp, #4]
 8020c48:	9000      	str	r0, [sp, #0]
 8020c4a:	4633      	mov	r3, r6
 8020c4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020c4e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020c50:	4639      	mov	r1, r7
 8020c52:	f7ff fc62 	bl	802051a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8020c56:	e757      	b.n	8020b08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020c58:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020c5a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020c5c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020c60:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020c62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020c66:	1427      	asrs	r7, r4, #16
 8020c68:	142b      	asrs	r3, r5, #16
 8020c6a:	fb01 7303 	mla	r3, r1, r3, r7
 8020c6e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020c70:	18e7      	adds	r7, r4, r3
 8020c72:	5ce3      	ldrb	r3, [r4, r3]
 8020c74:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020c78:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020c7c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020c80:	2a00      	cmp	r2, #0
 8020c82:	f000 8137 	beq.w	8020ef4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8020c86:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020c8a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020c8e:	9410      	str	r4, [sp, #64]	; 0x40
 8020c90:	0e24      	lsrs	r4, r4, #24
 8020c92:	9417      	str	r4, [sp, #92]	; 0x5c
 8020c94:	b170      	cbz	r0, 8020cb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8020c96:	eb07 0e01 	add.w	lr, r7, r1
 8020c9a:	5c79      	ldrb	r1, [r7, r1]
 8020c9c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020ca0:	910b      	str	r1, [sp, #44]	; 0x2c
 8020ca2:	0e09      	lsrs	r1, r1, #24
 8020ca4:	9114      	str	r1, [sp, #80]	; 0x50
 8020ca6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020caa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020cae:	9111      	str	r1, [sp, #68]	; 0x44
 8020cb0:	0e09      	lsrs	r1, r1, #24
 8020cb2:	9118      	str	r1, [sp, #96]	; 0x60
 8020cb4:	b292      	uxth	r2, r2
 8020cb6:	b280      	uxth	r0, r0
 8020cb8:	fb02 f800 	mul.w	r8, r2, r0
 8020cbc:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020cc0:	0112      	lsls	r2, r2, #4
 8020cc2:	eba2 0e08 	sub.w	lr, r2, r8
 8020cc6:	b280      	uxth	r0, r0
 8020cc8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020ccc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020cce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020cd0:	fa1f fe8e 	uxth.w	lr, lr
 8020cd4:	1a12      	subs	r2, r2, r0
 8020cd6:	b292      	uxth	r2, r2
 8020cd8:	fb0e f101 	mul.w	r1, lr, r1
 8020cdc:	fb02 110c 	mla	r1, r2, ip, r1
 8020ce0:	fb00 1104 	mla	r1, r0, r4, r1
 8020ce4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020ce6:	fb08 1104 	mla	r1, r8, r4, r1
 8020cea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020cee:	2900      	cmp	r1, #0
 8020cf0:	f000 80f5 	beq.w	8020ede <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8020cf4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020cf8:	d019      	beq.n	8020d2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8020cfa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020cfe:	fb0c fa0a 	mul.w	sl, ip, sl
 8020d02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d06:	fb0c fc03 	mul.w	ip, ip, r3
 8020d0a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020d0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d12:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020d16:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020d1a:	4453      	add	r3, sl
 8020d1c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020d20:	0a1b      	lsrs	r3, r3, #8
 8020d22:	0a3f      	lsrs	r7, r7, #8
 8020d24:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d28:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020d2c:	433b      	orrs	r3, r7
 8020d2e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020d30:	2cff      	cmp	r4, #255	; 0xff
 8020d32:	d020      	beq.n	8020d76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8020d34:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020d36:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020d3a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020d3c:	4367      	muls	r7, r4
 8020d3e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020d40:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020d44:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020d46:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020d4a:	fb04 fa0a 	mul.w	sl, r4, sl
 8020d4e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020d52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d56:	44bc      	add	ip, r7
 8020d58:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020d5c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020d60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020d70:	ea4c 040a 	orr.w	r4, ip, sl
 8020d74:	9410      	str	r4, [sp, #64]	; 0x40
 8020d76:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020d78:	2cff      	cmp	r4, #255	; 0xff
 8020d7a:	d020      	beq.n	8020dbe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8020d7c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020d7e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020d82:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020d84:	4367      	muls	r7, r4
 8020d86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020d88:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020d8c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020d8e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020d92:	fb04 fa0a 	mul.w	sl, r4, sl
 8020d96:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020d9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d9e:	44bc      	add	ip, r7
 8020da0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020da4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020da8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020dac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020db0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020db4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020db8:	ea4c 040a 	orr.w	r4, ip, sl
 8020dbc:	940b      	str	r4, [sp, #44]	; 0x2c
 8020dbe:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020dc0:	2cff      	cmp	r4, #255	; 0xff
 8020dc2:	d020      	beq.n	8020e06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8020dc4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020dc6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020dca:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020dcc:	4367      	muls	r7, r4
 8020dce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020dd0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020dd4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020dd6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020dda:	fb04 fa0a 	mul.w	sl, r4, sl
 8020dde:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020de2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020de6:	44bc      	add	ip, r7
 8020de8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020dec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020df0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020df4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020df8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020dfc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020e00:	ea4c 040a 	orr.w	r4, ip, sl
 8020e04:	9411      	str	r4, [sp, #68]	; 0x44
 8020e06:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020e08:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020e0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020e0e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020e12:	fb0e f707 	mul.w	r7, lr, r7
 8020e16:	fb02 770c 	mla	r7, r2, ip, r7
 8020e1a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020e1e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020e20:	fb00 770c 	mla	r7, r0, ip, r7
 8020e24:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020e28:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020e2a:	fb08 770c 	mla	r7, r8, ip, r7
 8020e2e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020e32:	fb0e fe0c 	mul.w	lr, lr, ip
 8020e36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e3a:	fb02 e303 	mla	r3, r2, r3, lr
 8020e3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020e40:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020e42:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020e46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020e48:	fb00 330a 	mla	r3, r0, sl, r3
 8020e4c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020e50:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020e56:	f8b9 0000 	ldrh.w	r0, [r9]
 8020e5a:	434b      	muls	r3, r1
 8020e5c:	0a3f      	lsrs	r7, r7, #8
 8020e5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e62:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020e66:	1c59      	adds	r1, r3, #1
 8020e68:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020e6c:	ea47 070c 	orr.w	r7, r7, ip
 8020e70:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020e74:	1202      	asrs	r2, r0, #8
 8020e76:	0c3b      	lsrs	r3, r7, #16
 8020e78:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020e7c:	b2c9      	uxtb	r1, r1
 8020e7e:	fb13 f304 	smulbb	r3, r3, r4
 8020e82:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020e86:	fb02 3201 	mla	r2, r2, r1, r3
 8020e8a:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020e8e:	10c3      	asrs	r3, r0, #3
 8020e90:	b2ff      	uxtb	r7, r7
 8020e92:	00c0      	lsls	r0, r0, #3
 8020e94:	b292      	uxth	r2, r2
 8020e96:	fb1c fc04 	smulbb	ip, ip, r4
 8020e9a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020e9e:	b2c0      	uxtb	r0, r0
 8020ea0:	fb17 f704 	smulbb	r7, r7, r4
 8020ea4:	fb03 c301 	mla	r3, r3, r1, ip
 8020ea8:	fb00 7001 	mla	r0, r0, r1, r7
 8020eac:	f102 0c01 	add.w	ip, r2, #1
 8020eb0:	b280      	uxth	r0, r0
 8020eb2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020eb6:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8020eba:	1c42      	adds	r2, r0, #1
 8020ebc:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020ec0:	b29b      	uxth	r3, r3
 8020ec2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020ec6:	ea42 020c 	orr.w	r2, r2, ip
 8020eca:	f103 0c01 	add.w	ip, r3, #1
 8020ece:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020ed2:	095b      	lsrs	r3, r3, #5
 8020ed4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020ed8:	431a      	orrs	r2, r3
 8020eda:	f8a9 2000 	strh.w	r2, [r9]
 8020ede:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020ee0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020ee2:	441a      	add	r2, r3
 8020ee4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020ee6:	9229      	str	r2, [sp, #164]	; 0xa4
 8020ee8:	f109 0902 	add.w	r9, r9, #2
 8020eec:	441d      	add	r5, r3
 8020eee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020ef2:	e63d      	b.n	8020b70 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8020ef4:	2800      	cmp	r0, #0
 8020ef6:	f43f aedd 	beq.w	8020cb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8020efa:	5c79      	ldrb	r1, [r7, r1]
 8020efc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020f00:	910b      	str	r1, [sp, #44]	; 0x2c
 8020f02:	0e09      	lsrs	r1, r1, #24
 8020f04:	9114      	str	r1, [sp, #80]	; 0x50
 8020f06:	e6d5      	b.n	8020cb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8020f08:	b01f      	add	sp, #124	; 0x7c
 8020f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020f0e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8020f0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f12:	b089      	sub	sp, #36	; 0x24
 8020f14:	9101      	str	r1, [sp, #4]
 8020f16:	9801      	ldr	r0, [sp, #4]
 8020f18:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8020f1c:	8800      	ldrh	r0, [r0, #0]
 8020f1e:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8020f22:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8020f26:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8020f2a:	1206      	asrs	r6, r0, #8
 8020f2c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8020f30:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020f34:	9602      	str	r6, [sp, #8]
 8020f36:	10c6      	asrs	r6, r0, #3
 8020f38:	00c0      	lsls	r0, r0, #3
 8020f3a:	b2c0      	uxtb	r0, r0
 8020f3c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020f40:	9004      	str	r0, [sp, #16]
 8020f42:	2f00      	cmp	r7, #0
 8020f44:	fb07 100c 	mla	r0, r7, ip, r1
 8020f48:	9603      	str	r6, [sp, #12]
 8020f4a:	eb02 0e00 	add.w	lr, r2, r0
 8020f4e:	f2c0 810a 	blt.w	8021166 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020f52:	45b8      	cmp	r8, r7
 8020f54:	f340 8107 	ble.w	8021166 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020f58:	2900      	cmp	r1, #0
 8020f5a:	f2c0 8102 	blt.w	8021162 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020f5e:	458c      	cmp	ip, r1
 8020f60:	f340 80ff 	ble.w	8021162 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020f64:	5c12      	ldrb	r2, [r2, r0]
 8020f66:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020f6a:	1c4a      	adds	r2, r1, #1
 8020f6c:	f100 80fe 	bmi.w	802116c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020f70:	4594      	cmp	ip, r2
 8020f72:	f340 80fb 	ble.w	802116c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020f76:	2d00      	cmp	r5, #0
 8020f78:	f000 80fa 	beq.w	8021170 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8020f7c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020f80:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020f84:	3701      	adds	r7, #1
 8020f86:	f100 80f7 	bmi.w	8021178 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8020f8a:	45b8      	cmp	r8, r7
 8020f8c:	f340 80f4 	ble.w	8021178 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8020f90:	2c00      	cmp	r4, #0
 8020f92:	f000 80f4 	beq.w	802117e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8020f96:	2900      	cmp	r1, #0
 8020f98:	eb0e 020c 	add.w	r2, lr, ip
 8020f9c:	f2c0 80ea 	blt.w	8021174 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8020fa0:	458c      	cmp	ip, r1
 8020fa2:	f340 80e7 	ble.w	8021174 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8020fa6:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8020faa:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8020fae:	3101      	adds	r1, #1
 8020fb0:	f100 80e8 	bmi.w	8021184 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8020fb4:	458c      	cmp	ip, r1
 8020fb6:	f340 80e5 	ble.w	8021184 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8020fba:	2d00      	cmp	r5, #0
 8020fbc:	f000 80e4 	beq.w	8021188 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8020fc0:	7852      	ldrb	r2, [r2, #1]
 8020fc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020fc6:	0e0b      	lsrs	r3, r1, #24
 8020fc8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8020fcc:	9300      	str	r3, [sp, #0]
 8020fce:	b2a4      	uxth	r4, r4
 8020fd0:	b2ab      	uxth	r3, r5
 8020fd2:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8020fd6:	fb03 f904 	mul.w	r9, r3, r4
 8020fda:	fb0a f505 	mul.w	r5, sl, r5
 8020fde:	011b      	lsls	r3, r3, #4
 8020fe0:	eba3 0e09 	sub.w	lr, r3, r9
 8020fe4:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8020fe8:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020fec:	0a28      	lsrs	r0, r5, #8
 8020fee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020ff2:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8020ff6:	4405      	add	r5, r0
 8020ff8:	0a2d      	lsrs	r5, r5, #8
 8020ffa:	fb0a f303 	mul.w	r3, sl, r3
 8020ffe:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8021002:	9005      	str	r0, [sp, #20]
 8021004:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8021008:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802100c:	0a1b      	lsrs	r3, r3, #8
 802100e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8021012:	9306      	str	r3, [sp, #24]
 8021014:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8021018:	fb0b f303 	mul.w	r3, fp, r3
 802101c:	0a1d      	lsrs	r5, r3, #8
 802101e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021022:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8021026:	fb0b f606 	mul.w	r6, fp, r6
 802102a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802102e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021032:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021036:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802103a:	fb08 f707 	mul.w	r7, r8, r7
 802103e:	441d      	add	r5, r3
 8021040:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8021044:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021048:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802104c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8021050:	fb08 fc0c 	mul.w	ip, r8, ip
 8021054:	0a1b      	lsrs	r3, r3, #8
 8021056:	9307      	str	r3, [sp, #28]
 8021058:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802105c:	0e0b      	lsrs	r3, r1, #24
 802105e:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8021062:	435f      	muls	r7, r3
 8021064:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021068:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802106c:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8021070:	4460      	add	r0, ip
 8021072:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021076:	b2a4      	uxth	r4, r4
 8021078:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802107c:	0a2d      	lsrs	r5, r5, #8
 802107e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021082:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021086:	fa1f fe8e 	uxth.w	lr, lr
 802108a:	4359      	muls	r1, r3
 802108c:	1b12      	subs	r2, r2, r4
 802108e:	9b05      	ldr	r3, [sp, #20]
 8021090:	44bc      	add	ip, r7
 8021092:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021096:	b292      	uxth	r2, r2
 8021098:	fb05 f50e 	mul.w	r5, r5, lr
 802109c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210a0:	fb03 5502 	mla	r5, r3, r2, r5
 80210a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80210a8:	9b06      	ldr	r3, [sp, #24]
 80210aa:	f501 7780 	add.w	r7, r1, #256	; 0x100
 80210ae:	0a36      	lsrs	r6, r6, #8
 80210b0:	0a00      	lsrs	r0, r0, #8
 80210b2:	fb0c 5509 	mla	r5, ip, r9, r5
 80210b6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80210ba:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80210be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80210c2:	fb00 5504 	mla	r5, r0, r4, r5
 80210c6:	fb0e f606 	mul.w	r6, lr, r6
 80210ca:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80210ce:	0a09      	lsrs	r1, r1, #8
 80210d0:	9b07      	ldr	r3, [sp, #28]
 80210d2:	fb02 6000 	mla	r0, r2, r0, r6
 80210d6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80210da:	fb09 0001 	mla	r0, r9, r1, r0
 80210de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80210e2:	fb0e fe0b 	mul.w	lr, lr, fp
 80210e6:	fb04 0003 	mla	r0, r4, r3, r0
 80210ea:	fb02 e20a 	mla	r2, r2, sl, lr
 80210ee:	9b00      	ldr	r3, [sp, #0]
 80210f0:	fb04 2408 	mla	r4, r4, r8, r2
 80210f4:	fb09 4903 	mla	r9, r9, r3, r4
 80210f8:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80210fc:	9b02      	ldr	r3, [sp, #8]
 80210fe:	9a04      	ldr	r2, [sp, #16]
 8021100:	fa5f f989 	uxtb.w	r9, r9
 8021104:	fb03 f109 	mul.w	r1, r3, r9
 8021108:	9b03      	ldr	r3, [sp, #12]
 802110a:	0a2d      	lsrs	r5, r5, #8
 802110c:	0a00      	lsrs	r0, r0, #8
 802110e:	fb03 f309 	mul.w	r3, r3, r9
 8021112:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021116:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802111a:	4305      	orrs	r5, r0
 802111c:	fb02 f909 	mul.w	r9, r2, r9
 8021120:	1c58      	adds	r0, r3, #1
 8021122:	1c4a      	adds	r2, r1, #1
 8021124:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021128:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802112c:	0a2b      	lsrs	r3, r5, #8
 802112e:	0c2a      	lsrs	r2, r5, #16
 8021130:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021134:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8021138:	00db      	lsls	r3, r3, #3
 802113a:	0212      	lsls	r2, r2, #8
 802113c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8021140:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021144:	4313      	orrs	r3, r2
 8021146:	f109 0201 	add.w	r2, r9, #1
 802114a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802114e:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8021152:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021156:	431d      	orrs	r5, r3
 8021158:	9b01      	ldr	r3, [sp, #4]
 802115a:	801d      	strh	r5, [r3, #0]
 802115c:	b009      	add	sp, #36	; 0x24
 802115e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021162:	2000      	movs	r0, #0
 8021164:	e701      	b.n	8020f6a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8021166:	2600      	movs	r6, #0
 8021168:	4630      	mov	r0, r6
 802116a:	e70b      	b.n	8020f84 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802116c:	2600      	movs	r6, #0
 802116e:	e709      	b.n	8020f84 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8021170:	462e      	mov	r6, r5
 8021172:	e707      	b.n	8020f84 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8021174:	2700      	movs	r7, #0
 8021176:	e71a      	b.n	8020fae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8021178:	2100      	movs	r1, #0
 802117a:	460f      	mov	r7, r1
 802117c:	e723      	b.n	8020fc6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802117e:	4621      	mov	r1, r4
 8021180:	4627      	mov	r7, r4
 8021182:	e720      	b.n	8020fc6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8021184:	2100      	movs	r1, #0
 8021186:	e71e      	b.n	8020fc6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8021188:	4629      	mov	r1, r5
 802118a:	e71c      	b.n	8020fc6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

0802118c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802118c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021190:	b09b      	sub	sp, #108	; 0x6c
 8021192:	9218      	str	r2, [sp, #96]	; 0x60
 8021194:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021196:	9116      	str	r1, [sp, #88]	; 0x58
 8021198:	9307      	str	r3, [sp, #28]
 802119a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802119e:	9019      	str	r0, [sp, #100]	; 0x64
 80211a0:	6850      	ldr	r0, [r2, #4]
 80211a2:	6812      	ldr	r2, [r2, #0]
 80211a4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80211a6:	fb00 1303 	mla	r3, r0, r3, r1
 80211aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80211ae:	930a      	str	r3, [sp, #40]	; 0x28
 80211b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80211b2:	681b      	ldr	r3, [r3, #0]
 80211b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80211b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80211b8:	685e      	ldr	r6, [r3, #4]
 80211ba:	3604      	adds	r6, #4
 80211bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80211be:	2b00      	cmp	r3, #0
 80211c0:	dc03      	bgt.n	80211ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80211c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80211c4:	2b00      	cmp	r3, #0
 80211c6:	f340 8373 	ble.w	80218b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80211ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80211cc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80211d0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80211d4:	1e48      	subs	r0, r1, #1
 80211d6:	1e57      	subs	r7, r2, #1
 80211d8:	9b07      	ldr	r3, [sp, #28]
 80211da:	2b00      	cmp	r3, #0
 80211dc:	f340 8190 	ble.w	8021500 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80211e0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80211e2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80211e6:	ea4f 4325 	mov.w	r3, r5, asr #16
 80211ea:	d406      	bmi.n	80211fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80211ec:	4584      	cmp	ip, r0
 80211ee:	da04      	bge.n	80211fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80211f0:	2b00      	cmp	r3, #0
 80211f2:	db02      	blt.n	80211fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80211f4:	42bb      	cmp	r3, r7
 80211f6:	f2c0 8184 	blt.w	8021502 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 80211fa:	f11c 0c01 	adds.w	ip, ip, #1
 80211fe:	f100 8172 	bmi.w	80214e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021202:	4561      	cmp	r1, ip
 8021204:	f2c0 816f 	blt.w	80214e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021208:	3301      	adds	r3, #1
 802120a:	f100 816c 	bmi.w	80214e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802120e:	429a      	cmp	r2, r3
 8021210:	f2c0 8169 	blt.w	80214e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021214:	9b07      	ldr	r3, [sp, #28]
 8021216:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021218:	9317      	str	r3, [sp, #92]	; 0x5c
 802121a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802121c:	2b00      	cmp	r3, #0
 802121e:	f340 818e 	ble.w	802153e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b2>
 8021222:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021224:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021228:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802122a:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802122e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021230:	141b      	asrs	r3, r3, #16
 8021232:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021236:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802123a:	f100 81d1 	bmi.w	80215e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 802123e:	f101 38ff 	add.w	r8, r1, #4294967295
 8021242:	4543      	cmp	r3, r8
 8021244:	f280 81cc 	bge.w	80215e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8021248:	f1bc 0f00 	cmp.w	ip, #0
 802124c:	f2c0 81c8 	blt.w	80215e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8021250:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021254:	45c4      	cmp	ip, r8
 8021256:	f280 81c3 	bge.w	80215e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 802125a:	b209      	sxth	r1, r1
 802125c:	fb0c 3301 	mla	r3, ip, r1, r3
 8021260:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021262:	eb04 0803 	add.w	r8, r4, r3
 8021266:	5ce3      	ldrb	r3, [r4, r3]
 8021268:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802126c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021270:	2a00      	cmp	r2, #0
 8021272:	f000 81aa 	beq.w	80215ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43e>
 8021276:	f898 c001 	ldrb.w	ip, [r8, #1]
 802127a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802127e:	940b      	str	r4, [sp, #44]	; 0x2c
 8021280:	0e24      	lsrs	r4, r4, #24
 8021282:	9412      	str	r4, [sp, #72]	; 0x48
 8021284:	b178      	cbz	r0, 80212a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8021286:	eb08 0c01 	add.w	ip, r8, r1
 802128a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802128e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021292:	9108      	str	r1, [sp, #32]
 8021294:	0e09      	lsrs	r1, r1, #24
 8021296:	9110      	str	r1, [sp, #64]	; 0x40
 8021298:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802129c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80212a0:	910c      	str	r1, [sp, #48]	; 0x30
 80212a2:	0e09      	lsrs	r1, r1, #24
 80212a4:	9113      	str	r1, [sp, #76]	; 0x4c
 80212a6:	b292      	uxth	r2, r2
 80212a8:	b280      	uxth	r0, r0
 80212aa:	fb02 f900 	mul.w	r9, r2, r0
 80212ae:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80212b2:	0112      	lsls	r2, r2, #4
 80212b4:	eba2 0809 	sub.w	r8, r2, r9
 80212b8:	b280      	uxth	r0, r0
 80212ba:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80212be:	9912      	ldr	r1, [sp, #72]	; 0x48
 80212c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80212c2:	fa1f f888 	uxth.w	r8, r8
 80212c6:	1a12      	subs	r2, r2, r0
 80212c8:	b292      	uxth	r2, r2
 80212ca:	fb08 f101 	mul.w	r1, r8, r1
 80212ce:	fb02 110e 	mla	r1, r2, lr, r1
 80212d2:	fb00 1104 	mla	r1, r0, r4, r1
 80212d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80212d8:	fb09 1104 	mla	r1, r9, r4, r1
 80212dc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80212e0:	2900      	cmp	r1, #0
 80212e2:	f000 80f5 	beq.w	80214d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80212e6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80212ea:	d01b      	beq.n	8021324 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80212ec:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80212f0:	fb0e fa0a 	mul.w	sl, lr, sl
 80212f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212f8:	fb0e fe03 	mul.w	lr, lr, r3
 80212fc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021300:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021304:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021308:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802130c:	4453      	add	r3, sl
 802130e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021312:	0a1b      	lsrs	r3, r3, #8
 8021314:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021318:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802131c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021320:	ea43 030c 	orr.w	r3, r3, ip
 8021324:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021326:	2cff      	cmp	r4, #255	; 0xff
 8021328:	d021      	beq.n	802136e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802132a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802132c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021330:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021332:	fb04 fb0b 	mul.w	fp, r4, fp
 8021336:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021338:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802133c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802133e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021342:	fb04 fa0a 	mul.w	sl, r4, sl
 8021346:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802134a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802134e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021352:	44de      	add	lr, fp
 8021354:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021358:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802135c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021360:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021364:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021368:	ea4e 040a 	orr.w	r4, lr, sl
 802136c:	940b      	str	r4, [sp, #44]	; 0x2c
 802136e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021370:	2cff      	cmp	r4, #255	; 0xff
 8021372:	d021      	beq.n	80213b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8021374:	9c08      	ldr	r4, [sp, #32]
 8021376:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802137a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802137c:	fb04 fb0b 	mul.w	fp, r4, fp
 8021380:	9c08      	ldr	r4, [sp, #32]
 8021382:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021386:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021388:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802138c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021390:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021394:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021398:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802139c:	44de      	add	lr, fp
 802139e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80213a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80213a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80213ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80213b2:	ea4e 040a 	orr.w	r4, lr, sl
 80213b6:	9408      	str	r4, [sp, #32]
 80213b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80213ba:	2cff      	cmp	r4, #255	; 0xff
 80213bc:	d021      	beq.n	8021402 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80213be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80213c0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80213c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80213c6:	fb04 fb0b 	mul.w	fp, r4, fp
 80213ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80213cc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80213d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80213d2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80213d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80213da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80213de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80213e2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80213e6:	44de      	add	lr, fp
 80213e8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80213ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80213f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80213f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80213fc:	ea4e 040a 	orr.w	r4, lr, sl
 8021400:	940c      	str	r4, [sp, #48]	; 0x30
 8021402:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021404:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021408:	9c08      	ldr	r4, [sp, #32]
 802140a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802140e:	fb08 fc0c 	mul.w	ip, r8, ip
 8021412:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021416:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802141a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802141c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021420:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021424:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021426:	fb09 cc0e 	mla	ip, r9, lr, ip
 802142a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802142e:	fb08 f80e 	mul.w	r8, r8, lr
 8021432:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021436:	fb02 8303 	mla	r3, r2, r3, r8
 802143a:	9a08      	ldr	r2, [sp, #32]
 802143c:	f8b7 8000 	ldrh.w	r8, [r7]
 8021440:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021444:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021446:	fb00 330a 	mla	r3, r0, sl, r3
 802144a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802144e:	fb09 3900 	mla	r9, r9, r0, r3
 8021452:	43c9      	mvns	r1, r1
 8021454:	ea4f 2228 	mov.w	r2, r8, asr #8
 8021458:	fa5f fe81 	uxtb.w	lr, r1
 802145c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021460:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021464:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021468:	fb02 f20e 	mul.w	r2, r2, lr
 802146c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021470:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021474:	ea4c 0c09 	orr.w	ip, ip, r9
 8021478:	1c53      	adds	r3, r2, #1
 802147a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802147e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8021482:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8021486:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802148a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802148e:	4a63      	ldr	r2, [pc, #396]	; (802161c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8021490:	fb00 f00e 	mul.w	r0, r0, lr
 8021494:	b2db      	uxtb	r3, r3
 8021496:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802149a:	1c43      	adds	r3, r0, #1
 802149c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80214a0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80214a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80214a8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80214ac:	b2c9      	uxtb	r1, r1
 80214ae:	00db      	lsls	r3, r3, #3
 80214b0:	fb01 f10e 	mul.w	r1, r1, lr
 80214b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80214b8:	4313      	orrs	r3, r2
 80214ba:	1c4a      	adds	r2, r1, #1
 80214bc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80214c0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80214c4:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80214c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80214cc:	f8a7 c000 	strh.w	ip, [r7]
 80214d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80214d2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80214d4:	441a      	add	r2, r3
 80214d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80214d8:	9225      	str	r2, [sp, #148]	; 0x94
 80214da:	441d      	add	r5, r3
 80214dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80214de:	3b01      	subs	r3, #1
 80214e0:	3702      	adds	r7, #2
 80214e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80214e4:	e699      	b.n	802121a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80214e6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80214e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80214ea:	441c      	add	r4, r3
 80214ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80214ee:	9425      	str	r4, [sp, #148]	; 0x94
 80214f0:	441d      	add	r5, r3
 80214f2:	9b07      	ldr	r3, [sp, #28]
 80214f4:	3b01      	subs	r3, #1
 80214f6:	9307      	str	r3, [sp, #28]
 80214f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214fa:	3302      	adds	r3, #2
 80214fc:	930a      	str	r3, [sp, #40]	; 0x28
 80214fe:	e66b      	b.n	80211d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021500:	d024      	beq.n	802154c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021502:	9b07      	ldr	r3, [sp, #28]
 8021504:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021506:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021508:	3b01      	subs	r3, #1
 802150a:	fb00 4003 	mla	r0, r0, r3, r4
 802150e:	1400      	asrs	r0, r0, #16
 8021510:	f53f ae80 	bmi.w	8021214 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021514:	3901      	subs	r1, #1
 8021516:	4288      	cmp	r0, r1
 8021518:	f6bf ae7c 	bge.w	8021214 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802151c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802151e:	fb01 5303 	mla	r3, r1, r3, r5
 8021522:	141b      	asrs	r3, r3, #16
 8021524:	f53f ae76 	bmi.w	8021214 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021528:	3a01      	subs	r2, #1
 802152a:	4293      	cmp	r3, r2
 802152c:	f6bf ae72 	bge.w	8021214 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021530:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021534:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8021538:	f1bb 0f00 	cmp.w	fp, #0
 802153c:	dc70      	bgt.n	8021620 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802153e:	9b07      	ldr	r3, [sp, #28]
 8021540:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021546:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802154a:	930a      	str	r3, [sp, #40]	; 0x28
 802154c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802154e:	2b00      	cmp	r3, #0
 8021550:	f340 81ae 	ble.w	80218b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8021554:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802155c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021560:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021562:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021566:	ee31 1a05 	vadd.f32	s2, s2, s10
 802156a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802156e:	eef0 6a62 	vmov.f32	s13, s5
 8021572:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021576:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802157a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802157e:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8021582:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021586:	eef0 6a43 	vmov.f32	s13, s6
 802158a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802158e:	ee12 2a90 	vmov	r2, s5
 8021592:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021596:	fb92 f3f3 	sdiv	r3, r2, r3
 802159a:	ee13 2a10 	vmov	r2, s6
 802159e:	9327      	str	r3, [sp, #156]	; 0x9c
 80215a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80215a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80215a6:	9328      	str	r3, [sp, #160]	; 0xa0
 80215a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80215aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80215ac:	3b01      	subs	r3, #1
 80215ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215b2:	9316      	str	r3, [sp, #88]	; 0x58
 80215b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80215b6:	bf08      	it	eq
 80215b8:	4613      	moveq	r3, r2
 80215ba:	ee16 5a90 	vmov	r5, s13
 80215be:	9307      	str	r3, [sp, #28]
 80215c0:	eeb0 3a67 	vmov.f32	s6, s15
 80215c4:	eef0 2a47 	vmov.f32	s5, s14
 80215c8:	e5f8      	b.n	80211bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80215ca:	2800      	cmp	r0, #0
 80215cc:	f43f ae6b 	beq.w	80212a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80215d0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80215d4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80215d8:	9108      	str	r1, [sp, #32]
 80215da:	0e09      	lsrs	r1, r1, #24
 80215dc:	9110      	str	r1, [sp, #64]	; 0x40
 80215de:	e662      	b.n	80212a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80215e0:	f113 0801 	adds.w	r8, r3, #1
 80215e4:	f53f af74 	bmi.w	80214d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80215e8:	4541      	cmp	r1, r8
 80215ea:	f6ff af71 	blt.w	80214d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80215ee:	f11c 0801 	adds.w	r8, ip, #1
 80215f2:	f53f af6d 	bmi.w	80214d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80215f6:	45c6      	cmp	lr, r8
 80215f8:	f6ff af6a 	blt.w	80214d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80215fc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021600:	b209      	sxth	r1, r1
 8021602:	fa0f f38e 	sxth.w	r3, lr
 8021606:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802160a:	9301      	str	r3, [sp, #4]
 802160c:	9100      	str	r1, [sp, #0]
 802160e:	4633      	mov	r3, r6
 8021610:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021612:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021614:	4639      	mov	r1, r7
 8021616:	f7ff fc7a 	bl	8020f0e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802161a:	e759      	b.n	80214d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802161c:	fffff800 	.word	0xfffff800
 8021620:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021622:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021624:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021628:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802162a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802162e:	1427      	asrs	r7, r4, #16
 8021630:	142b      	asrs	r3, r5, #16
 8021632:	fb01 7303 	mla	r3, r1, r3, r7
 8021636:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021638:	18e7      	adds	r7, r4, r3
 802163a:	5ce3      	ldrb	r3, [r4, r3]
 802163c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021640:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021644:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021648:	2a00      	cmp	r2, #0
 802164a:	f000 8127 	beq.w	802189c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802164e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8021652:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8021656:	940d      	str	r4, [sp, #52]	; 0x34
 8021658:	0e24      	lsrs	r4, r4, #24
 802165a:	9414      	str	r4, [sp, #80]	; 0x50
 802165c:	b170      	cbz	r0, 802167c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802165e:	eb07 0e01 	add.w	lr, r7, r1
 8021662:	5c79      	ldrb	r1, [r7, r1]
 8021664:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021668:	9109      	str	r1, [sp, #36]	; 0x24
 802166a:	0e09      	lsrs	r1, r1, #24
 802166c:	9111      	str	r1, [sp, #68]	; 0x44
 802166e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8021672:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021676:	910e      	str	r1, [sp, #56]	; 0x38
 8021678:	0e09      	lsrs	r1, r1, #24
 802167a:	9115      	str	r1, [sp, #84]	; 0x54
 802167c:	b292      	uxth	r2, r2
 802167e:	b280      	uxth	r0, r0
 8021680:	fb02 f800 	mul.w	r8, r2, r0
 8021684:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8021688:	0112      	lsls	r2, r2, #4
 802168a:	eba2 0e08 	sub.w	lr, r2, r8
 802168e:	b280      	uxth	r0, r0
 8021690:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021694:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021696:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021698:	fa1f fe8e 	uxth.w	lr, lr
 802169c:	1a09      	subs	r1, r1, r0
 802169e:	b289      	uxth	r1, r1
 80216a0:	fb0e f202 	mul.w	r2, lr, r2
 80216a4:	fb01 220c 	mla	r2, r1, ip, r2
 80216a8:	fb00 2204 	mla	r2, r0, r4, r2
 80216ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80216ae:	fb08 2204 	mla	r2, r8, r4, r2
 80216b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80216b6:	2a00      	cmp	r2, #0
 80216b8:	f000 80e5 	beq.w	8021886 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80216bc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80216c0:	d019      	beq.n	80216f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 80216c2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80216c6:	fb0c fa0a 	mul.w	sl, ip, sl
 80216ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80216ce:	fb0c fc03 	mul.w	ip, ip, r3
 80216d2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80216d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80216da:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80216de:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80216e2:	4453      	add	r3, sl
 80216e4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80216e8:	0a1b      	lsrs	r3, r3, #8
 80216ea:	0a3f      	lsrs	r7, r7, #8
 80216ec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80216f0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80216f4:	433b      	orrs	r3, r7
 80216f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80216f8:	2cff      	cmp	r4, #255	; 0xff
 80216fa:	d020      	beq.n	802173e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 80216fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80216fe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021702:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021704:	4367      	muls	r7, r4
 8021706:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021708:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802170c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802170e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021712:	fb04 fa0a 	mul.w	sl, r4, sl
 8021716:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802171a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802171e:	44bc      	add	ip, r7
 8021720:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021724:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021728:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802172c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021730:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021734:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021738:	ea4c 040a 	orr.w	r4, ip, sl
 802173c:	940d      	str	r4, [sp, #52]	; 0x34
 802173e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021740:	2cff      	cmp	r4, #255	; 0xff
 8021742:	d020      	beq.n	8021786 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8021744:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021746:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802174a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802174c:	4367      	muls	r7, r4
 802174e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021750:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021754:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021756:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802175a:	fb04 fa0a 	mul.w	sl, r4, sl
 802175e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021762:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021766:	44bc      	add	ip, r7
 8021768:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802176c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021770:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021774:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021778:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802177c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021780:	ea4c 040a 	orr.w	r4, ip, sl
 8021784:	9409      	str	r4, [sp, #36]	; 0x24
 8021786:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021788:	2cff      	cmp	r4, #255	; 0xff
 802178a:	d020      	beq.n	80217ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 802178c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802178e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021792:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021794:	4367      	muls	r7, r4
 8021796:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021798:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802179c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802179e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80217a2:	fb04 fa0a 	mul.w	sl, r4, sl
 80217a6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80217aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80217ae:	44bc      	add	ip, r7
 80217b0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80217b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80217b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80217bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80217c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80217c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80217c8:	ea4c 040a 	orr.w	r4, ip, sl
 80217cc:	940e      	str	r4, [sp, #56]	; 0x38
 80217ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80217d0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80217d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80217d6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80217da:	fb0e f707 	mul.w	r7, lr, r7
 80217de:	fb01 770c 	mla	r7, r1, ip, r7
 80217e2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80217e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80217e8:	fb00 770c 	mla	r7, r0, ip, r7
 80217ec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80217f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80217f2:	fb08 770c 	mla	r7, r8, ip, r7
 80217f6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80217fa:	fb0e fe0c 	mul.w	lr, lr, ip
 80217fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021802:	fb01 e303 	mla	r3, r1, r3, lr
 8021806:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021808:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802180c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802180e:	fb00 330a 	mla	r3, r0, sl, r3
 8021812:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021816:	fb08 3c0c 	mla	ip, r8, ip, r3
 802181a:	f8b9 3000 	ldrh.w	r3, [r9]
 802181e:	43d2      	mvns	r2, r2
 8021820:	1218      	asrs	r0, r3, #8
 8021822:	b2d2      	uxtb	r2, r2
 8021824:	10d9      	asrs	r1, r3, #3
 8021826:	0a3f      	lsrs	r7, r7, #8
 8021828:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802182c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021830:	00db      	lsls	r3, r3, #3
 8021832:	4350      	muls	r0, r2
 8021834:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021838:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802183c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021840:	b2db      	uxtb	r3, r3
 8021842:	ea47 070c 	orr.w	r7, r7, ip
 8021846:	4351      	muls	r1, r2
 8021848:	4353      	muls	r3, r2
 802184a:	1c42      	adds	r2, r0, #1
 802184c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021850:	0c3a      	lsrs	r2, r7, #16
 8021852:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021856:	4a18      	ldr	r2, [pc, #96]	; (80218b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8021858:	b2c0      	uxtb	r0, r0
 802185a:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802185e:	1c4a      	adds	r2, r1, #1
 8021860:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021864:	0a3a      	lsrs	r2, r7, #8
 8021866:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802186a:	00c9      	lsls	r1, r1, #3
 802186c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021870:	4301      	orrs	r1, r0
 8021872:	1c58      	adds	r0, r3, #1
 8021874:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021878:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802187c:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8021880:	4308      	orrs	r0, r1
 8021882:	f8a9 0000 	strh.w	r0, [r9]
 8021886:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021888:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802188a:	441a      	add	r2, r3
 802188c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802188e:	9225      	str	r2, [sp, #148]	; 0x94
 8021890:	f109 0902 	add.w	r9, r9, #2
 8021894:	441d      	add	r5, r3
 8021896:	f10b 3bff 	add.w	fp, fp, #4294967295
 802189a:	e64d      	b.n	8021538 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 802189c:	2800      	cmp	r0, #0
 802189e:	f43f aeed 	beq.w	802167c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80218a2:	5c79      	ldrb	r1, [r7, r1]
 80218a4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80218a8:	9109      	str	r1, [sp, #36]	; 0x24
 80218aa:	0e09      	lsrs	r1, r1, #24
 80218ac:	9111      	str	r1, [sp, #68]	; 0x44
 80218ae:	e6e5      	b.n	802167c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80218b0:	b01b      	add	sp, #108	; 0x6c
 80218b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218b6:	bf00      	nop
 80218b8:	fffff800 	.word	0xfffff800

080218bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80218bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218c0:	b085      	sub	sp, #20
 80218c2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80218c6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80218ca:	9103      	str	r1, [sp, #12]
 80218cc:	fb00 7406 	mla	r4, r0, r6, r7
 80218d0:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80218d4:	2800      	cmp	r0, #0
 80218d6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80218da:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80218de:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80218e2:	9501      	str	r5, [sp, #4]
 80218e4:	eb03 0904 	add.w	r9, r3, r4
 80218e8:	f2c0 8150 	blt.w	8021b8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80218ec:	4583      	cmp	fp, r0
 80218ee:	f340 814d 	ble.w	8021b8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80218f2:	2f00      	cmp	r7, #0
 80218f4:	f2c0 8146 	blt.w	8021b84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80218f8:	42be      	cmp	r6, r7
 80218fa:	f340 8143 	ble.w	8021b84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80218fe:	f813 c004 	ldrb.w	ip, [r3, r4]
 8021902:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8021906:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802190a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 802190e:	4355      	muls	r5, r2
 8021910:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021914:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8021918:	fb0c f203 	mul.w	r2, ip, r3
 802191c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8021920:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8021924:	441d      	add	r5, r3
 8021926:	f102 0320 	add.w	r3, r2, #32
 802192a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802192e:	0a1b      	lsrs	r3, r3, #8
 8021930:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8021934:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021938:	431c      	orrs	r4, r3
 802193a:	1c7b      	adds	r3, r7, #1
 802193c:	f100 812b 	bmi.w	8021b96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021940:	429e      	cmp	r6, r3
 8021942:	f340 8128 	ble.w	8021b96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021946:	2900      	cmp	r1, #0
 8021948:	f000 8128 	beq.w	8021b9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 802194c:	9a01      	ldr	r2, [sp, #4]
 802194e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021952:	8855      	ldrh	r5, [r2, #2]
 8021954:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8021958:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 802195c:	fb08 f802 	mul.w	r8, r8, r2
 8021960:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021964:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8021968:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802196c:	435d      	muls	r5, r3
 802196e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021972:	44d0      	add	r8, sl
 8021974:	f105 0a20 	add.w	sl, r5, #32
 8021978:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 802197c:	0a2d      	lsrs	r5, r5, #8
 802197e:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8021982:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021986:	432a      	orrs	r2, r5
 8021988:	3001      	adds	r0, #1
 802198a:	f100 810d 	bmi.w	8021ba8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802198e:	4583      	cmp	fp, r0
 8021990:	f340 810a 	ble.w	8021ba8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8021994:	f1be 0f00 	cmp.w	lr, #0
 8021998:	f000 810b 	beq.w	8021bb2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 802199c:	2f00      	cmp	r7, #0
 802199e:	f2c0 8100 	blt.w	8021ba2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80219a2:	42be      	cmp	r6, r7
 80219a4:	f340 80fd 	ble.w	8021ba2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80219a8:	9801      	ldr	r0, [sp, #4]
 80219aa:	f819 5006 	ldrb.w	r5, [r9, r6]
 80219ae:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80219b2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80219b6:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80219ba:	fb0a fa00 	mul.w	sl, sl, r0
 80219be:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80219c2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80219c6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80219ca:	fb05 f808 	mul.w	r8, r5, r8
 80219ce:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80219d2:	4482      	add	sl, r0
 80219d4:	f108 0020 	add.w	r0, r8, #32
 80219d8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80219dc:	0a00      	lsrs	r0, r0, #8
 80219de:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80219e2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80219e6:	ea4b 0b00 	orr.w	fp, fp, r0
 80219ea:	3701      	adds	r7, #1
 80219ec:	f100 80e6 	bmi.w	8021bbc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80219f0:	42be      	cmp	r6, r7
 80219f2:	f340 80e3 	ble.w	8021bbc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80219f6:	2900      	cmp	r1, #0
 80219f8:	f000 80e3 	beq.w	8021bc2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 80219fc:	3601      	adds	r6, #1
 80219fe:	9801      	ldr	r0, [sp, #4]
 8021a00:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021a04:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021a08:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021a0c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8021a10:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a14:	fb09 f906 	mul.w	r9, r9, r6
 8021a18:	fb07 f800 	mul.w	r8, r7, r0
 8021a1c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8021a20:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8021a24:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8021a28:	44d1      	add	r9, sl
 8021a2a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8021a2e:	f108 0020 	add.w	r0, r8, #32
 8021a32:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021a36:	0a00      	lsrs	r0, r0, #8
 8021a38:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a3c:	4330      	orrs	r0, r6
 8021a3e:	b28e      	uxth	r6, r1
 8021a40:	fa1f f98e 	uxth.w	r9, lr
 8021a44:	fb06 f809 	mul.w	r8, r6, r9
 8021a48:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8021a4c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8021a50:	0136      	lsls	r6, r6, #4
 8021a52:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021a56:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8021a5a:	9601      	str	r6, [sp, #4]
 8021a5c:	ea4a 0404 	orr.w	r4, sl, r4
 8021a60:	fa1f f689 	uxth.w	r6, r9
 8021a64:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021a68:	fb11 f90e 	smulbb	r9, r1, lr
 8021a6c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8021a70:	9602      	str	r6, [sp, #8]
 8021a72:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021a76:	4626      	mov	r6, r4
 8021a78:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021a7c:	f1ce 0410 	rsb	r4, lr, #16
 8021a80:	1a64      	subs	r4, r4, r1
 8021a82:	ea4a 0202 	orr.w	r2, sl, r2
 8021a86:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8021a8a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021a8e:	434a      	muls	r2, r1
 8021a90:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8021a94:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021a98:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021a9c:	fb04 2406 	mla	r4, r4, r6, r2
 8021aa0:	ea4a 0000 	orr.w	r0, sl, r0
 8021aa4:	fb09 4200 	mla	r2, r9, r0, r4
 8021aa8:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8021aac:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021ab0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8021ab4:	ea44 0b0b 	orr.w	fp, r4, fp
 8021ab8:	9c01      	ldr	r4, [sp, #4]
 8021aba:	9e02      	ldr	r6, [sp, #8]
 8021abc:	9903      	ldr	r1, [sp, #12]
 8021abe:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8021ac2:	1ba4      	subs	r4, r4, r6
 8021ac4:	9e01      	ldr	r6, [sp, #4]
 8021ac6:	8808      	ldrh	r0, [r1, #0]
 8021ac8:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8021acc:	eba6 0608 	sub.w	r6, r6, r8
 8021ad0:	b2b6      	uxth	r6, r6
 8021ad2:	b2a4      	uxth	r4, r4
 8021ad4:	4373      	muls	r3, r6
 8021ad6:	fb0c 3304 	mla	r3, ip, r4, r3
 8021ada:	9c02      	ldr	r4, [sp, #8]
 8021adc:	fb04 3505 	mla	r5, r4, r5, r3
 8021ae0:	fb08 5707 	mla	r7, r8, r7, r5
 8021ae4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021ae8:	b289      	uxth	r1, r1
 8021aea:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021aee:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021af2:	434f      	muls	r7, r1
 8021af4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021af8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021afc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021b00:	1c7b      	adds	r3, r7, #1
 8021b02:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021b06:	ea42 0e0e 	orr.w	lr, r2, lr
 8021b0a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8021b0e:	fa1f f28e 	uxth.w	r2, lr
 8021b12:	1203      	asrs	r3, r0, #8
 8021b14:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8021b18:	b2ff      	uxtb	r7, r7
 8021b1a:	1215      	asrs	r5, r2, #8
 8021b1c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021b20:	fb13 f307 	smulbb	r3, r3, r7
 8021b24:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021b28:	fb05 3501 	mla	r5, r5, r1, r3
 8021b2c:	10c3      	asrs	r3, r0, #3
 8021b2e:	10d4      	asrs	r4, r2, #3
 8021b30:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021b34:	fb13 f307 	smulbb	r3, r3, r7
 8021b38:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021b3c:	fb04 3401 	mla	r4, r4, r1, r3
 8021b40:	00c3      	lsls	r3, r0, #3
 8021b42:	00d2      	lsls	r2, r2, #3
 8021b44:	b2db      	uxtb	r3, r3
 8021b46:	fb13 f307 	smulbb	r3, r3, r7
 8021b4a:	b2d2      	uxtb	r2, r2
 8021b4c:	fb02 3101 	mla	r1, r2, r1, r3
 8021b50:	b2ad      	uxth	r5, r5
 8021b52:	b289      	uxth	r1, r1
 8021b54:	b2a4      	uxth	r4, r4
 8021b56:	1c6b      	adds	r3, r5, #1
 8021b58:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021b5c:	1c62      	adds	r2, r4, #1
 8021b5e:	1c4b      	adds	r3, r1, #1
 8021b60:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021b64:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8021b68:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021b6c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021b70:	0964      	lsrs	r4, r4, #5
 8021b72:	432b      	orrs	r3, r5
 8021b74:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8021b78:	9a03      	ldr	r2, [sp, #12]
 8021b7a:	4323      	orrs	r3, r4
 8021b7c:	8013      	strh	r3, [r2, #0]
 8021b7e:	b005      	add	sp, #20
 8021b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b84:	f04f 0c00 	mov.w	ip, #0
 8021b88:	4664      	mov	r4, ip
 8021b8a:	e6d6      	b.n	802193a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8021b8c:	2300      	movs	r3, #0
 8021b8e:	469c      	mov	ip, r3
 8021b90:	461a      	mov	r2, r3
 8021b92:	461c      	mov	r4, r3
 8021b94:	e6f8      	b.n	8021988 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021b96:	2300      	movs	r3, #0
 8021b98:	461a      	mov	r2, r3
 8021b9a:	e6f5      	b.n	8021988 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021b9c:	460b      	mov	r3, r1
 8021b9e:	460a      	mov	r2, r1
 8021ba0:	e6f2      	b.n	8021988 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021ba2:	2500      	movs	r5, #0
 8021ba4:	46ab      	mov	fp, r5
 8021ba6:	e720      	b.n	80219ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8021ba8:	2700      	movs	r7, #0
 8021baa:	463d      	mov	r5, r7
 8021bac:	4638      	mov	r0, r7
 8021bae:	46bb      	mov	fp, r7
 8021bb0:	e745      	b.n	8021a3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021bb2:	4677      	mov	r7, lr
 8021bb4:	4675      	mov	r5, lr
 8021bb6:	4670      	mov	r0, lr
 8021bb8:	46f3      	mov	fp, lr
 8021bba:	e740      	b.n	8021a3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021bbc:	2700      	movs	r7, #0
 8021bbe:	4638      	mov	r0, r7
 8021bc0:	e73d      	b.n	8021a3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021bc2:	460f      	mov	r7, r1
 8021bc4:	4608      	mov	r0, r1
 8021bc6:	e73a      	b.n	8021a3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08021bc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bcc:	b097      	sub	sp, #92	; 0x5c
 8021bce:	9214      	str	r2, [sp, #80]	; 0x50
 8021bd0:	9308      	str	r3, [sp, #32]
 8021bd2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021bd4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021bd8:	9312      	str	r3, [sp, #72]	; 0x48
 8021bda:	9111      	str	r1, [sp, #68]	; 0x44
 8021bdc:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8021be0:	9015      	str	r0, [sp, #84]	; 0x54
 8021be2:	6850      	ldr	r0, [r2, #4]
 8021be4:	6812      	ldr	r2, [r2, #0]
 8021be6:	fb00 1303 	mla	r3, r0, r3, r1
 8021bea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021bee:	9309      	str	r3, [sp, #36]	; 0x24
 8021bf0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8021bf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021bf8:	685b      	ldr	r3, [r3, #4]
 8021bfa:	930c      	str	r3, [sp, #48]	; 0x30
 8021bfc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021c00:	930a      	str	r3, [sp, #40]	; 0x28
 8021c02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021c04:	2b00      	cmp	r3, #0
 8021c06:	dc03      	bgt.n	8021c10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021c08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021c0a:	2b00      	cmp	r3, #0
 8021c0c:	f340 83cb 	ble.w	80223a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021c10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c12:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c16:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021c1a:	1e48      	subs	r0, r1, #1
 8021c1c:	1e55      	subs	r5, r2, #1
 8021c1e:	9b08      	ldr	r3, [sp, #32]
 8021c20:	2b00      	cmp	r3, #0
 8021c22:	f340 81a3 	ble.w	8021f6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8021c26:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8021c28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021c2a:	1436      	asrs	r6, r6, #16
 8021c2c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021c30:	d406      	bmi.n	8021c40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021c32:	4286      	cmp	r6, r0
 8021c34:	da04      	bge.n	8021c40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021c36:	2b00      	cmp	r3, #0
 8021c38:	db02      	blt.n	8021c40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021c3a:	42ab      	cmp	r3, r5
 8021c3c:	f2c0 8197 	blt.w	8021f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8021c40:	3601      	adds	r6, #1
 8021c42:	f100 8184 	bmi.w	8021f4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021c46:	42b1      	cmp	r1, r6
 8021c48:	f2c0 8181 	blt.w	8021f4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021c4c:	3301      	adds	r3, #1
 8021c4e:	f100 817e 	bmi.w	8021f4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021c52:	429a      	cmp	r2, r3
 8021c54:	f2c0 817b 	blt.w	8021f4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021c58:	9b08      	ldr	r3, [sp, #32]
 8021c5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021c5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8021c5e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021c62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021c64:	2b00      	cmp	r3, #0
 8021c66:	f340 81a4 	ble.w	8021fb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8021c6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021c6c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8021c6e:	1418      	asrs	r0, r3, #16
 8021c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021c72:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021c76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021c78:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021c7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c7e:	142d      	asrs	r5, r5, #16
 8021c80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021c84:	f100 81f8 	bmi.w	8022078 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021c88:	f102 3eff 	add.w	lr, r2, #4294967295
 8021c8c:	4575      	cmp	r5, lr
 8021c8e:	f280 81f3 	bge.w	8022078 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021c92:	2800      	cmp	r0, #0
 8021c94:	f2c0 81f0 	blt.w	8022078 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021c98:	f103 3eff 	add.w	lr, r3, #4294967295
 8021c9c:	4570      	cmp	r0, lr
 8021c9e:	f280 81eb 	bge.w	8022078 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021ca4:	b212      	sxth	r2, r2
 8021ca6:	fb00 5002 	mla	r0, r0, r2, r5
 8021caa:	fa1f fe81 	uxth.w	lr, r1
 8021cae:	eb03 0a00 	add.w	sl, r3, r0
 8021cb2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021cb6:	f813 9000 	ldrb.w	r9, [r3, r0]
 8021cba:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021cbe:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021cc2:	b29b      	uxth	r3, r3
 8021cc4:	f1bc 0f00 	cmp.w	ip, #0
 8021cc8:	f000 81b9 	beq.w	802203e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8021ccc:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021cd0:	940d      	str	r4, [sp, #52]	; 0x34
 8021cd2:	eb0a 0b02 	add.w	fp, sl, r2
 8021cd6:	fa1f fa8c 	uxth.w	sl, ip
 8021cda:	fb0a fe0e 	mul.w	lr, sl, lr
 8021cde:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021ce2:	fa1f fa8a 	uxth.w	sl, sl
 8021ce6:	eba5 050e 	sub.w	r5, r5, lr
 8021cea:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021cee:	940e      	str	r4, [sp, #56]	; 0x38
 8021cf0:	eba3 030a 	sub.w	r3, r3, sl
 8021cf4:	b2ad      	uxth	r5, r5
 8021cf6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021cf8:	b29b      	uxth	r3, r3
 8021cfa:	fb08 f505 	mul.w	r5, r8, r5
 8021cfe:	fb09 5303 	mla	r3, r9, r3, r5
 8021d02:	fb0a 3304 	mla	r3, sl, r4, r3
 8021d06:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021d08:	fb0e 3304 	mla	r3, lr, r4, r3
 8021d0c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	f000 810f 	beq.w	8021f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021d16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021d18:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021d1c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021d20:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021d24:	f000 8190 	beq.w	8022048 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8021d28:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021d2c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021d30:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021d34:	fb09 f000 	mul.w	r0, r9, r0
 8021d38:	fb0a fe0e 	mul.w	lr, sl, lr
 8021d3c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021d40:	f100 0b20 	add.w	fp, r0, #32
 8021d44:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021d48:	44ce      	add	lr, r9
 8021d4a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021d4e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021d52:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021d56:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021d5a:	ea4e 0909 	orr.w	r9, lr, r9
 8021d5e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021d62:	8868      	ldrh	r0, [r5, #2]
 8021d64:	d019      	beq.n	8021d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021d66:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021d6a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021d6e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021d72:	fb08 f800 	mul.w	r8, r8, r0
 8021d76:	fb0a fe0e 	mul.w	lr, sl, lr
 8021d7a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021d7e:	f108 0b20 	add.w	fp, r8, #32
 8021d82:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021d86:	4486      	add	lr, r0
 8021d88:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021d8c:	0a00      	lsrs	r0, r0, #8
 8021d8e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021d92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021d96:	ea4e 0000 	orr.w	r0, lr, r0
 8021d9a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021d9e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021da2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021da6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021daa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021dae:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021db2:	ea4e 0909 	orr.w	r9, lr, r9
 8021db6:	ea4a 0000 	orr.w	r0, sl, r0
 8021dba:	f1bc 0f00 	cmp.w	ip, #0
 8021dbe:	f000 8145 	beq.w	802204c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8021dc2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8021dc6:	3a01      	subs	r2, #1
 8021dc8:	0052      	lsls	r2, r2, #1
 8021dca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021dcc:	3202      	adds	r2, #2
 8021dce:	2cff      	cmp	r4, #255	; 0xff
 8021dd0:	eb05 0e02 	add.w	lr, r5, r2
 8021dd4:	5aaa      	ldrh	r2, [r5, r2]
 8021dd6:	d018      	beq.n	8021e0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021dd8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8021ddc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021de0:	fb04 fa02 	mul.w	sl, r4, r2
 8021de4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021de8:	fb08 f805 	mul.w	r8, r8, r5
 8021dec:	f10a 0520 	add.w	r5, sl, #32
 8021df0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021df4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021df8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021dfc:	4442      	add	r2, r8
 8021dfe:	0a2d      	lsrs	r5, r5, #8
 8021e00:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021e04:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021e08:	432a      	orrs	r2, r5
 8021e0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021e0c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021e10:	2cff      	cmp	r4, #255	; 0xff
 8021e12:	d01a      	beq.n	8021e4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8021e14:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8021e18:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021e1c:	fb04 fa05 	mul.w	sl, r4, r5
 8021e20:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021e24:	fb08 f80e 	mul.w	r8, r8, lr
 8021e28:	f10a 0e20 	add.w	lr, sl, #32
 8021e2c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021e30:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021e34:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021e38:	4445      	add	r5, r8
 8021e3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e3e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021e42:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8021e46:	ea45 050e 	orr.w	r5, r5, lr
 8021e4a:	fb1c fe01 	smulbb	lr, ip, r1
 8021e4e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021e52:	f1cc 0810 	rsb	r8, ip, #16
 8021e56:	eba8 0801 	sub.w	r8, r8, r1
 8021e5a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021e5e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021e62:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021e66:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021e6a:	4341      	muls	r1, r0
 8021e6c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021e70:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021e74:	ea4a 0202 	orr.w	r2, sl, r2
 8021e78:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021e7c:	fb09 1108 	mla	r1, r9, r8, r1
 8021e80:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021e84:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021e88:	fb0c 1102 	mla	r1, ip, r2, r1
 8021e8c:	ea4b 0505 	orr.w	r5, fp, r5
 8021e90:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021e94:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021e98:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021e9c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021ea0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021ea4:	ea42 0e0e 	orr.w	lr, r2, lr
 8021ea8:	fa1f f28e 	uxth.w	r2, lr
 8021eac:	2bff      	cmp	r3, #255	; 0xff
 8021eae:	d103      	bne.n	8021eb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8021eb0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021eb2:	29ff      	cmp	r1, #255	; 0xff
 8021eb4:	f000 80de 	beq.w	8022074 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8021eb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021eba:	8838      	ldrh	r0, [r7, #0]
 8021ebc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021ebe:	434b      	muls	r3, r1
 8021ec0:	f103 0c01 	add.w	ip, r3, #1
 8021ec4:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8021ec8:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021ecc:	fa5f fc83 	uxtb.w	ip, r3
 8021ed0:	1203      	asrs	r3, r0, #8
 8021ed2:	1215      	asrs	r5, r2, #8
 8021ed4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021ed8:	fb13 f30c 	smulbb	r3, r3, ip
 8021edc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021ee0:	fb05 3501 	mla	r5, r5, r1, r3
 8021ee4:	10c3      	asrs	r3, r0, #3
 8021ee6:	10d1      	asrs	r1, r2, #3
 8021ee8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021eec:	fb13 f30c 	smulbb	r3, r3, ip
 8021ef0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021ef4:	fb01 3104 	mla	r1, r1, r4, r3
 8021ef8:	00c3      	lsls	r3, r0, #3
 8021efa:	00d2      	lsls	r2, r2, #3
 8021efc:	b2db      	uxtb	r3, r3
 8021efe:	b2d2      	uxtb	r2, r2
 8021f00:	fb13 f30c 	smulbb	r3, r3, ip
 8021f04:	b2ad      	uxth	r5, r5
 8021f06:	fb02 3304 	mla	r3, r2, r4, r3
 8021f0a:	b29a      	uxth	r2, r3
 8021f0c:	1c6b      	adds	r3, r5, #1
 8021f0e:	b289      	uxth	r1, r1
 8021f10:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021f14:	1c53      	adds	r3, r2, #1
 8021f16:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021f1a:	1c4a      	adds	r2, r1, #1
 8021f1c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021f20:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021f24:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021f28:	0949      	lsrs	r1, r1, #5
 8021f2a:	432b      	orrs	r3, r5
 8021f2c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021f30:	430b      	orrs	r3, r1
 8021f32:	803b      	strh	r3, [r7, #0]
 8021f34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021f36:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021f38:	4413      	add	r3, r2
 8021f3a:	9321      	str	r3, [sp, #132]	; 0x84
 8021f3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021f3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f40:	441a      	add	r2, r3
 8021f42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021f44:	9222      	str	r2, [sp, #136]	; 0x88
 8021f46:	3b01      	subs	r3, #1
 8021f48:	3702      	adds	r7, #2
 8021f4a:	9313      	str	r3, [sp, #76]	; 0x4c
 8021f4c:	e689      	b.n	8021c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021f50:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8021f52:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8021f54:	4433      	add	r3, r6
 8021f56:	9321      	str	r3, [sp, #132]	; 0x84
 8021f58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f5a:	441c      	add	r4, r3
 8021f5c:	9b08      	ldr	r3, [sp, #32]
 8021f5e:	9422      	str	r4, [sp, #136]	; 0x88
 8021f60:	3b01      	subs	r3, #1
 8021f62:	9308      	str	r3, [sp, #32]
 8021f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f66:	3302      	adds	r3, #2
 8021f68:	9309      	str	r3, [sp, #36]	; 0x24
 8021f6a:	e658      	b.n	8021c1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021f6c:	d028      	beq.n	8021fc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021f6e:	9b08      	ldr	r3, [sp, #32]
 8021f70:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021f72:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8021f74:	3b01      	subs	r3, #1
 8021f76:	fb00 5003 	mla	r0, r0, r3, r5
 8021f7a:	1400      	asrs	r0, r0, #16
 8021f7c:	f53f ae6c 	bmi.w	8021c58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021f80:	3901      	subs	r1, #1
 8021f82:	4288      	cmp	r0, r1
 8021f84:	f6bf ae68 	bge.w	8021c58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021f88:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021f8a:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021f8c:	fb01 0303 	mla	r3, r1, r3, r0
 8021f90:	141b      	asrs	r3, r3, #16
 8021f92:	f53f ae61 	bmi.w	8021c58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021f96:	3a01      	subs	r2, #1
 8021f98:	4293      	cmp	r3, r2
 8021f9a:	f6bf ae5d 	bge.w	8021c58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021f9e:	9b08      	ldr	r3, [sp, #32]
 8021fa0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021fa4:	9313      	str	r3, [sp, #76]	; 0x4c
 8021fa6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021faa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021fac:	2b00      	cmp	r3, #0
 8021fae:	f300 8082 	bgt.w	80220b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8021fb2:	9b08      	ldr	r3, [sp, #32]
 8021fb4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021fba:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8021fc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	f340 81ef 	ble.w	80223a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021fc8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021fcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021fd0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021fd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021fd6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021fda:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021fde:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021fe2:	eef0 6a62 	vmov.f32	s13, s5
 8021fe6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021fea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021fee:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021ff2:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8021ff6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021ffa:	eef0 6a43 	vmov.f32	s13, s6
 8021ffe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022002:	ee12 2a90 	vmov	r2, s5
 8022006:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802200a:	fb92 f3f3 	sdiv	r3, r2, r3
 802200e:	ee13 2a10 	vmov	r2, s6
 8022012:	9323      	str	r3, [sp, #140]	; 0x8c
 8022014:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022016:	fb92 f3f3 	sdiv	r3, r2, r3
 802201a:	9324      	str	r3, [sp, #144]	; 0x90
 802201c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802201e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022020:	3b01      	subs	r3, #1
 8022022:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022026:	9311      	str	r3, [sp, #68]	; 0x44
 8022028:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802202a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 802202e:	bf08      	it	eq
 8022030:	4613      	moveq	r3, r2
 8022032:	9308      	str	r3, [sp, #32]
 8022034:	eeb0 3a67 	vmov.f32	s6, s15
 8022038:	eef0 2a47 	vmov.f32	s5, s14
 802203c:	e5e1      	b.n	8021c02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802203e:	fb08 f505 	mul.w	r5, r8, r5
 8022042:	fb09 5303 	mla	r3, r9, r3, r5
 8022046:	e661      	b.n	8021d0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8022048:	4681      	mov	r9, r0
 802204a:	e688      	b.n	8021d5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802204c:	f1c1 0210 	rsb	r2, r1, #16
 8022050:	4341      	muls	r1, r0
 8022052:	fb09 1902 	mla	r9, r9, r2, r1
 8022056:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802205a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802205e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022062:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022066:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802206a:	ea42 0909 	orr.w	r9, r2, r9
 802206e:	fa1f f289 	uxth.w	r2, r9
 8022072:	e71b      	b.n	8021eac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8022074:	803a      	strh	r2, [r7, #0]
 8022076:	e75d      	b.n	8021f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022078:	f115 0e01 	adds.w	lr, r5, #1
 802207c:	f53f af5a 	bmi.w	8021f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022080:	4572      	cmp	r2, lr
 8022082:	f6ff af57 	blt.w	8021f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022086:	f110 0e01 	adds.w	lr, r0, #1
 802208a:	f53f af53 	bmi.w	8021f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802208e:	4573      	cmp	r3, lr
 8022090:	f6ff af50 	blt.w	8021f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022094:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022096:	9502      	str	r5, [sp, #8]
 8022098:	b21b      	sxth	r3, r3
 802209a:	b212      	sxth	r2, r2
 802209c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80220a0:	9301      	str	r3, [sp, #4]
 80220a2:	9200      	str	r2, [sp, #0]
 80220a4:	e9cd c405 	strd	ip, r4, [sp, #20]
 80220a8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80220ac:	4639      	mov	r1, r7
 80220ae:	9815      	ldr	r0, [sp, #84]	; 0x54
 80220b0:	f7ff fc04 	bl	80218bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80220b4:	e73e      	b.n	8021f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80220b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80220b8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80220bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80220be:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80220c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80220c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80220c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80220ca:	141f      	asrs	r7, r3, #16
 80220cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80220ce:	141b      	asrs	r3, r3, #16
 80220d0:	fb01 3707 	mla	r7, r1, r7, r3
 80220d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80220d6:	fa1f fc82 	uxth.w	ip, r2
 80220da:	eb03 0a07 	add.w	sl, r3, r7
 80220de:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80220e2:	f813 9007 	ldrb.w	r9, [r3, r7]
 80220e6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80220ea:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80220ee:	b29b      	uxth	r3, r3
 80220f0:	2d00      	cmp	r5, #0
 80220f2:	f000 813d 	beq.w	8022370 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80220f6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80220fa:	940f      	str	r4, [sp, #60]	; 0x3c
 80220fc:	eb0a 0b01 	add.w	fp, sl, r1
 8022100:	fa1f fa85 	uxth.w	sl, r5
 8022104:	fb0a fc0c 	mul.w	ip, sl, ip
 8022108:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802210c:	fa1f fa8a 	uxth.w	sl, sl
 8022110:	eba0 000c 	sub.w	r0, r0, ip
 8022114:	eba3 030a 	sub.w	r3, r3, sl
 8022118:	b280      	uxth	r0, r0
 802211a:	fb08 f000 	mul.w	r0, r8, r0
 802211e:	b29b      	uxth	r3, r3
 8022120:	fb09 0303 	mla	r3, r9, r3, r0
 8022124:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022126:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802212a:	9410      	str	r4, [sp, #64]	; 0x40
 802212c:	fb0a 3300 	mla	r3, sl, r0, r3
 8022130:	fb0c 3304 	mla	r3, ip, r4, r3
 8022134:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022138:	2b00      	cmp	r3, #0
 802213a:	f000 810b 	beq.w	8022354 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 802213e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022140:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022142:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022146:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802214a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802214e:	f000 8114 	beq.w	802237a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8022152:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022156:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802215a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802215e:	fb09 f707 	mul.w	r7, r9, r7
 8022162:	fb0a fc0c 	mul.w	ip, sl, ip
 8022166:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802216a:	f107 0b20 	add.w	fp, r7, #32
 802216e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022172:	44cc      	add	ip, r9
 8022174:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022178:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802217c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022180:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022184:	ea4c 0909 	orr.w	r9, ip, r9
 8022188:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802218c:	8847      	ldrh	r7, [r0, #2]
 802218e:	d019      	beq.n	80221c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8022190:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022194:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022198:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802219c:	fb08 f807 	mul.w	r8, r8, r7
 80221a0:	fb0a fc0c 	mul.w	ip, sl, ip
 80221a4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80221a8:	f108 0b20 	add.w	fp, r8, #32
 80221ac:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80221b0:	44bc      	add	ip, r7
 80221b2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80221b6:	0a3f      	lsrs	r7, r7, #8
 80221b8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80221bc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80221c0:	ea4c 0707 	orr.w	r7, ip, r7
 80221c4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80221c8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80221cc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80221d0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80221d4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80221d8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80221dc:	ea4c 0909 	orr.w	r9, ip, r9
 80221e0:	ea4a 0707 	orr.w	r7, sl, r7
 80221e4:	2d00      	cmp	r5, #0
 80221e6:	f000 80ca 	beq.w	802237e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 80221ea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80221ee:	3901      	subs	r1, #1
 80221f0:	0049      	lsls	r1, r1, #1
 80221f2:	3102      	adds	r1, #2
 80221f4:	eb00 0c01 	add.w	ip, r0, r1
 80221f8:	5a41      	ldrh	r1, [r0, r1]
 80221fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80221fc:	28ff      	cmp	r0, #255	; 0xff
 80221fe:	d019      	beq.n	8022234 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8022200:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022202:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8022206:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802220a:	fb04 fa01 	mul.w	sl, r4, r1
 802220e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022212:	fb08 f800 	mul.w	r8, r8, r0
 8022216:	f10a 0020 	add.w	r0, sl, #32
 802221a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802221e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022222:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022226:	4441      	add	r1, r8
 8022228:	0a00      	lsrs	r0, r0, #8
 802222a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802222e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022232:	4301      	orrs	r1, r0
 8022234:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022236:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802223a:	2cff      	cmp	r4, #255	; 0xff
 802223c:	d01a      	beq.n	8022274 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 802223e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022242:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022246:	fb04 fa00 	mul.w	sl, r4, r0
 802224a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802224e:	fb08 f80c 	mul.w	r8, r8, ip
 8022252:	f10a 0c20 	add.w	ip, sl, #32
 8022256:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802225a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802225e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022262:	4440      	add	r0, r8
 8022264:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022268:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802226c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022270:	ea40 000c 	orr.w	r0, r0, ip
 8022274:	fb15 fc02 	smulbb	ip, r5, r2
 8022278:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802227c:	f1c5 0810 	rsb	r8, r5, #16
 8022280:	eba8 0802 	sub.w	r8, r8, r2
 8022284:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022288:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802228c:	437a      	muls	r2, r7
 802228e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022292:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022296:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802229a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802229e:	fb09 2208 	mla	r2, r9, r8, r2
 80222a2:	ea4a 0101 	orr.w	r1, sl, r1
 80222a6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80222aa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80222ae:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80222b2:	fb05 2201 	mla	r2, r5, r1, r2
 80222b6:	ea4b 0000 	orr.w	r0, fp, r0
 80222ba:	fb0c 2200 	mla	r2, ip, r0, r2
 80222be:	0d57      	lsrs	r7, r2, #21
 80222c0:	0952      	lsrs	r2, r2, #5
 80222c2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80222c6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80222ca:	433a      	orrs	r2, r7
 80222cc:	2bff      	cmp	r3, #255	; 0xff
 80222ce:	b292      	uxth	r2, r2
 80222d0:	d102      	bne.n	80222d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80222d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80222d4:	29ff      	cmp	r1, #255	; 0xff
 80222d6:	d063      	beq.n	80223a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 80222d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80222da:	f8be 1000 	ldrh.w	r1, [lr]
 80222de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80222e0:	4343      	muls	r3, r0
 80222e2:	1c58      	adds	r0, r3, #1
 80222e4:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80222e8:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80222ec:	1208      	asrs	r0, r1, #8
 80222ee:	b2db      	uxtb	r3, r3
 80222f0:	1215      	asrs	r5, r2, #8
 80222f2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80222f6:	fb10 f003 	smulbb	r0, r0, r3
 80222fa:	10cf      	asrs	r7, r1, #3
 80222fc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022300:	00c9      	lsls	r1, r1, #3
 8022302:	fb05 0504 	mla	r5, r5, r4, r0
 8022306:	b2c9      	uxtb	r1, r1
 8022308:	10d0      	asrs	r0, r2, #3
 802230a:	00d2      	lsls	r2, r2, #3
 802230c:	fb11 f103 	smulbb	r1, r1, r3
 8022310:	b2d2      	uxtb	r2, r2
 8022312:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022316:	fb02 1204 	mla	r2, r2, r4, r1
 802231a:	fb17 f703 	smulbb	r7, r7, r3
 802231e:	b2ad      	uxth	r5, r5
 8022320:	b292      	uxth	r2, r2
 8022322:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022326:	fb00 7004 	mla	r0, r0, r4, r7
 802232a:	1c6b      	adds	r3, r5, #1
 802232c:	1c57      	adds	r7, r2, #1
 802232e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022332:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022336:	b280      	uxth	r0, r0
 8022338:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802233c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022340:	433d      	orrs	r5, r7
 8022342:	1c47      	adds	r7, r0, #1
 8022344:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022348:	097f      	lsrs	r7, r7, #5
 802234a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802234e:	433d      	orrs	r5, r7
 8022350:	f8ae 5000 	strh.w	r5, [lr]
 8022354:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022356:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022358:	4413      	add	r3, r2
 802235a:	9321      	str	r3, [sp, #132]	; 0x84
 802235c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802235e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022360:	441a      	add	r2, r3
 8022362:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022364:	9222      	str	r2, [sp, #136]	; 0x88
 8022366:	3b01      	subs	r3, #1
 8022368:	f10e 0e02 	add.w	lr, lr, #2
 802236c:	9313      	str	r3, [sp, #76]	; 0x4c
 802236e:	e61c      	b.n	8021faa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8022370:	fb08 f000 	mul.w	r0, r8, r0
 8022374:	fb09 0303 	mla	r3, r9, r3, r0
 8022378:	e6dc      	b.n	8022134 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 802237a:	46b9      	mov	r9, r7
 802237c:	e704      	b.n	8022188 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 802237e:	f1c2 0110 	rsb	r1, r2, #16
 8022382:	437a      	muls	r2, r7
 8022384:	fb09 2901 	mla	r9, r9, r1, r2
 8022388:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802238c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022390:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022394:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022398:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802239c:	4302      	orrs	r2, r0
 802239e:	e795      	b.n	80222cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80223a0:	f8ae 2000 	strh.w	r2, [lr]
 80223a4:	e7d6      	b.n	8022354 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80223a6:	b017      	add	sp, #92	; 0x5c
 80223a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080223ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80223ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223b0:	b085      	sub	sp, #20
 80223b2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80223b6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80223ba:	9103      	str	r1, [sp, #12]
 80223bc:	fb00 7406 	mla	r4, r0, r6, r7
 80223c0:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 80223c4:	2800      	cmp	r0, #0
 80223c6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80223ca:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80223ce:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80223d2:	9501      	str	r5, [sp, #4]
 80223d4:	eb02 0904 	add.w	r9, r2, r4
 80223d8:	f2c0 8141 	blt.w	802265e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80223dc:	4583      	cmp	fp, r0
 80223de:	f340 813e 	ble.w	802265e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80223e2:	2f00      	cmp	r7, #0
 80223e4:	f2c0 8137 	blt.w	8022656 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80223e8:	42be      	cmp	r6, r7
 80223ea:	f340 8134 	ble.w	8022656 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80223ee:	f812 c004 	ldrb.w	ip, [r2, r4]
 80223f2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80223f6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80223fa:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80223fe:	4355      	muls	r5, r2
 8022400:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022404:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8022408:	fb0c f203 	mul.w	r2, ip, r3
 802240c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8022410:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8022414:	441d      	add	r5, r3
 8022416:	f102 0320 	add.w	r3, r2, #32
 802241a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802241e:	0a1b      	lsrs	r3, r3, #8
 8022420:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8022424:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022428:	431c      	orrs	r4, r3
 802242a:	1c7b      	adds	r3, r7, #1
 802242c:	f100 811c 	bmi.w	8022668 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8022430:	429e      	cmp	r6, r3
 8022432:	f340 8119 	ble.w	8022668 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8022436:	2900      	cmp	r1, #0
 8022438:	f000 8119 	beq.w	802266e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 802243c:	9a01      	ldr	r2, [sp, #4]
 802243e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022442:	8855      	ldrh	r5, [r2, #2]
 8022444:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8022448:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 802244c:	fb08 f802 	mul.w	r8, r8, r2
 8022450:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022454:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8022458:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802245c:	435d      	muls	r5, r3
 802245e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022462:	44d0      	add	r8, sl
 8022464:	f105 0a20 	add.w	sl, r5, #32
 8022468:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 802246c:	0a2d      	lsrs	r5, r5, #8
 802246e:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8022472:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022476:	432a      	orrs	r2, r5
 8022478:	3001      	adds	r0, #1
 802247a:	f100 80fe 	bmi.w	802267a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802247e:	4583      	cmp	fp, r0
 8022480:	f340 80fb 	ble.w	802267a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8022484:	f1be 0f00 	cmp.w	lr, #0
 8022488:	f000 80fc 	beq.w	8022684 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 802248c:	2f00      	cmp	r7, #0
 802248e:	f2c0 80f1 	blt.w	8022674 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8022492:	42be      	cmp	r6, r7
 8022494:	f340 80ee 	ble.w	8022674 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8022498:	9801      	ldr	r0, [sp, #4]
 802249a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802249e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80224a2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80224a6:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80224aa:	fb0a fa00 	mul.w	sl, sl, r0
 80224ae:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80224b2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80224b6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80224ba:	fb05 f808 	mul.w	r8, r5, r8
 80224be:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80224c2:	4482      	add	sl, r0
 80224c4:	f108 0020 	add.w	r0, r8, #32
 80224c8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80224cc:	0a00      	lsrs	r0, r0, #8
 80224ce:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80224d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80224d6:	ea4b 0b00 	orr.w	fp, fp, r0
 80224da:	3701      	adds	r7, #1
 80224dc:	f100 80d7 	bmi.w	802268e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80224e0:	42be      	cmp	r6, r7
 80224e2:	f340 80d4 	ble.w	802268e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80224e6:	2900      	cmp	r1, #0
 80224e8:	f000 80d4 	beq.w	8022694 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 80224ec:	3601      	adds	r6, #1
 80224ee:	9801      	ldr	r0, [sp, #4]
 80224f0:	f819 7006 	ldrb.w	r7, [r9, r6]
 80224f4:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80224f8:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80224fc:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8022500:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022504:	fb09 f906 	mul.w	r9, r9, r6
 8022508:	fb07 f800 	mul.w	r8, r7, r0
 802250c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8022510:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8022514:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8022518:	44d1      	add	r9, sl
 802251a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802251e:	f108 0020 	add.w	r0, r8, #32
 8022522:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022526:	0a00      	lsrs	r0, r0, #8
 8022528:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802252c:	4330      	orrs	r0, r6
 802252e:	b28e      	uxth	r6, r1
 8022530:	fa1f f98e 	uxth.w	r9, lr
 8022534:	fb06 f809 	mul.w	r8, r6, r9
 8022538:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802253c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8022540:	0136      	lsls	r6, r6, #4
 8022542:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022546:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 802254a:	9601      	str	r6, [sp, #4]
 802254c:	ea4a 0404 	orr.w	r4, sl, r4
 8022550:	fa1f f689 	uxth.w	r6, r9
 8022554:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022558:	fb11 f90e 	smulbb	r9, r1, lr
 802255c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8022560:	9602      	str	r6, [sp, #8]
 8022562:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022566:	4626      	mov	r6, r4
 8022568:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802256c:	f1ce 0410 	rsb	r4, lr, #16
 8022570:	1a64      	subs	r4, r4, r1
 8022572:	ea4a 0202 	orr.w	r2, sl, r2
 8022576:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802257a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802257e:	434a      	muls	r2, r1
 8022580:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8022584:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022588:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802258c:	fb04 2406 	mla	r4, r4, r6, r2
 8022590:	ea4a 0000 	orr.w	r0, sl, r0
 8022594:	fb09 4200 	mla	r2, r9, r0, r4
 8022598:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802259c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80225a0:	9801      	ldr	r0, [sp, #4]
 80225a2:	9903      	ldr	r1, [sp, #12]
 80225a4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80225a8:	ea44 0b0b 	orr.w	fp, r4, fp
 80225ac:	9c02      	ldr	r4, [sp, #8]
 80225ae:	8809      	ldrh	r1, [r1, #0]
 80225b0:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80225b4:	1b00      	subs	r0, r0, r4
 80225b6:	9c01      	ldr	r4, [sp, #4]
 80225b8:	eba4 0608 	sub.w	r6, r4, r8
 80225bc:	b2b6      	uxth	r6, r6
 80225be:	b280      	uxth	r0, r0
 80225c0:	4373      	muls	r3, r6
 80225c2:	fb0c 3300 	mla	r3, ip, r0, r3
 80225c6:	9802      	ldr	r0, [sp, #8]
 80225c8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80225cc:	fb00 3505 	mla	r5, r0, r5, r3
 80225d0:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80225d4:	fb08 5707 	mla	r7, r8, r7, r5
 80225d8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80225dc:	120b      	asrs	r3, r1, #8
 80225de:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80225e2:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80225e6:	b2ff      	uxtb	r7, r7
 80225e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80225ec:	10c8      	asrs	r0, r1, #3
 80225ee:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80225f2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80225f6:	00c9      	lsls	r1, r1, #3
 80225f8:	437b      	muls	r3, r7
 80225fa:	ea42 0e0e 	orr.w	lr, r2, lr
 80225fe:	b2c9      	uxtb	r1, r1
 8022600:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022604:	fa1f f28e 	uxth.w	r2, lr
 8022608:	4378      	muls	r0, r7
 802260a:	434f      	muls	r7, r1
 802260c:	1c59      	adds	r1, r3, #1
 802260e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022612:	1213      	asrs	r3, r2, #8
 8022614:	f023 0307 	bic.w	r3, r3, #7
 8022618:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802261c:	1c41      	adds	r1, r0, #1
 802261e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022622:	10d1      	asrs	r1, r2, #3
 8022624:	f021 0103 	bic.w	r1, r1, #3
 8022628:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802262c:	021b      	lsls	r3, r3, #8
 802262e:	00c9      	lsls	r1, r1, #3
 8022630:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022634:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022638:	430b      	orrs	r3, r1
 802263a:	1c79      	adds	r1, r7, #1
 802263c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8022640:	00d2      	lsls	r2, r2, #3
 8022642:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8022646:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802264a:	431a      	orrs	r2, r3
 802264c:	9b03      	ldr	r3, [sp, #12]
 802264e:	801a      	strh	r2, [r3, #0]
 8022650:	b005      	add	sp, #20
 8022652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022656:	f04f 0c00 	mov.w	ip, #0
 802265a:	4664      	mov	r4, ip
 802265c:	e6e5      	b.n	802242a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 802265e:	2300      	movs	r3, #0
 8022660:	469c      	mov	ip, r3
 8022662:	461a      	mov	r2, r3
 8022664:	461c      	mov	r4, r3
 8022666:	e707      	b.n	8022478 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8022668:	2300      	movs	r3, #0
 802266a:	461a      	mov	r2, r3
 802266c:	e704      	b.n	8022478 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802266e:	460b      	mov	r3, r1
 8022670:	460a      	mov	r2, r1
 8022672:	e701      	b.n	8022478 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8022674:	2500      	movs	r5, #0
 8022676:	46ab      	mov	fp, r5
 8022678:	e72f      	b.n	80224da <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 802267a:	2700      	movs	r7, #0
 802267c:	463d      	mov	r5, r7
 802267e:	4638      	mov	r0, r7
 8022680:	46bb      	mov	fp, r7
 8022682:	e754      	b.n	802252e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8022684:	4677      	mov	r7, lr
 8022686:	4675      	mov	r5, lr
 8022688:	4670      	mov	r0, lr
 802268a:	46f3      	mov	fp, lr
 802268c:	e74f      	b.n	802252e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802268e:	2700      	movs	r7, #0
 8022690:	4638      	mov	r0, r7
 8022692:	e74c      	b.n	802252e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8022694:	460f      	mov	r7, r1
 8022696:	4608      	mov	r0, r1
 8022698:	e749      	b.n	802252e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0802269c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802269c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226a0:	b093      	sub	sp, #76	; 0x4c
 80226a2:	9210      	str	r2, [sp, #64]	; 0x40
 80226a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80226a6:	910e      	str	r1, [sp, #56]	; 0x38
 80226a8:	9306      	str	r3, [sp, #24]
 80226aa:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80226ae:	9011      	str	r0, [sp, #68]	; 0x44
 80226b0:	6850      	ldr	r0, [r2, #4]
 80226b2:	6812      	ldr	r2, [r2, #0]
 80226b4:	fb00 1303 	mla	r3, r0, r3, r1
 80226b8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80226bc:	9307      	str	r3, [sp, #28]
 80226be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226c0:	681b      	ldr	r3, [r3, #0]
 80226c2:	9308      	str	r3, [sp, #32]
 80226c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226c6:	685b      	ldr	r3, [r3, #4]
 80226c8:	9309      	str	r3, [sp, #36]	; 0x24
 80226ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80226cc:	2b00      	cmp	r3, #0
 80226ce:	dc03      	bgt.n	80226d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80226d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	f340 83b4 	ble.w	8022e40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80226d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80226de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80226e2:	1e48      	subs	r0, r1, #1
 80226e4:	1e55      	subs	r5, r2, #1
 80226e6:	9b06      	ldr	r3, [sp, #24]
 80226e8:	2b00      	cmp	r3, #0
 80226ea:	f340 8163 	ble.w	80229b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80226ee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80226f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80226f2:	1436      	asrs	r6, r6, #16
 80226f4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80226f8:	d406      	bmi.n	8022708 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80226fa:	4286      	cmp	r6, r0
 80226fc:	da04      	bge.n	8022708 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80226fe:	2b00      	cmp	r3, #0
 8022700:	db02      	blt.n	8022708 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022702:	42ab      	cmp	r3, r5
 8022704:	f2c0 8157 	blt.w	80229b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022708:	3601      	adds	r6, #1
 802270a:	f100 8144 	bmi.w	8022996 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802270e:	42b1      	cmp	r1, r6
 8022710:	f2c0 8141 	blt.w	8022996 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022714:	3301      	adds	r3, #1
 8022716:	f100 813e 	bmi.w	8022996 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802271a:	429a      	cmp	r2, r3
 802271c:	f2c0 813b 	blt.w	8022996 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022720:	9b06      	ldr	r3, [sp, #24]
 8022722:	9f07      	ldr	r7, [sp, #28]
 8022724:	930f      	str	r3, [sp, #60]	; 0x3c
 8022726:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802272a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802272c:	2b00      	cmp	r3, #0
 802272e:	f340 8164 	ble.w	80229fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8022732:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022734:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8022736:	1418      	asrs	r0, r3, #16
 8022738:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802273a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802273e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022740:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8022744:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022746:	142d      	asrs	r5, r5, #16
 8022748:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802274c:	f100 81ee 	bmi.w	8022b2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022750:	f102 3eff 	add.w	lr, r2, #4294967295
 8022754:	4575      	cmp	r5, lr
 8022756:	f280 81e9 	bge.w	8022b2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802275a:	2800      	cmp	r0, #0
 802275c:	f2c0 81e6 	blt.w	8022b2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022760:	f103 3eff 	add.w	lr, r3, #4294967295
 8022764:	4570      	cmp	r0, lr
 8022766:	f280 81e1 	bge.w	8022b2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802276a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802276c:	b212      	sxth	r2, r2
 802276e:	fb00 5002 	mla	r0, r0, r2, r5
 8022772:	fa1f fe81 	uxth.w	lr, r1
 8022776:	eb03 0a00 	add.w	sl, r3, r0
 802277a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802277e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8022782:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022786:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802278a:	b29b      	uxth	r3, r3
 802278c:	f1bc 0f00 	cmp.w	ip, #0
 8022790:	f000 8179 	beq.w	8022a86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022794:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8022798:	940a      	str	r4, [sp, #40]	; 0x28
 802279a:	eb0a 0b02 	add.w	fp, sl, r2
 802279e:	fa1f fa8c 	uxth.w	sl, ip
 80227a2:	fb0a fe0e 	mul.w	lr, sl, lr
 80227a6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80227aa:	fa1f fa8a 	uxth.w	sl, sl
 80227ae:	eba5 050e 	sub.w	r5, r5, lr
 80227b2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80227b6:	940b      	str	r4, [sp, #44]	; 0x2c
 80227b8:	eba3 030a 	sub.w	r3, r3, sl
 80227bc:	b2ad      	uxth	r5, r5
 80227be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80227c0:	b29b      	uxth	r3, r3
 80227c2:	fb08 f505 	mul.w	r5, r8, r5
 80227c6:	fb09 5303 	mla	r3, r9, r3, r5
 80227ca:	fb0a 3304 	mla	r3, sl, r4, r3
 80227ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80227d0:	fb0e 3304 	mla	r3, lr, r4, r3
 80227d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80227d8:	2b00      	cmp	r3, #0
 80227da:	f000 80cf 	beq.w	802297c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80227de:	9c08      	ldr	r4, [sp, #32]
 80227e0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80227e4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80227e8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80227ec:	f000 8150 	beq.w	8022a90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80227f0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80227f4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80227f8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80227fc:	fb09 f000 	mul.w	r0, r9, r0
 8022800:	fb0a fe0e 	mul.w	lr, sl, lr
 8022804:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8022808:	f100 0b20 	add.w	fp, r0, #32
 802280c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022810:	44ce      	add	lr, r9
 8022812:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8022816:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802281a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802281e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022822:	ea4e 0909 	orr.w	r9, lr, r9
 8022826:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802282a:	8868      	ldrh	r0, [r5, #2]
 802282c:	d019      	beq.n	8022862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802282e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022832:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022836:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802283a:	fb08 f800 	mul.w	r8, r8, r0
 802283e:	fb0a fe0e 	mul.w	lr, sl, lr
 8022842:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8022846:	f108 0b20 	add.w	fp, r8, #32
 802284a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802284e:	4486      	add	lr, r0
 8022850:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8022854:	0a00      	lsrs	r0, r0, #8
 8022856:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802285a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802285e:	ea4e 0000 	orr.w	r0, lr, r0
 8022862:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8022866:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802286a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802286e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022872:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022876:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802287a:	ea4e 0909 	orr.w	r9, lr, r9
 802287e:	ea4a 0000 	orr.w	r0, sl, r0
 8022882:	f1bc 0f00 	cmp.w	ip, #0
 8022886:	f000 8105 	beq.w	8022a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802288a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802288e:	3a01      	subs	r2, #1
 8022890:	0052      	lsls	r2, r2, #1
 8022892:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022894:	3202      	adds	r2, #2
 8022896:	2cff      	cmp	r4, #255	; 0xff
 8022898:	eb05 0e02 	add.w	lr, r5, r2
 802289c:	5aaa      	ldrh	r2, [r5, r2]
 802289e:	d018      	beq.n	80228d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80228a0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80228a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80228a8:	fb04 fa02 	mul.w	sl, r4, r2
 80228ac:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80228b0:	fb08 f805 	mul.w	r8, r8, r5
 80228b4:	f10a 0520 	add.w	r5, sl, #32
 80228b8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80228bc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80228c0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80228c4:	4442      	add	r2, r8
 80228c6:	0a2d      	lsrs	r5, r5, #8
 80228c8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80228cc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80228d0:	432a      	orrs	r2, r5
 80228d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80228d4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80228d8:	2cff      	cmp	r4, #255	; 0xff
 80228da:	d01a      	beq.n	8022912 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80228dc:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80228e0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80228e4:	fb04 fa05 	mul.w	sl, r4, r5
 80228e8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80228ec:	fb08 f80e 	mul.w	r8, r8, lr
 80228f0:	f10a 0e20 	add.w	lr, sl, #32
 80228f4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80228f8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80228fc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022900:	4445      	add	r5, r8
 8022902:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022906:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802290a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802290e:	ea45 050e 	orr.w	r5, r5, lr
 8022912:	fb1c fe01 	smulbb	lr, ip, r1
 8022916:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802291a:	f1cc 0810 	rsb	r8, ip, #16
 802291e:	eba8 0801 	sub.w	r8, r8, r1
 8022922:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022926:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802292a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802292e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8022932:	4341      	muls	r1, r0
 8022934:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022938:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802293c:	ea4a 0202 	orr.w	r2, sl, r2
 8022940:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8022944:	fb09 1108 	mla	r1, r9, r8, r1
 8022948:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802294c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022950:	fb0c 1102 	mla	r1, ip, r2, r1
 8022954:	ea4b 0505 	orr.w	r5, fp, r5
 8022958:	fb0e 1e05 	mla	lr, lr, r5, r1
 802295c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022960:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022964:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022968:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802296c:	ea42 0e0e 	orr.w	lr, r2, lr
 8022970:	fa1f f28e 	uxth.w	r2, lr
 8022974:	2bff      	cmp	r3, #255	; 0xff
 8022976:	f040 80a1 	bne.w	8022abc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802297a:	803a      	strh	r2, [r7, #0]
 802297c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802297e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022980:	4413      	add	r3, r2
 8022982:	931d      	str	r3, [sp, #116]	; 0x74
 8022984:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022986:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022988:	441a      	add	r2, r3
 802298a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802298c:	921e      	str	r2, [sp, #120]	; 0x78
 802298e:	3b01      	subs	r3, #1
 8022990:	3702      	adds	r7, #2
 8022992:	930f      	str	r3, [sp, #60]	; 0x3c
 8022994:	e6c9      	b.n	802272a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022996:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022998:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 802299a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802299c:	4433      	add	r3, r6
 802299e:	931d      	str	r3, [sp, #116]	; 0x74
 80229a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80229a2:	441c      	add	r4, r3
 80229a4:	9b06      	ldr	r3, [sp, #24]
 80229a6:	941e      	str	r4, [sp, #120]	; 0x78
 80229a8:	3b01      	subs	r3, #1
 80229aa:	9306      	str	r3, [sp, #24]
 80229ac:	9b07      	ldr	r3, [sp, #28]
 80229ae:	3302      	adds	r3, #2
 80229b0:	9307      	str	r3, [sp, #28]
 80229b2:	e698      	b.n	80226e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80229b4:	d028      	beq.n	8022a08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80229b6:	9b06      	ldr	r3, [sp, #24]
 80229b8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80229ba:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80229bc:	3b01      	subs	r3, #1
 80229be:	fb00 5003 	mla	r0, r0, r3, r5
 80229c2:	1400      	asrs	r0, r0, #16
 80229c4:	f53f aeac 	bmi.w	8022720 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80229c8:	3901      	subs	r1, #1
 80229ca:	4288      	cmp	r0, r1
 80229cc:	f6bf aea8 	bge.w	8022720 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80229d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80229d2:	981e      	ldr	r0, [sp, #120]	; 0x78
 80229d4:	fb01 0303 	mla	r3, r1, r3, r0
 80229d8:	141b      	asrs	r3, r3, #16
 80229da:	f53f aea1 	bmi.w	8022720 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80229de:	3a01      	subs	r2, #1
 80229e0:	4293      	cmp	r3, r2
 80229e2:	f6bf ae9d 	bge.w	8022720 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80229e6:	9b06      	ldr	r3, [sp, #24]
 80229e8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80229ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80229ee:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80229f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80229f4:	2b00      	cmp	r3, #0
 80229f6:	f300 80b6 	bgt.w	8022b66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 80229fa:	9b06      	ldr	r3, [sp, #24]
 80229fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022a00:	9b07      	ldr	r3, [sp, #28]
 8022a02:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022a06:	9307      	str	r3, [sp, #28]
 8022a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a0a:	2b00      	cmp	r3, #0
 8022a0c:	f340 8218 	ble.w	8022e40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8022a10:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022a14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022a18:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022a1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022a1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022a22:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022a26:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022a2a:	eef0 6a62 	vmov.f32	s13, s5
 8022a2e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022a32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a36:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022a3a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8022a3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022a42:	eef0 6a43 	vmov.f32	s13, s6
 8022a46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022a4a:	ee12 2a90 	vmov	r2, s5
 8022a4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022a52:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a56:	ee13 2a10 	vmov	r2, s6
 8022a5a:	931f      	str	r3, [sp, #124]	; 0x7c
 8022a5c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022a5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a62:	9320      	str	r3, [sp, #128]	; 0x80
 8022a64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022a68:	3b01      	subs	r3, #1
 8022a6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a6e:	930e      	str	r3, [sp, #56]	; 0x38
 8022a70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022a72:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8022a76:	bf08      	it	eq
 8022a78:	4613      	moveq	r3, r2
 8022a7a:	9306      	str	r3, [sp, #24]
 8022a7c:	eeb0 3a67 	vmov.f32	s6, s15
 8022a80:	eef0 2a47 	vmov.f32	s5, s14
 8022a84:	e621      	b.n	80226ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022a86:	fb08 f505 	mul.w	r5, r8, r5
 8022a8a:	fb09 5303 	mla	r3, r9, r3, r5
 8022a8e:	e6a1      	b.n	80227d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022a90:	4681      	mov	r9, r0
 8022a92:	e6c8      	b.n	8022826 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8022a94:	f1c1 0210 	rsb	r2, r1, #16
 8022a98:	4341      	muls	r1, r0
 8022a9a:	fb09 1902 	mla	r9, r9, r2, r1
 8022a9e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022aa2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8022aa6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022aaa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022aae:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022ab2:	ea42 0909 	orr.w	r9, r2, r9
 8022ab6:	fa1f f289 	uxth.w	r2, r9
 8022aba:	e75b      	b.n	8022974 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022abc:	f8b7 c000 	ldrh.w	ip, [r7]
 8022ac0:	43db      	mvns	r3, r3
 8022ac2:	ea4f 202c 	mov.w	r0, ip, asr #8
 8022ac6:	fa5f fe83 	uxtb.w	lr, r3
 8022aca:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022ace:	fb00 f00e 	mul.w	r0, r0, lr
 8022ad2:	1c41      	adds	r1, r0, #1
 8022ad4:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022ad8:	1211      	asrs	r1, r2, #8
 8022ada:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022ade:	f021 0107 	bic.w	r1, r1, #7
 8022ae2:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022ae6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022aea:	48d7      	ldr	r0, [pc, #860]	; (8022e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8022aec:	fb05 f50e 	mul.w	r5, r5, lr
 8022af0:	b2c9      	uxtb	r1, r1
 8022af2:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8022af6:	1c69      	adds	r1, r5, #1
 8022af8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022afc:	10d1      	asrs	r1, r2, #3
 8022afe:	f021 0103 	bic.w	r1, r1, #3
 8022b02:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8022b06:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022b0a:	b2db      	uxtb	r3, r3
 8022b0c:	00c9      	lsls	r1, r1, #3
 8022b0e:	fb03 f30e 	mul.w	r3, r3, lr
 8022b12:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022b16:	4301      	orrs	r1, r0
 8022b18:	1c58      	adds	r0, r3, #1
 8022b1a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022b1e:	00d2      	lsls	r2, r2, #3
 8022b20:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022b24:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022b28:	430a      	orrs	r2, r1
 8022b2a:	e726      	b.n	802297a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8022b2c:	f115 0e01 	adds.w	lr, r5, #1
 8022b30:	f53f af24 	bmi.w	802297c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022b34:	4572      	cmp	r2, lr
 8022b36:	f6ff af21 	blt.w	802297c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022b3a:	f110 0e01 	adds.w	lr, r0, #1
 8022b3e:	f53f af1d 	bmi.w	802297c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022b42:	4573      	cmp	r3, lr
 8022b44:	f6ff af1a 	blt.w	802297c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022b48:	b21b      	sxth	r3, r3
 8022b4a:	b212      	sxth	r2, r2
 8022b4c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8022b50:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8022b54:	9301      	str	r3, [sp, #4]
 8022b56:	9200      	str	r2, [sp, #0]
 8022b58:	4639      	mov	r1, r7
 8022b5a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8022b5e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022b60:	f7ff fc24 	bl	80223ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022b64:	e70a      	b.n	802297c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022b66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022b68:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022b6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022b6e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8022b72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022b74:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022b78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022b7a:	141f      	asrs	r7, r3, #16
 8022b7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022b7e:	141b      	asrs	r3, r3, #16
 8022b80:	fb01 3707 	mla	r7, r1, r7, r3
 8022b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b86:	fa1f fc82 	uxth.w	ip, r2
 8022b8a:	eb03 0a07 	add.w	sl, r3, r7
 8022b8e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022b92:	f813 9007 	ldrb.w	r9, [r3, r7]
 8022b96:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022b9a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022b9e:	b29b      	uxth	r3, r3
 8022ba0:	2d00      	cmp	r5, #0
 8022ba2:	f000 80fe 	beq.w	8022da2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8022ba6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8022baa:	940c      	str	r4, [sp, #48]	; 0x30
 8022bac:	eb0a 0b01 	add.w	fp, sl, r1
 8022bb0:	fa1f fa85 	uxth.w	sl, r5
 8022bb4:	fb0a fc0c 	mul.w	ip, sl, ip
 8022bb8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022bbc:	fa1f fa8a 	uxth.w	sl, sl
 8022bc0:	eba0 000c 	sub.w	r0, r0, ip
 8022bc4:	eba3 030a 	sub.w	r3, r3, sl
 8022bc8:	b280      	uxth	r0, r0
 8022bca:	fb08 f000 	mul.w	r0, r8, r0
 8022bce:	b29b      	uxth	r3, r3
 8022bd0:	fb09 0303 	mla	r3, r9, r3, r0
 8022bd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022bd6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022bda:	940d      	str	r4, [sp, #52]	; 0x34
 8022bdc:	fb0a 3300 	mla	r3, sl, r0, r3
 8022be0:	fb0c 3304 	mla	r3, ip, r4, r3
 8022be4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	f000 80cc 	beq.w	8022d86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022bee:	9808      	ldr	r0, [sp, #32]
 8022bf0:	9c08      	ldr	r4, [sp, #32]
 8022bf2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022bf6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8022bfa:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022bfe:	f000 80d5 	beq.w	8022dac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8022c02:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022c06:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022c0a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022c0e:	fb09 f707 	mul.w	r7, r9, r7
 8022c12:	fb0a fc0c 	mul.w	ip, sl, ip
 8022c16:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8022c1a:	f107 0b20 	add.w	fp, r7, #32
 8022c1e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022c22:	44cc      	add	ip, r9
 8022c24:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022c28:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022c2c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022c30:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022c34:	ea4c 0909 	orr.w	r9, ip, r9
 8022c38:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022c3c:	8847      	ldrh	r7, [r0, #2]
 8022c3e:	d019      	beq.n	8022c74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8022c40:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022c44:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022c48:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022c4c:	fb08 f807 	mul.w	r8, r8, r7
 8022c50:	fb0a fc0c 	mul.w	ip, sl, ip
 8022c54:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022c58:	f108 0b20 	add.w	fp, r8, #32
 8022c5c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022c60:	44bc      	add	ip, r7
 8022c62:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8022c66:	0a3f      	lsrs	r7, r7, #8
 8022c68:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022c6c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022c70:	ea4c 0707 	orr.w	r7, ip, r7
 8022c74:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8022c78:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022c7c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022c80:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022c84:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022c88:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022c8c:	ea4c 0909 	orr.w	r9, ip, r9
 8022c90:	ea4a 0707 	orr.w	r7, sl, r7
 8022c94:	2d00      	cmp	r5, #0
 8022c96:	f000 808b 	beq.w	8022db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8022c9a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022c9e:	3901      	subs	r1, #1
 8022ca0:	0049      	lsls	r1, r1, #1
 8022ca2:	3102      	adds	r1, #2
 8022ca4:	eb00 0c01 	add.w	ip, r0, r1
 8022ca8:	5a41      	ldrh	r1, [r0, r1]
 8022caa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022cac:	28ff      	cmp	r0, #255	; 0xff
 8022cae:	d019      	beq.n	8022ce4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8022cb0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022cb2:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8022cb6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022cba:	fb04 fa01 	mul.w	sl, r4, r1
 8022cbe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022cc2:	fb08 f800 	mul.w	r8, r8, r0
 8022cc6:	f10a 0020 	add.w	r0, sl, #32
 8022cca:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8022cce:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022cd2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022cd6:	4441      	add	r1, r8
 8022cd8:	0a00      	lsrs	r0, r0, #8
 8022cda:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022cde:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022ce2:	4301      	orrs	r1, r0
 8022ce4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022ce6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8022cea:	2cff      	cmp	r4, #255	; 0xff
 8022cec:	d01a      	beq.n	8022d24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8022cee:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022cf2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022cf6:	fb04 fa00 	mul.w	sl, r4, r0
 8022cfa:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022cfe:	fb08 f80c 	mul.w	r8, r8, ip
 8022d02:	f10a 0c20 	add.w	ip, sl, #32
 8022d06:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022d0a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022d0e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022d12:	4440      	add	r0, r8
 8022d14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d18:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022d1c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022d20:	ea40 000c 	orr.w	r0, r0, ip
 8022d24:	fb15 fc02 	smulbb	ip, r5, r2
 8022d28:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022d2c:	f1c5 0810 	rsb	r8, r5, #16
 8022d30:	eba8 0802 	sub.w	r8, r8, r2
 8022d34:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022d38:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022d3c:	437a      	muls	r2, r7
 8022d3e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022d42:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022d46:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022d4a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022d4e:	fb09 2208 	mla	r2, r9, r8, r2
 8022d52:	ea4a 0101 	orr.w	r1, sl, r1
 8022d56:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8022d5a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022d5e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022d62:	fb05 2201 	mla	r2, r5, r1, r2
 8022d66:	ea4b 0000 	orr.w	r0, fp, r0
 8022d6a:	fb0c 2200 	mla	r2, ip, r0, r2
 8022d6e:	0d57      	lsrs	r7, r2, #21
 8022d70:	0952      	lsrs	r2, r2, #5
 8022d72:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022d76:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022d7a:	433a      	orrs	r2, r7
 8022d7c:	2bff      	cmp	r3, #255	; 0xff
 8022d7e:	b292      	uxth	r2, r2
 8022d80:	d127      	bne.n	8022dd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8022d82:	f8ae 2000 	strh.w	r2, [lr]
 8022d86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022d88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022d8a:	4413      	add	r3, r2
 8022d8c:	931d      	str	r3, [sp, #116]	; 0x74
 8022d8e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022d90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022d92:	441a      	add	r2, r3
 8022d94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022d96:	921e      	str	r2, [sp, #120]	; 0x78
 8022d98:	3b01      	subs	r3, #1
 8022d9a:	f10e 0e02 	add.w	lr, lr, #2
 8022d9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022da0:	e627      	b.n	80229f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022da2:	fb08 f000 	mul.w	r0, r8, r0
 8022da6:	fb09 0303 	mla	r3, r9, r3, r0
 8022daa:	e71b      	b.n	8022be4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8022dac:	46b9      	mov	r9, r7
 8022dae:	e743      	b.n	8022c38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8022db0:	f1c2 0110 	rsb	r1, r2, #16
 8022db4:	437a      	muls	r2, r7
 8022db6:	fb09 2901 	mla	r9, r9, r1, r2
 8022dba:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022dbe:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022dc2:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022dc6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022dca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022dce:	4302      	orrs	r2, r0
 8022dd0:	e7d4      	b.n	8022d7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8022dd2:	f8be 7000 	ldrh.w	r7, [lr]
 8022dd6:	4c1c      	ldr	r4, [pc, #112]	; (8022e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8022dd8:	43db      	mvns	r3, r3
 8022dda:	1238      	asrs	r0, r7, #8
 8022ddc:	fa5f fc83 	uxtb.w	ip, r3
 8022de0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022de4:	10fd      	asrs	r5, r7, #3
 8022de6:	fb00 f00c 	mul.w	r0, r0, ip
 8022dea:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022dee:	fb05 f10c 	mul.w	r1, r5, ip
 8022df2:	1c45      	adds	r5, r0, #1
 8022df4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022df8:	1215      	asrs	r5, r2, #8
 8022dfa:	f025 0507 	bic.w	r5, r5, #7
 8022dfe:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022e02:	1c4d      	adds	r5, r1, #1
 8022e04:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8022e08:	10d1      	asrs	r1, r2, #3
 8022e0a:	f021 0103 	bic.w	r1, r1, #3
 8022e0e:	00fb      	lsls	r3, r7, #3
 8022e10:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022e14:	b2db      	uxtb	r3, r3
 8022e16:	b2c0      	uxtb	r0, r0
 8022e18:	00c9      	lsls	r1, r1, #3
 8022e1a:	fb03 f30c 	mul.w	r3, r3, ip
 8022e1e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022e22:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8022e26:	4308      	orrs	r0, r1
 8022e28:	1c59      	adds	r1, r3, #1
 8022e2a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022e2e:	00d2      	lsls	r2, r2, #3
 8022e30:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022e34:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8022e38:	4318      	orrs	r0, r3
 8022e3a:	f8ae 0000 	strh.w	r0, [lr]
 8022e3e:	e7a2      	b.n	8022d86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022e40:	b013      	add	sp, #76	; 0x4c
 8022e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e46:	bf00      	nop
 8022e48:	fffff800 	.word	0xfffff800

08022e4c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8022e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e50:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8022e54:	fb05 4c03 	mla	ip, r5, r3, r4
 8022e58:	2d00      	cmp	r5, #0
 8022e5a:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8022e5e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8022e62:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8022e66:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8022e6a:	8808      	ldrh	r0, [r1, #0]
 8022e6c:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8022e70:	f2c0 80a7 	blt.w	8022fc2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8022e74:	45aa      	cmp	sl, r5
 8022e76:	f340 80a4 	ble.w	8022fc2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8022e7a:	2c00      	cmp	r4, #0
 8022e7c:	f2c0 809f 	blt.w	8022fbe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8022e80:	42a3      	cmp	r3, r4
 8022e82:	f340 809c 	ble.w	8022fbe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8022e86:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8022e8a:	1c62      	adds	r2, r4, #1
 8022e8c:	f100 809c 	bmi.w	8022fc8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022e90:	4293      	cmp	r3, r2
 8022e92:	f340 8099 	ble.w	8022fc8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022e96:	f1b9 0f00 	cmp.w	r9, #0
 8022e9a:	f000 8095 	beq.w	8022fc8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022e9e:	f8be c002 	ldrh.w	ip, [lr, #2]
 8022ea2:	3501      	adds	r5, #1
 8022ea4:	f100 8094 	bmi.w	8022fd0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022ea8:	45aa      	cmp	sl, r5
 8022eaa:	f340 8091 	ble.w	8022fd0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022eae:	2f00      	cmp	r7, #0
 8022eb0:	f000 808e 	beq.w	8022fd0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022eb4:	2c00      	cmp	r4, #0
 8022eb6:	f2c0 8089 	blt.w	8022fcc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8022eba:	42a3      	cmp	r3, r4
 8022ebc:	f340 8086 	ble.w	8022fcc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8022ec0:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8022ec4:	3401      	adds	r4, #1
 8022ec6:	f100 8086 	bmi.w	8022fd6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022eca:	42a3      	cmp	r3, r4
 8022ecc:	f340 8083 	ble.w	8022fd6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022ed0:	f1b9 0f00 	cmp.w	r9, #0
 8022ed4:	d07f      	beq.n	8022fd6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022ed6:	3301      	adds	r3, #1
 8022ed8:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8022edc:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8022ee0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022ee4:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8022ee8:	fb19 fe07 	smulbb	lr, r9, r7
 8022eec:	ea44 0808 	orr.w	r8, r4, r8
 8022ef0:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8022ef4:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8022ef8:	f1c7 0210 	rsb	r2, r7, #16
 8022efc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022f00:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022f04:	ea44 0c0c 	orr.w	ip, r4, ip
 8022f08:	eba2 0209 	sub.w	r2, r2, r9
 8022f0c:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8022f10:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8022f14:	fb04 f40c 	mul.w	r4, r4, ip
 8022f18:	fb02 4808 	mla	r8, r2, r8, r4
 8022f1c:	041a      	lsls	r2, r3, #16
 8022f1e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022f22:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022f26:	4313      	orrs	r3, r2
 8022f28:	042a      	lsls	r2, r5, #16
 8022f2a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022f2e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022f32:	fb0e 8303 	mla	r3, lr, r3, r8
 8022f36:	432a      	orrs	r2, r5
 8022f38:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8022f3c:	fb07 3202 	mla	r2, r7, r2, r3
 8022f40:	0d53      	lsrs	r3, r2, #21
 8022f42:	0952      	lsrs	r2, r2, #5
 8022f44:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022f48:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022f4c:	431a      	orrs	r2, r3
 8022f4e:	b293      	uxth	r3, r2
 8022f50:	b2b4      	uxth	r4, r6
 8022f52:	1202      	asrs	r2, r0, #8
 8022f54:	43f6      	mvns	r6, r6
 8022f56:	b2f6      	uxtb	r6, r6
 8022f58:	121d      	asrs	r5, r3, #8
 8022f5a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022f5e:	fb12 f206 	smulbb	r2, r2, r6
 8022f62:	10c7      	asrs	r7, r0, #3
 8022f64:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022f68:	00c0      	lsls	r0, r0, #3
 8022f6a:	fb05 2504 	mla	r5, r5, r4, r2
 8022f6e:	b2c0      	uxtb	r0, r0
 8022f70:	10da      	asrs	r2, r3, #3
 8022f72:	00db      	lsls	r3, r3, #3
 8022f74:	b2db      	uxtb	r3, r3
 8022f76:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022f7a:	fb10 f006 	smulbb	r0, r0, r6
 8022f7e:	b2ad      	uxth	r5, r5
 8022f80:	fb03 0004 	mla	r0, r3, r4, r0
 8022f84:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022f88:	fb17 f706 	smulbb	r7, r7, r6
 8022f8c:	b280      	uxth	r0, r0
 8022f8e:	1c6b      	adds	r3, r5, #1
 8022f90:	fb02 7204 	mla	r2, r2, r4, r7
 8022f94:	b292      	uxth	r2, r2
 8022f96:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022f9a:	1c43      	adds	r3, r0, #1
 8022f9c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022fa0:	1c50      	adds	r0, r2, #1
 8022fa2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022fa6:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022faa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022fae:	0952      	lsrs	r2, r2, #5
 8022fb0:	432b      	orrs	r3, r5
 8022fb2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022fb6:	4313      	orrs	r3, r2
 8022fb8:	800b      	strh	r3, [r1, #0]
 8022fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022fbe:	4680      	mov	r8, r0
 8022fc0:	e763      	b.n	8022e8a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8022fc2:	4684      	mov	ip, r0
 8022fc4:	4680      	mov	r8, r0
 8022fc6:	e76c      	b.n	8022ea2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8022fc8:	4684      	mov	ip, r0
 8022fca:	e76a      	b.n	8022ea2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8022fcc:	4605      	mov	r5, r0
 8022fce:	e779      	b.n	8022ec4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8022fd0:	4603      	mov	r3, r0
 8022fd2:	4605      	mov	r5, r0
 8022fd4:	e782      	b.n	8022edc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8022fd6:	4603      	mov	r3, r0
 8022fd8:	e780      	b.n	8022edc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08022fda <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022fda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fde:	b093      	sub	sp, #76	; 0x4c
 8022fe0:	461d      	mov	r5, r3
 8022fe2:	9210      	str	r2, [sp, #64]	; 0x40
 8022fe4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022fe6:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8022fea:	920b      	str	r2, [sp, #44]	; 0x2c
 8022fec:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8022ff0:	910a      	str	r1, [sp, #40]	; 0x28
 8022ff2:	6859      	ldr	r1, [r3, #4]
 8022ff4:	681b      	ldr	r3, [r3, #0]
 8022ff6:	9011      	str	r0, [sp, #68]	; 0x44
 8022ff8:	fb01 2707 	mla	r7, r1, r7, r2
 8022ffc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8023000:	9307      	str	r3, [sp, #28]
 8023002:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023004:	681b      	ldr	r3, [r3, #0]
 8023006:	9309      	str	r3, [sp, #36]	; 0x24
 8023008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802300a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802300e:	43db      	mvns	r3, r3
 8023010:	b2db      	uxtb	r3, r3
 8023012:	9308      	str	r3, [sp, #32]
 8023014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023016:	2b00      	cmp	r3, #0
 8023018:	dc03      	bgt.n	8023022 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802301a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802301c:	2b00      	cmp	r3, #0
 802301e:	f340 8203 	ble.w	8023428 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023022:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023024:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023028:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802302c:	1e48      	subs	r0, r1, #1
 802302e:	f102 3cff 	add.w	ip, r2, #4294967295
 8023032:	2d00      	cmp	r5, #0
 8023034:	f340 80da 	ble.w	80231ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023038:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802303c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023040:	d406      	bmi.n	8023050 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023042:	4586      	cmp	lr, r0
 8023044:	da04      	bge.n	8023050 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023046:	2b00      	cmp	r3, #0
 8023048:	db02      	blt.n	8023050 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802304a:	4563      	cmp	r3, ip
 802304c:	f2c0 80cf 	blt.w	80231ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023050:	f11e 0e01 	adds.w	lr, lr, #1
 8023054:	f100 80c1 	bmi.w	80231da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023058:	4571      	cmp	r1, lr
 802305a:	f2c0 80be 	blt.w	80231da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802305e:	3301      	adds	r3, #1
 8023060:	f100 80bb 	bmi.w	80231da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023064:	429a      	cmp	r2, r3
 8023066:	f2c0 80b8 	blt.w	80231da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802306a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802306e:	46a9      	mov	r9, r5
 8023070:	f1b9 0f00 	cmp.w	r9, #0
 8023074:	f340 80d8 	ble.w	8023228 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8023078:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802307a:	1421      	asrs	r1, r4, #16
 802307c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8023080:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023084:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023088:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802308c:	f100 8111 	bmi.w	80232b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023090:	f10e 3aff 	add.w	sl, lr, #4294967295
 8023094:	4551      	cmp	r1, sl
 8023096:	f280 810c 	bge.w	80232b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802309a:	2800      	cmp	r0, #0
 802309c:	f2c0 8109 	blt.w	80232b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80230a0:	f103 3aff 	add.w	sl, r3, #4294967295
 80230a4:	4550      	cmp	r0, sl
 80230a6:	f280 8104 	bge.w	80232b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80230aa:	fa0f f38e 	sxth.w	r3, lr
 80230ae:	fb00 1103 	mla	r1, r0, r3, r1
 80230b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80230b4:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80230b8:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80230bc:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80230c0:	f1bc 0f00 	cmp.w	ip, #0
 80230c4:	d007      	beq.n	80230d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 80230c6:	005b      	lsls	r3, r3, #1
 80230c8:	eb0a 0003 	add.w	r0, sl, r3
 80230cc:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80230d0:	930c      	str	r3, [sp, #48]	; 0x30
 80230d2:	8843      	ldrh	r3, [r0, #2]
 80230d4:	930d      	str	r3, [sp, #52]	; 0x34
 80230d6:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80230da:	fb12 f30c 	smulbb	r3, r2, ip
 80230de:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80230e2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80230e6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80230ea:	10db      	asrs	r3, r3, #3
 80230ec:	ea40 000e 	orr.w	r0, r0, lr
 80230f0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80230f4:	f1cc 0e10 	rsb	lr, ip, #16
 80230f8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80230fc:	ebae 0e02 	sub.w	lr, lr, r2
 8023100:	ea4a 0101 	orr.w	r1, sl, r1
 8023104:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023108:	4351      	muls	r1, r2
 802310a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802310c:	9f08      	ldr	r7, [sp, #32]
 802310e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8023112:	fb0e 1e00 	mla	lr, lr, r0, r1
 8023116:	0410      	lsls	r0, r2, #16
 8023118:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802311c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023120:	4310      	orrs	r0, r2
 8023122:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023124:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023126:	0412      	lsls	r2, r2, #16
 8023128:	fb03 e000 	mla	r0, r3, r0, lr
 802312c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023130:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8023134:	ea42 020e 	orr.w	r2, r2, lr
 8023138:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802313c:	fb03 0302 	mla	r3, r3, r2, r0
 8023140:	0d5a      	lsrs	r2, r3, #21
 8023142:	095b      	lsrs	r3, r3, #5
 8023144:	f8b8 0000 	ldrh.w	r0, [r8]
 8023148:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802314c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023150:	4313      	orrs	r3, r2
 8023152:	b29b      	uxth	r3, r3
 8023154:	1201      	asrs	r1, r0, #8
 8023156:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802315a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802315e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023162:	fb11 f107 	smulbb	r1, r1, r7
 8023166:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802316a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802316e:	00c0      	lsls	r0, r0, #3
 8023170:	fb0c 1c02 	mla	ip, ip, r2, r1
 8023174:	b2c0      	uxtb	r0, r0
 8023176:	10d9      	asrs	r1, r3, #3
 8023178:	00db      	lsls	r3, r3, #3
 802317a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802317e:	b2db      	uxtb	r3, r3
 8023180:	fb10 f007 	smulbb	r0, r0, r7
 8023184:	fa1f fc8c 	uxth.w	ip, ip
 8023188:	fb03 0302 	mla	r3, r3, r2, r0
 802318c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023190:	fb1e fe07 	smulbb	lr, lr, r7
 8023194:	fb01 e102 	mla	r1, r1, r2, lr
 8023198:	b29a      	uxth	r2, r3
 802319a:	f10c 0301 	add.w	r3, ip, #1
 802319e:	b289      	uxth	r1, r1
 80231a0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80231a4:	1c53      	adds	r3, r2, #1
 80231a6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80231aa:	1c4a      	adds	r2, r1, #1
 80231ac:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80231b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80231b4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80231b8:	0949      	lsrs	r1, r1, #5
 80231ba:	ea43 030c 	orr.w	r3, r3, ip
 80231be:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80231c2:	430b      	orrs	r3, r1
 80231c4:	f8a8 3000 	strh.w	r3, [r8]
 80231c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80231ca:	441c      	add	r4, r3
 80231cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80231ce:	f108 0802 	add.w	r8, r8, #2
 80231d2:	441e      	add	r6, r3
 80231d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80231d8:	e74a      	b.n	8023070 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80231da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80231dc:	441c      	add	r4, r3
 80231de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80231e0:	441e      	add	r6, r3
 80231e2:	9b07      	ldr	r3, [sp, #28]
 80231e4:	3302      	adds	r3, #2
 80231e6:	3d01      	subs	r5, #1
 80231e8:	9307      	str	r3, [sp, #28]
 80231ea:	e722      	b.n	8023032 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80231ec:	d022      	beq.n	8023234 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80231ee:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80231f0:	1e6b      	subs	r3, r5, #1
 80231f2:	fb00 4003 	mla	r0, r0, r3, r4
 80231f6:	1400      	asrs	r0, r0, #16
 80231f8:	f53f af37 	bmi.w	802306a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80231fc:	3901      	subs	r1, #1
 80231fe:	4288      	cmp	r0, r1
 8023200:	f6bf af33 	bge.w	802306a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023204:	9920      	ldr	r1, [sp, #128]	; 0x80
 8023206:	fb01 6303 	mla	r3, r1, r3, r6
 802320a:	141b      	asrs	r3, r3, #16
 802320c:	f53f af2d 	bmi.w	802306a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023210:	3a01      	subs	r2, #1
 8023212:	4293      	cmp	r3, r2
 8023214:	f6bf af29 	bge.w	802306a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023218:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802321c:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8023220:	46a8      	mov	r8, r5
 8023222:	f1b8 0f00 	cmp.w	r8, #0
 8023226:	dc5e      	bgt.n	80232e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023228:	9b07      	ldr	r3, [sp, #28]
 802322a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802322e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023232:	9307      	str	r3, [sp, #28]
 8023234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023236:	2b00      	cmp	r3, #0
 8023238:	f340 80f6 	ble.w	8023428 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802323c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023244:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023248:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802324a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802324e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023252:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023256:	eef0 6a62 	vmov.f32	s13, s5
 802325a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802325e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023262:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023266:	ee16 4a90 	vmov	r4, s13
 802326a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802326e:	eef0 6a43 	vmov.f32	s13, s6
 8023272:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023276:	ee12 2a90 	vmov	r2, s5
 802327a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802327e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023282:	ee13 2a10 	vmov	r2, s6
 8023286:	931f      	str	r3, [sp, #124]	; 0x7c
 8023288:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802328a:	fb92 f3f3 	sdiv	r3, r2, r3
 802328e:	9320      	str	r3, [sp, #128]	; 0x80
 8023290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023292:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023294:	3b01      	subs	r3, #1
 8023296:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802329a:	930a      	str	r3, [sp, #40]	; 0x28
 802329c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802329e:	ee16 6a90 	vmov	r6, s13
 80232a2:	bf14      	ite	ne
 80232a4:	461d      	movne	r5, r3
 80232a6:	4615      	moveq	r5, r2
 80232a8:	eeb0 3a67 	vmov.f32	s6, s15
 80232ac:	eef0 2a47 	vmov.f32	s5, s14
 80232b0:	e6b0      	b.n	8023014 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80232b2:	f111 0a01 	adds.w	sl, r1, #1
 80232b6:	d487      	bmi.n	80231c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80232b8:	45d6      	cmp	lr, sl
 80232ba:	db85      	blt.n	80231c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80232bc:	f110 0a01 	adds.w	sl, r0, #1
 80232c0:	d482      	bmi.n	80231c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80232c2:	4553      	cmp	r3, sl
 80232c4:	db80      	blt.n	80231c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80232c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80232c8:	9101      	str	r1, [sp, #4]
 80232ca:	b21b      	sxth	r3, r3
 80232cc:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80232d0:	9300      	str	r3, [sp, #0]
 80232d2:	e9cd c704 	strd	ip, r7, [sp, #16]
 80232d6:	fa0f f38e 	sxth.w	r3, lr
 80232da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80232dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80232de:	4641      	mov	r1, r8
 80232e0:	f7ff fdb4 	bl	8022e4c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80232e4:	e770      	b.n	80231c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80232e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80232e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80232ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80232ee:	1430      	asrs	r0, r6, #16
 80232f0:	1423      	asrs	r3, r4, #16
 80232f2:	fb01 3000 	mla	r0, r1, r0, r3
 80232f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232f8:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80232fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8023300:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8023304:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023308:	8858      	ldrh	r0, [r3, #2]
 802330a:	f1be 0f00 	cmp.w	lr, #0
 802330e:	d00b      	beq.n	8023328 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8023310:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8023314:	3901      	subs	r1, #1
 8023316:	0049      	lsls	r1, r1, #1
 8023318:	3102      	adds	r1, #2
 802331a:	eb03 0b01 	add.w	fp, r3, r1
 802331e:	5a5b      	ldrh	r3, [r3, r1]
 8023320:	930e      	str	r3, [sp, #56]	; 0x38
 8023322:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8023326:	930f      	str	r3, [sp, #60]	; 0x3c
 8023328:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802332c:	fb12 f30e 	smulbb	r3, r2, lr
 8023330:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023334:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8023338:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802333c:	10db      	asrs	r3, r3, #3
 802333e:	ea41 010c 	orr.w	r1, r1, ip
 8023342:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023346:	f1ce 0c10 	rsb	ip, lr, #16
 802334a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802334e:	ebac 0c02 	sub.w	ip, ip, r2
 8023352:	ea4b 0000 	orr.w	r0, fp, r0
 8023356:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802335a:	4350      	muls	r0, r2
 802335c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802335e:	9f08      	ldr	r7, [sp, #32]
 8023360:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8023364:	fb0c 0c01 	mla	ip, ip, r1, r0
 8023368:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802336c:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8023370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023372:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023374:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023378:	0412      	lsls	r2, r2, #16
 802337a:	ea4b 0101 	orr.w	r1, fp, r1
 802337e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023382:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023386:	fb03 c101 	mla	r1, r3, r1, ip
 802338a:	4302      	orrs	r2, r0
 802338c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8023390:	fb03 1202 	mla	r2, r3, r2, r1
 8023394:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8023398:	0952      	lsrs	r2, r2, #5
 802339a:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 802339e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80233a2:	f8b9 2000 	ldrh.w	r2, [r9]
 80233a6:	ea4b 0303 	orr.w	r3, fp, r3
 80233aa:	b29b      	uxth	r3, r3
 80233ac:	1211      	asrs	r1, r2, #8
 80233ae:	1218      	asrs	r0, r3, #8
 80233b0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80233b4:	fb11 f107 	smulbb	r1, r1, r7
 80233b8:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80233bc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80233c0:	00d2      	lsls	r2, r2, #3
 80233c2:	fb00 100a 	mla	r0, r0, sl, r1
 80233c6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80233ca:	10d9      	asrs	r1, r3, #3
 80233cc:	b2d2      	uxtb	r2, r2
 80233ce:	00db      	lsls	r3, r3, #3
 80233d0:	fb1c fc07 	smulbb	ip, ip, r7
 80233d4:	fb12 f207 	smulbb	r2, r2, r7
 80233d8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80233dc:	b2db      	uxtb	r3, r3
 80233de:	b280      	uxth	r0, r0
 80233e0:	fb01 c10a 	mla	r1, r1, sl, ip
 80233e4:	fb03 230a 	mla	r3, r3, sl, r2
 80233e8:	b29b      	uxth	r3, r3
 80233ea:	b289      	uxth	r1, r1
 80233ec:	1c42      	adds	r2, r0, #1
 80233ee:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80233f2:	f101 0c01 	add.w	ip, r1, #1
 80233f6:	1c5a      	adds	r2, r3, #1
 80233f8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80233fc:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023400:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023402:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023406:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802340a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802340e:	4310      	orrs	r0, r2
 8023410:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023414:	441c      	add	r4, r3
 8023416:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023418:	ea40 000c 	orr.w	r0, r0, ip
 802341c:	f829 0b02 	strh.w	r0, [r9], #2
 8023420:	441e      	add	r6, r3
 8023422:	f108 38ff 	add.w	r8, r8, #4294967295
 8023426:	e6fc      	b.n	8023222 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8023428:	b013      	add	sp, #76	; 0x4c
 802342a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802342e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802342e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023432:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8023436:	fb0e 4703 	mla	r7, lr, r3, r4
 802343a:	f1be 0f00 	cmp.w	lr, #0
 802343e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8023442:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8023446:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 802344a:	8808      	ldrh	r0, [r1, #0]
 802344c:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8023450:	db60      	blt.n	8023514 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8023452:	45f1      	cmp	r9, lr
 8023454:	dd5e      	ble.n	8023514 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8023456:	2c00      	cmp	r4, #0
 8023458:	db5a      	blt.n	8023510 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802345a:	42a3      	cmp	r3, r4
 802345c:	dd58      	ble.n	8023510 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802345e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8023462:	1c62      	adds	r2, r4, #1
 8023464:	d459      	bmi.n	802351a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8023466:	4293      	cmp	r3, r2
 8023468:	dd57      	ble.n	802351a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802346a:	2d00      	cmp	r5, #0
 802346c:	d055      	beq.n	802351a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802346e:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8023472:	f11e 0e01 	adds.w	lr, lr, #1
 8023476:	d454      	bmi.n	8023522 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8023478:	45f1      	cmp	r9, lr
 802347a:	dd52      	ble.n	8023522 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802347c:	2e00      	cmp	r6, #0
 802347e:	d050      	beq.n	8023522 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8023480:	2c00      	cmp	r4, #0
 8023482:	db4c      	blt.n	802351e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8023484:	42a3      	cmp	r3, r4
 8023486:	dd4a      	ble.n	802351e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8023488:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 802348c:	3401      	adds	r4, #1
 802348e:	d405      	bmi.n	802349c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023490:	42a3      	cmp	r3, r4
 8023492:	dd03      	ble.n	802349c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023494:	b115      	cbz	r5, 802349c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023496:	3301      	adds	r3, #1
 8023498:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 802349c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80234a0:	fb15 f406 	smulbb	r4, r5, r6
 80234a4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80234a8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80234ac:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80234b0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80234b4:	ea43 0c0c 	orr.w	ip, r3, ip
 80234b8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80234bc:	f1c6 0310 	rsb	r3, r6, #16
 80234c0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80234c4:	1b5b      	subs	r3, r3, r5
 80234c6:	ea4e 0707 	orr.w	r7, lr, r7
 80234ca:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80234ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80234d2:	437d      	muls	r5, r7
 80234d4:	fb03 5c0c 	mla	ip, r3, ip, r5
 80234d8:	0403      	lsls	r3, r0, #16
 80234da:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80234de:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80234e2:	4318      	orrs	r0, r3
 80234e4:	0413      	lsls	r3, r2, #16
 80234e6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80234ea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80234ee:	4313      	orrs	r3, r2
 80234f0:	fb04 c000 	mla	r0, r4, r0, ip
 80234f4:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80234f8:	fb06 0003 	mla	r0, r6, r3, r0
 80234fc:	0d43      	lsrs	r3, r0, #21
 80234fe:	0940      	lsrs	r0, r0, #5
 8023500:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023504:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023508:	4318      	orrs	r0, r3
 802350a:	8008      	strh	r0, [r1, #0]
 802350c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023510:	4684      	mov	ip, r0
 8023512:	e7a6      	b.n	8023462 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8023514:	4607      	mov	r7, r0
 8023516:	4684      	mov	ip, r0
 8023518:	e7ab      	b.n	8023472 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802351a:	4607      	mov	r7, r0
 802351c:	e7a9      	b.n	8023472 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802351e:	4602      	mov	r2, r0
 8023520:	e7b4      	b.n	802348c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8023522:	4602      	mov	r2, r0
 8023524:	e7ba      	b.n	802349c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08023526 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802352a:	b08f      	sub	sp, #60	; 0x3c
 802352c:	461d      	mov	r5, r3
 802352e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023530:	920c      	str	r2, [sp, #48]	; 0x30
 8023532:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8023536:	9107      	str	r1, [sp, #28]
 8023538:	6859      	ldr	r1, [r3, #4]
 802353a:	681b      	ldr	r3, [r3, #0]
 802353c:	900d      	str	r0, [sp, #52]	; 0x34
 802353e:	fb01 2707 	mla	r7, r1, r7, r2
 8023542:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8023546:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023548:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 802354c:	f8d3 8000 	ldr.w	r8, [r3]
 8023550:	9b07      	ldr	r3, [sp, #28]
 8023552:	2b00      	cmp	r3, #0
 8023554:	dc03      	bgt.n	802355e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023558:	2b00      	cmp	r3, #0
 802355a:	f340 8181 	ble.w	8023860 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802355e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023560:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023564:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023568:	1e48      	subs	r0, r1, #1
 802356a:	f102 3cff 	add.w	ip, r2, #4294967295
 802356e:	2d00      	cmp	r5, #0
 8023570:	f340 809b 	ble.w	80236aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8023574:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023578:	ea4f 4326 	mov.w	r3, r6, asr #16
 802357c:	d406      	bmi.n	802358c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802357e:	4586      	cmp	lr, r0
 8023580:	da04      	bge.n	802358c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023582:	2b00      	cmp	r3, #0
 8023584:	db02      	blt.n	802358c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023586:	4563      	cmp	r3, ip
 8023588:	f2c0 8090 	blt.w	80236ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802358c:	f11e 0e01 	adds.w	lr, lr, #1
 8023590:	f100 8084 	bmi.w	802369c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8023594:	4571      	cmp	r1, lr
 8023596:	f2c0 8081 	blt.w	802369c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802359a:	3301      	adds	r3, #1
 802359c:	d47e      	bmi.n	802369c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802359e:	429a      	cmp	r2, r3
 80235a0:	db7c      	blt.n	802369c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80235a2:	46aa      	mov	sl, r5
 80235a4:	46b9      	mov	r9, r7
 80235a6:	f1ba 0f00 	cmp.w	sl, #0
 80235aa:	f340 8099 	ble.w	80236e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80235ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80235b0:	1421      	asrs	r1, r4, #16
 80235b2:	ea4f 4026 	mov.w	r0, r6, asr #16
 80235b6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80235ba:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80235be:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80235c2:	f100 80d0 	bmi.w	8023766 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80235c6:	f10e 3bff 	add.w	fp, lr, #4294967295
 80235ca:	4559      	cmp	r1, fp
 80235cc:	f280 80cb 	bge.w	8023766 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80235d0:	2800      	cmp	r0, #0
 80235d2:	f2c0 80c8 	blt.w	8023766 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80235d6:	f103 3bff 	add.w	fp, r3, #4294967295
 80235da:	4558      	cmp	r0, fp
 80235dc:	f280 80c3 	bge.w	8023766 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80235e0:	fa0f fe8e 	sxth.w	lr, lr
 80235e4:	fb00 110e 	mla	r1, r0, lr, r1
 80235e8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80235ec:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80235f0:	8841      	ldrh	r1, [r0, #2]
 80235f2:	f1bc 0f00 	cmp.w	ip, #0
 80235f6:	d00b      	beq.n	8023610 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80235f8:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80235fc:	3b01      	subs	r3, #1
 80235fe:	005b      	lsls	r3, r3, #1
 8023600:	3302      	adds	r3, #2
 8023602:	eb00 0e03 	add.w	lr, r0, r3
 8023606:	5ac3      	ldrh	r3, [r0, r3]
 8023608:	9308      	str	r3, [sp, #32]
 802360a:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802360e:	9309      	str	r3, [sp, #36]	; 0x24
 8023610:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8023614:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023618:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802361c:	ea40 000b 	orr.w	r0, r0, fp
 8023620:	fb12 f30c 	smulbb	r3, r2, ip
 8023624:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023628:	10db      	asrs	r3, r3, #3
 802362a:	f1cc 0e10 	rsb	lr, ip, #16
 802362e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023632:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023636:	ebae 0e02 	sub.w	lr, lr, r2
 802363a:	ea4b 0101 	orr.w	r1, fp, r1
 802363e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023642:	4351      	muls	r1, r2
 8023644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023646:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802364a:	fb0e 1e00 	mla	lr, lr, r0, r1
 802364e:	0410      	lsls	r0, r2, #16
 8023650:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023654:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023658:	4310      	orrs	r0, r2
 802365a:	9a08      	ldr	r2, [sp, #32]
 802365c:	9908      	ldr	r1, [sp, #32]
 802365e:	0412      	lsls	r2, r2, #16
 8023660:	fb03 e000 	mla	r0, r3, r0, lr
 8023664:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023668:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802366c:	ea42 020e 	orr.w	r2, r2, lr
 8023670:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8023674:	fb03 0302 	mla	r3, r3, r2, r0
 8023678:	0d5a      	lsrs	r2, r3, #21
 802367a:	095b      	lsrs	r3, r3, #5
 802367c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023680:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023684:	4313      	orrs	r3, r2
 8023686:	f8a9 3000 	strh.w	r3, [r9]
 802368a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802368c:	441c      	add	r4, r3
 802368e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023690:	f109 0902 	add.w	r9, r9, #2
 8023694:	441e      	add	r6, r3
 8023696:	f10a 3aff 	add.w	sl, sl, #4294967295
 802369a:	e784      	b.n	80235a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802369c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802369e:	441c      	add	r4, r3
 80236a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80236a2:	3d01      	subs	r5, #1
 80236a4:	441e      	add	r6, r3
 80236a6:	3702      	adds	r7, #2
 80236a8:	e761      	b.n	802356e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80236aa:	d01d      	beq.n	80236e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80236ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80236ae:	1e6b      	subs	r3, r5, #1
 80236b0:	fb00 4003 	mla	r0, r0, r3, r4
 80236b4:	1400      	asrs	r0, r0, #16
 80236b6:	f53f af74 	bmi.w	80235a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80236ba:	3901      	subs	r1, #1
 80236bc:	4288      	cmp	r0, r1
 80236be:	f6bf af70 	bge.w	80235a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80236c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80236c4:	fb01 6303 	mla	r3, r1, r3, r6
 80236c8:	141b      	asrs	r3, r3, #16
 80236ca:	f53f af6a 	bmi.w	80235a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80236ce:	3a01      	subs	r2, #1
 80236d0:	4293      	cmp	r3, r2
 80236d2:	f6bf af66 	bge.w	80235a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80236d6:	46a9      	mov	r9, r5
 80236d8:	46ba      	mov	sl, r7
 80236da:	f1b9 0f00 	cmp.w	r9, #0
 80236de:	dc5a      	bgt.n	8023796 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 80236e0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80236e4:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80236e8:	9b07      	ldr	r3, [sp, #28]
 80236ea:	2b00      	cmp	r3, #0
 80236ec:	f340 80b8 	ble.w	8023860 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80236f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80236f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80236f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80236fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80236fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023702:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023706:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802370a:	eef0 6a62 	vmov.f32	s13, s5
 802370e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023712:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023716:	ee77 2a62 	vsub.f32	s5, s14, s5
 802371a:	ee16 4a90 	vmov	r4, s13
 802371e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023722:	eef0 6a43 	vmov.f32	s13, s6
 8023726:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802372a:	ee12 2a90 	vmov	r2, s5
 802372e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023732:	fb92 f3f3 	sdiv	r3, r2, r3
 8023736:	ee13 2a10 	vmov	r2, s6
 802373a:	931b      	str	r3, [sp, #108]	; 0x6c
 802373c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802373e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023742:	931c      	str	r3, [sp, #112]	; 0x70
 8023744:	9b07      	ldr	r3, [sp, #28]
 8023746:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023748:	3b01      	subs	r3, #1
 802374a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802374e:	9307      	str	r3, [sp, #28]
 8023750:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023752:	ee16 6a90 	vmov	r6, s13
 8023756:	bf14      	ite	ne
 8023758:	461d      	movne	r5, r3
 802375a:	4615      	moveq	r5, r2
 802375c:	eeb0 3a67 	vmov.f32	s6, s15
 8023760:	eef0 2a47 	vmov.f32	s5, s14
 8023764:	e6f4      	b.n	8023550 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8023766:	f111 0b01 	adds.w	fp, r1, #1
 802376a:	d48e      	bmi.n	802368a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802376c:	45de      	cmp	lr, fp
 802376e:	db8c      	blt.n	802368a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023770:	f110 0b01 	adds.w	fp, r0, #1
 8023774:	d489      	bmi.n	802368a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023776:	455b      	cmp	r3, fp
 8023778:	db87      	blt.n	802368a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802377a:	b21b      	sxth	r3, r3
 802377c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8023780:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8023784:	9300      	str	r3, [sp, #0]
 8023786:	4642      	mov	r2, r8
 8023788:	fa0f f38e 	sxth.w	r3, lr
 802378c:	4649      	mov	r1, r9
 802378e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023790:	f7ff fe4d 	bl	802342e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8023794:	e779      	b.n	802368a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023796:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023798:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802379c:	1420      	asrs	r0, r4, #16
 802379e:	1431      	asrs	r1, r6, #16
 80237a0:	fb03 0101 	mla	r1, r3, r1, r0
 80237a4:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80237a8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80237ac:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80237b0:	8841      	ldrh	r1, [r0, #2]
 80237b2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80237b6:	f1be 0f00 	cmp.w	lr, #0
 80237ba:	d00b      	beq.n	80237d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80237bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80237c0:	3b01      	subs	r3, #1
 80237c2:	005b      	lsls	r3, r3, #1
 80237c4:	3302      	adds	r3, #2
 80237c6:	eb00 0b03 	add.w	fp, r0, r3
 80237ca:	5ac3      	ldrh	r3, [r0, r3]
 80237cc:	930a      	str	r3, [sp, #40]	; 0x28
 80237ce:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80237d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80237d4:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80237d8:	fb12 f30e 	smulbb	r3, r2, lr
 80237dc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80237e0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80237e4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80237e8:	10db      	asrs	r3, r3, #3
 80237ea:	ea40 000c 	orr.w	r0, r0, ip
 80237ee:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80237f2:	f1ce 0c10 	rsb	ip, lr, #16
 80237f6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80237fa:	ebac 0c02 	sub.w	ip, ip, r2
 80237fe:	ea4b 0101 	orr.w	r1, fp, r1
 8023802:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023806:	4351      	muls	r1, r2
 8023808:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802380a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802380e:	fb0c 1c00 	mla	ip, ip, r0, r1
 8023812:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8023816:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802381a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802381c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802381e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023822:	0412      	lsls	r2, r2, #16
 8023824:	ea4b 0000 	orr.w	r0, fp, r0
 8023828:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802382c:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8023830:	fb03 c000 	mla	r0, r3, r0, ip
 8023834:	ea42 0b0b 	orr.w	fp, r2, fp
 8023838:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802383c:	fb03 000b 	mla	r0, r3, fp, r0
 8023840:	0d43      	lsrs	r3, r0, #21
 8023842:	0940      	lsrs	r0, r0, #5
 8023844:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023848:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802384c:	4318      	orrs	r0, r3
 802384e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023850:	f82a 0b02 	strh.w	r0, [sl], #2
 8023854:	441c      	add	r4, r3
 8023856:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023858:	f109 39ff 	add.w	r9, r9, #4294967295
 802385c:	441e      	add	r6, r3
 802385e:	e73c      	b.n	80236da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023860:	b00f      	add	sp, #60	; 0x3c
 8023862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023866 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8023866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802386a:	b085      	sub	sp, #20
 802386c:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8023870:	9102      	str	r1, [sp, #8]
 8023872:	2c00      	cmp	r4, #0
 8023874:	fb04 7103 	mla	r1, r4, r3, r7
 8023878:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 802387c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023880:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023884:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8023888:	f2c0 811b 	blt.w	8023ac2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802388c:	45a6      	cmp	lr, r4
 802388e:	f340 8118 	ble.w	8023ac2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8023892:	2f00      	cmp	r7, #0
 8023894:	f2c0 8113 	blt.w	8023abe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8023898:	42bb      	cmp	r3, r7
 802389a:	f340 8110 	ble.w	8023abe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802389e:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80238a2:	1c7a      	adds	r2, r7, #1
 80238a4:	f100 8110 	bmi.w	8023ac8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80238a8:	4293      	cmp	r3, r2
 80238aa:	f340 810d 	ble.w	8023ac8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80238ae:	2e00      	cmp	r6, #0
 80238b0:	f000 810c 	beq.w	8023acc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80238b4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80238b8:	3401      	adds	r4, #1
 80238ba:	f100 810b 	bmi.w	8023ad4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80238be:	45a6      	cmp	lr, r4
 80238c0:	f340 8108 	ble.w	8023ad4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80238c4:	2800      	cmp	r0, #0
 80238c6:	f000 8108 	beq.w	8023ada <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80238ca:	2f00      	cmp	r7, #0
 80238cc:	f2c0 8100 	blt.w	8023ad0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80238d0:	42bb      	cmp	r3, r7
 80238d2:	f340 80fd 	ble.w	8023ad0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80238d6:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80238da:	3701      	adds	r7, #1
 80238dc:	f100 8100 	bmi.w	8023ae0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80238e0:	42bb      	cmp	r3, r7
 80238e2:	f340 80fd 	ble.w	8023ae0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80238e6:	2e00      	cmp	r6, #0
 80238e8:	f000 80fc 	beq.w	8023ae4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 80238ec:	3301      	adds	r3, #1
 80238ee:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80238f2:	b2b6      	uxth	r6, r6
 80238f4:	b280      	uxth	r0, r0
 80238f6:	fb00 fe06 	mul.w	lr, r0, r6
 80238fa:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80238fe:	0136      	lsls	r6, r6, #4
 8023900:	eba6 070e 	sub.w	r7, r6, lr
 8023904:	b280      	uxth	r0, r0
 8023906:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802390a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802390e:	b2bf      	uxth	r7, r7
 8023910:	1a1b      	subs	r3, r3, r0
 8023912:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023916:	b29b      	uxth	r3, r3
 8023918:	fb0a f607 	mul.w	r6, sl, r7
 802391c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023920:	fb0b 6603 	mla	r6, fp, r3, r6
 8023924:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023928:	fb00 6609 	mla	r6, r0, r9, r6
 802392c:	fb0e 6608 	mla	r6, lr, r8, r6
 8023930:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023934:	9600      	str	r6, [sp, #0]
 8023936:	2e00      	cmp	r6, #0
 8023938:	f000 80be 	beq.w	8023ab8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 802393c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023940:	fb0b fc0c 	mul.w	ip, fp, ip
 8023944:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023948:	fb0b f505 	mul.w	r5, fp, r5
 802394c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023950:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023954:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023958:	44dc      	add	ip, fp
 802395a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802395e:	9501      	str	r5, [sp, #4]
 8023960:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8023964:	9503      	str	r5, [sp, #12]
 8023966:	9d01      	ldr	r5, [sp, #4]
 8023968:	9e02      	ldr	r6, [sp, #8]
 802396a:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802396e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023972:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8023976:	fb0a fc0c 	mul.w	ip, sl, ip
 802397a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802397e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023982:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023986:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802398a:	4465      	add	r5, ip
 802398c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023990:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023994:	fb09 fc0c 	mul.w	ip, r9, ip
 8023998:	fb09 f904 	mul.w	r9, r9, r4
 802399c:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80239a0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80239a4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80239a8:	fb08 f404 	mul.w	r4, r8, r4
 80239ac:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80239b0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80239b4:	fb08 f802 	mul.w	r8, r8, r2
 80239b8:	fb0a fa01 	mul.w	sl, sl, r1
 80239bc:	0a22      	lsrs	r2, r4, #8
 80239be:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80239c2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80239c6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80239ca:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80239ce:	4414      	add	r4, r2
 80239d0:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80239d4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80239d8:	0a2d      	lsrs	r5, r5, #8
 80239da:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80239de:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80239e2:	9a03      	ldr	r2, [sp, #12]
 80239e4:	8836      	ldrh	r6, [r6, #0]
 80239e6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80239ea:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80239ee:	437d      	muls	r5, r7
 80239f0:	4461      	add	r1, ip
 80239f2:	0a24      	lsrs	r4, r4, #8
 80239f4:	fb02 5503 	mla	r5, r2, r3, r5
 80239f8:	0a09      	lsrs	r1, r1, #8
 80239fa:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80239fe:	fb04 540e 	mla	r4, r4, lr, r5
 8023a02:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023a06:	fb01 4100 	mla	r1, r1, r0, r4
 8023a0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a0e:	0a09      	lsrs	r1, r1, #8
 8023a10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023a14:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8023a18:	fb07 f70a 	mul.w	r7, r7, sl
 8023a1c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023a20:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8023a24:	fb03 7101 	mla	r1, r3, r1, r7
 8023a28:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023a2c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023a30:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023a34:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8023a38:	fb00 e101 	mla	r1, r0, r1, lr
 8023a3c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8023a40:	9a00      	ldr	r2, [sp, #0]
 8023a42:	b287      	uxth	r7, r0
 8023a44:	437a      	muls	r2, r7
 8023a46:	0a09      	lsrs	r1, r1, #8
 8023a48:	1c53      	adds	r3, r2, #1
 8023a4a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023a4e:	4321      	orrs	r1, r4
 8023a50:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023a54:	1235      	asrs	r5, r6, #8
 8023a56:	0c0a      	lsrs	r2, r1, #16
 8023a58:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8023a5c:	b2db      	uxtb	r3, r3
 8023a5e:	fb12 f207 	smulbb	r2, r2, r7
 8023a62:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023a66:	fb05 2503 	mla	r5, r5, r3, r2
 8023a6a:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8023a6e:	10f2      	asrs	r2, r6, #3
 8023a70:	b2c8      	uxtb	r0, r1
 8023a72:	00f6      	lsls	r6, r6, #3
 8023a74:	fb14 f407 	smulbb	r4, r4, r7
 8023a78:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023a7c:	b2f6      	uxtb	r6, r6
 8023a7e:	fb10 f007 	smulbb	r0, r0, r7
 8023a82:	fb02 4203 	mla	r2, r2, r3, r4
 8023a86:	b2ad      	uxth	r5, r5
 8023a88:	fb06 0303 	mla	r3, r6, r3, r0
 8023a8c:	b299      	uxth	r1, r3
 8023a8e:	b294      	uxth	r4, r2
 8023a90:	1c6b      	adds	r3, r5, #1
 8023a92:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023a96:	1c62      	adds	r2, r4, #1
 8023a98:	1c4b      	adds	r3, r1, #1
 8023a9a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023a9e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023aa2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023aa6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023aaa:	0952      	lsrs	r2, r2, #5
 8023aac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023ab0:	432b      	orrs	r3, r5
 8023ab2:	4313      	orrs	r3, r2
 8023ab4:	9a02      	ldr	r2, [sp, #8]
 8023ab6:	8013      	strh	r3, [r2, #0]
 8023ab8:	b005      	add	sp, #20
 8023aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023abe:	2500      	movs	r5, #0
 8023ac0:	e6ef      	b.n	80238a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8023ac2:	2100      	movs	r1, #0
 8023ac4:	460d      	mov	r5, r1
 8023ac6:	e6f7      	b.n	80238b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023ac8:	2100      	movs	r1, #0
 8023aca:	e6f5      	b.n	80238b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023acc:	4631      	mov	r1, r6
 8023ace:	e6f3      	b.n	80238b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023ad0:	2400      	movs	r4, #0
 8023ad2:	e702      	b.n	80238da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8023ad4:	2200      	movs	r2, #0
 8023ad6:	4614      	mov	r4, r2
 8023ad8:	e70b      	b.n	80238f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023ada:	4602      	mov	r2, r0
 8023adc:	4604      	mov	r4, r0
 8023ade:	e708      	b.n	80238f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023ae0:	2200      	movs	r2, #0
 8023ae2:	e706      	b.n	80238f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023ae4:	4632      	mov	r2, r6
 8023ae6:	e704      	b.n	80238f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08023ae8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023aec:	b09d      	sub	sp, #116	; 0x74
 8023aee:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023af2:	9219      	str	r2, [sp, #100]	; 0x64
 8023af4:	9307      	str	r3, [sp, #28]
 8023af6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023af8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023afc:	931a      	str	r3, [sp, #104]	; 0x68
 8023afe:	9117      	str	r1, [sp, #92]	; 0x5c
 8023b00:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023b04:	901b      	str	r0, [sp, #108]	; 0x6c
 8023b06:	6850      	ldr	r0, [r2, #4]
 8023b08:	6812      	ldr	r2, [r2, #0]
 8023b0a:	fb00 1303 	mla	r3, r0, r3, r1
 8023b0e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023b12:	930a      	str	r3, [sp, #40]	; 0x28
 8023b14:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023b16:	681b      	ldr	r3, [r3, #0]
 8023b18:	9310      	str	r3, [sp, #64]	; 0x40
 8023b1a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8023b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023b20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023b22:	2b00      	cmp	r3, #0
 8023b24:	dc03      	bgt.n	8023b2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8023b26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023b28:	2b00      	cmp	r3, #0
 8023b2a:	f340 8375 	ble.w	8024218 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023b2e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023b30:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023b34:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023b38:	1e48      	subs	r0, r1, #1
 8023b3a:	1e57      	subs	r7, r2, #1
 8023b3c:	9b07      	ldr	r3, [sp, #28]
 8023b3e:	2b00      	cmp	r3, #0
 8023b40:	f340 818e 	ble.w	8023e60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8023b44:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023b48:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023b4c:	d406      	bmi.n	8023b5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023b4e:	4584      	cmp	ip, r0
 8023b50:	da04      	bge.n	8023b5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023b52:	2b00      	cmp	r3, #0
 8023b54:	db02      	blt.n	8023b5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023b56:	42bb      	cmp	r3, r7
 8023b58:	f2c0 8183 	blt.w	8023e62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023b5c:	f11c 0c01 	adds.w	ip, ip, #1
 8023b60:	f100 8173 	bmi.w	8023e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b64:	4561      	cmp	r1, ip
 8023b66:	f2c0 8170 	blt.w	8023e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b6a:	3301      	adds	r3, #1
 8023b6c:	f100 816d 	bmi.w	8023e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b70:	429a      	cmp	r2, r3
 8023b72:	f2c0 816a 	blt.w	8023e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b76:	9b07      	ldr	r3, [sp, #28]
 8023b78:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023b7a:	9318      	str	r3, [sp, #96]	; 0x60
 8023b7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023b7e:	2b00      	cmp	r3, #0
 8023b80:	f340 818c 	ble.w	8023e9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8023b84:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023b86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023b88:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023b8c:	689b      	ldr	r3, [r3, #8]
 8023b8e:	1422      	asrs	r2, r4, #16
 8023b90:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023b94:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023b98:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023b9c:	f100 81cd 	bmi.w	8023f3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023ba0:	f103 38ff 	add.w	r8, r3, #4294967295
 8023ba4:	4542      	cmp	r2, r8
 8023ba6:	f280 81c8 	bge.w	8023f3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023baa:	f1bc 0f00 	cmp.w	ip, #0
 8023bae:	f2c0 81c4 	blt.w	8023f3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023bb2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023bb6:	45c4      	cmp	ip, r8
 8023bb8:	f280 81bf 	bge.w	8023f3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023bbc:	b21b      	sxth	r3, r3
 8023bbe:	fb0c 2203 	mla	r2, ip, r3, r2
 8023bc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023bc4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023bc8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023bcc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023bd0:	2800      	cmp	r0, #0
 8023bd2:	f000 81a9 	beq.w	8023f28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8023bd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023bda:	950c      	str	r5, [sp, #48]	; 0x30
 8023bdc:	0e2d      	lsrs	r5, r5, #24
 8023bde:	9513      	str	r5, [sp, #76]	; 0x4c
 8023be0:	b181      	cbz	r1, 8023c04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023be2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023be6:	3b01      	subs	r3, #1
 8023be8:	009b      	lsls	r3, r3, #2
 8023bea:	3304      	adds	r3, #4
 8023bec:	eb08 0c03 	add.w	ip, r8, r3
 8023bf0:	f858 3003 	ldr.w	r3, [r8, r3]
 8023bf4:	9308      	str	r3, [sp, #32]
 8023bf6:	0e1b      	lsrs	r3, r3, #24
 8023bf8:	9311      	str	r3, [sp, #68]	; 0x44
 8023bfa:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023bfe:	930d      	str	r3, [sp, #52]	; 0x34
 8023c00:	0e1b      	lsrs	r3, r3, #24
 8023c02:	9314      	str	r3, [sp, #80]	; 0x50
 8023c04:	b280      	uxth	r0, r0
 8023c06:	b289      	uxth	r1, r1
 8023c08:	fb00 f901 	mul.w	r9, r0, r1
 8023c0c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023c10:	0100      	lsls	r0, r0, #4
 8023c12:	eba0 0809 	sub.w	r8, r0, r9
 8023c16:	b289      	uxth	r1, r1
 8023c18:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8023c1c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023c1e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023c20:	fa1f f888 	uxth.w	r8, r8
 8023c24:	1a5b      	subs	r3, r3, r1
 8023c26:	b29b      	uxth	r3, r3
 8023c28:	fb08 f000 	mul.w	r0, r8, r0
 8023c2c:	fb03 000e 	mla	r0, r3, lr, r0
 8023c30:	fb01 0005 	mla	r0, r1, r5, r0
 8023c34:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023c36:	fb09 0005 	mla	r0, r9, r5, r0
 8023c3a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023c3e:	2800      	cmp	r0, #0
 8023c40:	f000 80fa 	beq.w	8023e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023c44:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023c48:	d01b      	beq.n	8023c82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023c4a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023c4e:	fb0e fa0a 	mul.w	sl, lr, sl
 8023c52:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023c56:	fb0e fe02 	mul.w	lr, lr, r2
 8023c5a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023c5e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023c62:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023c66:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023c6a:	4452      	add	r2, sl
 8023c6c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023c70:	0a12      	lsrs	r2, r2, #8
 8023c72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c76:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023c7a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023c7e:	ea42 020c 	orr.w	r2, r2, ip
 8023c82:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023c84:	2dff      	cmp	r5, #255	; 0xff
 8023c86:	d021      	beq.n	8023ccc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8023c88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023c8a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023c8e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023c90:	fb05 fb0b 	mul.w	fp, r5, fp
 8023c94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023c96:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023c9a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023c9c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ca0:	fb05 fa0a 	mul.w	sl, r5, sl
 8023ca4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ca8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023cac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023cb0:	44de      	add	lr, fp
 8023cb2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023cb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023cba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023cbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cc2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023cc6:	ea4e 050a 	orr.w	r5, lr, sl
 8023cca:	950c      	str	r5, [sp, #48]	; 0x30
 8023ccc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023cce:	2dff      	cmp	r5, #255	; 0xff
 8023cd0:	d021      	beq.n	8023d16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8023cd2:	9d08      	ldr	r5, [sp, #32]
 8023cd4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023cd8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023cda:	fb05 fb0b 	mul.w	fp, r5, fp
 8023cde:	9d08      	ldr	r5, [sp, #32]
 8023ce0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023ce4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023ce6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023cea:	fb05 fa0a 	mul.w	sl, r5, sl
 8023cee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023cf2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023cf6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023cfa:	44de      	add	lr, fp
 8023cfc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023d00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d10:	ea4e 050a 	orr.w	r5, lr, sl
 8023d14:	9508      	str	r5, [sp, #32]
 8023d16:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023d18:	2dff      	cmp	r5, #255	; 0xff
 8023d1a:	d021      	beq.n	8023d60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023d1c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023d1e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023d22:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023d24:	fb05 fb0b 	mul.w	fp, r5, fp
 8023d28:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023d2a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023d2e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023d30:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023d34:	fb05 fa0a 	mul.w	sl, r5, sl
 8023d38:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d3c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023d40:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023d44:	44de      	add	lr, fp
 8023d46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023d4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023d5a:	ea4e 050a 	orr.w	r5, lr, sl
 8023d5e:	950d      	str	r5, [sp, #52]	; 0x34
 8023d60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023d62:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023d66:	9d08      	ldr	r5, [sp, #32]
 8023d68:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023d6c:	fb08 fc0c 	mul.w	ip, r8, ip
 8023d70:	fb03 cc0e 	mla	ip, r3, lr, ip
 8023d74:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023d78:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023d7a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023d7e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023d82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023d84:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023d88:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023d8c:	fb08 f80e 	mul.w	r8, r8, lr
 8023d90:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023d94:	fb03 8202 	mla	r2, r3, r2, r8
 8023d98:	9b08      	ldr	r3, [sp, #32]
 8023d9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023d9c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8023da0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023da2:	fb01 220a 	mla	r2, r1, sl, r2
 8023da6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8023daa:	fb09 2901 	mla	r9, r9, r1, r2
 8023dae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023db0:	883b      	ldrh	r3, [r7, #0]
 8023db2:	4342      	muls	r2, r0
 8023db4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023db8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023dbc:	1c50      	adds	r0, r2, #1
 8023dbe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023dc2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023dc6:	ea4c 0c09 	orr.w	ip, ip, r9
 8023dca:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023dce:	1219      	asrs	r1, r3, #8
 8023dd0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023dd4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023dd8:	b2c0      	uxtb	r0, r0
 8023dda:	fb12 f205 	smulbb	r2, r2, r5
 8023dde:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023de2:	fb01 2100 	mla	r1, r1, r0, r2
 8023de6:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023dea:	10da      	asrs	r2, r3, #3
 8023dec:	fa5f fc8c 	uxtb.w	ip, ip
 8023df0:	00db      	lsls	r3, r3, #3
 8023df2:	fb1c fc05 	smulbb	ip, ip, r5
 8023df6:	b2db      	uxtb	r3, r3
 8023df8:	b289      	uxth	r1, r1
 8023dfa:	fb03 c300 	mla	r3, r3, r0, ip
 8023dfe:	fa1f fc83 	uxth.w	ip, r3
 8023e02:	1c4b      	adds	r3, r1, #1
 8023e04:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023e08:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023e0c:	fb1e fe05 	smulbb	lr, lr, r5
 8023e10:	f10c 0301 	add.w	r3, ip, #1
 8023e14:	fb02 e200 	mla	r2, r2, r0, lr
 8023e18:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023e1c:	b292      	uxth	r2, r2
 8023e1e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023e22:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023e26:	430b      	orrs	r3, r1
 8023e28:	1c51      	adds	r1, r2, #1
 8023e2a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023e2e:	0952      	lsrs	r2, r2, #5
 8023e30:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023e34:	4313      	orrs	r3, r2
 8023e36:	803b      	strh	r3, [r7, #0]
 8023e38:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023e3a:	441c      	add	r4, r3
 8023e3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023e3e:	441e      	add	r6, r3
 8023e40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023e42:	3b01      	subs	r3, #1
 8023e44:	3702      	adds	r7, #2
 8023e46:	9318      	str	r3, [sp, #96]	; 0x60
 8023e48:	e698      	b.n	8023b7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023e4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023e4c:	441c      	add	r4, r3
 8023e4e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023e50:	441e      	add	r6, r3
 8023e52:	9b07      	ldr	r3, [sp, #28]
 8023e54:	3b01      	subs	r3, #1
 8023e56:	9307      	str	r3, [sp, #28]
 8023e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e5a:	3302      	adds	r3, #2
 8023e5c:	930a      	str	r3, [sp, #40]	; 0x28
 8023e5e:	e66d      	b.n	8023b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8023e60:	d023      	beq.n	8023eaa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8023e62:	9b07      	ldr	r3, [sp, #28]
 8023e64:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023e66:	3b01      	subs	r3, #1
 8023e68:	fb00 4003 	mla	r0, r0, r3, r4
 8023e6c:	1400      	asrs	r0, r0, #16
 8023e6e:	f53f ae82 	bmi.w	8023b76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023e72:	3901      	subs	r1, #1
 8023e74:	4288      	cmp	r0, r1
 8023e76:	f6bf ae7e 	bge.w	8023b76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023e7a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023e7c:	fb01 6303 	mla	r3, r1, r3, r6
 8023e80:	141b      	asrs	r3, r3, #16
 8023e82:	f53f ae78 	bmi.w	8023b76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023e86:	3a01      	subs	r2, #1
 8023e88:	4293      	cmp	r3, r2
 8023e8a:	f6bf ae74 	bge.w	8023b76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023e8e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023e92:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023e96:	f1bb 0f00 	cmp.w	fp, #0
 8023e9a:	dc6c      	bgt.n	8023f76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8023e9c:	9b07      	ldr	r3, [sp, #28]
 8023e9e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ea4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023ea8:	930a      	str	r3, [sp, #40]	; 0x28
 8023eaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023eac:	2b00      	cmp	r3, #0
 8023eae:	f340 81b3 	ble.w	8024218 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023eb2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023eb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023eba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023ebe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023ec0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023ec4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023ec8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023ecc:	eef0 6a62 	vmov.f32	s13, s5
 8023ed0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023ed4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ed8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023edc:	ee16 4a90 	vmov	r4, s13
 8023ee0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023ee4:	eef0 6a43 	vmov.f32	s13, s6
 8023ee8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023eec:	ee12 2a90 	vmov	r2, s5
 8023ef0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023ef4:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ef8:	ee13 2a10 	vmov	r2, s6
 8023efc:	9329      	str	r3, [sp, #164]	; 0xa4
 8023efe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023f00:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f04:	932a      	str	r3, [sp, #168]	; 0xa8
 8023f06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023f08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023f0a:	3b01      	subs	r3, #1
 8023f0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f10:	9317      	str	r3, [sp, #92]	; 0x5c
 8023f12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023f14:	bf08      	it	eq
 8023f16:	4613      	moveq	r3, r2
 8023f18:	ee16 6a90 	vmov	r6, s13
 8023f1c:	9307      	str	r3, [sp, #28]
 8023f1e:	eeb0 3a67 	vmov.f32	s6, s15
 8023f22:	eef0 2a47 	vmov.f32	s5, s14
 8023f26:	e5fb      	b.n	8023b20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023f28:	2900      	cmp	r1, #0
 8023f2a:	f43f ae6b 	beq.w	8023c04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023f2e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023f32:	9308      	str	r3, [sp, #32]
 8023f34:	0e1b      	lsrs	r3, r3, #24
 8023f36:	9311      	str	r3, [sp, #68]	; 0x44
 8023f38:	e664      	b.n	8023c04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023f3a:	f112 0801 	adds.w	r8, r2, #1
 8023f3e:	f53f af7b 	bmi.w	8023e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023f42:	4543      	cmp	r3, r8
 8023f44:	f6ff af78 	blt.w	8023e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023f48:	f11c 0801 	adds.w	r8, ip, #1
 8023f4c:	f53f af74 	bmi.w	8023e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023f50:	45c6      	cmp	lr, r8
 8023f52:	f6ff af71 	blt.w	8023e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023f56:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8023f58:	9201      	str	r2, [sp, #4]
 8023f5a:	fa0f f28e 	sxth.w	r2, lr
 8023f5e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8023f62:	e9cd c002 	strd	ip, r0, [sp, #8]
 8023f66:	9200      	str	r2, [sp, #0]
 8023f68:	b21b      	sxth	r3, r3
 8023f6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023f6c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023f6e:	4639      	mov	r1, r7
 8023f70:	f7ff fc79 	bl	8023866 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8023f74:	e760      	b.n	8023e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023f76:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023f78:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023f7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023f7e:	1427      	asrs	r7, r4, #16
 8023f80:	1433      	asrs	r3, r6, #16
 8023f82:	fb01 7303 	mla	r3, r1, r3, r7
 8023f86:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8023f8a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023f8e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023f92:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023f96:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023f9a:	2a00      	cmp	r2, #0
 8023f9c:	f000 8133 	beq.w	8024206 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8023fa0:	687d      	ldr	r5, [r7, #4]
 8023fa2:	950e      	str	r5, [sp, #56]	; 0x38
 8023fa4:	0e2d      	lsrs	r5, r5, #24
 8023fa6:	9515      	str	r5, [sp, #84]	; 0x54
 8023fa8:	b178      	cbz	r0, 8023fca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023faa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8023fae:	3901      	subs	r1, #1
 8023fb0:	0089      	lsls	r1, r1, #2
 8023fb2:	3104      	adds	r1, #4
 8023fb4:	eb07 0e01 	add.w	lr, r7, r1
 8023fb8:	5879      	ldr	r1, [r7, r1]
 8023fba:	9109      	str	r1, [sp, #36]	; 0x24
 8023fbc:	0e09      	lsrs	r1, r1, #24
 8023fbe:	9112      	str	r1, [sp, #72]	; 0x48
 8023fc0:	f8de 1004 	ldr.w	r1, [lr, #4]
 8023fc4:	910f      	str	r1, [sp, #60]	; 0x3c
 8023fc6:	0e09      	lsrs	r1, r1, #24
 8023fc8:	9116      	str	r1, [sp, #88]	; 0x58
 8023fca:	b292      	uxth	r2, r2
 8023fcc:	b280      	uxth	r0, r0
 8023fce:	fb02 f800 	mul.w	r8, r2, r0
 8023fd2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023fd6:	0112      	lsls	r2, r2, #4
 8023fd8:	eba2 0e08 	sub.w	lr, r2, r8
 8023fdc:	b280      	uxth	r0, r0
 8023fde:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023fe2:	9915      	ldr	r1, [sp, #84]	; 0x54
 8023fe4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023fe6:	fa1f fe8e 	uxth.w	lr, lr
 8023fea:	1a12      	subs	r2, r2, r0
 8023fec:	b292      	uxth	r2, r2
 8023fee:	fb0e f101 	mul.w	r1, lr, r1
 8023ff2:	fb02 110c 	mla	r1, r2, ip, r1
 8023ff6:	fb00 1105 	mla	r1, r0, r5, r1
 8023ffa:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023ffc:	fb08 1105 	mla	r1, r8, r5, r1
 8024000:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024004:	2900      	cmp	r1, #0
 8024006:	f000 80f5 	beq.w	80241f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 802400a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802400e:	d019      	beq.n	8024044 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8024010:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024014:	fb0c fa0a 	mul.w	sl, ip, sl
 8024018:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802401c:	fb0c fc03 	mul.w	ip, ip, r3
 8024020:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024024:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024028:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802402c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024030:	4453      	add	r3, sl
 8024032:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024036:	0a1b      	lsrs	r3, r3, #8
 8024038:	0a3f      	lsrs	r7, r7, #8
 802403a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802403e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024042:	433b      	orrs	r3, r7
 8024044:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024046:	2dff      	cmp	r5, #255	; 0xff
 8024048:	d020      	beq.n	802408c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 802404a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802404c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024050:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024052:	436f      	muls	r7, r5
 8024054:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024056:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802405a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802405c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024060:	fb05 fa0a 	mul.w	sl, r5, sl
 8024064:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024068:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802406c:	44bc      	add	ip, r7
 802406e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024072:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024076:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802407a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802407e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024082:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024086:	ea4c 050a 	orr.w	r5, ip, sl
 802408a:	950e      	str	r5, [sp, #56]	; 0x38
 802408c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802408e:	2dff      	cmp	r5, #255	; 0xff
 8024090:	d020      	beq.n	80240d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8024092:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024094:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024098:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802409a:	436f      	muls	r7, r5
 802409c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802409e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80240a2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80240a4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80240a8:	fb05 fa0a 	mul.w	sl, r5, sl
 80240ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80240b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240b4:	44bc      	add	ip, r7
 80240b6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80240ba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80240be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80240c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80240ce:	ea4c 050a 	orr.w	r5, ip, sl
 80240d2:	9509      	str	r5, [sp, #36]	; 0x24
 80240d4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80240d6:	2dff      	cmp	r5, #255	; 0xff
 80240d8:	d020      	beq.n	802411c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 80240da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80240dc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80240e0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80240e2:	436f      	muls	r7, r5
 80240e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80240e6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80240ea:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80240ec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80240f0:	fb05 fa0a 	mul.w	sl, r5, sl
 80240f4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80240f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80240fc:	44bc      	add	ip, r7
 80240fe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024102:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024106:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802410a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802410e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024112:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024116:	ea4c 050a 	orr.w	r5, ip, sl
 802411a:	950f      	str	r5, [sp, #60]	; 0x3c
 802411c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802411e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024122:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024124:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024128:	fb0e f707 	mul.w	r7, lr, r7
 802412c:	fb02 770c 	mla	r7, r2, ip, r7
 8024130:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024134:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024136:	fb00 770c 	mla	r7, r0, ip, r7
 802413a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802413e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024140:	fb08 770c 	mla	r7, r8, ip, r7
 8024144:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024148:	fb0e fe0c 	mul.w	lr, lr, ip
 802414c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024150:	fb02 e303 	mla	r3, r2, r3, lr
 8024154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024156:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024158:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802415c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802415e:	fb00 330a 	mla	r3, r0, sl, r3
 8024162:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024166:	fb08 3c0c 	mla	ip, r8, ip, r3
 802416a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802416c:	f8b9 0000 	ldrh.w	r0, [r9]
 8024170:	4359      	muls	r1, r3
 8024172:	0a3f      	lsrs	r7, r7, #8
 8024174:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024178:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802417c:	1c4b      	adds	r3, r1, #1
 802417e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024182:	ea47 070c 	orr.w	r7, r7, ip
 8024186:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802418a:	1202      	asrs	r2, r0, #8
 802418c:	0c3b      	lsrs	r3, r7, #16
 802418e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024192:	b2c9      	uxtb	r1, r1
 8024194:	fb13 f305 	smulbb	r3, r3, r5
 8024198:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802419c:	fb02 3201 	mla	r2, r2, r1, r3
 80241a0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80241a4:	10c3      	asrs	r3, r0, #3
 80241a6:	b2ff      	uxtb	r7, r7
 80241a8:	00c0      	lsls	r0, r0, #3
 80241aa:	b2c0      	uxtb	r0, r0
 80241ac:	fb17 f705 	smulbb	r7, r7, r5
 80241b0:	fb00 7001 	mla	r0, r0, r1, r7
 80241b4:	b292      	uxth	r2, r2
 80241b6:	fb1c fc05 	smulbb	ip, ip, r5
 80241ba:	b280      	uxth	r0, r0
 80241bc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80241c0:	fb03 c301 	mla	r3, r3, r1, ip
 80241c4:	1c51      	adds	r1, r2, #1
 80241c6:	f100 0c01 	add.w	ip, r0, #1
 80241ca:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80241ce:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80241d2:	b29b      	uxth	r3, r3
 80241d4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80241d8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80241dc:	ea4c 0202 	orr.w	r2, ip, r2
 80241e0:	f103 0c01 	add.w	ip, r3, #1
 80241e4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80241e8:	095b      	lsrs	r3, r3, #5
 80241ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80241ee:	431a      	orrs	r2, r3
 80241f0:	f8a9 2000 	strh.w	r2, [r9]
 80241f4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80241f6:	441c      	add	r4, r3
 80241f8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80241fa:	f109 0902 	add.w	r9, r9, #2
 80241fe:	441e      	add	r6, r3
 8024200:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024204:	e647      	b.n	8023e96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024206:	2800      	cmp	r0, #0
 8024208:	f43f aedf 	beq.w	8023fca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802420c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8024210:	9109      	str	r1, [sp, #36]	; 0x24
 8024212:	0e09      	lsrs	r1, r1, #24
 8024214:	9112      	str	r1, [sp, #72]	; 0x48
 8024216:	e6d8      	b.n	8023fca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8024218:	b01d      	add	sp, #116	; 0x74
 802421a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802421e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802421e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024222:	b085      	sub	sp, #20
 8024224:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8024228:	9102      	str	r1, [sp, #8]
 802422a:	2c00      	cmp	r4, #0
 802422c:	fb04 7103 	mla	r1, r4, r3, r7
 8024230:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8024234:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8024238:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802423c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8024240:	f2c0 810c 	blt.w	802445c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8024244:	45a6      	cmp	lr, r4
 8024246:	f340 8109 	ble.w	802445c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802424a:	2f00      	cmp	r7, #0
 802424c:	f2c0 8104 	blt.w	8024458 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8024250:	42bb      	cmp	r3, r7
 8024252:	f340 8101 	ble.w	8024458 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8024256:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802425a:	1c7a      	adds	r2, r7, #1
 802425c:	f100 8101 	bmi.w	8024462 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8024260:	4293      	cmp	r3, r2
 8024262:	f340 80fe 	ble.w	8024462 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8024266:	2e00      	cmp	r6, #0
 8024268:	f000 80fd 	beq.w	8024466 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 802426c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8024270:	3401      	adds	r4, #1
 8024272:	f100 80fc 	bmi.w	802446e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8024276:	45a6      	cmp	lr, r4
 8024278:	f340 80f9 	ble.w	802446e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802427c:	2800      	cmp	r0, #0
 802427e:	f000 80f9 	beq.w	8024474 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8024282:	2f00      	cmp	r7, #0
 8024284:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8024288:	f2c0 80ef 	blt.w	802446a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802428c:	42bb      	cmp	r3, r7
 802428e:	f340 80ec 	ble.w	802446a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8024292:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8024296:	3701      	adds	r7, #1
 8024298:	f100 80ef 	bmi.w	802447a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802429c:	42bb      	cmp	r3, r7
 802429e:	f340 80ec 	ble.w	802447a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80242a2:	2e00      	cmp	r6, #0
 80242a4:	f000 80eb 	beq.w	802447e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 80242a8:	6852      	ldr	r2, [r2, #4]
 80242aa:	b2b6      	uxth	r6, r6
 80242ac:	b280      	uxth	r0, r0
 80242ae:	fb00 fe06 	mul.w	lr, r0, r6
 80242b2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80242b6:	0136      	lsls	r6, r6, #4
 80242b8:	eba6 070e 	sub.w	r7, r6, lr
 80242bc:	b280      	uxth	r0, r0
 80242be:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80242c2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80242c6:	b2bf      	uxth	r7, r7
 80242c8:	1a1b      	subs	r3, r3, r0
 80242ca:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80242ce:	b29b      	uxth	r3, r3
 80242d0:	fb07 f60a 	mul.w	r6, r7, sl
 80242d4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80242d8:	fb0b 6603 	mla	r6, fp, r3, r6
 80242dc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80242e0:	fb00 6609 	mla	r6, r0, r9, r6
 80242e4:	fb0e 6608 	mla	r6, lr, r8, r6
 80242e8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80242ec:	9600      	str	r6, [sp, #0]
 80242ee:	2e00      	cmp	r6, #0
 80242f0:	f000 80af 	beq.w	8024452 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 80242f4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80242f8:	fb0b fc0c 	mul.w	ip, fp, ip
 80242fc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024300:	fb0b f505 	mul.w	r5, fp, r5
 8024304:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024308:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802430c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024310:	44dc      	add	ip, fp
 8024312:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024316:	9501      	str	r5, [sp, #4]
 8024318:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802431c:	9503      	str	r5, [sp, #12]
 802431e:	9d01      	ldr	r5, [sp, #4]
 8024320:	9e02      	ldr	r6, [sp, #8]
 8024322:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024326:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802432a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802432e:	fb0a fc0c 	mul.w	ip, sl, ip
 8024332:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8024336:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802433a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802433e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024342:	4465      	add	r5, ip
 8024344:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024348:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802434c:	fb09 fc0c 	mul.w	ip, r9, ip
 8024350:	fb09 f904 	mul.w	r9, r9, r4
 8024354:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8024358:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802435c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8024360:	fb08 f404 	mul.w	r4, r8, r4
 8024364:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024368:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802436c:	fb08 f802 	mul.w	r8, r8, r2
 8024370:	fb0a fa01 	mul.w	sl, sl, r1
 8024374:	0a22      	lsrs	r2, r4, #8
 8024376:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802437a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802437e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8024382:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8024386:	4414      	add	r4, r2
 8024388:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802438c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8024390:	0a2d      	lsrs	r5, r5, #8
 8024392:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8024396:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802439a:	9a03      	ldr	r2, [sp, #12]
 802439c:	8836      	ldrh	r6, [r6, #0]
 802439e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80243a2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80243a6:	437d      	muls	r5, r7
 80243a8:	4461      	add	r1, ip
 80243aa:	0a24      	lsrs	r4, r4, #8
 80243ac:	fb02 5503 	mla	r5, r2, r3, r5
 80243b0:	0a09      	lsrs	r1, r1, #8
 80243b2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80243b6:	fb04 540e 	mla	r4, r4, lr, r5
 80243ba:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80243be:	fb01 4100 	mla	r1, r1, r0, r4
 80243c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80243c6:	0a09      	lsrs	r1, r1, #8
 80243c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80243cc:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80243d0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80243d4:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80243d8:	fb07 f70a 	mul.w	r7, r7, sl
 80243dc:	fb03 7101 	mla	r1, r3, r1, r7
 80243e0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80243e4:	9b00      	ldr	r3, [sp, #0]
 80243e6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80243ea:	fb0e 1e08 	mla	lr, lr, r8, r1
 80243ee:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80243f2:	fb00 e101 	mla	r1, r0, r1, lr
 80243f6:	43da      	mvns	r2, r3
 80243f8:	1233      	asrs	r3, r6, #8
 80243fa:	b2d2      	uxtb	r2, r2
 80243fc:	10f0      	asrs	r0, r6, #3
 80243fe:	0a09      	lsrs	r1, r1, #8
 8024400:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024404:	00f6      	lsls	r6, r6, #3
 8024406:	4353      	muls	r3, r2
 8024408:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802440c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024410:	b2f6      	uxtb	r6, r6
 8024412:	4321      	orrs	r1, r4
 8024414:	4350      	muls	r0, r2
 8024416:	4356      	muls	r6, r2
 8024418:	1c5a      	adds	r2, r3, #1
 802441a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802441e:	0c0b      	lsrs	r3, r1, #16
 8024420:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024424:	1c42      	adds	r2, r0, #1
 8024426:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802442a:	0a0a      	lsrs	r2, r1, #8
 802442c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024430:	021b      	lsls	r3, r3, #8
 8024432:	00d2      	lsls	r2, r2, #3
 8024434:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024438:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802443c:	4313      	orrs	r3, r2
 802443e:	1c72      	adds	r2, r6, #1
 8024440:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8024444:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8024448:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802444c:	4319      	orrs	r1, r3
 802444e:	9b02      	ldr	r3, [sp, #8]
 8024450:	8019      	strh	r1, [r3, #0]
 8024452:	b005      	add	sp, #20
 8024454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024458:	2500      	movs	r5, #0
 802445a:	e6fe      	b.n	802425a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802445c:	2100      	movs	r1, #0
 802445e:	460d      	mov	r5, r1
 8024460:	e706      	b.n	8024270 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8024462:	2100      	movs	r1, #0
 8024464:	e704      	b.n	8024270 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8024466:	4631      	mov	r1, r6
 8024468:	e702      	b.n	8024270 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802446a:	2400      	movs	r4, #0
 802446c:	e713      	b.n	8024296 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 802446e:	2200      	movs	r2, #0
 8024470:	4614      	mov	r4, r2
 8024472:	e71a      	b.n	80242aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8024474:	4602      	mov	r2, r0
 8024476:	4604      	mov	r4, r0
 8024478:	e717      	b.n	80242aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802447a:	2200      	movs	r2, #0
 802447c:	e715      	b.n	80242aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802447e:	4632      	mov	r2, r6
 8024480:	e713      	b.n	80242aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

08024484 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024488:	b09b      	sub	sp, #108	; 0x6c
 802448a:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802448e:	9218      	str	r2, [sp, #96]	; 0x60
 8024490:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024492:	9116      	str	r1, [sp, #88]	; 0x58
 8024494:	9307      	str	r3, [sp, #28]
 8024496:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802449a:	9019      	str	r0, [sp, #100]	; 0x64
 802449c:	6850      	ldr	r0, [r2, #4]
 802449e:	6812      	ldr	r2, [r2, #0]
 80244a0:	fb00 1303 	mla	r3, r0, r3, r1
 80244a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80244a8:	930a      	str	r3, [sp, #40]	; 0x28
 80244aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80244ac:	681b      	ldr	r3, [r3, #0]
 80244ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80244b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80244b2:	2b00      	cmp	r3, #0
 80244b4:	dc03      	bgt.n	80244be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80244b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80244b8:	2b00      	cmp	r3, #0
 80244ba:	f340 8386 	ble.w	8024bca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 80244be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80244c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80244c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80244c8:	1e48      	subs	r0, r1, #1
 80244ca:	1e57      	subs	r7, r2, #1
 80244cc:	9b07      	ldr	r3, [sp, #28]
 80244ce:	2b00      	cmp	r3, #0
 80244d0:	f340 8166 	ble.w	80247a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80244d4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80244d8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80244dc:	d406      	bmi.n	80244ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80244de:	4584      	cmp	ip, r0
 80244e0:	da04      	bge.n	80244ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80244e2:	2b00      	cmp	r3, #0
 80244e4:	db02      	blt.n	80244ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80244e6:	42bb      	cmp	r3, r7
 80244e8:	f2c0 815b 	blt.w	80247a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80244ec:	f11c 0c01 	adds.w	ip, ip, #1
 80244f0:	f100 814b 	bmi.w	802478a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80244f4:	4561      	cmp	r1, ip
 80244f6:	f2c0 8148 	blt.w	802478a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80244fa:	3301      	adds	r3, #1
 80244fc:	f100 8145 	bmi.w	802478a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024500:	429a      	cmp	r2, r3
 8024502:	f2c0 8142 	blt.w	802478a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024506:	9b07      	ldr	r3, [sp, #28]
 8024508:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802450a:	9317      	str	r3, [sp, #92]	; 0x5c
 802450c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802450e:	2b00      	cmp	r3, #0
 8024510:	f340 8165 	ble.w	80247de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024514:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8024516:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024518:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802451c:	689b      	ldr	r3, [r3, #8]
 802451e:	1422      	asrs	r2, r4, #16
 8024520:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024524:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024528:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802452c:	f100 81d5 	bmi.w	80248da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024530:	f103 38ff 	add.w	r8, r3, #4294967295
 8024534:	4542      	cmp	r2, r8
 8024536:	f280 81d0 	bge.w	80248da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802453a:	f1bc 0f00 	cmp.w	ip, #0
 802453e:	f2c0 81cc 	blt.w	80248da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024542:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024546:	45c4      	cmp	ip, r8
 8024548:	f280 81c7 	bge.w	80248da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802454c:	b21b      	sxth	r3, r3
 802454e:	fb0c 2203 	mla	r2, ip, r3, r2
 8024552:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024554:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8024558:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802455c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8024560:	2900      	cmp	r1, #0
 8024562:	f000 8182 	beq.w	802486a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8024566:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802456a:	950b      	str	r5, [sp, #44]	; 0x2c
 802456c:	0e2d      	lsrs	r5, r5, #24
 802456e:	9512      	str	r5, [sp, #72]	; 0x48
 8024570:	b180      	cbz	r0, 8024594 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024572:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8024576:	3b01      	subs	r3, #1
 8024578:	009b      	lsls	r3, r3, #2
 802457a:	3304      	adds	r3, #4
 802457c:	eb08 0c03 	add.w	ip, r8, r3
 8024580:	f858 3003 	ldr.w	r3, [r8, r3]
 8024584:	9308      	str	r3, [sp, #32]
 8024586:	0e1b      	lsrs	r3, r3, #24
 8024588:	9310      	str	r3, [sp, #64]	; 0x40
 802458a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802458e:	930c      	str	r3, [sp, #48]	; 0x30
 8024590:	0e1b      	lsrs	r3, r3, #24
 8024592:	9313      	str	r3, [sp, #76]	; 0x4c
 8024594:	b289      	uxth	r1, r1
 8024596:	b280      	uxth	r0, r0
 8024598:	fb01 f900 	mul.w	r9, r1, r0
 802459c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80245a0:	0109      	lsls	r1, r1, #4
 80245a2:	eba1 0809 	sub.w	r8, r1, r9
 80245a6:	b280      	uxth	r0, r0
 80245a8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80245ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80245ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80245b0:	fa1f f888 	uxth.w	r8, r8
 80245b4:	1a09      	subs	r1, r1, r0
 80245b6:	b289      	uxth	r1, r1
 80245b8:	fb08 f303 	mul.w	r3, r8, r3
 80245bc:	fb01 330e 	mla	r3, r1, lr, r3
 80245c0:	fb00 3305 	mla	r3, r0, r5, r3
 80245c4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80245c6:	fb09 3305 	mla	r3, r9, r5, r3
 80245ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80245ce:	2b00      	cmp	r3, #0
 80245d0:	f000 80d2 	beq.w	8024778 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80245d4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80245d8:	d01b      	beq.n	8024612 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 80245da:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80245de:	fb0e fa0a 	mul.w	sl, lr, sl
 80245e2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80245e6:	fb0e fe02 	mul.w	lr, lr, r2
 80245ea:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80245ee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80245f2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80245f6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80245fa:	4452      	add	r2, sl
 80245fc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024600:	0a12      	lsrs	r2, r2, #8
 8024602:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024606:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802460a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802460e:	ea42 020c 	orr.w	r2, r2, ip
 8024612:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024614:	2dff      	cmp	r5, #255	; 0xff
 8024616:	d021      	beq.n	802465c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8024618:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802461a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802461e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024620:	fb05 fb0b 	mul.w	fp, r5, fp
 8024624:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024626:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802462a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802462c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024630:	fb05 fa0a 	mul.w	sl, r5, sl
 8024634:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024638:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802463c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024640:	44de      	add	lr, fp
 8024642:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024646:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802464a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802464e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024652:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024656:	ea4e 050a 	orr.w	r5, lr, sl
 802465a:	950b      	str	r5, [sp, #44]	; 0x2c
 802465c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802465e:	2dff      	cmp	r5, #255	; 0xff
 8024660:	d021      	beq.n	80246a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8024662:	9d08      	ldr	r5, [sp, #32]
 8024664:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024668:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802466a:	fb05 fb0b 	mul.w	fp, r5, fp
 802466e:	9d08      	ldr	r5, [sp, #32]
 8024670:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8024674:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024676:	fb05 fa0e 	mul.w	sl, r5, lr
 802467a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802467e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024682:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024686:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802468a:	44de      	add	lr, fp
 802468c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024690:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024694:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024698:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802469c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80246a0:	ea4e 050a 	orr.w	r5, lr, sl
 80246a4:	9508      	str	r5, [sp, #32]
 80246a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80246a8:	2dff      	cmp	r5, #255	; 0xff
 80246aa:	d021      	beq.n	80246f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80246ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80246ae:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80246b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80246b4:	fb05 fb0b 	mul.w	fp, r5, fp
 80246b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80246ba:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80246be:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80246c0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80246c4:	fb05 fa0a 	mul.w	sl, r5, sl
 80246c8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246cc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80246d0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80246d4:	44de      	add	lr, fp
 80246d6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80246da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80246ea:	ea4e 050a 	orr.w	r5, lr, sl
 80246ee:	950c      	str	r5, [sp, #48]	; 0x30
 80246f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80246f2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80246f6:	9d08      	ldr	r5, [sp, #32]
 80246f8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80246fc:	fb08 fc0c 	mul.w	ip, r8, ip
 8024700:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024704:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024708:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802470a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802470e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024712:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024714:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024718:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802471c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024720:	fb08 f80e 	mul.w	r8, r8, lr
 8024724:	fb01 8202 	mla	r2, r1, r2, r8
 8024728:	9908      	ldr	r1, [sp, #32]
 802472a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802472e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024730:	fb00 220a 	mla	r2, r0, sl, r2
 8024734:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8024738:	fb09 2900 	mla	r9, r9, r0, r2
 802473c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024740:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024744:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024748:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802474c:	ea4c 0c09 	orr.w	ip, ip, r9
 8024750:	2bff      	cmp	r3, #255	; 0xff
 8024752:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8024756:	f040 8091 	bne.w	802487c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802475a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802475e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8024762:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024766:	f022 0207 	bic.w	r2, r2, #7
 802476a:	431a      	orrs	r2, r3
 802476c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8024770:	ea4c 0c02 	orr.w	ip, ip, r2
 8024774:	f8a7 c000 	strh.w	ip, [r7]
 8024778:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802477a:	441c      	add	r4, r3
 802477c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802477e:	441e      	add	r6, r3
 8024780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024782:	3b01      	subs	r3, #1
 8024784:	3702      	adds	r7, #2
 8024786:	9317      	str	r3, [sp, #92]	; 0x5c
 8024788:	e6c0      	b.n	802450c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802478a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802478c:	441c      	add	r4, r3
 802478e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024790:	441e      	add	r6, r3
 8024792:	9b07      	ldr	r3, [sp, #28]
 8024794:	3b01      	subs	r3, #1
 8024796:	9307      	str	r3, [sp, #28]
 8024798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802479a:	3302      	adds	r3, #2
 802479c:	930a      	str	r3, [sp, #40]	; 0x28
 802479e:	e695      	b.n	80244cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80247a0:	d024      	beq.n	80247ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80247a2:	9b07      	ldr	r3, [sp, #28]
 80247a4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80247a6:	3b01      	subs	r3, #1
 80247a8:	fb00 4003 	mla	r0, r0, r3, r4
 80247ac:	1400      	asrs	r0, r0, #16
 80247ae:	f53f aeaa 	bmi.w	8024506 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80247b2:	3901      	subs	r1, #1
 80247b4:	4288      	cmp	r0, r1
 80247b6:	f6bf aea6 	bge.w	8024506 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80247ba:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80247bc:	fb01 6303 	mla	r3, r1, r3, r6
 80247c0:	141b      	asrs	r3, r3, #16
 80247c2:	f53f aea0 	bmi.w	8024506 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80247c6:	3a01      	subs	r2, #1
 80247c8:	4293      	cmp	r3, r2
 80247ca:	f6bf ae9c 	bge.w	8024506 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80247ce:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80247d2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80247d6:	f1bb 0f00 	cmp.w	fp, #0
 80247da:	f300 809a 	bgt.w	8024912 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80247de:	9b07      	ldr	r3, [sp, #28]
 80247e0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80247e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80247e6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80247ea:	930a      	str	r3, [sp, #40]	; 0x28
 80247ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80247ee:	2b00      	cmp	r3, #0
 80247f0:	f340 81eb 	ble.w	8024bca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 80247f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80247f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80247fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024800:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024802:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024806:	ee31 1a05 	vadd.f32	s2, s2, s10
 802480a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802480e:	eef0 6a62 	vmov.f32	s13, s5
 8024812:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024816:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802481a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802481e:	ee16 4a90 	vmov	r4, s13
 8024822:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024826:	eef0 6a43 	vmov.f32	s13, s6
 802482a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802482e:	ee12 2a90 	vmov	r2, s5
 8024832:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024836:	fb92 f3f3 	sdiv	r3, r2, r3
 802483a:	ee13 2a10 	vmov	r2, s6
 802483e:	9327      	str	r3, [sp, #156]	; 0x9c
 8024840:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024842:	fb92 f3f3 	sdiv	r3, r2, r3
 8024846:	9328      	str	r3, [sp, #160]	; 0xa0
 8024848:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802484a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802484c:	3b01      	subs	r3, #1
 802484e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024852:	9316      	str	r3, [sp, #88]	; 0x58
 8024854:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024856:	bf08      	it	eq
 8024858:	4613      	moveq	r3, r2
 802485a:	ee16 6a90 	vmov	r6, s13
 802485e:	9307      	str	r3, [sp, #28]
 8024860:	eeb0 3a67 	vmov.f32	s6, s15
 8024864:	eef0 2a47 	vmov.f32	s5, s14
 8024868:	e622      	b.n	80244b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802486a:	2800      	cmp	r0, #0
 802486c:	f43f ae92 	beq.w	8024594 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024870:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8024874:	9308      	str	r3, [sp, #32]
 8024876:	0e1b      	lsrs	r3, r3, #24
 8024878:	9310      	str	r3, [sp, #64]	; 0x40
 802487a:	e68b      	b.n	8024594 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802487c:	8839      	ldrh	r1, [r7, #0]
 802487e:	4dd4      	ldr	r5, [pc, #848]	; (8024bd0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8024880:	43db      	mvns	r3, r3
 8024882:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8024886:	fa5f f883 	uxtb.w	r8, r3
 802488a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802488e:	fb0e fe08 	mul.w	lr, lr, r8
 8024892:	10c8      	asrs	r0, r1, #3
 8024894:	00cb      	lsls	r3, r1, #3
 8024896:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802489a:	f10e 0101 	add.w	r1, lr, #1
 802489e:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80248a2:	fb00 f008 	mul.w	r0, r0, r8
 80248a6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80248aa:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80248ae:	f100 0e01 	add.w	lr, r0, #1
 80248b2:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80248b6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80248ba:	b2db      	uxtb	r3, r3
 80248bc:	b2c9      	uxtb	r1, r1
 80248be:	00d2      	lsls	r2, r2, #3
 80248c0:	fb03 f308 	mul.w	r3, r3, r8
 80248c4:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80248c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80248cc:	430a      	orrs	r2, r1
 80248ce:	1c59      	adds	r1, r3, #1
 80248d0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80248d4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80248d8:	e748      	b.n	802476c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80248da:	f112 0801 	adds.w	r8, r2, #1
 80248de:	f53f af4b 	bmi.w	8024778 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80248e2:	4543      	cmp	r3, r8
 80248e4:	f6ff af48 	blt.w	8024778 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80248e8:	f11c 0801 	adds.w	r8, ip, #1
 80248ec:	f53f af44 	bmi.w	8024778 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80248f0:	45c6      	cmp	lr, r8
 80248f2:	f6ff af41 	blt.w	8024778 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80248f6:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80248fa:	fa0f f28e 	sxth.w	r2, lr
 80248fe:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024902:	9200      	str	r2, [sp, #0]
 8024904:	b21b      	sxth	r3, r3
 8024906:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024908:	9819      	ldr	r0, [sp, #100]	; 0x64
 802490a:	4639      	mov	r1, r7
 802490c:	f7ff fc87 	bl	802421e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8024910:	e732      	b.n	8024778 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024912:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024914:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024916:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802491a:	1421      	asrs	r1, r4, #16
 802491c:	1433      	asrs	r3, r6, #16
 802491e:	fb07 1303 	mla	r3, r7, r3, r1
 8024922:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024924:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8024928:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802492c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024930:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024934:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024938:	2a00      	cmp	r2, #0
 802493a:	f000 8107 	beq.w	8024b4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c8>
 802493e:	684d      	ldr	r5, [r1, #4]
 8024940:	950d      	str	r5, [sp, #52]	; 0x34
 8024942:	0e2d      	lsrs	r5, r5, #24
 8024944:	9514      	str	r5, [sp, #80]	; 0x50
 8024946:	b178      	cbz	r0, 8024968 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024948:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802494c:	3f01      	subs	r7, #1
 802494e:	00bf      	lsls	r7, r7, #2
 8024950:	3704      	adds	r7, #4
 8024952:	eb01 0e07 	add.w	lr, r1, r7
 8024956:	59c9      	ldr	r1, [r1, r7]
 8024958:	9109      	str	r1, [sp, #36]	; 0x24
 802495a:	0e09      	lsrs	r1, r1, #24
 802495c:	9111      	str	r1, [sp, #68]	; 0x44
 802495e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8024962:	910e      	str	r1, [sp, #56]	; 0x38
 8024964:	0e09      	lsrs	r1, r1, #24
 8024966:	9115      	str	r1, [sp, #84]	; 0x54
 8024968:	b292      	uxth	r2, r2
 802496a:	b280      	uxth	r0, r0
 802496c:	fb02 f900 	mul.w	r9, r2, r0
 8024970:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024974:	0112      	lsls	r2, r2, #4
 8024976:	eba2 0e09 	sub.w	lr, r2, r9
 802497a:	b280      	uxth	r0, r0
 802497c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024980:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024982:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024984:	fa1f fe8e 	uxth.w	lr, lr
 8024988:	1a09      	subs	r1, r1, r0
 802498a:	b289      	uxth	r1, r1
 802498c:	fb0e f202 	mul.w	r2, lr, r2
 8024990:	fb01 220c 	mla	r2, r1, ip, r2
 8024994:	fb00 2205 	mla	r2, r0, r5, r2
 8024998:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802499a:	fb09 2205 	mla	r2, r9, r5, r2
 802499e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80249a2:	2a00      	cmp	r2, #0
 80249a4:	f000 80c9 	beq.w	8024b3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 80249a8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80249ac:	d019      	beq.n	80249e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80249ae:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80249b2:	fb0c fa0a 	mul.w	sl, ip, sl
 80249b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80249ba:	fb0c fc03 	mul.w	ip, ip, r3
 80249be:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80249c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80249c6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80249ca:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80249ce:	4453      	add	r3, sl
 80249d0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80249d4:	0a1b      	lsrs	r3, r3, #8
 80249d6:	0a3f      	lsrs	r7, r7, #8
 80249d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80249dc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80249e0:	433b      	orrs	r3, r7
 80249e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80249e4:	2dff      	cmp	r5, #255	; 0xff
 80249e6:	d020      	beq.n	8024a2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 80249e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80249ea:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80249ee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80249f0:	436f      	muls	r7, r5
 80249f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80249f4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80249f8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80249fa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80249fe:	fb05 fa0a 	mul.w	sl, r5, sl
 8024a02:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024a06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a0a:	44bc      	add	ip, r7
 8024a0c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024a10:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024a14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a24:	ea4c 050a 	orr.w	r5, ip, sl
 8024a28:	950d      	str	r5, [sp, #52]	; 0x34
 8024a2a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a2c:	2dff      	cmp	r5, #255	; 0xff
 8024a2e:	d020      	beq.n	8024a72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8024a30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024a32:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024a36:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a38:	436f      	muls	r7, r5
 8024a3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024a3c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024a40:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a42:	fb05 fa0c 	mul.w	sl, r5, ip
 8024a46:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024a4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a4e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024a52:	44bc      	add	ip, r7
 8024a54:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024a58:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024a5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a6c:	ea4c 050a 	orr.w	r5, ip, sl
 8024a70:	9509      	str	r5, [sp, #36]	; 0x24
 8024a72:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024a74:	2dff      	cmp	r5, #255	; 0xff
 8024a76:	d020      	beq.n	8024aba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8024a78:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024a7a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024a7e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024a80:	436f      	muls	r7, r5
 8024a82:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024a84:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024a88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024a8a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024a8e:	fb05 fa0a 	mul.w	sl, r5, sl
 8024a92:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024a96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a9a:	44bc      	add	ip, r7
 8024a9c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024aa0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024aa4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024aa8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024aac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ab0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024ab4:	ea4c 050a 	orr.w	r5, ip, sl
 8024ab8:	950e      	str	r5, [sp, #56]	; 0x38
 8024aba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024abc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024ac0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024ac2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024ac6:	fb0e f707 	mul.w	r7, lr, r7
 8024aca:	fb01 770c 	mla	r7, r1, ip, r7
 8024ace:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024ad2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024ad4:	fb00 770c 	mla	r7, r0, ip, r7
 8024ad8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024adc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024ade:	fb09 770c 	mla	r7, r9, ip, r7
 8024ae2:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024ae6:	fb0e fe0c 	mul.w	lr, lr, ip
 8024aea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024aee:	fb01 e303 	mla	r3, r1, r3, lr
 8024af2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024af4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024af8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024afa:	fb00 330a 	mla	r3, r0, sl, r3
 8024afe:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024b02:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024b06:	0a3f      	lsrs	r7, r7, #8
 8024b08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b0c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024b10:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024b14:	ea47 070c 	orr.w	r7, r7, ip
 8024b18:	2aff      	cmp	r2, #255	; 0xff
 8024b1a:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8024b1e:	d11e      	bne.n	8024b5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 8024b20:	097a      	lsrs	r2, r7, #5
 8024b22:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8024b26:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024b2a:	f023 0307 	bic.w	r3, r3, #7
 8024b2e:	4313      	orrs	r3, r2
 8024b30:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024b34:	431f      	orrs	r7, r3
 8024b36:	f8a8 7000 	strh.w	r7, [r8]
 8024b3a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024b3c:	441c      	add	r4, r3
 8024b3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024b40:	f108 0802 	add.w	r8, r8, #2
 8024b44:	441e      	add	r6, r3
 8024b46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024b4a:	e644      	b.n	80247d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024b4c:	2800      	cmp	r0, #0
 8024b4e:	f43f af0b 	beq.w	8024968 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024b52:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024b56:	9109      	str	r1, [sp, #36]	; 0x24
 8024b58:	0e09      	lsrs	r1, r1, #24
 8024b5a:	9111      	str	r1, [sp, #68]	; 0x44
 8024b5c:	e704      	b.n	8024968 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024b5e:	f8b8 1000 	ldrh.w	r1, [r8]
 8024b62:	43d2      	mvns	r2, r2
 8024b64:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8024b68:	fa5f fe82 	uxtb.w	lr, r2
 8024b6c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024b70:	fb0c fc0e 	mul.w	ip, ip, lr
 8024b74:	10c8      	asrs	r0, r1, #3
 8024b76:	00ca      	lsls	r2, r1, #3
 8024b78:	f10c 0101 	add.w	r1, ip, #1
 8024b7c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024b80:	0c39      	lsrs	r1, r7, #16
 8024b82:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024b86:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024b8a:	4911      	ldr	r1, [pc, #68]	; (8024bd0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8024b8c:	fb00 f00e 	mul.w	r0, r0, lr
 8024b90:	fa5f fc8c 	uxtb.w	ip, ip
 8024b94:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8024b98:	b2d2      	uxtb	r2, r2
 8024b9a:	1c41      	adds	r1, r0, #1
 8024b9c:	fb02 f20e 	mul.w	r2, r2, lr
 8024ba0:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024ba4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024ba8:	1c51      	adds	r1, r2, #1
 8024baa:	00c0      	lsls	r0, r0, #3
 8024bac:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024bb0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024bb4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024bb8:	ea4c 0c00 	orr.w	ip, ip, r0
 8024bbc:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024bc0:	ea47 0c0c 	orr.w	ip, r7, ip
 8024bc4:	f8a8 c000 	strh.w	ip, [r8]
 8024bc8:	e7b7      	b.n	8024b3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8024bca:	b01b      	add	sp, #108	; 0x6c
 8024bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bd0:	fffff800 	.word	0xfffff800

08024bd4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8024bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024bd8:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8024bdc:	2d00      	cmp	r5, #0
 8024bde:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8024be2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024be6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8024bea:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024bee:	fb05 0e03 	mla	lr, r5, r3, r0
 8024bf2:	f2c0 808c 	blt.w	8024d0e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024bf6:	45a9      	cmp	r9, r5
 8024bf8:	f340 8089 	ble.w	8024d0e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024bfc:	2800      	cmp	r0, #0
 8024bfe:	f2c0 8084 	blt.w	8024d0a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024c02:	4580      	cmp	r8, r0
 8024c04:	f340 8081 	ble.w	8024d0a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024c08:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024c0c:	f01e 0f01 	tst.w	lr, #1
 8024c10:	5d16      	ldrb	r6, [r2, r4]
 8024c12:	bf0c      	ite	eq
 8024c14:	f006 060f 	andeq.w	r6, r6, #15
 8024c18:	1136      	asrne	r6, r6, #4
 8024c1a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024c1e:	b2f6      	uxtb	r6, r6
 8024c20:	1c44      	adds	r4, r0, #1
 8024c22:	d477      	bmi.n	8024d14 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024c24:	45a0      	cmp	r8, r4
 8024c26:	dd75      	ble.n	8024d14 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024c28:	2f00      	cmp	r7, #0
 8024c2a:	d075      	beq.n	8024d18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8024c2c:	f10e 0a01 	add.w	sl, lr, #1
 8024c30:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8024c34:	f01a 0f01 	tst.w	sl, #1
 8024c38:	5d14      	ldrb	r4, [r2, r4]
 8024c3a:	bf0c      	ite	eq
 8024c3c:	f004 040f 	andeq.w	r4, r4, #15
 8024c40:	1124      	asrne	r4, r4, #4
 8024c42:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024c46:	b2e4      	uxtb	r4, r4
 8024c48:	3501      	adds	r5, #1
 8024c4a:	d469      	bmi.n	8024d20 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024c4c:	45a9      	cmp	r9, r5
 8024c4e:	dd67      	ble.n	8024d20 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024c50:	f1bc 0f00 	cmp.w	ip, #0
 8024c54:	d067      	beq.n	8024d26 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8024c56:	2800      	cmp	r0, #0
 8024c58:	db60      	blt.n	8024d1c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024c5a:	4580      	cmp	r8, r0
 8024c5c:	dd5e      	ble.n	8024d1c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024c5e:	eb03 090e 	add.w	r9, r3, lr
 8024c62:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8024c66:	f019 0f01 	tst.w	r9, #1
 8024c6a:	5d55      	ldrb	r5, [r2, r5]
 8024c6c:	bf0c      	ite	eq
 8024c6e:	f005 050f 	andeq.w	r5, r5, #15
 8024c72:	112d      	asrne	r5, r5, #4
 8024c74:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024c78:	b2ed      	uxtb	r5, r5
 8024c7a:	3001      	adds	r0, #1
 8024c7c:	d456      	bmi.n	8024d2c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024c7e:	4580      	cmp	r8, r0
 8024c80:	dd54      	ble.n	8024d2c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024c82:	2f00      	cmp	r7, #0
 8024c84:	d054      	beq.n	8024d30 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8024c86:	3301      	adds	r3, #1
 8024c88:	449e      	add	lr, r3
 8024c8a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024c8e:	f01e 0f01 	tst.w	lr, #1
 8024c92:	5cd0      	ldrb	r0, [r2, r3]
 8024c94:	bf0c      	ite	eq
 8024c96:	f000 000f 	andeq.w	r0, r0, #15
 8024c9a:	1100      	asrne	r0, r0, #4
 8024c9c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024ca0:	b2c3      	uxtb	r3, r0
 8024ca2:	b2ba      	uxth	r2, r7
 8024ca4:	fa1f fc8c 	uxth.w	ip, ip
 8024ca8:	fb02 f00c 	mul.w	r0, r2, ip
 8024cac:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8024cb0:	0112      	lsls	r2, r2, #4
 8024cb2:	fa1f fc8c 	uxth.w	ip, ip
 8024cb6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8024cba:	1a12      	subs	r2, r2, r0
 8024cbc:	eba7 070c 	sub.w	r7, r7, ip
 8024cc0:	b292      	uxth	r2, r2
 8024cc2:	b2bf      	uxth	r7, r7
 8024cc4:	4362      	muls	r2, r4
 8024cc6:	fb06 2207 	mla	r2, r6, r7, r2
 8024cca:	fb0c 2505 	mla	r5, ip, r5, r2
 8024cce:	fb00 5303 	mla	r3, r0, r3, r5
 8024cd2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024cd6:	b1b3      	cbz	r3, 8024d06 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024cd8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8024cdc:	435a      	muls	r2, r3
 8024cde:	1c53      	adds	r3, r2, #1
 8024ce0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024ce4:	4a2d      	ldr	r2, [pc, #180]	; (8024d9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8024ce6:	121b      	asrs	r3, r3, #8
 8024ce8:	6812      	ldr	r2, [r2, #0]
 8024cea:	2bff      	cmp	r3, #255	; 0xff
 8024cec:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8024cf0:	d120      	bne.n	8024d34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8024cf2:	4b2b      	ldr	r3, [pc, #172]	; (8024da0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8024cf4:	0950      	lsrs	r0, r2, #5
 8024cf6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024cfa:	4033      	ands	r3, r6
 8024cfc:	4318      	orrs	r0, r3
 8024cfe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024d02:	4302      	orrs	r2, r0
 8024d04:	800a      	strh	r2, [r1, #0]
 8024d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024d0a:	2600      	movs	r6, #0
 8024d0c:	e788      	b.n	8024c20 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8024d0e:	2400      	movs	r4, #0
 8024d10:	4626      	mov	r6, r4
 8024d12:	e799      	b.n	8024c48 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024d14:	2400      	movs	r4, #0
 8024d16:	e797      	b.n	8024c48 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024d18:	463c      	mov	r4, r7
 8024d1a:	e795      	b.n	8024c48 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024d1c:	2500      	movs	r5, #0
 8024d1e:	e7ac      	b.n	8024c7a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8024d20:	2300      	movs	r3, #0
 8024d22:	461d      	mov	r5, r3
 8024d24:	e7bd      	b.n	8024ca2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024d26:	4663      	mov	r3, ip
 8024d28:	4665      	mov	r5, ip
 8024d2a:	e7ba      	b.n	8024ca2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024d2c:	2300      	movs	r3, #0
 8024d2e:	e7b8      	b.n	8024ca2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024d30:	463b      	mov	r3, r7
 8024d32:	e7b6      	b.n	8024ca2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024d34:	880d      	ldrh	r5, [r1, #0]
 8024d36:	b29f      	uxth	r7, r3
 8024d38:	122c      	asrs	r4, r5, #8
 8024d3a:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8024d3e:	43db      	mvns	r3, r3
 8024d40:	b2db      	uxtb	r3, r3
 8024d42:	fb10 f007 	smulbb	r0, r0, r7
 8024d46:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024d4a:	fb04 0403 	mla	r4, r4, r3, r0
 8024d4e:	b2f6      	uxtb	r6, r6
 8024d50:	10e8      	asrs	r0, r5, #3
 8024d52:	b2d2      	uxtb	r2, r2
 8024d54:	00ed      	lsls	r5, r5, #3
 8024d56:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024d5a:	fb12 f207 	smulbb	r2, r2, r7
 8024d5e:	fb16 f607 	smulbb	r6, r6, r7
 8024d62:	b2ed      	uxtb	r5, r5
 8024d64:	b2a4      	uxth	r4, r4
 8024d66:	fb00 6603 	mla	r6, r0, r3, r6
 8024d6a:	fb05 2303 	mla	r3, r5, r3, r2
 8024d6e:	b29a      	uxth	r2, r3
 8024d70:	1c63      	adds	r3, r4, #1
 8024d72:	b2b0      	uxth	r0, r6
 8024d74:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024d78:	1c53      	adds	r3, r2, #1
 8024d7a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024d7e:	1c42      	adds	r2, r0, #1
 8024d80:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024d84:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024d88:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024d8c:	0940      	lsrs	r0, r0, #5
 8024d8e:	4323      	orrs	r3, r4
 8024d90:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024d94:	4303      	orrs	r3, r0
 8024d96:	800b      	strh	r3, [r1, #0]
 8024d98:	e7b5      	b.n	8024d06 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024d9a:	bf00      	nop
 8024d9c:	20014620 	.word	0x20014620
 8024da0:	00fff800 	.word	0x00fff800

08024da4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024da8:	b097      	sub	sp, #92	; 0x5c
 8024daa:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8024dae:	9214      	str	r2, [sp, #80]	; 0x50
 8024db0:	9309      	str	r3, [sp, #36]	; 0x24
 8024db2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024db4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8024db8:	910d      	str	r1, [sp, #52]	; 0x34
 8024dba:	930f      	str	r3, [sp, #60]	; 0x3c
 8024dbc:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8024dc0:	9015      	str	r0, [sp, #84]	; 0x54
 8024dc2:	6850      	ldr	r0, [r2, #4]
 8024dc4:	6812      	ldr	r2, [r2, #0]
 8024dc6:	fb00 1303 	mla	r3, r0, r3, r1
 8024dca:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024dce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024dd0:	689b      	ldr	r3, [r3, #8]
 8024dd2:	3301      	adds	r3, #1
 8024dd4:	f023 0301 	bic.w	r3, r3, #1
 8024dd8:	930a      	str	r3, [sp, #40]	; 0x28
 8024dda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024ddc:	681f      	ldr	r7, [r3, #0]
 8024dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024de0:	2b00      	cmp	r3, #0
 8024de2:	dc03      	bgt.n	8024dec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024de4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024de6:	2b00      	cmp	r3, #0
 8024de8:	f340 8287 	ble.w	80252fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8024dec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024dee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024df2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024df6:	1e48      	subs	r0, r1, #1
 8024df8:	f102 3cff 	add.w	ip, r2, #4294967295
 8024dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024dfe:	2b00      	cmp	r3, #0
 8024e00:	f340 80c4 	ble.w	8024f8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024e04:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024e08:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024e0c:	d406      	bmi.n	8024e1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024e0e:	4586      	cmp	lr, r0
 8024e10:	da04      	bge.n	8024e1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024e12:	2b00      	cmp	r3, #0
 8024e14:	db02      	blt.n	8024e1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024e16:	4563      	cmp	r3, ip
 8024e18:	f2c0 80b9 	blt.w	8024f8e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024e1c:	f11e 0e01 	adds.w	lr, lr, #1
 8024e20:	f100 80aa 	bmi.w	8024f78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024e24:	4571      	cmp	r1, lr
 8024e26:	f2c0 80a7 	blt.w	8024f78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024e2a:	3301      	adds	r3, #1
 8024e2c:	f100 80a4 	bmi.w	8024f78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024e30:	429a      	cmp	r2, r3
 8024e32:	f2c0 80a1 	blt.w	8024f78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8024e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e38:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8024e3c:	930e      	str	r3, [sp, #56]	; 0x38
 8024e3e:	46c8      	mov	r8, r9
 8024e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024e42:	2b00      	cmp	r3, #0
 8024e44:	f340 80c3 	ble.w	8024fce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024e48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024e4a:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024e4e:	1423      	asrs	r3, r4, #16
 8024e50:	ea4f 4026 	mov.w	r0, r6, asr #16
 8024e54:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024e58:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024e5c:	f100 814d 	bmi.w	80250fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024e60:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024e64:	455b      	cmp	r3, fp
 8024e66:	f280 8148 	bge.w	80250fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024e6a:	2800      	cmp	r0, #0
 8024e6c:	f2c0 8145 	blt.w	80250fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024e70:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024e74:	4558      	cmp	r0, fp
 8024e76:	f280 8140 	bge.w	80250fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024e7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024e7c:	fb00 3305 	mla	r3, r0, r5, r3
 8024e80:	0858      	lsrs	r0, r3, #1
 8024e82:	07dd      	lsls	r5, r3, #31
 8024e84:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024e88:	bf54      	ite	pl
 8024e8a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024e8e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024e92:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024e96:	fa5f fc8c 	uxtb.w	ip, ip
 8024e9a:	2a00      	cmp	r2, #0
 8024e9c:	f000 80db 	beq.w	8025056 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 8024ea0:	1c58      	adds	r0, r3, #1
 8024ea2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024ea6:	07c0      	lsls	r0, r0, #31
 8024ea8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024eac:	bf54      	ite	pl
 8024eae:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024eb2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024eb6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024eba:	fa5f f08e 	uxtb.w	r0, lr
 8024ebe:	9010      	str	r0, [sp, #64]	; 0x40
 8024ec0:	b1c9      	cbz	r1, 8024ef6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8024ec2:	4453      	add	r3, sl
 8024ec4:	0858      	lsrs	r0, r3, #1
 8024ec6:	07dd      	lsls	r5, r3, #31
 8024ec8:	5c38      	ldrb	r0, [r7, r0]
 8024eca:	bf54      	ite	pl
 8024ecc:	f000 000f 	andpl.w	r0, r0, #15
 8024ed0:	1100      	asrmi	r0, r0, #4
 8024ed2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024ed6:	3301      	adds	r3, #1
 8024ed8:	b2c0      	uxtb	r0, r0
 8024eda:	900b      	str	r0, [sp, #44]	; 0x2c
 8024edc:	0858      	lsrs	r0, r3, #1
 8024ede:	07dd      	lsls	r5, r3, #31
 8024ee0:	f817 e000 	ldrb.w	lr, [r7, r0]
 8024ee4:	bf54      	ite	pl
 8024ee6:	f00e 030f 	andpl.w	r3, lr, #15
 8024eea:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8024eee:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024ef2:	b2db      	uxtb	r3, r3
 8024ef4:	9311      	str	r3, [sp, #68]	; 0x44
 8024ef6:	b292      	uxth	r2, r2
 8024ef8:	b289      	uxth	r1, r1
 8024efa:	fb02 f301 	mul.w	r3, r2, r1
 8024efe:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024f02:	0112      	lsls	r2, r2, #4
 8024f04:	b289      	uxth	r1, r1
 8024f06:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024f0a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024f0c:	1ad2      	subs	r2, r2, r3
 8024f0e:	1a40      	subs	r0, r0, r1
 8024f10:	b292      	uxth	r2, r2
 8024f12:	436a      	muls	r2, r5
 8024f14:	b280      	uxth	r0, r0
 8024f16:	fb0c 2c00 	mla	ip, ip, r0, r2
 8024f1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024f1c:	fb01 c102 	mla	r1, r1, r2, ip
 8024f20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024f22:	fb03 1302 	mla	r3, r3, r2, r1
 8024f26:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024f2a:	b1db      	cbz	r3, 8024f64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8024f2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024f2e:	4353      	muls	r3, r2
 8024f30:	1c5a      	adds	r2, r3, #1
 8024f32:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024f36:	4ac6      	ldr	r2, [pc, #792]	; (8025250 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8024f38:	121b      	asrs	r3, r3, #8
 8024f3a:	6812      	ldr	r2, [r2, #0]
 8024f3c:	2bff      	cmp	r3, #255	; 0xff
 8024f3e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024f42:	f040 8099 	bne.w	8025078 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8024f46:	0953      	lsrs	r3, r2, #5
 8024f48:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8024f4c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024f50:	f02c 0c07 	bic.w	ip, ip, #7
 8024f54:	ea43 0c0c 	orr.w	ip, r3, ip
 8024f58:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024f5c:	ea4c 0202 	orr.w	r2, ip, r2
 8024f60:	f8a8 2000 	strh.w	r2, [r8]
 8024f64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024f66:	441c      	add	r4, r3
 8024f68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024f6a:	441e      	add	r6, r3
 8024f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024f6e:	3b01      	subs	r3, #1
 8024f70:	f108 0802 	add.w	r8, r8, #2
 8024f74:	930e      	str	r3, [sp, #56]	; 0x38
 8024f76:	e763      	b.n	8024e40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024f78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024f7a:	441c      	add	r4, r3
 8024f7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024f7e:	441e      	add	r6, r3
 8024f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f82:	3b01      	subs	r3, #1
 8024f84:	9309      	str	r3, [sp, #36]	; 0x24
 8024f86:	f109 0902 	add.w	r9, r9, #2
 8024f8a:	e737      	b.n	8024dfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024f8c:	d024      	beq.n	8024fd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f90:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024f92:	3b01      	subs	r3, #1
 8024f94:	fb00 4003 	mla	r0, r0, r3, r4
 8024f98:	1400      	asrs	r0, r0, #16
 8024f9a:	f53f af4c 	bmi.w	8024e36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024f9e:	3901      	subs	r1, #1
 8024fa0:	4288      	cmp	r0, r1
 8024fa2:	f6bf af48 	bge.w	8024e36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024fa6:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024fa8:	fb01 6303 	mla	r3, r1, r3, r6
 8024fac:	141b      	asrs	r3, r3, #16
 8024fae:	f53f af42 	bmi.w	8024e36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024fb2:	3a01      	subs	r2, #1
 8024fb4:	4293      	cmp	r3, r2
 8024fb6:	f6bf af3e 	bge.w	8024e36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024fba:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8024fbe:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024fc2:	930e      	str	r3, [sp, #56]	; 0x38
 8024fc4:	46c8      	mov	r8, r9
 8024fc6:	f1bb 0f00 	cmp.w	fp, #0
 8024fca:	f300 80b7 	bgt.w	802513c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8024fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fd0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024fd4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024fda:	2b00      	cmp	r3, #0
 8024fdc:	f340 818d 	ble.w	80252fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8024fe0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024fe8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024fec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024fee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024ff2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024ff6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024ffa:	eef0 6a62 	vmov.f32	s13, s5
 8024ffe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025002:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025006:	ee77 2a62 	vsub.f32	s5, s14, s5
 802500a:	ee16 4a90 	vmov	r4, s13
 802500e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025012:	eef0 6a43 	vmov.f32	s13, s6
 8025016:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802501a:	ee12 2a90 	vmov	r2, s5
 802501e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025022:	fb92 f3f3 	sdiv	r3, r2, r3
 8025026:	ee13 2a10 	vmov	r2, s6
 802502a:	9323      	str	r3, [sp, #140]	; 0x8c
 802502c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802502e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025032:	9324      	str	r3, [sp, #144]	; 0x90
 8025034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025036:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025038:	3b01      	subs	r3, #1
 802503a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802503e:	930d      	str	r3, [sp, #52]	; 0x34
 8025040:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025042:	bf08      	it	eq
 8025044:	4613      	moveq	r3, r2
 8025046:	ee16 6a90 	vmov	r6, s13
 802504a:	9309      	str	r3, [sp, #36]	; 0x24
 802504c:	eeb0 3a67 	vmov.f32	s6, s15
 8025050:	eef0 2a47 	vmov.f32	s5, s14
 8025054:	e6c3      	b.n	8024dde <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025056:	2900      	cmp	r1, #0
 8025058:	f43f af4d 	beq.w	8024ef6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802505c:	eb0a 0003 	add.w	r0, sl, r3
 8025060:	0843      	lsrs	r3, r0, #1
 8025062:	07c0      	lsls	r0, r0, #31
 8025064:	5cfb      	ldrb	r3, [r7, r3]
 8025066:	bf54      	ite	pl
 8025068:	f003 030f 	andpl.w	r3, r3, #15
 802506c:	111b      	asrmi	r3, r3, #4
 802506e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025072:	b2db      	uxtb	r3, r3
 8025074:	930b      	str	r3, [sp, #44]	; 0x2c
 8025076:	e73e      	b.n	8024ef6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8025078:	f8b8 e000 	ldrh.w	lr, [r8]
 802507c:	fa1f fb83 	uxth.w	fp, r3
 8025080:	ea4f 202e 	mov.w	r0, lr, asr #8
 8025084:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8025088:	43db      	mvns	r3, r3
 802508a:	b2db      	uxtb	r3, r3
 802508c:	fb11 f10b 	smulbb	r1, r1, fp
 8025090:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025094:	fb00 1003 	mla	r0, r0, r3, r1
 8025098:	fa5f fc8c 	uxtb.w	ip, ip
 802509c:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80250a0:	b2d2      	uxtb	r2, r2
 80250a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80250a6:	b280      	uxth	r0, r0
 80250a8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80250ac:	fb1c fc0b 	smulbb	ip, ip, fp
 80250b0:	fa5f fe8e 	uxtb.w	lr, lr
 80250b4:	fb12 fb0b 	smulbb	fp, r2, fp
 80250b8:	fb01 cc03 	mla	ip, r1, r3, ip
 80250bc:	fb0e bb03 	mla	fp, lr, r3, fp
 80250c0:	1c43      	adds	r3, r0, #1
 80250c2:	fa1f fc8c 	uxth.w	ip, ip
 80250c6:	fa1f fb8b 	uxth.w	fp, fp
 80250ca:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80250ce:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80250d2:	f10c 0101 	add.w	r1, ip, #1
 80250d6:	f10b 0001 	add.w	r0, fp, #1
 80250da:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80250de:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80250e2:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80250e6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80250ea:	4318      	orrs	r0, r3
 80250ec:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80250f0:	ea40 000c 	orr.w	r0, r0, ip
 80250f4:	f8a8 0000 	strh.w	r0, [r8]
 80250f8:	e734      	b.n	8024f64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80250fa:	f113 0b01 	adds.w	fp, r3, #1
 80250fe:	f53f af31 	bmi.w	8024f64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8025102:	45dc      	cmp	ip, fp
 8025104:	f6ff af2e 	blt.w	8024f64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8025108:	f110 0b01 	adds.w	fp, r0, #1
 802510c:	f53f af2a 	bmi.w	8024f64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8025110:	45de      	cmp	lr, fp
 8025112:	f6ff af27 	blt.w	8024f64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8025116:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025118:	9302      	str	r3, [sp, #8]
 802511a:	fa0f f38e 	sxth.w	r3, lr
 802511e:	9301      	str	r3, [sp, #4]
 8025120:	fa0f f38c 	sxth.w	r3, ip
 8025124:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025128:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802512c:	9300      	str	r3, [sp, #0]
 802512e:	463a      	mov	r2, r7
 8025130:	4653      	mov	r3, sl
 8025132:	4641      	mov	r1, r8
 8025134:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025136:	f7ff fd4d 	bl	8024bd4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802513a:	e713      	b.n	8024f64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802513c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802513e:	1422      	asrs	r2, r4, #16
 8025140:	1433      	asrs	r3, r6, #16
 8025142:	fb05 2303 	mla	r3, r5, r3, r2
 8025146:	085a      	lsrs	r2, r3, #1
 8025148:	07dd      	lsls	r5, r3, #31
 802514a:	5cba      	ldrb	r2, [r7, r2]
 802514c:	bf54      	ite	pl
 802514e:	f002 020f 	andpl.w	r2, r2, #15
 8025152:	1112      	asrmi	r2, r2, #4
 8025154:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025158:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802515c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025160:	b2d2      	uxtb	r2, r2
 8025162:	2900      	cmp	r1, #0
 8025164:	d076      	beq.n	8025254 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025166:	f103 0e01 	add.w	lr, r3, #1
 802516a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802516e:	f01e 0f01 	tst.w	lr, #1
 8025172:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025176:	bf0c      	ite	eq
 8025178:	f00c 0c0f 	andeq.w	ip, ip, #15
 802517c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8025180:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025184:	fa5f f58c 	uxtb.w	r5, ip
 8025188:	9512      	str	r5, [sp, #72]	; 0x48
 802518a:	b300      	cbz	r0, 80251ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802518c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802518e:	442b      	add	r3, r5
 8025190:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025194:	07dd      	lsls	r5, r3, #31
 8025196:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802519a:	bf54      	ite	pl
 802519c:	f00c 0c0f 	andpl.w	ip, ip, #15
 80251a0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80251a4:	3301      	adds	r3, #1
 80251a6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80251aa:	fa5f f58c 	uxtb.w	r5, ip
 80251ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80251b2:	950c      	str	r5, [sp, #48]	; 0x30
 80251b4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80251b8:	07dd      	lsls	r5, r3, #31
 80251ba:	bf54      	ite	pl
 80251bc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80251c0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80251c4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80251c8:	fa5f f38c 	uxtb.w	r3, ip
 80251cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80251ce:	b289      	uxth	r1, r1
 80251d0:	b280      	uxth	r0, r0
 80251d2:	fb01 f300 	mul.w	r3, r1, r0
 80251d6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80251da:	0109      	lsls	r1, r1, #4
 80251dc:	b280      	uxth	r0, r0
 80251de:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80251e2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80251e4:	1ac9      	subs	r1, r1, r3
 80251e6:	ebac 0c00 	sub.w	ip, ip, r0
 80251ea:	b289      	uxth	r1, r1
 80251ec:	4369      	muls	r1, r5
 80251ee:	fa1f fc8c 	uxth.w	ip, ip
 80251f2:	fb02 120c 	mla	r2, r2, ip, r1
 80251f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80251f8:	fb00 2001 	mla	r0, r0, r1, r2
 80251fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80251fe:	fb03 0302 	mla	r3, r3, r2, r0
 8025202:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025206:	b1d3      	cbz	r3, 802523e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8025208:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802520a:	4353      	muls	r3, r2
 802520c:	1c5a      	adds	r2, r3, #1
 802520e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025212:	4a0f      	ldr	r2, [pc, #60]	; (8025250 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8025214:	121b      	asrs	r3, r3, #8
 8025216:	6812      	ldr	r2, [r2, #0]
 8025218:	2bff      	cmp	r3, #255	; 0xff
 802521a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802521e:	d12d      	bne.n	802527c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025220:	0953      	lsrs	r3, r2, #5
 8025222:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8025226:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802522a:	f02c 0c07 	bic.w	ip, ip, #7
 802522e:	ea43 0c0c 	orr.w	ip, r3, ip
 8025232:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025236:	ea4c 0202 	orr.w	r2, ip, r2
 802523a:	f8a8 2000 	strh.w	r2, [r8]
 802523e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025240:	441c      	add	r4, r3
 8025242:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025244:	f108 0802 	add.w	r8, r8, #2
 8025248:	441e      	add	r6, r3
 802524a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802524e:	e6ba      	b.n	8024fc6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8025250:	20014620 	.word	0x20014620
 8025254:	2800      	cmp	r0, #0
 8025256:	d0ba      	beq.n	80251ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8025258:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802525a:	442b      	add	r3, r5
 802525c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025260:	07db      	lsls	r3, r3, #31
 8025262:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025266:	bf54      	ite	pl
 8025268:	f00c 0c0f 	andpl.w	ip, ip, #15
 802526c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025270:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025274:	fa5f f38c 	uxtb.w	r3, ip
 8025278:	930c      	str	r3, [sp, #48]	; 0x30
 802527a:	e7a8      	b.n	80251ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802527c:	f8b8 e000 	ldrh.w	lr, [r8]
 8025280:	fa1f fa83 	uxth.w	sl, r3
 8025284:	ea4f 202e 	mov.w	r0, lr, asr #8
 8025288:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802528c:	43db      	mvns	r3, r3
 802528e:	b2db      	uxtb	r3, r3
 8025290:	fb11 f10a 	smulbb	r1, r1, sl
 8025294:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025298:	fb00 1003 	mla	r0, r0, r3, r1
 802529c:	b2d2      	uxtb	r2, r2
 802529e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80252a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80252a6:	fa5f fe8e 	uxtb.w	lr, lr
 80252aa:	fb12 f20a 	smulbb	r2, r2, sl
 80252ae:	fb0e 2203 	mla	r2, lr, r3, r2
 80252b2:	fa5f fc8c 	uxtb.w	ip, ip
 80252b6:	b280      	uxth	r0, r0
 80252b8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80252bc:	b292      	uxth	r2, r2
 80252be:	fb1c fc0a 	smulbb	ip, ip, sl
 80252c2:	fb01 cc03 	mla	ip, r1, r3, ip
 80252c6:	1c43      	adds	r3, r0, #1
 80252c8:	1c51      	adds	r1, r2, #1
 80252ca:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80252ce:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80252d2:	fa1f fc8c 	uxth.w	ip, ip
 80252d6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80252da:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80252de:	4308      	orrs	r0, r1
 80252e0:	f10c 0101 	add.w	r1, ip, #1
 80252e4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80252e8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80252ec:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80252f0:	ea40 000c 	orr.w	r0, r0, ip
 80252f4:	f8a8 0000 	strh.w	r0, [r8]
 80252f8:	e7a1      	b.n	802523e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 80252fa:	b017      	add	sp, #92	; 0x5c
 80252fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025300 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8025300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025304:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8025308:	2d00      	cmp	r5, #0
 802530a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802530e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025312:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8025316:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802531a:	fb05 0e03 	mla	lr, r5, r3, r0
 802531e:	f2c0 80b0 	blt.w	8025482 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8025322:	45a9      	cmp	r9, r5
 8025324:	f340 80ad 	ble.w	8025482 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8025328:	2800      	cmp	r0, #0
 802532a:	f2c0 80a8 	blt.w	802547e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802532e:	4580      	cmp	r8, r0
 8025330:	f340 80a5 	ble.w	802547e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8025334:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8025338:	f01e 0f01 	tst.w	lr, #1
 802533c:	5d16      	ldrb	r6, [r2, r4]
 802533e:	bf0c      	ite	eq
 8025340:	f006 060f 	andeq.w	r6, r6, #15
 8025344:	1136      	asrne	r6, r6, #4
 8025346:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802534a:	b2f6      	uxtb	r6, r6
 802534c:	1c44      	adds	r4, r0, #1
 802534e:	f100 809b 	bmi.w	8025488 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8025352:	45a0      	cmp	r8, r4
 8025354:	f340 8098 	ble.w	8025488 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8025358:	2f00      	cmp	r7, #0
 802535a:	f000 8097 	beq.w	802548c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802535e:	f10e 0a01 	add.w	sl, lr, #1
 8025362:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8025366:	f01a 0f01 	tst.w	sl, #1
 802536a:	5d14      	ldrb	r4, [r2, r4]
 802536c:	bf0c      	ite	eq
 802536e:	f004 040f 	andeq.w	r4, r4, #15
 8025372:	1124      	asrne	r4, r4, #4
 8025374:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025378:	b2e4      	uxtb	r4, r4
 802537a:	3501      	adds	r5, #1
 802537c:	f100 808a 	bmi.w	8025494 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8025380:	45a9      	cmp	r9, r5
 8025382:	f340 8087 	ble.w	8025494 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8025386:	f1bc 0f00 	cmp.w	ip, #0
 802538a:	f000 8086 	beq.w	802549a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802538e:	2800      	cmp	r0, #0
 8025390:	db7e      	blt.n	8025490 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8025392:	4580      	cmp	r8, r0
 8025394:	dd7c      	ble.n	8025490 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8025396:	eb03 090e 	add.w	r9, r3, lr
 802539a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802539e:	f019 0f01 	tst.w	r9, #1
 80253a2:	5d55      	ldrb	r5, [r2, r5]
 80253a4:	bf0c      	ite	eq
 80253a6:	f005 050f 	andeq.w	r5, r5, #15
 80253aa:	112d      	asrne	r5, r5, #4
 80253ac:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80253b0:	b2ed      	uxtb	r5, r5
 80253b2:	3001      	adds	r0, #1
 80253b4:	d474      	bmi.n	80254a0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80253b6:	4580      	cmp	r8, r0
 80253b8:	dd72      	ble.n	80254a0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80253ba:	2f00      	cmp	r7, #0
 80253bc:	d072      	beq.n	80254a4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 80253be:	3301      	adds	r3, #1
 80253c0:	449e      	add	lr, r3
 80253c2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80253c6:	f01e 0f01 	tst.w	lr, #1
 80253ca:	5cd0      	ldrb	r0, [r2, r3]
 80253cc:	bf0c      	ite	eq
 80253ce:	f000 000f 	andeq.w	r0, r0, #15
 80253d2:	1100      	asrne	r0, r0, #4
 80253d4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80253d8:	b2c3      	uxtb	r3, r0
 80253da:	b2ba      	uxth	r2, r7
 80253dc:	fa1f fc8c 	uxth.w	ip, ip
 80253e0:	fb02 f00c 	mul.w	r0, r2, ip
 80253e4:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80253e8:	0112      	lsls	r2, r2, #4
 80253ea:	fa1f fc8c 	uxth.w	ip, ip
 80253ee:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80253f2:	1a12      	subs	r2, r2, r0
 80253f4:	eba7 070c 	sub.w	r7, r7, ip
 80253f8:	b292      	uxth	r2, r2
 80253fa:	b2bf      	uxth	r7, r7
 80253fc:	4362      	muls	r2, r4
 80253fe:	fb06 2207 	mla	r2, r6, r7, r2
 8025402:	fb0c 2505 	mla	r5, ip, r5, r2
 8025406:	fb00 5303 	mla	r3, r0, r3, r5
 802540a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802540e:	b3a3      	cbz	r3, 802547a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8025410:	4a25      	ldr	r2, [pc, #148]	; (80254a8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8025412:	880e      	ldrh	r6, [r1, #0]
 8025414:	6815      	ldr	r5, [r2, #0]
 8025416:	1234      	asrs	r4, r6, #8
 8025418:	b29a      	uxth	r2, r3
 802541a:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802541e:	43db      	mvns	r3, r3
 8025420:	b2db      	uxtb	r3, r3
 8025422:	fb10 f002 	smulbb	r0, r0, r2
 8025426:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802542a:	fb04 0403 	mla	r4, r4, r3, r0
 802542e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8025432:	10f0      	asrs	r0, r6, #3
 8025434:	b2ed      	uxtb	r5, r5
 8025436:	00f6      	lsls	r6, r6, #3
 8025438:	fb17 f702 	smulbb	r7, r7, r2
 802543c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025440:	fb15 f202 	smulbb	r2, r5, r2
 8025444:	b2f6      	uxtb	r6, r6
 8025446:	b2a4      	uxth	r4, r4
 8025448:	fb00 7003 	mla	r0, r0, r3, r7
 802544c:	fb06 2303 	mla	r3, r6, r3, r2
 8025450:	b29a      	uxth	r2, r3
 8025452:	1c63      	adds	r3, r4, #1
 8025454:	b280      	uxth	r0, r0
 8025456:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802545a:	1c53      	adds	r3, r2, #1
 802545c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025460:	1c42      	adds	r2, r0, #1
 8025462:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025466:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802546a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802546e:	0940      	lsrs	r0, r0, #5
 8025470:	4323      	orrs	r3, r4
 8025472:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025476:	4303      	orrs	r3, r0
 8025478:	800b      	strh	r3, [r1, #0]
 802547a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802547e:	2600      	movs	r6, #0
 8025480:	e764      	b.n	802534c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8025482:	2400      	movs	r4, #0
 8025484:	4626      	mov	r6, r4
 8025486:	e778      	b.n	802537a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8025488:	2400      	movs	r4, #0
 802548a:	e776      	b.n	802537a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802548c:	463c      	mov	r4, r7
 802548e:	e774      	b.n	802537a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8025490:	2500      	movs	r5, #0
 8025492:	e78e      	b.n	80253b2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8025494:	2300      	movs	r3, #0
 8025496:	461d      	mov	r5, r3
 8025498:	e79f      	b.n	80253da <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802549a:	4663      	mov	r3, ip
 802549c:	4665      	mov	r5, ip
 802549e:	e79c      	b.n	80253da <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80254a0:	2300      	movs	r3, #0
 80254a2:	e79a      	b.n	80253da <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80254a4:	463b      	mov	r3, r7
 80254a6:	e798      	b.n	80253da <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80254a8:	20014620 	.word	0x20014620

080254ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80254ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254b0:	b093      	sub	sp, #76	; 0x4c
 80254b2:	461d      	mov	r5, r3
 80254b4:	920c      	str	r2, [sp, #48]	; 0x30
 80254b6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80254b8:	9107      	str	r1, [sp, #28]
 80254ba:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80254be:	9011      	str	r0, [sp, #68]	; 0x44
 80254c0:	6850      	ldr	r0, [r2, #4]
 80254c2:	6812      	ldr	r2, [r2, #0]
 80254c4:	fb00 1303 	mla	r3, r0, r3, r1
 80254c8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80254cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80254ce:	689b      	ldr	r3, [r3, #8]
 80254d0:	3301      	adds	r3, #1
 80254d2:	f023 0301 	bic.w	r3, r3, #1
 80254d6:	9306      	str	r3, [sp, #24]
 80254d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80254da:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80254de:	681f      	ldr	r7, [r3, #0]
 80254e0:	9b07      	ldr	r3, [sp, #28]
 80254e2:	2b00      	cmp	r3, #0
 80254e4:	dc03      	bgt.n	80254ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80254e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80254e8:	2b00      	cmp	r3, #0
 80254ea:	f340 8267 	ble.w	80259bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80254ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80254f0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80254f4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80254f8:	1e48      	subs	r0, r1, #1
 80254fa:	f102 3cff 	add.w	ip, r2, #4294967295
 80254fe:	2d00      	cmp	r5, #0
 8025500:	f340 80b8 	ble.w	8025674 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8025504:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025508:	ea4f 4326 	mov.w	r3, r6, asr #16
 802550c:	d406      	bmi.n	802551c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802550e:	4586      	cmp	lr, r0
 8025510:	da04      	bge.n	802551c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025512:	2b00      	cmp	r3, #0
 8025514:	db02      	blt.n	802551c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025516:	4563      	cmp	r3, ip
 8025518:	f2c0 80ad 	blt.w	8025676 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 802551c:	f11e 0e01 	adds.w	lr, lr, #1
 8025520:	f100 80a0 	bmi.w	8025664 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8025524:	4571      	cmp	r1, lr
 8025526:	f2c0 809d 	blt.w	8025664 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802552a:	3301      	adds	r3, #1
 802552c:	f100 809a 	bmi.w	8025664 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8025530:	429a      	cmp	r2, r3
 8025532:	f2c0 8097 	blt.w	8025664 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8025536:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802553a:	9509      	str	r5, [sp, #36]	; 0x24
 802553c:	46c8      	mov	r8, r9
 802553e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025540:	2b00      	cmp	r3, #0
 8025542:	f340 80b6 	ble.w	80256b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8025546:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802554a:	9308      	str	r3, [sp, #32]
 802554c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802554e:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025552:	1423      	asrs	r3, r4, #16
 8025554:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025558:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802555c:	f100 813e 	bmi.w	80257dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8025560:	f10c 3bff 	add.w	fp, ip, #4294967295
 8025564:	455b      	cmp	r3, fp
 8025566:	f280 8139 	bge.w	80257dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802556a:	2800      	cmp	r0, #0
 802556c:	f2c0 8136 	blt.w	80257dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8025570:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025574:	4558      	cmp	r0, fp
 8025576:	f280 8131 	bge.w	80257dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802557a:	9a06      	ldr	r2, [sp, #24]
 802557c:	fb00 3302 	mla	r3, r0, r2, r3
 8025580:	0858      	lsrs	r0, r3, #1
 8025582:	07da      	lsls	r2, r3, #31
 8025584:	f817 c000 	ldrb.w	ip, [r7, r0]
 8025588:	9a08      	ldr	r2, [sp, #32]
 802558a:	bf54      	ite	pl
 802558c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025590:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025594:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025598:	fa5f fc8c 	uxtb.w	ip, ip
 802559c:	2a00      	cmp	r2, #0
 802559e:	f000 80cb 	beq.w	8025738 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80255a2:	1c58      	adds	r0, r3, #1
 80255a4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80255a8:	07c0      	lsls	r0, r0, #31
 80255aa:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80255ae:	bf54      	ite	pl
 80255b0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80255b4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80255b8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80255bc:	fa5f fe8e 	uxtb.w	lr, lr
 80255c0:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80255c4:	b1b9      	cbz	r1, 80255f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80255c6:	4453      	add	r3, sl
 80255c8:	0858      	lsrs	r0, r3, #1
 80255ca:	07da      	lsls	r2, r3, #31
 80255cc:	5c38      	ldrb	r0, [r7, r0]
 80255ce:	bf54      	ite	pl
 80255d0:	f000 000f 	andpl.w	r0, r0, #15
 80255d4:	1100      	asrmi	r0, r0, #4
 80255d6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80255da:	b2c0      	uxtb	r0, r0
 80255dc:	900a      	str	r0, [sp, #40]	; 0x28
 80255de:	1c58      	adds	r0, r3, #1
 80255e0:	0843      	lsrs	r3, r0, #1
 80255e2:	07c2      	lsls	r2, r0, #31
 80255e4:	5cfb      	ldrb	r3, [r7, r3]
 80255e6:	bf54      	ite	pl
 80255e8:	f003 030f 	andpl.w	r3, r3, #15
 80255ec:	111b      	asrmi	r3, r3, #4
 80255ee:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80255f2:	b2db      	uxtb	r3, r3
 80255f4:	930e      	str	r3, [sp, #56]	; 0x38
 80255f6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80255fa:	b289      	uxth	r1, r1
 80255fc:	fb02 f301 	mul.w	r3, r2, r1
 8025600:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025604:	0112      	lsls	r2, r2, #4
 8025606:	b289      	uxth	r1, r1
 8025608:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802560c:	1a40      	subs	r0, r0, r1
 802560e:	fa1f fe80 	uxth.w	lr, r0
 8025612:	1ad2      	subs	r2, r2, r3
 8025614:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025616:	b292      	uxth	r2, r2
 8025618:	4342      	muls	r2, r0
 802561a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802561e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025620:	fb01 c102 	mla	r1, r1, r2, ip
 8025624:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025626:	fb03 1302 	mla	r3, r3, r2, r1
 802562a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802562e:	2bff      	cmp	r3, #255	; 0xff
 8025630:	f040 8093 	bne.w	802575a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8025634:	4bbe      	ldr	r3, [pc, #760]	; (8025930 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8025636:	681a      	ldr	r2, [r3, #0]
 8025638:	4bbe      	ldr	r3, [pc, #760]	; (8025934 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802563a:	0951      	lsrs	r1, r2, #5
 802563c:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8025640:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025644:	430b      	orrs	r3, r1
 8025646:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802564a:	4313      	orrs	r3, r2
 802564c:	f8a8 3000 	strh.w	r3, [r8]
 8025650:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025652:	441c      	add	r4, r3
 8025654:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025656:	441e      	add	r6, r3
 8025658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802565a:	3b01      	subs	r3, #1
 802565c:	f108 0802 	add.w	r8, r8, #2
 8025660:	9309      	str	r3, [sp, #36]	; 0x24
 8025662:	e76c      	b.n	802553e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025664:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025666:	441c      	add	r4, r3
 8025668:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802566a:	3d01      	subs	r5, #1
 802566c:	441e      	add	r6, r3
 802566e:	f109 0902 	add.w	r9, r9, #2
 8025672:	e744      	b.n	80254fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025674:	d021      	beq.n	80256ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8025676:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025678:	1e6b      	subs	r3, r5, #1
 802567a:	fb00 4003 	mla	r0, r0, r3, r4
 802567e:	1400      	asrs	r0, r0, #16
 8025680:	f53f af59 	bmi.w	8025536 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025684:	3901      	subs	r1, #1
 8025686:	4288      	cmp	r0, r1
 8025688:	f6bf af55 	bge.w	8025536 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802568c:	9920      	ldr	r1, [sp, #128]	; 0x80
 802568e:	fb01 6303 	mla	r3, r1, r3, r6
 8025692:	141b      	asrs	r3, r3, #16
 8025694:	f53f af4f 	bmi.w	8025536 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025698:	3a01      	subs	r2, #1
 802569a:	4293      	cmp	r3, r2
 802569c:	f6bf af4b 	bge.w	8025536 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80256a0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80256a4:	9308      	str	r3, [sp, #32]
 80256a6:	46a8      	mov	r8, r5
 80256a8:	46ce      	mov	lr, r9
 80256aa:	f1b8 0f00 	cmp.w	r8, #0
 80256ae:	f300 80b5 	bgt.w	802581c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80256b2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80256b6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80256ba:	9b07      	ldr	r3, [sp, #28]
 80256bc:	2b00      	cmp	r3, #0
 80256be:	f340 817d 	ble.w	80259bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80256c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80256c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80256ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80256ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80256d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80256d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80256d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80256dc:	eef0 6a62 	vmov.f32	s13, s5
 80256e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80256e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80256e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80256ec:	ee16 4a90 	vmov	r4, s13
 80256f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80256f4:	eef0 6a43 	vmov.f32	s13, s6
 80256f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80256fc:	ee12 2a90 	vmov	r2, s5
 8025700:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025704:	fb92 f3f3 	sdiv	r3, r2, r3
 8025708:	ee13 2a10 	vmov	r2, s6
 802570c:	931f      	str	r3, [sp, #124]	; 0x7c
 802570e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025710:	fb92 f3f3 	sdiv	r3, r2, r3
 8025714:	9320      	str	r3, [sp, #128]	; 0x80
 8025716:	9b07      	ldr	r3, [sp, #28]
 8025718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802571a:	3b01      	subs	r3, #1
 802571c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025720:	9307      	str	r3, [sp, #28]
 8025722:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025724:	ee16 6a90 	vmov	r6, s13
 8025728:	bf14      	ite	ne
 802572a:	461d      	movne	r5, r3
 802572c:	4615      	moveq	r5, r2
 802572e:	eeb0 3a67 	vmov.f32	s6, s15
 8025732:	eef0 2a47 	vmov.f32	s5, s14
 8025736:	e6d3      	b.n	80254e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8025738:	2900      	cmp	r1, #0
 802573a:	f43f af5c 	beq.w	80255f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802573e:	eb0a 0003 	add.w	r0, sl, r3
 8025742:	0843      	lsrs	r3, r0, #1
 8025744:	07c0      	lsls	r0, r0, #31
 8025746:	5cfb      	ldrb	r3, [r7, r3]
 8025748:	bf54      	ite	pl
 802574a:	f003 030f 	andpl.w	r3, r3, #15
 802574e:	111b      	asrmi	r3, r3, #4
 8025750:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025754:	b2db      	uxtb	r3, r3
 8025756:	930a      	str	r3, [sp, #40]	; 0x28
 8025758:	e74d      	b.n	80255f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802575a:	2b00      	cmp	r3, #0
 802575c:	f43f af78 	beq.w	8025650 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8025760:	4a73      	ldr	r2, [pc, #460]	; (8025930 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8025762:	f8b8 c000 	ldrh.w	ip, [r8]
 8025766:	6810      	ldr	r0, [r2, #0]
 8025768:	fa1f fe83 	uxth.w	lr, r3
 802576c:	ea4f 212c 	mov.w	r1, ip, asr #8
 8025770:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025774:	43db      	mvns	r3, r3
 8025776:	b2db      	uxtb	r3, r3
 8025778:	fb12 f20e 	smulbb	r2, r2, lr
 802577c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025780:	fb01 2103 	mla	r1, r1, r3, r2
 8025784:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8025788:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802578c:	b2c0      	uxtb	r0, r0
 802578e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025792:	fb1b fb0e 	smulbb	fp, fp, lr
 8025796:	b289      	uxth	r1, r1
 8025798:	fb10 fe0e 	smulbb	lr, r0, lr
 802579c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80257a0:	fa5f fc8c 	uxtb.w	ip, ip
 80257a4:	fb02 b203 	mla	r2, r2, r3, fp
 80257a8:	1c48      	adds	r0, r1, #1
 80257aa:	fb0c e303 	mla	r3, ip, r3, lr
 80257ae:	b292      	uxth	r2, r2
 80257b0:	b29b      	uxth	r3, r3
 80257b2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80257b6:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80257ba:	f102 0b01 	add.w	fp, r2, #1
 80257be:	1c59      	adds	r1, r3, #1
 80257c0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80257c4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80257c8:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80257cc:	0952      	lsrs	r2, r2, #5
 80257ce:	4301      	orrs	r1, r0
 80257d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80257d4:	4311      	orrs	r1, r2
 80257d6:	f8a8 1000 	strh.w	r1, [r8]
 80257da:	e739      	b.n	8025650 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80257dc:	f113 0b01 	adds.w	fp, r3, #1
 80257e0:	f53f af36 	bmi.w	8025650 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80257e4:	45dc      	cmp	ip, fp
 80257e6:	f6ff af33 	blt.w	8025650 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80257ea:	f110 0b01 	adds.w	fp, r0, #1
 80257ee:	f53f af2f 	bmi.w	8025650 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80257f2:	45de      	cmp	lr, fp
 80257f4:	f6ff af2c 	blt.w	8025650 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80257f8:	9a08      	ldr	r2, [sp, #32]
 80257fa:	9302      	str	r3, [sp, #8]
 80257fc:	fa0f f38e 	sxth.w	r3, lr
 8025800:	9301      	str	r3, [sp, #4]
 8025802:	fa0f f38c 	sxth.w	r3, ip
 8025806:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802580a:	9105      	str	r1, [sp, #20]
 802580c:	9300      	str	r3, [sp, #0]
 802580e:	463a      	mov	r2, r7
 8025810:	4653      	mov	r3, sl
 8025812:	4641      	mov	r1, r8
 8025814:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025816:	f7ff fd73 	bl	8025300 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802581a:	e719      	b.n	8025650 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802581c:	9906      	ldr	r1, [sp, #24]
 802581e:	1422      	asrs	r2, r4, #16
 8025820:	1433      	asrs	r3, r6, #16
 8025822:	fb01 2303 	mla	r3, r1, r3, r2
 8025826:	085a      	lsrs	r2, r3, #1
 8025828:	07d9      	lsls	r1, r3, #31
 802582a:	5cba      	ldrb	r2, [r7, r2]
 802582c:	bf54      	ite	pl
 802582e:	f002 020f 	andpl.w	r2, r2, #15
 8025832:	1112      	asrmi	r2, r2, #4
 8025834:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025838:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802583c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025840:	b2d2      	uxtb	r2, r2
 8025842:	2800      	cmp	r0, #0
 8025844:	d062      	beq.n	802590c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8025846:	f103 0a01 	add.w	sl, r3, #1
 802584a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802584e:	f01a 0f01 	tst.w	sl, #1
 8025852:	5c79      	ldrb	r1, [r7, r1]
 8025854:	bf0c      	ite	eq
 8025856:	f001 010f 	andeq.w	r1, r1, #15
 802585a:	1109      	asrne	r1, r1, #4
 802585c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025860:	b2c9      	uxtb	r1, r1
 8025862:	910f      	str	r1, [sp, #60]	; 0x3c
 8025864:	f1bc 0f00 	cmp.w	ip, #0
 8025868:	d019      	beq.n	802589e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802586a:	9908      	ldr	r1, [sp, #32]
 802586c:	440b      	add	r3, r1
 802586e:	0859      	lsrs	r1, r3, #1
 8025870:	f013 0f01 	tst.w	r3, #1
 8025874:	5c79      	ldrb	r1, [r7, r1]
 8025876:	bf0c      	ite	eq
 8025878:	f001 010f 	andeq.w	r1, r1, #15
 802587c:	1109      	asrne	r1, r1, #4
 802587e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025882:	b2c9      	uxtb	r1, r1
 8025884:	3301      	adds	r3, #1
 8025886:	910b      	str	r1, [sp, #44]	; 0x2c
 8025888:	0859      	lsrs	r1, r3, #1
 802588a:	07db      	lsls	r3, r3, #31
 802588c:	5c79      	ldrb	r1, [r7, r1]
 802588e:	bf54      	ite	pl
 8025890:	f001 010f 	andpl.w	r1, r1, #15
 8025894:	1109      	asrmi	r1, r1, #4
 8025896:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802589a:	b2c9      	uxtb	r1, r1
 802589c:	9110      	str	r1, [sp, #64]	; 0x40
 802589e:	b280      	uxth	r0, r0
 80258a0:	fa1f fc8c 	uxth.w	ip, ip
 80258a4:	fb00 f30c 	mul.w	r3, r0, ip
 80258a8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80258ac:	0100      	lsls	r0, r0, #4
 80258ae:	fa1f fc8c 	uxth.w	ip, ip
 80258b2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80258b6:	eba1 010c 	sub.w	r1, r1, ip
 80258ba:	fa1f fa81 	uxth.w	sl, r1
 80258be:	1ac0      	subs	r0, r0, r3
 80258c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80258c2:	b280      	uxth	r0, r0
 80258c4:	4348      	muls	r0, r1
 80258c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80258c8:	fb02 020a 	mla	r2, r2, sl, r0
 80258cc:	fb0c 2c01 	mla	ip, ip, r1, r2
 80258d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80258d2:	fb03 c302 	mla	r3, r3, r2, ip
 80258d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80258da:	2bff      	cmp	r3, #255	; 0xff
 80258dc:	d12c      	bne.n	8025938 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80258de:	4b14      	ldr	r3, [pc, #80]	; (8025930 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80258e0:	681a      	ldr	r2, [r3, #0]
 80258e2:	4b14      	ldr	r3, [pc, #80]	; (8025934 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 80258e4:	0951      	lsrs	r1, r2, #5
 80258e6:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80258ea:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80258ee:	430b      	orrs	r3, r1
 80258f0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80258f4:	4313      	orrs	r3, r2
 80258f6:	f8ae 3000 	strh.w	r3, [lr]
 80258fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80258fc:	441c      	add	r4, r3
 80258fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025900:	f10e 0e02 	add.w	lr, lr, #2
 8025904:	441e      	add	r6, r3
 8025906:	f108 38ff 	add.w	r8, r8, #4294967295
 802590a:	e6ce      	b.n	80256aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802590c:	f1bc 0f00 	cmp.w	ip, #0
 8025910:	d0c5      	beq.n	802589e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8025912:	9908      	ldr	r1, [sp, #32]
 8025914:	440b      	add	r3, r1
 8025916:	0859      	lsrs	r1, r3, #1
 8025918:	07db      	lsls	r3, r3, #31
 802591a:	5c79      	ldrb	r1, [r7, r1]
 802591c:	bf54      	ite	pl
 802591e:	f001 010f 	andpl.w	r1, r1, #15
 8025922:	1109      	asrmi	r1, r1, #4
 8025924:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025928:	b2c9      	uxtb	r1, r1
 802592a:	910b      	str	r1, [sp, #44]	; 0x2c
 802592c:	e7b7      	b.n	802589e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802592e:	bf00      	nop
 8025930:	20014620 	.word	0x20014620
 8025934:	fffff800 	.word	0xfffff800
 8025938:	2b00      	cmp	r3, #0
 802593a:	d0de      	beq.n	80258fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802593c:	4a21      	ldr	r2, [pc, #132]	; (80259c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802593e:	f8be c000 	ldrh.w	ip, [lr]
 8025942:	6810      	ldr	r0, [r2, #0]
 8025944:	fa1f fa83 	uxth.w	sl, r3
 8025948:	ea4f 212c 	mov.w	r1, ip, asr #8
 802594c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025950:	43db      	mvns	r3, r3
 8025952:	b2db      	uxtb	r3, r3
 8025954:	fb12 f20a 	smulbb	r2, r2, sl
 8025958:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802595c:	fb01 2103 	mla	r1, r1, r3, r2
 8025960:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8025964:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025968:	b2c0      	uxtb	r0, r0
 802596a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802596e:	fa5f fc8c 	uxtb.w	ip, ip
 8025972:	fb10 f00a 	smulbb	r0, r0, sl
 8025976:	fb0c 0003 	mla	r0, ip, r3, r0
 802597a:	b289      	uxth	r1, r1
 802597c:	fb1b fb0a 	smulbb	fp, fp, sl
 8025980:	b280      	uxth	r0, r0
 8025982:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025986:	fb02 b203 	mla	r2, r2, r3, fp
 802598a:	1c4b      	adds	r3, r1, #1
 802598c:	f100 0b01 	add.w	fp, r0, #1
 8025990:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025994:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8025998:	b292      	uxth	r2, r2
 802599a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802599e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80259a2:	ea4b 0101 	orr.w	r1, fp, r1
 80259a6:	f102 0b01 	add.w	fp, r2, #1
 80259aa:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80259ae:	0952      	lsrs	r2, r2, #5
 80259b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80259b4:	4311      	orrs	r1, r2
 80259b6:	f8ae 1000 	strh.w	r1, [lr]
 80259ba:	e79e      	b.n	80258fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80259bc:	b013      	add	sp, #76	; 0x4c
 80259be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259c2:	bf00      	nop
 80259c4:	20014620 	.word	0x20014620

080259c8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 80259c8:	b570      	push	{r4, r5, r6, lr}
 80259ca:	1208      	asrs	r0, r1, #8
 80259cc:	b29e      	uxth	r6, r3
 80259ce:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80259d2:	1213      	asrs	r3, r2, #8
 80259d4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80259d8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80259dc:	fb13 f305 	smulbb	r3, r3, r5
 80259e0:	fb10 f006 	smulbb	r0, r0, r6
 80259e4:	4418      	add	r0, r3
 80259e6:	10cc      	asrs	r4, r1, #3
 80259e8:	10d3      	asrs	r3, r2, #3
 80259ea:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80259ee:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80259f2:	fb13 f305 	smulbb	r3, r3, r5
 80259f6:	fb14 f406 	smulbb	r4, r4, r6
 80259fa:	00c9      	lsls	r1, r1, #3
 80259fc:	00d2      	lsls	r2, r2, #3
 80259fe:	441c      	add	r4, r3
 8025a00:	b2d2      	uxtb	r2, r2
 8025a02:	b2cb      	uxtb	r3, r1
 8025a04:	fb12 f205 	smulbb	r2, r2, r5
 8025a08:	b280      	uxth	r0, r0
 8025a0a:	fb13 f306 	smulbb	r3, r3, r6
 8025a0e:	4413      	add	r3, r2
 8025a10:	1c42      	adds	r2, r0, #1
 8025a12:	b29b      	uxth	r3, r3
 8025a14:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025a18:	f400 4278 	and.w	r2, r0, #63488	; 0xf800
 8025a1c:	1c58      	adds	r0, r3, #1
 8025a1e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025a22:	b2a4      	uxth	r4, r4
 8025a24:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8025a28:	4310      	orrs	r0, r2
 8025a2a:	1c62      	adds	r2, r4, #1
 8025a2c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025a30:	0964      	lsrs	r4, r4, #5
 8025a32:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8025a36:	4320      	orrs	r0, r4
 8025a38:	bd70      	pop	{r4, r5, r6, pc}
	...

08025a3c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8025a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a40:	b08f      	sub	sp, #60	; 0x3c
 8025a42:	461c      	mov	r4, r3
 8025a44:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 8025a48:	9004      	str	r0, [sp, #16]
 8025a4a:	460d      	mov	r5, r1
 8025a4c:	4616      	mov	r6, r2
 8025a4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025a50:	2f00      	cmp	r7, #0
 8025a52:	f000 80f6 	beq.w	8025c42 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8025a56:	6820      	ldr	r0, [r4, #0]
 8025a58:	6861      	ldr	r1, [r4, #4]
 8025a5a:	aa0a      	add	r2, sp, #40	; 0x28
 8025a5c:	c203      	stmia	r2!, {r0, r1}
 8025a5e:	6818      	ldr	r0, [r3, #0]
 8025a60:	6859      	ldr	r1, [r3, #4]
 8025a62:	aa0c      	add	r2, sp, #48	; 0x30
 8025a64:	c203      	stmia	r2!, {r0, r1}
 8025a66:	a80a      	add	r0, sp, #40	; 0x28
 8025a68:	f7ef fd62 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025a6c:	4621      	mov	r1, r4
 8025a6e:	a80c      	add	r0, sp, #48	; 0x30
 8025a70:	f7ef fda2 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025a74:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8025a78:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 8025a7c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8025a80:	f002 0301 	and.w	r3, r2, #1
 8025a84:	9306      	str	r3, [sp, #24]
 8025a86:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8025a8a:	f003 0101 	and.w	r1, r3, #1
 8025a8e:	9105      	str	r1, [sp, #20]
 8025a90:	9805      	ldr	r0, [sp, #20]
 8025a92:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8025a96:	4403      	add	r3, r0
 8025a98:	fb01 2303 	mla	r3, r1, r3, r2
 8025a9c:	f04f 0802 	mov.w	r8, #2
 8025aa0:	fb93 f3f8 	sdiv	r3, r3, r8
 8025aa4:	441d      	add	r5, r3
 8025aa6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8025aaa:	441a      	add	r2, r3
 8025aac:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8025ab0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8025ab4:	4419      	add	r1, r3
 8025ab6:	4b64      	ldr	r3, [pc, #400]	; (8025c48 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8025ab8:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8025abc:	6818      	ldr	r0, [r3, #0]
 8025abe:	6803      	ldr	r3, [r0, #0]
 8025ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025ac2:	4798      	blx	r3
 8025ac4:	4a61      	ldr	r2, [pc, #388]	; (8025c4c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8025ac6:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8025aca:	8813      	ldrh	r3, [r2, #0]
 8025acc:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 8025ad0:	2fff      	cmp	r7, #255	; 0xff
 8025ad2:	fb03 a404 	mla	r4, r3, r4, sl
 8025ad6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8025ada:	f106 0604 	add.w	r6, r6, #4
 8025ade:	4611      	mov	r1, r2
 8025ae0:	fb03 fb0b 	mul.w	fp, r3, fp
 8025ae4:	d06b      	beq.n	8025bbe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 8025ae6:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8025aea:	9303      	str	r3, [sp, #12]
 8025aec:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8025af0:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8025af4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8025af8:	9b07      	ldr	r3, [sp, #28]
 8025afa:	42a3      	cmp	r3, r4
 8025afc:	f240 809c 	bls.w	8025c38 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8025b00:	9b06      	ldr	r3, [sp, #24]
 8025b02:	2b00      	cmp	r3, #0
 8025b04:	d039      	beq.n	8025b7a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 8025b06:	782b      	ldrb	r3, [r5, #0]
 8025b08:	8822      	ldrh	r2, [r4, #0]
 8025b0a:	9804      	ldr	r0, [sp, #16]
 8025b0c:	f003 030f 	and.w	r3, r3, #15
 8025b10:	f105 0801 	add.w	r8, r5, #1
 8025b14:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8025b18:	9b03      	ldr	r3, [sp, #12]
 8025b1a:	9300      	str	r3, [sp, #0]
 8025b1c:	463b      	mov	r3, r7
 8025b1e:	f7ff ff53 	bl	80259c8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8025b22:	f824 0b02 	strh.w	r0, [r4], #2
 8025b26:	f109 3bff 	add.w	fp, r9, #4294967295
 8025b2a:	f1bb 0f01 	cmp.w	fp, #1
 8025b2e:	46a2      	mov	sl, r4
 8025b30:	f104 0404 	add.w	r4, r4, #4
 8025b34:	dd24      	ble.n	8025b80 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 8025b36:	f898 3000 	ldrb.w	r3, [r8]
 8025b3a:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8025b3e:	9804      	ldr	r0, [sp, #16]
 8025b40:	091b      	lsrs	r3, r3, #4
 8025b42:	f1ab 0b02 	sub.w	fp, fp, #2
 8025b46:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8025b4a:	9b03      	ldr	r3, [sp, #12]
 8025b4c:	9300      	str	r3, [sp, #0]
 8025b4e:	463b      	mov	r3, r7
 8025b50:	f7ff ff3a 	bl	80259c8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8025b54:	f824 0c04 	strh.w	r0, [r4, #-4]
 8025b58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8025b5c:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8025b60:	9804      	ldr	r0, [sp, #16]
 8025b62:	f003 030f 	and.w	r3, r3, #15
 8025b66:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8025b6a:	9b03      	ldr	r3, [sp, #12]
 8025b6c:	9300      	str	r3, [sp, #0]
 8025b6e:	463b      	mov	r3, r7
 8025b70:	f7ff ff2a 	bl	80259c8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8025b74:	f824 0c02 	strh.w	r0, [r4, #-2]
 8025b78:	e7d7      	b.n	8025b2a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8025b7a:	46a8      	mov	r8, r5
 8025b7c:	46cb      	mov	fp, r9
 8025b7e:	e7d4      	b.n	8025b2a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8025b80:	d10e      	bne.n	8025ba0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8025b82:	f898 3000 	ldrb.w	r3, [r8]
 8025b86:	f8ba 2000 	ldrh.w	r2, [sl]
 8025b8a:	9804      	ldr	r0, [sp, #16]
 8025b8c:	091b      	lsrs	r3, r3, #4
 8025b8e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8025b92:	9b03      	ldr	r3, [sp, #12]
 8025b94:	9300      	str	r3, [sp, #0]
 8025b96:	463b      	mov	r3, r7
 8025b98:	f7ff ff16 	bl	80259c8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8025b9c:	f82a 0b02 	strh.w	r0, [sl], #2
 8025ba0:	9b08      	ldr	r3, [sp, #32]
 8025ba2:	9a05      	ldr	r2, [sp, #20]
 8025ba4:	881c      	ldrh	r4, [r3, #0]
 8025ba6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8025baa:	eba4 0409 	sub.w	r4, r4, r9
 8025bae:	4413      	add	r3, r2
 8025bb0:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8025bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025bb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8025bba:	441d      	add	r5, r3
 8025bbc:	e79c      	b.n	8025af8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 8025bbe:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8025bc2:	45a3      	cmp	fp, r4
 8025bc4:	d938      	bls.n	8025c38 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8025bc6:	9b06      	ldr	r3, [sp, #24]
 8025bc8:	b1f3      	cbz	r3, 8025c08 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8025bca:	782b      	ldrb	r3, [r5, #0]
 8025bcc:	f003 030f 	and.w	r3, r3, #15
 8025bd0:	1c6a      	adds	r2, r5, #1
 8025bd2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025bd6:	8023      	strh	r3, [r4, #0]
 8025bd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8025bdc:	3402      	adds	r4, #2
 8025bde:	2801      	cmp	r0, #1
 8025be0:	4623      	mov	r3, r4
 8025be2:	f104 0404 	add.w	r4, r4, #4
 8025be6:	dd12      	ble.n	8025c0e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8025be8:	7813      	ldrb	r3, [r2, #0]
 8025bea:	091b      	lsrs	r3, r3, #4
 8025bec:	3802      	subs	r0, #2
 8025bee:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025bf2:	f824 3c04 	strh.w	r3, [r4, #-4]
 8025bf6:	f812 3b01 	ldrb.w	r3, [r2], #1
 8025bfa:	f003 030f 	and.w	r3, r3, #15
 8025bfe:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025c02:	f824 3c02 	strh.w	r3, [r4, #-2]
 8025c06:	e7ea      	b.n	8025bde <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8025c08:	462a      	mov	r2, r5
 8025c0a:	4648      	mov	r0, r9
 8025c0c:	e7e7      	b.n	8025bde <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8025c0e:	d106      	bne.n	8025c1e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8025c10:	7812      	ldrb	r2, [r2, #0]
 8025c12:	0912      	lsrs	r2, r2, #4
 8025c14:	3302      	adds	r3, #2
 8025c16:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8025c1a:	f823 2c02 	strh.w	r2, [r3, #-2]
 8025c1e:	880c      	ldrh	r4, [r1, #0]
 8025c20:	9a05      	ldr	r2, [sp, #20]
 8025c22:	eba4 0409 	sub.w	r4, r4, r9
 8025c26:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8025c2a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8025c2e:	4413      	add	r3, r2
 8025c30:	fb93 f3f8 	sdiv	r3, r3, r8
 8025c34:	441d      	add	r5, r3
 8025c36:	e7c4      	b.n	8025bc2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 8025c38:	4b03      	ldr	r3, [pc, #12]	; (8025c48 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8025c3a:	6818      	ldr	r0, [r3, #0]
 8025c3c:	6803      	ldr	r3, [r0, #0]
 8025c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025c40:	4798      	blx	r3
 8025c42:	b00f      	add	sp, #60	; 0x3c
 8025c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c48:	20014610 	.word	0x20014610
 8025c4c:	2001460a 	.word	0x2001460a

08025c50 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8025c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025c52:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8025c56:	2dff      	cmp	r5, #255	; 0xff
 8025c58:	ea4f 2711 	mov.w	r7, r1, lsr #8
 8025c5c:	d10c      	bne.n	8025c78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8025c5e:	2bff      	cmp	r3, #255	; 0xff
 8025c60:	d10a      	bne.n	8025c78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8025c62:	4b25      	ldr	r3, [pc, #148]	; (8025cf8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8025c64:	0948      	lsrs	r0, r1, #5
 8025c66:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025c6a:	403b      	ands	r3, r7
 8025c6c:	4318      	orrs	r0, r3
 8025c6e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8025c72:	4308      	orrs	r0, r1
 8025c74:	b280      	uxth	r0, r0
 8025c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025c78:	fb15 f503 	smulbb	r5, r5, r3
 8025c7c:	b2ab      	uxth	r3, r5
 8025c7e:	1c5d      	adds	r5, r3, #1
 8025c80:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8025c84:	1214      	asrs	r4, r2, #8
 8025c86:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025c8a:	fa1f fc85 	uxth.w	ip, r5
 8025c8e:	10d6      	asrs	r6, r2, #3
 8025c90:	00d0      	lsls	r0, r2, #3
 8025c92:	43ed      	mvns	r5, r5
 8025c94:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025c98:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8025c9c:	b2eb      	uxtb	r3, r5
 8025c9e:	b2c0      	uxtb	r0, r0
 8025ca0:	fb12 f20c 	smulbb	r2, r2, ip
 8025ca4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8025ca8:	fb04 2403 	mla	r4, r4, r3, r2
 8025cac:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8025cb0:	b2c8      	uxtb	r0, r1
 8025cb2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8025cb6:	b2fd      	uxtb	r5, r7
 8025cb8:	fb10 f00c 	smulbb	r0, r0, ip
 8025cbc:	b2a4      	uxth	r4, r4
 8025cbe:	fb02 0003 	mla	r0, r2, r3, r0
 8025cc2:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8025cc6:	fb15 f50c 	smulbb	r5, r5, ip
 8025cca:	fb06 5503 	mla	r5, r6, r3, r5
 8025cce:	b283      	uxth	r3, r0
 8025cd0:	1c60      	adds	r0, r4, #1
 8025cd2:	b2ad      	uxth	r5, r5
 8025cd4:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8025cd8:	1c58      	adds	r0, r3, #1
 8025cda:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025cde:	1c6b      	adds	r3, r5, #1
 8025ce0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025ce4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8025ce8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8025cec:	096d      	lsrs	r5, r5, #5
 8025cee:	4320      	orrs	r0, r4
 8025cf0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025cf4:	4328      	orrs	r0, r5
 8025cf6:	e7be      	b.n	8025c76 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8025cf8:	00fff800 	.word	0x00fff800

08025cfc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8025cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d00:	461c      	mov	r4, r3
 8025d02:	b08d      	sub	sp, #52	; 0x34
 8025d04:	460d      	mov	r5, r1
 8025d06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025d08:	6861      	ldr	r1, [r4, #4]
 8025d0a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8025d0e:	4680      	mov	r8, r0
 8025d10:	6820      	ldr	r0, [r4, #0]
 8025d12:	4616      	mov	r6, r2
 8025d14:	aa08      	add	r2, sp, #32
 8025d16:	c203      	stmia	r2!, {r0, r1}
 8025d18:	6818      	ldr	r0, [r3, #0]
 8025d1a:	6859      	ldr	r1, [r3, #4]
 8025d1c:	aa0a      	add	r2, sp, #40	; 0x28
 8025d1e:	c203      	stmia	r2!, {r0, r1}
 8025d20:	a808      	add	r0, sp, #32
 8025d22:	f7ef fc05 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025d26:	4621      	mov	r1, r4
 8025d28:	a80a      	add	r0, sp, #40	; 0x28
 8025d2a:	f7ef fc45 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025d2e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8025d32:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 8025d36:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8025d3a:	f002 0301 	and.w	r3, r2, #1
 8025d3e:	9303      	str	r3, [sp, #12]
 8025d40:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8025d44:	f003 0101 	and.w	r1, r3, #1
 8025d48:	9102      	str	r1, [sp, #8]
 8025d4a:	9802      	ldr	r0, [sp, #8]
 8025d4c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8025d50:	4403      	add	r3, r0
 8025d52:	fb01 2303 	mla	r3, r1, r3, r2
 8025d56:	f04f 0a02 	mov.w	sl, #2
 8025d5a:	fb93 f3fa 	sdiv	r3, r3, sl
 8025d5e:	441d      	add	r5, r3
 8025d60:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8025d64:	441a      	add	r2, r3
 8025d66:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8025d6a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8025d6e:	4a3f      	ldr	r2, [pc, #252]	; (8025e6c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8025d70:	9205      	str	r2, [sp, #20]
 8025d72:	4419      	add	r1, r3
 8025d74:	6810      	ldr	r0, [r2, #0]
 8025d76:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 8025d7a:	6803      	ldr	r3, [r0, #0]
 8025d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025d7e:	4798      	blx	r3
 8025d80:	4b3b      	ldr	r3, [pc, #236]	; (8025e70 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8025d82:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 8025d86:	8819      	ldrh	r1, [r3, #0]
 8025d88:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 8025d8c:	fb01 c404 	mla	r4, r1, r4, ip
 8025d90:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8025d94:	434f      	muls	r7, r1
 8025d96:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8025d9a:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8025d9e:	3604      	adds	r6, #4
 8025da0:	9204      	str	r2, [sp, #16]
 8025da2:	9b04      	ldr	r3, [sp, #16]
 8025da4:	429c      	cmp	r4, r3
 8025da6:	d258      	bcs.n	8025e5a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8025da8:	9b03      	ldr	r3, [sp, #12]
 8025daa:	2b00      	cmp	r3, #0
 8025dac:	d034      	beq.n	8025e18 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8025dae:	782b      	ldrb	r3, [r5, #0]
 8025db0:	f003 030f 	and.w	r3, r3, #15
 8025db4:	1c6f      	adds	r7, r5, #1
 8025db6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8025dba:	0e0b      	lsrs	r3, r1, #24
 8025dbc:	d006      	beq.n	8025dcc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8025dbe:	8822      	ldrh	r2, [r4, #0]
 8025dc0:	9300      	str	r3, [sp, #0]
 8025dc2:	4640      	mov	r0, r8
 8025dc4:	464b      	mov	r3, r9
 8025dc6:	f7ff ff43 	bl	8025c50 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8025dca:	8020      	strh	r0, [r4, #0]
 8025dcc:	3402      	adds	r4, #2
 8025dce:	f10b 3aff 	add.w	sl, fp, #4294967295
 8025dd2:	f1ba 0f01 	cmp.w	sl, #1
 8025dd6:	dd22      	ble.n	8025e1e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8025dd8:	783b      	ldrb	r3, [r7, #0]
 8025dda:	091b      	lsrs	r3, r3, #4
 8025ddc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8025de0:	0e0b      	lsrs	r3, r1, #24
 8025de2:	d006      	beq.n	8025df2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8025de4:	8822      	ldrh	r2, [r4, #0]
 8025de6:	9300      	str	r3, [sp, #0]
 8025de8:	4640      	mov	r0, r8
 8025dea:	464b      	mov	r3, r9
 8025dec:	f7ff ff30 	bl	8025c50 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8025df0:	8020      	strh	r0, [r4, #0]
 8025df2:	f817 3b01 	ldrb.w	r3, [r7], #1
 8025df6:	f003 030f 	and.w	r3, r3, #15
 8025dfa:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8025dfe:	0e0b      	lsrs	r3, r1, #24
 8025e00:	d006      	beq.n	8025e10 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8025e02:	8862      	ldrh	r2, [r4, #2]
 8025e04:	9300      	str	r3, [sp, #0]
 8025e06:	4640      	mov	r0, r8
 8025e08:	464b      	mov	r3, r9
 8025e0a:	f7ff ff21 	bl	8025c50 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8025e0e:	8060      	strh	r0, [r4, #2]
 8025e10:	3404      	adds	r4, #4
 8025e12:	f1aa 0a02 	sub.w	sl, sl, #2
 8025e16:	e7dc      	b.n	8025dd2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8025e18:	462f      	mov	r7, r5
 8025e1a:	46da      	mov	sl, fp
 8025e1c:	e7d9      	b.n	8025dd2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8025e1e:	d10d      	bne.n	8025e3c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8025e20:	783b      	ldrb	r3, [r7, #0]
 8025e22:	091b      	lsrs	r3, r3, #4
 8025e24:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8025e28:	0e0b      	lsrs	r3, r1, #24
 8025e2a:	d006      	beq.n	8025e3a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8025e2c:	8822      	ldrh	r2, [r4, #0]
 8025e2e:	9300      	str	r3, [sp, #0]
 8025e30:	4640      	mov	r0, r8
 8025e32:	464b      	mov	r3, r9
 8025e34:	f7ff ff0c 	bl	8025c50 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8025e38:	8020      	strh	r0, [r4, #0]
 8025e3a:	3402      	adds	r4, #2
 8025e3c:	9b06      	ldr	r3, [sp, #24]
 8025e3e:	9a02      	ldr	r2, [sp, #8]
 8025e40:	881b      	ldrh	r3, [r3, #0]
 8025e42:	eba3 030b 	sub.w	r3, r3, fp
 8025e46:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8025e4a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8025e4e:	4413      	add	r3, r2
 8025e50:	9a07      	ldr	r2, [sp, #28]
 8025e52:	fb93 f3f2 	sdiv	r3, r3, r2
 8025e56:	441d      	add	r5, r3
 8025e58:	e7a3      	b.n	8025da2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8025e5a:	9b05      	ldr	r3, [sp, #20]
 8025e5c:	6818      	ldr	r0, [r3, #0]
 8025e5e:	6803      	ldr	r3, [r0, #0]
 8025e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025e62:	4798      	blx	r3
 8025e64:	b00d      	add	sp, #52	; 0x34
 8025e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e6a:	bf00      	nop
 8025e6c:	20014610 	.word	0x20014610
 8025e70:	2001460a 	.word	0x2001460a

08025e74 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8025e74:	b570      	push	{r4, r5, r6, lr}
 8025e76:	1214      	asrs	r4, r2, #8
 8025e78:	788d      	ldrb	r5, [r1, #2]
 8025e7a:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8025e7e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025e82:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8025e86:	fb15 f503 	smulbb	r5, r5, r3
 8025e8a:	fb04 5506 	mla	r5, r4, r6, r5
 8025e8e:	10d0      	asrs	r0, r2, #3
 8025e90:	784c      	ldrb	r4, [r1, #1]
 8025e92:	7809      	ldrb	r1, [r1, #0]
 8025e94:	00d2      	lsls	r2, r2, #3
 8025e96:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025e9a:	b2d2      	uxtb	r2, r2
 8025e9c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8025ea0:	fb14 f403 	smulbb	r4, r4, r3
 8025ea4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025ea8:	fb11 f303 	smulbb	r3, r1, r3
 8025eac:	fb00 4406 	mla	r4, r0, r6, r4
 8025eb0:	fb02 3306 	mla	r3, r2, r6, r3
 8025eb4:	b2ad      	uxth	r5, r5
 8025eb6:	b29b      	uxth	r3, r3
 8025eb8:	b2a4      	uxth	r4, r4
 8025eba:	1c68      	adds	r0, r5, #1
 8025ebc:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8025ec0:	1c62      	adds	r2, r4, #1
 8025ec2:	1c58      	adds	r0, r3, #1
 8025ec4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025ec8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025ecc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025ed0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8025ed4:	0964      	lsrs	r4, r4, #5
 8025ed6:	4328      	orrs	r0, r5
 8025ed8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8025edc:	4320      	orrs	r0, r4
 8025ede:	bd70      	pop	{r4, r5, r6, pc}

08025ee0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8025ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ee4:	b08f      	sub	sp, #60	; 0x3c
 8025ee6:	461c      	mov	r4, r3
 8025ee8:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 8025eec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025eee:	4682      	mov	sl, r0
 8025ef0:	460e      	mov	r6, r1
 8025ef2:	4615      	mov	r5, r2
 8025ef4:	2f00      	cmp	r7, #0
 8025ef6:	f000 8142 	beq.w	802617e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 8025efa:	6820      	ldr	r0, [r4, #0]
 8025efc:	6861      	ldr	r1, [r4, #4]
 8025efe:	aa0a      	add	r2, sp, #40	; 0x28
 8025f00:	c203      	stmia	r2!, {r0, r1}
 8025f02:	6818      	ldr	r0, [r3, #0]
 8025f04:	6859      	ldr	r1, [r3, #4]
 8025f06:	aa0c      	add	r2, sp, #48	; 0x30
 8025f08:	c203      	stmia	r2!, {r0, r1}
 8025f0a:	a80a      	add	r0, sp, #40	; 0x28
 8025f0c:	f7ef fb10 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025f10:	4621      	mov	r1, r4
 8025f12:	a80c      	add	r0, sp, #48	; 0x30
 8025f14:	f7ef fb50 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025f18:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8025f1c:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 8025f20:	f002 0301 	and.w	r3, r2, #1
 8025f24:	9306      	str	r3, [sp, #24]
 8025f26:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8025f2a:	f003 0101 	and.w	r1, r3, #1
 8025f2e:	9105      	str	r1, [sp, #20]
 8025f30:	9805      	ldr	r0, [sp, #20]
 8025f32:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8025f36:	4403      	add	r3, r0
 8025f38:	fb01 2303 	mla	r3, r1, r3, r2
 8025f3c:	f04f 0802 	mov.w	r8, #2
 8025f40:	fb93 f3f8 	sdiv	r3, r3, r8
 8025f44:	441e      	add	r6, r3
 8025f46:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8025f4a:	441a      	add	r2, r3
 8025f4c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8025f50:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8025f54:	4419      	add	r1, r3
 8025f56:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8025f5a:	9303      	str	r3, [sp, #12]
 8025f5c:	4b89      	ldr	r3, [pc, #548]	; (8026184 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8025f5e:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 8025f62:	6818      	ldr	r0, [r3, #0]
 8025f64:	6803      	ldr	r3, [r0, #0]
 8025f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025f68:	4798      	blx	r3
 8025f6a:	4a87      	ldr	r2, [pc, #540]	; (8026188 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8025f6c:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8025f70:	8813      	ldrh	r3, [r2, #0]
 8025f72:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 8025f76:	2fff      	cmp	r7, #255	; 0xff
 8025f78:	fb03 9404 	mla	r4, r3, r4, r9
 8025f7c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8025f80:	f105 0504 	add.w	r5, r5, #4
 8025f84:	4694      	mov	ip, r2
 8025f86:	fb03 f30b 	mul.w	r3, r3, fp
 8025f8a:	d071      	beq.n	8026070 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 8025f8c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8025f90:	43f9      	mvns	r1, r7
 8025f92:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8025f96:	b2c9      	uxtb	r1, r1
 8025f98:	9104      	str	r1, [sp, #16]
 8025f9a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8025f9e:	9b07      	ldr	r3, [sp, #28]
 8025fa0:	42a3      	cmp	r3, r4
 8025fa2:	f240 80e7 	bls.w	8026174 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8025fa6:	9b06      	ldr	r3, [sp, #24]
 8025fa8:	2b00      	cmp	r3, #0
 8025faa:	d03d      	beq.n	8026028 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 8025fac:	7831      	ldrb	r1, [r6, #0]
 8025fae:	9b04      	ldr	r3, [sp, #16]
 8025fb0:	8822      	ldrh	r2, [r4, #0]
 8025fb2:	9300      	str	r3, [sp, #0]
 8025fb4:	f001 010f 	and.w	r1, r1, #15
 8025fb8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025fbc:	463b      	mov	r3, r7
 8025fbe:	4429      	add	r1, r5
 8025fc0:	4650      	mov	r0, sl
 8025fc2:	f7ff ff57 	bl	8025e74 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8025fc6:	9b03      	ldr	r3, [sp, #12]
 8025fc8:	f824 0b02 	strh.w	r0, [r4], #2
 8025fcc:	f106 0801 	add.w	r8, r6, #1
 8025fd0:	f103 3bff 	add.w	fp, r3, #4294967295
 8025fd4:	f1bb 0f01 	cmp.w	fp, #1
 8025fd8:	46a1      	mov	r9, r4
 8025fda:	f104 0404 	add.w	r4, r4, #4
 8025fde:	dd27      	ble.n	8026030 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 8025fe0:	f898 1000 	ldrb.w	r1, [r8]
 8025fe4:	9b04      	ldr	r3, [sp, #16]
 8025fe6:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8025fea:	9300      	str	r3, [sp, #0]
 8025fec:	0909      	lsrs	r1, r1, #4
 8025fee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025ff2:	463b      	mov	r3, r7
 8025ff4:	4429      	add	r1, r5
 8025ff6:	4650      	mov	r0, sl
 8025ff8:	f7ff ff3c 	bl	8025e74 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8025ffc:	f824 0c04 	strh.w	r0, [r4, #-4]
 8026000:	f818 1b01 	ldrb.w	r1, [r8], #1
 8026004:	9b04      	ldr	r3, [sp, #16]
 8026006:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802600a:	9300      	str	r3, [sp, #0]
 802600c:	f001 010f 	and.w	r1, r1, #15
 8026010:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026014:	463b      	mov	r3, r7
 8026016:	4429      	add	r1, r5
 8026018:	4650      	mov	r0, sl
 802601a:	f7ff ff2b 	bl	8025e74 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802601e:	f1ab 0b02 	sub.w	fp, fp, #2
 8026022:	f824 0c02 	strh.w	r0, [r4, #-2]
 8026026:	e7d5      	b.n	8025fd4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8026028:	46b0      	mov	r8, r6
 802602a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802602e:	e7d1      	b.n	8025fd4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8026030:	d10f      	bne.n	8026052 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 8026032:	f898 1000 	ldrb.w	r1, [r8]
 8026036:	9b04      	ldr	r3, [sp, #16]
 8026038:	f8b9 2000 	ldrh.w	r2, [r9]
 802603c:	9300      	str	r3, [sp, #0]
 802603e:	0909      	lsrs	r1, r1, #4
 8026040:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026044:	463b      	mov	r3, r7
 8026046:	4429      	add	r1, r5
 8026048:	4650      	mov	r0, sl
 802604a:	f7ff ff13 	bl	8025e74 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802604e:	f829 0b02 	strh.w	r0, [r9], #2
 8026052:	9b08      	ldr	r3, [sp, #32]
 8026054:	9a05      	ldr	r2, [sp, #20]
 8026056:	881c      	ldrh	r4, [r3, #0]
 8026058:	9b03      	ldr	r3, [sp, #12]
 802605a:	1ae4      	subs	r4, r4, r3
 802605c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8026060:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8026064:	4413      	add	r3, r2
 8026066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026068:	fb93 f3f2 	sdiv	r3, r3, r2
 802606c:	441e      	add	r6, r3
 802606e:	e796      	b.n	8025f9e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 8026070:	4f46      	ldr	r7, [pc, #280]	; (802618c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8026072:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8026076:	42a3      	cmp	r3, r4
 8026078:	d97c      	bls.n	8026174 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 802607a:	9a06      	ldr	r2, [sp, #24]
 802607c:	2a00      	cmp	r2, #0
 802607e:	d054      	beq.n	802612a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 8026080:	7830      	ldrb	r0, [r6, #0]
 8026082:	f000 000f 	and.w	r0, r0, #15
 8026086:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802608a:	eb05 0e00 	add.w	lr, r5, r0
 802608e:	5c28      	ldrb	r0, [r5, r0]
 8026090:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8026094:	f89e e001 	ldrb.w	lr, [lr, #1]
 8026098:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802609c:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80260a0:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 80260a4:	ea42 020e 	orr.w	r2, r2, lr
 80260a8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 80260ac:	f824 2b02 	strh.w	r2, [r4], #2
 80260b0:	9a03      	ldr	r2, [sp, #12]
 80260b2:	1c71      	adds	r1, r6, #1
 80260b4:	f102 3eff 	add.w	lr, r2, #4294967295
 80260b8:	f1be 0f01 	cmp.w	lr, #1
 80260bc:	4620      	mov	r0, r4
 80260be:	f104 0404 	add.w	r4, r4, #4
 80260c2:	dd36      	ble.n	8026132 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 80260c4:	7808      	ldrb	r0, [r1, #0]
 80260c6:	0900      	lsrs	r0, r0, #4
 80260c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80260cc:	eb05 0a00 	add.w	sl, r5, r0
 80260d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80260d4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80260d8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80260dc:	00d2      	lsls	r2, r2, #3
 80260de:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 80260e2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80260e6:	ea49 0202 	orr.w	r2, r9, r2
 80260ea:	f815 9000 	ldrb.w	r9, [r5, r0]
 80260ee:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80260f2:	f824 2c04 	strh.w	r2, [r4, #-4]
 80260f6:	f811 0b01 	ldrb.w	r0, [r1], #1
 80260fa:	f000 000f 	and.w	r0, r0, #15
 80260fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026102:	eb05 0a00 	add.w	sl, r5, r0
 8026106:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802610a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802610e:	00d2      	lsls	r2, r2, #3
 8026110:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8026114:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026118:	ea49 0202 	orr.w	r2, r9, r2
 802611c:	f815 9000 	ldrb.w	r9, [r5, r0]
 8026120:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8026124:	f824 2c02 	strh.w	r2, [r4, #-2]
 8026128:	e7c6      	b.n	80260b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 802612a:	4631      	mov	r1, r6
 802612c:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8026130:	e7c2      	b.n	80260b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8026132:	d111      	bne.n	8026158 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8026134:	7809      	ldrb	r1, [r1, #0]
 8026136:	0909      	lsrs	r1, r1, #4
 8026138:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802613c:	186c      	adds	r4, r5, r1
 802613e:	5c69      	ldrb	r1, [r5, r1]
 8026140:	78a2      	ldrb	r2, [r4, #2]
 8026142:	7864      	ldrb	r4, [r4, #1]
 8026144:	00e4      	lsls	r4, r4, #3
 8026146:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802614a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802614e:	4322      	orrs	r2, r4
 8026150:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8026154:	f820 2b02 	strh.w	r2, [r0], #2
 8026158:	9a03      	ldr	r2, [sp, #12]
 802615a:	f8bc 4000 	ldrh.w	r4, [ip]
 802615e:	9905      	ldr	r1, [sp, #20]
 8026160:	1aa4      	subs	r4, r4, r2
 8026162:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8026166:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802616a:	440a      	add	r2, r1
 802616c:	fb92 f2f8 	sdiv	r2, r2, r8
 8026170:	4416      	add	r6, r2
 8026172:	e780      	b.n	8026076 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8026174:	4b03      	ldr	r3, [pc, #12]	; (8026184 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8026176:	6818      	ldr	r0, [r3, #0]
 8026178:	6803      	ldr	r3, [r0, #0]
 802617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802617c:	4798      	blx	r3
 802617e:	b00f      	add	sp, #60	; 0x3c
 8026180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026184:	20014610 	.word	0x20014610
 8026188:	2001460a 	.word	0x2001460a
 802618c:	fffff800 	.word	0xfffff800

08026190 <CRC_Lock>:
 8026190:	b530      	push	{r4, r5, lr}
 8026192:	4a20      	ldr	r2, [pc, #128]	; (8026214 <CRC_Lock+0x84>)
 8026194:	6813      	ldr	r3, [r2, #0]
 8026196:	f023 0301 	bic.w	r3, r3, #1
 802619a:	6013      	str	r3, [r2, #0]
 802619c:	4b1e      	ldr	r3, [pc, #120]	; (8026218 <CRC_Lock+0x88>)
 802619e:	681a      	ldr	r2, [r3, #0]
 80261a0:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80261a4:	4022      	ands	r2, r4
 80261a6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80261aa:	42aa      	cmp	r2, r5
 80261ac:	d005      	beq.n	80261ba <CRC_Lock+0x2a>
 80261ae:	681b      	ldr	r3, [r3, #0]
 80261b0:	f24c 2270 	movw	r2, #49776	; 0xc270
 80261b4:	4023      	ands	r3, r4
 80261b6:	4293      	cmp	r3, r2
 80261b8:	d124      	bne.n	8026204 <CRC_Lock+0x74>
 80261ba:	4b18      	ldr	r3, [pc, #96]	; (802621c <CRC_Lock+0x8c>)
 80261bc:	681b      	ldr	r3, [r3, #0]
 80261be:	bb0b      	cbnz	r3, 8026204 <CRC_Lock+0x74>
 80261c0:	4b17      	ldr	r3, [pc, #92]	; (8026220 <CRC_Lock+0x90>)
 80261c2:	681a      	ldr	r2, [r3, #0]
 80261c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80261c8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80261cc:	d00d      	beq.n	80261ea <CRC_Lock+0x5a>
 80261ce:	681a      	ldr	r2, [r3, #0]
 80261d0:	f240 4483 	movw	r4, #1155	; 0x483
 80261d4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80261d8:	42a2      	cmp	r2, r4
 80261da:	d006      	beq.n	80261ea <CRC_Lock+0x5a>
 80261dc:	681b      	ldr	r3, [r3, #0]
 80261de:	f240 4285 	movw	r2, #1157	; 0x485
 80261e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80261e6:	4293      	cmp	r3, r2
 80261e8:	d10c      	bne.n	8026204 <CRC_Lock+0x74>
 80261ea:	4b0e      	ldr	r3, [pc, #56]	; (8026224 <CRC_Lock+0x94>)
 80261ec:	2201      	movs	r2, #1
 80261ee:	601a      	str	r2, [r3, #0]
 80261f0:	681a      	ldr	r2, [r3, #0]
 80261f2:	2a00      	cmp	r2, #0
 80261f4:	d1fc      	bne.n	80261f0 <CRC_Lock+0x60>
 80261f6:	4b0c      	ldr	r3, [pc, #48]	; (8026228 <CRC_Lock+0x98>)
 80261f8:	6018      	str	r0, [r3, #0]
 80261fa:	6818      	ldr	r0, [r3, #0]
 80261fc:	1a43      	subs	r3, r0, r1
 80261fe:	4258      	negs	r0, r3
 8026200:	4158      	adcs	r0, r3
 8026202:	bd30      	pop	{r4, r5, pc}
 8026204:	4b09      	ldr	r3, [pc, #36]	; (802622c <CRC_Lock+0x9c>)
 8026206:	2201      	movs	r2, #1
 8026208:	601a      	str	r2, [r3, #0]
 802620a:	681a      	ldr	r2, [r3, #0]
 802620c:	2a00      	cmp	r2, #0
 802620e:	d1fc      	bne.n	802620a <CRC_Lock+0x7a>
 8026210:	4b07      	ldr	r3, [pc, #28]	; (8026230 <CRC_Lock+0xa0>)
 8026212:	e7f1      	b.n	80261f8 <CRC_Lock+0x68>
 8026214:	e0002000 	.word	0xe0002000
 8026218:	e000ed00 	.word	0xe000ed00
 802621c:	e0042000 	.word	0xe0042000
 8026220:	5c001000 	.word	0x5c001000
 8026224:	58024c08 	.word	0x58024c08
 8026228:	58024c00 	.word	0x58024c00
 802622c:	40023008 	.word	0x40023008
 8026230:	40023000 	.word	0x40023000

08026234 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026234:	6101      	str	r1, [r0, #16]
 8026236:	4770      	bx	lr

08026238 <_ZN8touchgfx8Gestures4tickEv>:
 8026238:	7b83      	ldrb	r3, [r0, #14]
 802623a:	b14b      	cbz	r3, 8026250 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802623c:	8903      	ldrh	r3, [r0, #8]
 802623e:	3301      	adds	r3, #1
 8026240:	b29b      	uxth	r3, r3
 8026242:	2b07      	cmp	r3, #7
 8026244:	8103      	strh	r3, [r0, #8]
 8026246:	bf81      	itttt	hi
 8026248:	2300      	movhi	r3, #0
 802624a:	8143      	strhhi	r3, [r0, #10]
 802624c:	8183      	strhhi	r3, [r0, #12]
 802624e:	7383      	strbhi	r3, [r0, #14]
 8026250:	4770      	bx	lr
	...

08026254 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026254:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8026258:	4698      	mov	r8, r3
 802625a:	8883      	ldrh	r3, [r0, #4]
 802625c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8026260:	eba8 0303 	sub.w	r3, r8, r3
 8026264:	b21b      	sxth	r3, r3
 8026266:	4604      	mov	r4, r0
 8026268:	2b00      	cmp	r3, #0
 802626a:	4617      	mov	r7, r2
 802626c:	4a18      	ldr	r2, [pc, #96]	; (80262d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802626e:	9200      	str	r2, [sp, #0]
 8026270:	bfb8      	it	lt
 8026272:	425b      	neglt	r3, r3
 8026274:	8aa2      	ldrh	r2, [r4, #20]
 8026276:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802627a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802627e:	b21b      	sxth	r3, r3
 8026280:	460e      	mov	r6, r1
 8026282:	4293      	cmp	r3, r2
 8026284:	88c1      	ldrh	r1, [r0, #6]
 8026286:	f8ad 1008 	strh.w	r1, [sp, #8]
 802628a:	f04f 0000 	mov.w	r0, #0
 802628e:	f88d 0004 	strb.w	r0, [sp, #4]
 8026292:	f8ad 500c 	strh.w	r5, [sp, #12]
 8026296:	dc07      	bgt.n	80262a8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 8026298:	1a69      	subs	r1, r5, r1
 802629a:	b209      	sxth	r1, r1
 802629c:	2900      	cmp	r1, #0
 802629e:	bfb8      	it	lt
 80262a0:	4249      	neglt	r1, r1
 80262a2:	b209      	sxth	r1, r1
 80262a4:	428a      	cmp	r2, r1
 80262a6:	da10      	bge.n	80262ca <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 80262a8:	6920      	ldr	r0, [r4, #16]
 80262aa:	6803      	ldr	r3, [r0, #0]
 80262ac:	4669      	mov	r1, sp
 80262ae:	685b      	ldr	r3, [r3, #4]
 80262b0:	4798      	blx	r3
 80262b2:	eba8 0606 	sub.w	r6, r8, r6
 80262b6:	2300      	movs	r3, #0
 80262b8:	1bef      	subs	r7, r5, r7
 80262ba:	2001      	movs	r0, #1
 80262bc:	8123      	strh	r3, [r4, #8]
 80262be:	8166      	strh	r6, [r4, #10]
 80262c0:	81a7      	strh	r7, [r4, #12]
 80262c2:	f8a4 8004 	strh.w	r8, [r4, #4]
 80262c6:	80e5      	strh	r5, [r4, #6]
 80262c8:	73a0      	strb	r0, [r4, #14]
 80262ca:	b004      	add	sp, #16
 80262cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80262d0:	08029910 	.word	0x08029910

080262d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80262d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80262d6:	461e      	mov	r6, r3
 80262d8:	1e4b      	subs	r3, r1, #1
 80262da:	2b01      	cmp	r3, #1
 80262dc:	b085      	sub	sp, #20
 80262de:	4604      	mov	r4, r0
 80262e0:	460d      	mov	r5, r1
 80262e2:	4617      	mov	r7, r2
 80262e4:	d84b      	bhi.n	802637e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80262e6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80262ea:	1cd3      	adds	r3, r2, #3
 80262ec:	b29b      	uxth	r3, r3
 80262ee:	2b06      	cmp	r3, #6
 80262f0:	d916      	bls.n	8026320 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80262f2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8026394 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80262f6:	f8cd c004 	str.w	ip, [sp, #4]
 80262fa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80262fe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026302:	6900      	ldr	r0, [r0, #16]
 8026304:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026308:	f04f 0c00 	mov.w	ip, #0
 802630c:	f88d c008 	strb.w	ip, [sp, #8]
 8026310:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026314:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026318:	6803      	ldr	r3, [r0, #0]
 802631a:	a901      	add	r1, sp, #4
 802631c:	689b      	ldr	r3, [r3, #8]
 802631e:	4798      	blx	r3
 8026320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026324:	1cd3      	adds	r3, r2, #3
 8026326:	b29b      	uxth	r3, r3
 8026328:	2b06      	cmp	r3, #6
 802632a:	d916      	bls.n	802635a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802632c:	f8df c064 	ldr.w	ip, [pc, #100]	; 8026394 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8026330:	f8cd c004 	str.w	ip, [sp, #4]
 8026334:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026338:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802633c:	6920      	ldr	r0, [r4, #16]
 802633e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026342:	f04f 0c01 	mov.w	ip, #1
 8026346:	f88d c008 	strb.w	ip, [sp, #8]
 802634a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802634e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026352:	6803      	ldr	r3, [r0, #0]
 8026354:	a901      	add	r1, sp, #4
 8026356:	689b      	ldr	r3, [r3, #8]
 8026358:	4798      	blx	r3
 802635a:	4b0d      	ldr	r3, [pc, #52]	; (8026390 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802635c:	9301      	str	r3, [sp, #4]
 802635e:	6920      	ldr	r0, [r4, #16]
 8026360:	f88d 5008 	strb.w	r5, [sp, #8]
 8026364:	2300      	movs	r3, #0
 8026366:	f8ad 700a 	strh.w	r7, [sp, #10]
 802636a:	f8ad 600c 	strh.w	r6, [sp, #12]
 802636e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026372:	6803      	ldr	r3, [r0, #0]
 8026374:	a901      	add	r1, sp, #4
 8026376:	681b      	ldr	r3, [r3, #0]
 8026378:	4798      	blx	r3
 802637a:	b005      	add	sp, #20
 802637c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802637e:	2900      	cmp	r1, #0
 8026380:	d1eb      	bne.n	802635a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026382:	80a2      	strh	r2, [r4, #4]
 8026384:	80c6      	strh	r6, [r0, #6]
 8026386:	60a1      	str	r1, [r4, #8]
 8026388:	81a1      	strh	r1, [r4, #12]
 802638a:	73a1      	strb	r1, [r4, #14]
 802638c:	e7e5      	b.n	802635a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802638e:	bf00      	nop
 8026390:	080298fc 	.word	0x080298fc
 8026394:	08029924 	.word	0x08029924

08026398 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 8026398:	10c9      	asrs	r1, r1, #3
 802639a:	2900      	cmp	r1, #0
 802639c:	bfb8      	it	lt
 802639e:	4249      	neglt	r1, r1
 80263a0:	2801      	cmp	r0, #1
 80263a2:	d108      	bne.n	80263b6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80263a4:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80263a8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80263ac:	4601      	mov	r1, r0
 80263ae:	dd02      	ble.n	80263b6 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80263b0:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80263b4:	4770      	bx	lr
 80263b6:	29ff      	cmp	r1, #255	; 0xff
 80263b8:	bfa8      	it	ge
 80263ba:	21ff      	movge	r1, #255	; 0xff
 80263bc:	4608      	mov	r0, r1
 80263be:	4770      	bx	lr

080263c0 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80263c0:	b410      	push	{r4}
 80263c2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80263c6:	429c      	cmp	r4, r3
 80263c8:	d803      	bhi.n	80263d2 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 80263ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80263ce:	f7ed bbb5 	b.w	8013b3c <_ZN8touchgfx7Outline6lineToEii>
 80263d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80263d6:	4770      	bx	lr

080263d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 80263d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80263dc:	b08b      	sub	sp, #44	; 0x2c
 80263de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80263e2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80263e6:	9308      	str	r3, [sp, #32]
 80263e8:	4606      	mov	r6, r0
 80263ea:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80263ee:	9309      	str	r3, [sp, #36]	; 0x24
 80263f0:	468a      	mov	sl, r1
 80263f2:	f7ed fd10 	bl	8013e16 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80263f6:	68b5      	ldr	r5, [r6, #8]
 80263f8:	4604      	mov	r4, r0
 80263fa:	2d00      	cmp	r5, #0
 80263fc:	d044      	beq.n	8026488 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80263fe:	6873      	ldr	r3, [r6, #4]
 8026400:	42ab      	cmp	r3, r5
 8026402:	d33d      	bcc.n	8026480 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8026404:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8026408:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 802640c:	eb02 0b03 	add.w	fp, r2, r3
 8026410:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8026414:	fb02 1203 	mla	r2, r2, r3, r1
 8026418:	9205      	str	r2, [sp, #20]
 802641a:	1e6a      	subs	r2, r5, #1
 802641c:	9204      	str	r2, [sp, #16]
 802641e:	f04f 0800 	mov.w	r8, #0
 8026422:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8026426:	f9b4 7000 	ldrsh.w	r7, [r4]
 802642a:	454b      	cmp	r3, r9
 802642c:	463a      	mov	r2, r7
 802642e:	d008      	beq.n	8026442 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8026430:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8026434:	eb03 0b09 	add.w	fp, r3, r9
 8026438:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802643c:	fb03 1309 	mla	r3, r3, r9, r1
 8026440:	9305      	str	r3, [sp, #20]
 8026442:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8026446:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802644a:	4498      	add	r8, r3
 802644c:	9b04      	ldr	r3, [sp, #16]
 802644e:	3b01      	subs	r3, #1
 8026450:	9304      	str	r3, [sp, #16]
 8026452:	9b04      	ldr	r3, [sp, #16]
 8026454:	3301      	adds	r3, #1
 8026456:	d015      	beq.n	8026484 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8026458:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802645c:	42bb      	cmp	r3, r7
 802645e:	d117      	bne.n	8026490 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8026460:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8026464:	9b04      	ldr	r3, [sp, #16]
 8026466:	4548      	cmp	r0, r9
 8026468:	f103 33ff 	add.w	r3, r3, #4294967295
 802646c:	d17f      	bne.n	802656e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x196>
 802646e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8026472:	4401      	add	r1, r0
 8026474:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8026478:	4480      	add	r8, r0
 802647a:	e7e9      	b.n	8026450 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802647c:	461f      	mov	r7, r3
 802647e:	e044      	b.n	802650a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x132>
 8026480:	2000      	movs	r0, #0
 8026482:	e002      	b.n	802648a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8026484:	2900      	cmp	r1, #0
 8026486:	d16f      	bne.n	8026568 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x190>
 8026488:	2001      	movs	r0, #1
 802648a:	b00b      	add	sp, #44	; 0x2c
 802648c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026490:	2900      	cmp	r1, #0
 8026492:	d030      	beq.n	80264f6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11e>
 8026494:	2f00      	cmp	r7, #0
 8026496:	db29      	blt.n	80264ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 8026498:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802649c:	42bb      	cmp	r3, r7
 802649e:	dd25      	ble.n	80264ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 80264a0:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 80264a4:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80264a8:	f7ff ff76 	bl	8026398 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 80264ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264ae:	fb10 f003 	smulbb	r0, r0, r3
 80264b2:	b280      	uxth	r0, r0
 80264b4:	1c41      	adds	r1, r0, #1
 80264b6:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80264ba:	1209      	asrs	r1, r1, #8
 80264bc:	f011 0fff 	tst.w	r1, #255	; 0xff
 80264c0:	d014      	beq.n	80264ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 80264c2:	9808      	ldr	r0, [sp, #32]
 80264c4:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 80264c6:	b2c9      	uxtb	r1, r1
 80264c8:	b2ba      	uxth	r2, r7
 80264ca:	9102      	str	r1, [sp, #8]
 80264cc:	2101      	movs	r1, #1
 80264ce:	4413      	add	r3, r2
 80264d0:	9101      	str	r1, [sp, #4]
 80264d2:	4402      	add	r2, r0
 80264d4:	fa0f f18b 	sxth.w	r1, fp
 80264d8:	f8da 0000 	ldr.w	r0, [sl]
 80264dc:	9100      	str	r1, [sp, #0]
 80264de:	6941      	ldr	r1, [r0, #20]
 80264e0:	b21b      	sxth	r3, r3
 80264e2:	460d      	mov	r5, r1
 80264e4:	b212      	sxth	r2, r2
 80264e6:	9905      	ldr	r1, [sp, #20]
 80264e8:	4650      	mov	r0, sl
 80264ea:	47a8      	blx	r5
 80264ec:	9b04      	ldr	r3, [sp, #16]
 80264ee:	3301      	adds	r3, #1
 80264f0:	f107 0201 	add.w	r2, r7, #1
 80264f4:	d0c8      	beq.n	8026488 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80264f6:	f9b4 7000 	ldrsh.w	r7, [r4]
 80264fa:	1abb      	subs	r3, r7, r2
 80264fc:	2b00      	cmp	r3, #0
 80264fe:	dd31      	ble.n	8026564 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8026500:	2a00      	cmp	r2, #0
 8026502:	dabb      	bge.n	802647c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8026504:	2f00      	cmp	r7, #0
 8026506:	dd2d      	ble.n	8026564 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8026508:	2200      	movs	r2, #0
 802650a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802650e:	19d1      	adds	r1, r2, r7
 8026510:	4299      	cmp	r1, r3
 8026512:	db02      	blt.n	802651a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x142>
 8026514:	1a9f      	subs	r7, r3, r2
 8026516:	2f00      	cmp	r7, #0
 8026518:	dd24      	ble.n	8026564 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802651a:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802651e:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8026522:	f7ff ff39 	bl	8026398 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8026526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026528:	fb10 f003 	smulbb	r0, r0, r3
 802652c:	b280      	uxth	r0, r0
 802652e:	1c41      	adds	r1, r0, #1
 8026530:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026534:	1209      	asrs	r1, r1, #8
 8026536:	f011 0fff 	tst.w	r1, #255	; 0xff
 802653a:	d013      	beq.n	8026564 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802653c:	9808      	ldr	r0, [sp, #32]
 802653e:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8026540:	b292      	uxth	r2, r2
 8026542:	b2c9      	uxtb	r1, r1
 8026544:	4413      	add	r3, r2
 8026546:	9102      	str	r1, [sp, #8]
 8026548:	4402      	add	r2, r0
 802654a:	b23f      	sxth	r7, r7
 802654c:	f8da 0000 	ldr.w	r0, [sl]
 8026550:	9701      	str	r7, [sp, #4]
 8026552:	fa0f f18b 	sxth.w	r1, fp
 8026556:	9100      	str	r1, [sp, #0]
 8026558:	6947      	ldr	r7, [r0, #20]
 802655a:	9905      	ldr	r1, [sp, #20]
 802655c:	b21b      	sxth	r3, r3
 802655e:	b212      	sxth	r2, r2
 8026560:	4650      	mov	r0, sl
 8026562:	47b8      	blx	r7
 8026564:	464b      	mov	r3, r9
 8026566:	e75c      	b.n	8026422 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8026568:	2f00      	cmp	r7, #0
 802656a:	da95      	bge.n	8026498 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xc0>
 802656c:	e78c      	b.n	8026488 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802656e:	2900      	cmp	r1, #0
 8026570:	d0f8      	beq.n	8026564 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8026572:	e78f      	b.n	8026494 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbc>

08026574 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8026574:	4b4b      	ldr	r3, [pc, #300]	; (80266a4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 8026576:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802657a:	2500      	movs	r5, #0
 802657c:	f100 0620 	add.w	r6, r0, #32
 8026580:	4604      	mov	r4, r0
 8026582:	e9c0 3100 	strd	r3, r1, [r0]
 8026586:	e9c0 5502 	strd	r5, r5, [r0, #8]
 802658a:	e9c0 5504 	strd	r5, r5, [r0, #16]
 802658e:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8026592:	f100 0718 	add.w	r7, r0, #24
 8026596:	4630      	mov	r0, r6
 8026598:	4690      	mov	r8, r2
 802659a:	f7ec fe07 	bl	80131ac <_ZN8touchgfx7OutlineC1Ev>
 802659e:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 80265a2:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 80265a6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80265aa:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 80265ae:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80265b2:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 80265b6:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80265ba:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 80265be:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80265c2:	f9b8 2000 	ldrsh.w	r2, [r8]
 80265c6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80265ca:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80265ce:	9500      	str	r5, [sp, #0]
 80265d0:	4410      	add	r0, r2
 80265d2:	b280      	uxth	r0, r0
 80265d4:	fa0f fa80 	sxth.w	sl, r0
 80265d8:	45aa      	cmp	sl, r5
 80265da:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80265de:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80265e2:	dd5c      	ble.n	802669e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 80265e4:	4591      	cmp	r9, r2
 80265e6:	dd5a      	ble.n	802669e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 80265e8:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80265ec:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80265f0:	440b      	add	r3, r1
 80265f2:	b29b      	uxth	r3, r3
 80265f4:	b21d      	sxth	r5, r3
 80265f6:	2d00      	cmp	r5, #0
 80265f8:	dd51      	ble.n	802669e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 80265fa:	458e      	cmp	lr, r1
 80265fc:	dd4f      	ble.n	802669e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 80265fe:	45d1      	cmp	r9, sl
 8026600:	bfb8      	it	lt
 8026602:	fa1f f089 	uxthlt.w	r0, r9
 8026606:	45ae      	cmp	lr, r5
 8026608:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802660c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8026610:	bfb8      	it	lt
 8026612:	fa1f f38e 	uxthlt.w	r3, lr
 8026616:	1a80      	subs	r0, r0, r2
 8026618:	1a5b      	subs	r3, r3, r1
 802661a:	f8ad 0004 	strh.w	r0, [sp, #4]
 802661e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8026622:	f8ad 2000 	strh.w	r2, [sp]
 8026626:	f8ad 1002 	strh.w	r1, [sp, #2]
 802662a:	466d      	mov	r5, sp
 802662c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026630:	e887 0003 	stmia.w	r7, {r0, r1}
 8026634:	f8dc 3000 	ldr.w	r3, [ip]
 8026638:	4660      	mov	r0, ip
 802663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802663c:	4639      	mov	r1, r7
 802663e:	4798      	blx	r3
 8026640:	6861      	ldr	r1, [r4, #4]
 8026642:	4628      	mov	r0, r5
 8026644:	3104      	adds	r1, #4
 8026646:	f7ee ffb7 	bl	80155b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802664a:	4638      	mov	r0, r7
 802664c:	f7ee ff70 	bl	8015530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026650:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8026654:	f8bd 2000 	ldrh.w	r2, [sp]
 8026658:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 802665c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8026660:	4630      	mov	r0, r6
 8026662:	f7ec fd87 	bl	8013174 <_ZN8touchgfx7Outline5resetEv>
 8026666:	f9bd 3000 	ldrsh.w	r3, [sp]
 802666a:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 802666e:	015b      	lsls	r3, r3, #5
 8026670:	60a3      	str	r3, [r4, #8]
 8026672:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8026676:	015b      	lsls	r3, r3, #5
 8026678:	60e3      	str	r3, [r4, #12]
 802667a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802667e:	015b      	lsls	r3, r3, #5
 8026680:	6123      	str	r3, [r4, #16]
 8026682:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8026686:	015b      	lsls	r3, r3, #5
 8026688:	6163      	str	r3, [r4, #20]
 802668a:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 802668e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8026692:	4620      	mov	r0, r4
 8026694:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 8026698:	b002      	add	sp, #8
 802669a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802669e:	2300      	movs	r3, #0
 80266a0:	9301      	str	r3, [sp, #4]
 80266a2:	e7c2      	b.n	802662a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 80266a4:	08029c48 	.word	0x08029c48

080266a8 <_ZN8touchgfx6Canvas5closeEv>:
 80266a8:	b538      	push	{r3, r4, r5, lr}
 80266aa:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80266ae:	4604      	mov	r4, r0
 80266b0:	b193      	cbz	r3, 80266d8 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80266b2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80266b6:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 80266ba:	4213      	tst	r3, r2
 80266bc:	d10c      	bne.n	80266d8 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80266be:	f100 0520 	add.w	r5, r0, #32
 80266c2:	b123      	cbz	r3, 80266ce <_ZN8touchgfx6Canvas5closeEv+0x26>
 80266c4:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 80266c8:	4628      	mov	r0, r5
 80266ca:	f7ff fe79 	bl	80263c0 <_ZN8touchgfx10Rasterizer6lineToEii>
 80266ce:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 80266d2:	4628      	mov	r0, r5
 80266d4:	f7ff fe74 	bl	80263c0 <_ZN8touchgfx10Rasterizer6lineToEii>
 80266d8:	2300      	movs	r3, #0
 80266da:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80266de:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 80266e2:	4298      	cmp	r0, r3
 80266e4:	bf34      	ite	cc
 80266e6:	2000      	movcc	r0, #0
 80266e8:	2001      	movcs	r0, #1
 80266ea:	bd38      	pop	{r3, r4, r5, pc}

080266ec <_ZN8touchgfx6Canvas6renderEh>:
 80266ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80266f0:	4604      	mov	r4, r0
 80266f2:	6840      	ldr	r0, [r0, #4]
 80266f4:	6803      	ldr	r3, [r0, #0]
 80266f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80266f8:	460d      	mov	r5, r1
 80266fa:	4798      	blx	r3
 80266fc:	fb10 f105 	smulbb	r1, r0, r5
 8026700:	b289      	uxth	r1, r1
 8026702:	1c4d      	adds	r5, r1, #1
 8026704:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8026708:	122d      	asrs	r5, r5, #8
 802670a:	f000 809d 	beq.w	8026848 <_ZN8touchgfx6Canvas6renderEh+0x15c>
 802670e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8026712:	2b00      	cmp	r3, #0
 8026714:	f000 8098 	beq.w	8026848 <_ZN8touchgfx6Canvas6renderEh+0x15c>
 8026718:	4620      	mov	r0, r4
 802671a:	f7ff ffc5 	bl	80266a8 <_ZN8touchgfx6Canvas5closeEv>
 802671e:	4607      	mov	r7, r0
 8026720:	2800      	cmp	r0, #0
 8026722:	d048      	beq.n	80267b6 <_ZN8touchgfx6Canvas6renderEh+0xca>
 8026724:	6863      	ldr	r3, [r4, #4]
 8026726:	4e49      	ldr	r6, [pc, #292]	; (802684c <_ZN8touchgfx6Canvas6renderEh+0x160>)
 8026728:	6a98      	ldr	r0, [r3, #40]	; 0x28
 802672a:	6837      	ldr	r7, [r6, #0]
 802672c:	6803      	ldr	r3, [r0, #0]
 802672e:	689b      	ldr	r3, [r3, #8]
 8026730:	4798      	blx	r3
 8026732:	4601      	mov	r1, r0
 8026734:	4638      	mov	r0, r7
 8026736:	f7ea fa49 	bl	8010bcc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802673a:	4607      	mov	r7, r0
 802673c:	f7dd fbce 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 8026740:	6803      	ldr	r3, [r0, #0]
 8026742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026744:	4798      	blx	r3
 8026746:	4680      	mov	r8, r0
 8026748:	f7dd fbc8 	bl	8003edc <_ZN8touchgfx3HAL3lcdEv>
 802674c:	6803      	ldr	r3, [r0, #0]
 802674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026750:	4798      	blx	r3
 8026752:	280b      	cmp	r0, #11
 8026754:	d85d      	bhi.n	8026812 <_ZN8touchgfx6Canvas6renderEh+0x126>
 8026756:	e8df f000 	tbb	[pc, r0]
 802675a:	5e53      	.short	0x5e53
 802675c:	325c066e 	.word	0x325c066e
 8026760:	67676742 	.word	0x67676742
 8026764:	6767      	.short	0x6767
 8026766:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802676a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802676e:	2208      	movs	r2, #8
 8026770:	fb91 f2f2 	sdiv	r2, r1, r2
 8026774:	fb08 2303 	mla	r3, r8, r3, r2
 8026778:	441f      	add	r7, r3
 802677a:	424b      	negs	r3, r1
 802677c:	f003 0307 	and.w	r3, r3, #7
 8026780:	f001 0107 	and.w	r1, r1, #7
 8026784:	bf58      	it	pl
 8026786:	4259      	negpl	r1, r3
 8026788:	b2c9      	uxtb	r1, r1
 802678a:	b2ed      	uxtb	r5, r5
 802678c:	e9cd 1500 	strd	r1, r5, [sp]
 8026790:	6860      	ldr	r0, [r4, #4]
 8026792:	463a      	mov	r2, r7
 8026794:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8026796:	fa0f f388 	sxth.w	r3, r8
 802679a:	f104 0020 	add.w	r0, r4, #32
 802679e:	f7ff fe1b 	bl	80263d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80267a2:	6863      	ldr	r3, [r4, #4]
 80267a4:	4607      	mov	r7, r0
 80267a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80267a8:	6803      	ldr	r3, [r0, #0]
 80267aa:	691b      	ldr	r3, [r3, #16]
 80267ac:	4798      	blx	r3
 80267ae:	6830      	ldr	r0, [r6, #0]
 80267b0:	6803      	ldr	r3, [r0, #0]
 80267b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80267b4:	4798      	blx	r3
 80267b6:	4638      	mov	r0, r7
 80267b8:	b002      	add	sp, #8
 80267ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80267be:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80267c2:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80267c6:	2204      	movs	r2, #4
 80267c8:	fb91 f2f2 	sdiv	r2, r1, r2
 80267cc:	fb08 2303 	mla	r3, r8, r3, r2
 80267d0:	441f      	add	r7, r3
 80267d2:	424b      	negs	r3, r1
 80267d4:	f003 0303 	and.w	r3, r3, #3
 80267d8:	f001 0103 	and.w	r1, r1, #3
 80267dc:	e7d2      	b.n	8026784 <_ZN8touchgfx6Canvas6renderEh+0x98>
 80267de:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80267e2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80267e6:	2900      	cmp	r1, #0
 80267e8:	f04f 0202 	mov.w	r2, #2
 80267ec:	fb91 f2f2 	sdiv	r2, r1, r2
 80267f0:	f001 0101 	and.w	r1, r1, #1
 80267f4:	fb08 2303 	mla	r3, r8, r3, r2
 80267f8:	441f      	add	r7, r3
 80267fa:	bfb8      	it	lt
 80267fc:	4249      	neglt	r1, r1
 80267fe:	e7c3      	b.n	8026788 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8026800:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8026804:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8026808:	fb08 f303 	mul.w	r3, r8, r3
 802680c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8026810:	441f      	add	r7, r3
 8026812:	2100      	movs	r1, #0
 8026814:	e7b9      	b.n	802678a <_ZN8touchgfx6Canvas6renderEh+0x9e>
 8026816:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802681a:	fb08 f203 	mul.w	r2, r8, r3
 802681e:	8b23      	ldrh	r3, [r4, #24]
 8026820:	2103      	movs	r1, #3
 8026822:	fb13 2301 	smlabb	r3, r3, r1, r2
 8026826:	e7f3      	b.n	8026810 <_ZN8touchgfx6Canvas6renderEh+0x124>
 8026828:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802682c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8026830:	fb08 2303 	mla	r3, r8, r3, r2
 8026834:	e7ec      	b.n	8026810 <_ZN8touchgfx6Canvas6renderEh+0x124>
 8026836:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802683a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802683e:	fb08 f303 	mul.w	r3, r8, r3
 8026842:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026846:	e7e3      	b.n	8026810 <_ZN8touchgfx6Canvas6renderEh+0x124>
 8026848:	2701      	movs	r7, #1
 802684a:	e7b4      	b.n	80267b6 <_ZN8touchgfx6Canvas6renderEh+0xca>
 802684c:	20014610 	.word	0x20014610

08026850 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8026850:	b510      	push	{r4, lr}
 8026852:	4b07      	ldr	r3, [pc, #28]	; (8026870 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8026854:	781b      	ldrb	r3, [r3, #0]
 8026856:	2b01      	cmp	r3, #1
 8026858:	d108      	bne.n	802686c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802685a:	6843      	ldr	r3, [r0, #4]
 802685c:	6814      	ldr	r4, [r2, #0]
 802685e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8026862:	680b      	ldr	r3, [r1, #0]
 8026864:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8026868:	6013      	str	r3, [r2, #0]
 802686a:	600c      	str	r4, [r1, #0]
 802686c:	bd10      	pop	{r4, pc}
 802686e:	bf00      	nop
 8026870:	20014608 	.word	0x20014608

08026874 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8026874:	b513      	push	{r0, r1, r4, lr}
 8026876:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802687a:	4604      	mov	r4, r0
 802687c:	e9cd 2100 	strd	r2, r1, [sp]
 8026880:	b9a3      	cbnz	r3, 80268ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8026882:	466a      	mov	r2, sp
 8026884:	a901      	add	r1, sp, #4
 8026886:	4620      	mov	r0, r4
 8026888:	f7ff ffe2 	bl	8026850 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802688c:	68a3      	ldr	r3, [r4, #8]
 802688e:	9901      	ldr	r1, [sp, #4]
 8026890:	9a00      	ldr	r2, [sp, #0]
 8026892:	1ac9      	subs	r1, r1, r3
 8026894:	68e3      	ldr	r3, [r4, #12]
 8026896:	9101      	str	r1, [sp, #4]
 8026898:	1ad2      	subs	r2, r2, r3
 802689a:	2a00      	cmp	r2, #0
 802689c:	9200      	str	r2, [sp, #0]
 802689e:	da0b      	bge.n	80268b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80268a0:	2301      	movs	r3, #1
 80268a2:	2900      	cmp	r1, #0
 80268a4:	da0e      	bge.n	80268c4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80268a6:	f043 0304 	orr.w	r3, r3, #4
 80268aa:	e013      	b.n	80268d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80268ac:	f7ff fefc 	bl	80266a8 <_ZN8touchgfx6Canvas5closeEv>
 80268b0:	2800      	cmp	r0, #0
 80268b2:	d1e6      	bne.n	8026882 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80268b4:	b002      	add	sp, #8
 80268b6:	bd10      	pop	{r4, pc}
 80268b8:	6963      	ldr	r3, [r4, #20]
 80268ba:	429a      	cmp	r2, r3
 80268bc:	bfac      	ite	ge
 80268be:	2302      	movge	r3, #2
 80268c0:	2300      	movlt	r3, #0
 80268c2:	e7ee      	b.n	80268a2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80268c4:	6920      	ldr	r0, [r4, #16]
 80268c6:	4281      	cmp	r1, r0
 80268c8:	bfac      	ite	ge
 80268ca:	2008      	movge	r0, #8
 80268cc:	2000      	movlt	r0, #0
 80268ce:	4318      	orrs	r0, r3
 80268d0:	b2c3      	uxtb	r3, r0
 80268d2:	b158      	cbz	r0, 80268ec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80268d4:	2200      	movs	r2, #0
 80268d6:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80268da:	9901      	ldr	r1, [sp, #4]
 80268dc:	9a00      	ldr	r2, [sp, #0]
 80268de:	66a1      	str	r1, [r4, #104]	; 0x68
 80268e0:	66e2      	str	r2, [r4, #108]	; 0x6c
 80268e2:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 80268e6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80268ea:	e7e3      	b.n	80268b4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 80268ec:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 80268f0:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 80268f4:	4298      	cmp	r0, r3
 80268f6:	d803      	bhi.n	8026900 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 80268f8:	f104 0020 	add.w	r0, r4, #32
 80268fc:	f7ed f938 	bl	8013b70 <_ZN8touchgfx7Outline6moveToEii>
 8026900:	2301      	movs	r3, #1
 8026902:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8026906:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802690a:	2300      	movs	r3, #0
 802690c:	e7e5      	b.n	80268da <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802690e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802690e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026910:	ab02      	add	r3, sp, #8
 8026912:	4604      	mov	r4, r0
 8026914:	f843 2d08 	str.w	r2, [r3, #-8]!
 8026918:	9101      	str	r1, [sp, #4]
 802691a:	461a      	mov	r2, r3
 802691c:	a901      	add	r1, sp, #4
 802691e:	f7ff ff97 	bl	8026850 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8026922:	68a3      	ldr	r3, [r4, #8]
 8026924:	9901      	ldr	r1, [sp, #4]
 8026926:	9a00      	ldr	r2, [sp, #0]
 8026928:	1ac9      	subs	r1, r1, r3
 802692a:	68e3      	ldr	r3, [r4, #12]
 802692c:	9101      	str	r1, [sp, #4]
 802692e:	1ad2      	subs	r2, r2, r3
 8026930:	2a00      	cmp	r2, #0
 8026932:	9200      	str	r2, [sp, #0]
 8026934:	db1c      	blt.n	8026970 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8026936:	6963      	ldr	r3, [r4, #20]
 8026938:	429a      	cmp	r2, r3
 802693a:	bfac      	ite	ge
 802693c:	2002      	movge	r0, #2
 802693e:	2000      	movlt	r0, #0
 8026940:	2900      	cmp	r1, #0
 8026942:	db17      	blt.n	8026974 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8026944:	6923      	ldr	r3, [r4, #16]
 8026946:	4299      	cmp	r1, r3
 8026948:	bfac      	ite	ge
 802694a:	2308      	movge	r3, #8
 802694c:	2300      	movlt	r3, #0
 802694e:	4303      	orrs	r3, r0
 8026950:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8026954:	b2dd      	uxtb	r5, r3
 8026956:	b978      	cbnz	r0, 8026978 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8026958:	f104 0020 	add.w	r0, r4, #32
 802695c:	f7ff fd30 	bl	80263c0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026960:	9b01      	ldr	r3, [sp, #4]
 8026962:	65e3      	str	r3, [r4, #92]	; 0x5c
 8026964:	9b00      	ldr	r3, [sp, #0]
 8026966:	6623      	str	r3, [r4, #96]	; 0x60
 8026968:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 802696c:	b002      	add	sp, #8
 802696e:	bd70      	pop	{r4, r5, r6, pc}
 8026970:	2001      	movs	r0, #1
 8026972:	e7e5      	b.n	8026940 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8026974:	2304      	movs	r3, #4
 8026976:	e7ea      	b.n	802694e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8026978:	b113      	cbz	r3, 8026980 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802697a:	ea10 0305 	ands.w	r3, r0, r5
 802697e:	d11c      	bne.n	80269ba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8026980:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8026984:	f104 0620 	add.w	r6, r4, #32
 8026988:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 802698c:	b98b      	cbnz	r3, 80269b2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802698e:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8026992:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8026996:	4298      	cmp	r0, r3
 8026998:	d802      	bhi.n	80269a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802699a:	4630      	mov	r0, r6
 802699c:	f7ed f8e8 	bl	8013b70 <_ZN8touchgfx7Outline6moveToEii>
 80269a0:	2301      	movs	r3, #1
 80269a2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80269a6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80269aa:	e9dd 2100 	ldrd	r2, r1, [sp]
 80269ae:	4630      	mov	r0, r6
 80269b0:	e7d4      	b.n	802695c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80269b2:	4630      	mov	r0, r6
 80269b4:	f7ff fd04 	bl	80263c0 <_ZN8touchgfx10Rasterizer6lineToEii>
 80269b8:	e7f7      	b.n	80269aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 80269ba:	461d      	mov	r5, r3
 80269bc:	e7d0      	b.n	8026960 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

080269c0 <_ZN8touchgfx6CanvasD1Ev>:
 80269c0:	b510      	push	{r4, lr}
 80269c2:	4b04      	ldr	r3, [pc, #16]	; (80269d4 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80269c4:	4604      	mov	r4, r0
 80269c6:	f840 3b20 	str.w	r3, [r0], #32
 80269ca:	f7ec fbcb 	bl	8013164 <_ZN8touchgfx7OutlineD1Ev>
 80269ce:	4620      	mov	r0, r4
 80269d0:	bd10      	pop	{r4, pc}
 80269d2:	bf00      	nop
 80269d4:	08029c48 	.word	0x08029c48

080269d8 <_ZN8touchgfx6CanvasD0Ev>:
 80269d8:	b510      	push	{r4, lr}
 80269da:	4604      	mov	r4, r0
 80269dc:	f7ff fff0 	bl	80269c0 <_ZN8touchgfx6CanvasD1Ev>
 80269e0:	4620      	mov	r0, r4
 80269e2:	2170      	movs	r1, #112	; 0x70
 80269e4:	f000 f807 	bl	80269f6 <_ZdlPvj>
 80269e8:	4620      	mov	r0, r4
 80269ea:	bd10      	pop	{r4, pc}

080269ec <__aeabi_atexit>:
 80269ec:	460b      	mov	r3, r1
 80269ee:	4601      	mov	r1, r0
 80269f0:	4618      	mov	r0, r3
 80269f2:	f000 b90f 	b.w	8026c14 <__cxa_atexit>

080269f6 <_ZdlPvj>:
 80269f6:	f000 b812 	b.w	8026a1e <_ZdlPv>

080269fa <__cxa_guard_acquire>:
 80269fa:	6803      	ldr	r3, [r0, #0]
 80269fc:	07db      	lsls	r3, r3, #31
 80269fe:	d406      	bmi.n	8026a0e <__cxa_guard_acquire+0x14>
 8026a00:	7843      	ldrb	r3, [r0, #1]
 8026a02:	b103      	cbz	r3, 8026a06 <__cxa_guard_acquire+0xc>
 8026a04:	deff      	udf	#255	; 0xff
 8026a06:	2301      	movs	r3, #1
 8026a08:	7043      	strb	r3, [r0, #1]
 8026a0a:	4618      	mov	r0, r3
 8026a0c:	4770      	bx	lr
 8026a0e:	2000      	movs	r0, #0
 8026a10:	4770      	bx	lr

08026a12 <__cxa_guard_release>:
 8026a12:	2301      	movs	r3, #1
 8026a14:	6003      	str	r3, [r0, #0]
 8026a16:	4770      	bx	lr

08026a18 <__cxa_pure_virtual>:
 8026a18:	b508      	push	{r3, lr}
 8026a1a:	f000 f80f 	bl	8026a3c <_ZSt9terminatev>

08026a1e <_ZdlPv>:
 8026a1e:	f000 b845 	b.w	8026aac <free>

08026a22 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026a22:	b508      	push	{r3, lr}
 8026a24:	4780      	blx	r0
 8026a26:	f000 f80e 	bl	8026a46 <abort>
	...

08026a2c <_ZSt13get_terminatev>:
 8026a2c:	4b02      	ldr	r3, [pc, #8]	; (8026a38 <_ZSt13get_terminatev+0xc>)
 8026a2e:	6818      	ldr	r0, [r3, #0]
 8026a30:	f3bf 8f5b 	dmb	ish
 8026a34:	4770      	bx	lr
 8026a36:	bf00      	nop
 8026a38:	2000010c 	.word	0x2000010c

08026a3c <_ZSt9terminatev>:
 8026a3c:	b508      	push	{r3, lr}
 8026a3e:	f7ff fff5 	bl	8026a2c <_ZSt13get_terminatev>
 8026a42:	f7ff ffee 	bl	8026a22 <_ZN10__cxxabiv111__terminateEPFvvE>

08026a46 <abort>:
 8026a46:	b508      	push	{r3, lr}
 8026a48:	2006      	movs	r0, #6
 8026a4a:	f000 fa27 	bl	8026e9c <raise>
 8026a4e:	2001      	movs	r0, #1
 8026a50:	f7db fb44 	bl	80020dc <_exit>

08026a54 <__assert_func>:
 8026a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026a56:	4614      	mov	r4, r2
 8026a58:	461a      	mov	r2, r3
 8026a5a:	4b09      	ldr	r3, [pc, #36]	; (8026a80 <__assert_func+0x2c>)
 8026a5c:	681b      	ldr	r3, [r3, #0]
 8026a5e:	4605      	mov	r5, r0
 8026a60:	68d8      	ldr	r0, [r3, #12]
 8026a62:	b14c      	cbz	r4, 8026a78 <__assert_func+0x24>
 8026a64:	4b07      	ldr	r3, [pc, #28]	; (8026a84 <__assert_func+0x30>)
 8026a66:	9100      	str	r1, [sp, #0]
 8026a68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026a6c:	4906      	ldr	r1, [pc, #24]	; (8026a88 <__assert_func+0x34>)
 8026a6e:	462b      	mov	r3, r5
 8026a70:	f000 f970 	bl	8026d54 <fiprintf>
 8026a74:	f7ff ffe7 	bl	8026a46 <abort>
 8026a78:	4b04      	ldr	r3, [pc, #16]	; (8026a8c <__assert_func+0x38>)
 8026a7a:	461c      	mov	r4, r3
 8026a7c:	e7f3      	b.n	8026a66 <__assert_func+0x12>
 8026a7e:	bf00      	nop
 8026a80:	20000168 	.word	0x20000168
 8026a84:	08029c54 	.word	0x08029c54
 8026a88:	08029c61 	.word	0x08029c61
 8026a8c:	08029c8f 	.word	0x08029c8f

08026a90 <atexit>:
 8026a90:	2300      	movs	r3, #0
 8026a92:	4601      	mov	r1, r0
 8026a94:	461a      	mov	r2, r3
 8026a96:	4618      	mov	r0, r3
 8026a98:	f000 bb02 	b.w	80270a0 <__register_exitproc>

08026a9c <malloc>:
 8026a9c:	4b02      	ldr	r3, [pc, #8]	; (8026aa8 <malloc+0xc>)
 8026a9e:	4601      	mov	r1, r0
 8026aa0:	6818      	ldr	r0, [r3, #0]
 8026aa2:	f000 b82b 	b.w	8026afc <_malloc_r>
 8026aa6:	bf00      	nop
 8026aa8:	20000168 	.word	0x20000168

08026aac <free>:
 8026aac:	4b02      	ldr	r3, [pc, #8]	; (8026ab8 <free+0xc>)
 8026aae:	4601      	mov	r1, r0
 8026ab0:	6818      	ldr	r0, [r3, #0]
 8026ab2:	f000 bb53 	b.w	802715c <_free_r>
 8026ab6:	bf00      	nop
 8026ab8:	20000168 	.word	0x20000168

08026abc <sbrk_aligned>:
 8026abc:	b570      	push	{r4, r5, r6, lr}
 8026abe:	4e0e      	ldr	r6, [pc, #56]	; (8026af8 <sbrk_aligned+0x3c>)
 8026ac0:	460c      	mov	r4, r1
 8026ac2:	6831      	ldr	r1, [r6, #0]
 8026ac4:	4605      	mov	r5, r0
 8026ac6:	b911      	cbnz	r1, 8026ace <sbrk_aligned+0x12>
 8026ac8:	f000 fa8e 	bl	8026fe8 <_sbrk_r>
 8026acc:	6030      	str	r0, [r6, #0]
 8026ace:	4621      	mov	r1, r4
 8026ad0:	4628      	mov	r0, r5
 8026ad2:	f000 fa89 	bl	8026fe8 <_sbrk_r>
 8026ad6:	1c43      	adds	r3, r0, #1
 8026ad8:	d00a      	beq.n	8026af0 <sbrk_aligned+0x34>
 8026ada:	1cc4      	adds	r4, r0, #3
 8026adc:	f024 0403 	bic.w	r4, r4, #3
 8026ae0:	42a0      	cmp	r0, r4
 8026ae2:	d007      	beq.n	8026af4 <sbrk_aligned+0x38>
 8026ae4:	1a21      	subs	r1, r4, r0
 8026ae6:	4628      	mov	r0, r5
 8026ae8:	f000 fa7e 	bl	8026fe8 <_sbrk_r>
 8026aec:	3001      	adds	r0, #1
 8026aee:	d101      	bne.n	8026af4 <sbrk_aligned+0x38>
 8026af0:	f04f 34ff 	mov.w	r4, #4294967295
 8026af4:	4620      	mov	r0, r4
 8026af6:	bd70      	pop	{r4, r5, r6, pc}
 8026af8:	20014f68 	.word	0x20014f68

08026afc <_malloc_r>:
 8026afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026b00:	1ccd      	adds	r5, r1, #3
 8026b02:	f025 0503 	bic.w	r5, r5, #3
 8026b06:	3508      	adds	r5, #8
 8026b08:	2d0c      	cmp	r5, #12
 8026b0a:	bf38      	it	cc
 8026b0c:	250c      	movcc	r5, #12
 8026b0e:	2d00      	cmp	r5, #0
 8026b10:	4607      	mov	r7, r0
 8026b12:	db01      	blt.n	8026b18 <_malloc_r+0x1c>
 8026b14:	42a9      	cmp	r1, r5
 8026b16:	d905      	bls.n	8026b24 <_malloc_r+0x28>
 8026b18:	230c      	movs	r3, #12
 8026b1a:	603b      	str	r3, [r7, #0]
 8026b1c:	2600      	movs	r6, #0
 8026b1e:	4630      	mov	r0, r6
 8026b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026b24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8026bf8 <_malloc_r+0xfc>
 8026b28:	f000 f868 	bl	8026bfc <__malloc_lock>
 8026b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8026b30:	461c      	mov	r4, r3
 8026b32:	bb5c      	cbnz	r4, 8026b8c <_malloc_r+0x90>
 8026b34:	4629      	mov	r1, r5
 8026b36:	4638      	mov	r0, r7
 8026b38:	f7ff ffc0 	bl	8026abc <sbrk_aligned>
 8026b3c:	1c43      	adds	r3, r0, #1
 8026b3e:	4604      	mov	r4, r0
 8026b40:	d155      	bne.n	8026bee <_malloc_r+0xf2>
 8026b42:	f8d8 4000 	ldr.w	r4, [r8]
 8026b46:	4626      	mov	r6, r4
 8026b48:	2e00      	cmp	r6, #0
 8026b4a:	d145      	bne.n	8026bd8 <_malloc_r+0xdc>
 8026b4c:	2c00      	cmp	r4, #0
 8026b4e:	d048      	beq.n	8026be2 <_malloc_r+0xe6>
 8026b50:	6823      	ldr	r3, [r4, #0]
 8026b52:	4631      	mov	r1, r6
 8026b54:	4638      	mov	r0, r7
 8026b56:	eb04 0903 	add.w	r9, r4, r3
 8026b5a:	f000 fa45 	bl	8026fe8 <_sbrk_r>
 8026b5e:	4581      	cmp	r9, r0
 8026b60:	d13f      	bne.n	8026be2 <_malloc_r+0xe6>
 8026b62:	6821      	ldr	r1, [r4, #0]
 8026b64:	1a6d      	subs	r5, r5, r1
 8026b66:	4629      	mov	r1, r5
 8026b68:	4638      	mov	r0, r7
 8026b6a:	f7ff ffa7 	bl	8026abc <sbrk_aligned>
 8026b6e:	3001      	adds	r0, #1
 8026b70:	d037      	beq.n	8026be2 <_malloc_r+0xe6>
 8026b72:	6823      	ldr	r3, [r4, #0]
 8026b74:	442b      	add	r3, r5
 8026b76:	6023      	str	r3, [r4, #0]
 8026b78:	f8d8 3000 	ldr.w	r3, [r8]
 8026b7c:	2b00      	cmp	r3, #0
 8026b7e:	d038      	beq.n	8026bf2 <_malloc_r+0xf6>
 8026b80:	685a      	ldr	r2, [r3, #4]
 8026b82:	42a2      	cmp	r2, r4
 8026b84:	d12b      	bne.n	8026bde <_malloc_r+0xe2>
 8026b86:	2200      	movs	r2, #0
 8026b88:	605a      	str	r2, [r3, #4]
 8026b8a:	e00f      	b.n	8026bac <_malloc_r+0xb0>
 8026b8c:	6822      	ldr	r2, [r4, #0]
 8026b8e:	1b52      	subs	r2, r2, r5
 8026b90:	d41f      	bmi.n	8026bd2 <_malloc_r+0xd6>
 8026b92:	2a0b      	cmp	r2, #11
 8026b94:	d917      	bls.n	8026bc6 <_malloc_r+0xca>
 8026b96:	1961      	adds	r1, r4, r5
 8026b98:	42a3      	cmp	r3, r4
 8026b9a:	6025      	str	r5, [r4, #0]
 8026b9c:	bf18      	it	ne
 8026b9e:	6059      	strne	r1, [r3, #4]
 8026ba0:	6863      	ldr	r3, [r4, #4]
 8026ba2:	bf08      	it	eq
 8026ba4:	f8c8 1000 	streq.w	r1, [r8]
 8026ba8:	5162      	str	r2, [r4, r5]
 8026baa:	604b      	str	r3, [r1, #4]
 8026bac:	4638      	mov	r0, r7
 8026bae:	f104 060b 	add.w	r6, r4, #11
 8026bb2:	f000 f829 	bl	8026c08 <__malloc_unlock>
 8026bb6:	f026 0607 	bic.w	r6, r6, #7
 8026bba:	1d23      	adds	r3, r4, #4
 8026bbc:	1af2      	subs	r2, r6, r3
 8026bbe:	d0ae      	beq.n	8026b1e <_malloc_r+0x22>
 8026bc0:	1b9b      	subs	r3, r3, r6
 8026bc2:	50a3      	str	r3, [r4, r2]
 8026bc4:	e7ab      	b.n	8026b1e <_malloc_r+0x22>
 8026bc6:	42a3      	cmp	r3, r4
 8026bc8:	6862      	ldr	r2, [r4, #4]
 8026bca:	d1dd      	bne.n	8026b88 <_malloc_r+0x8c>
 8026bcc:	f8c8 2000 	str.w	r2, [r8]
 8026bd0:	e7ec      	b.n	8026bac <_malloc_r+0xb0>
 8026bd2:	4623      	mov	r3, r4
 8026bd4:	6864      	ldr	r4, [r4, #4]
 8026bd6:	e7ac      	b.n	8026b32 <_malloc_r+0x36>
 8026bd8:	4634      	mov	r4, r6
 8026bda:	6876      	ldr	r6, [r6, #4]
 8026bdc:	e7b4      	b.n	8026b48 <_malloc_r+0x4c>
 8026bde:	4613      	mov	r3, r2
 8026be0:	e7cc      	b.n	8026b7c <_malloc_r+0x80>
 8026be2:	230c      	movs	r3, #12
 8026be4:	603b      	str	r3, [r7, #0]
 8026be6:	4638      	mov	r0, r7
 8026be8:	f000 f80e 	bl	8026c08 <__malloc_unlock>
 8026bec:	e797      	b.n	8026b1e <_malloc_r+0x22>
 8026bee:	6025      	str	r5, [r4, #0]
 8026bf0:	e7dc      	b.n	8026bac <_malloc_r+0xb0>
 8026bf2:	605b      	str	r3, [r3, #4]
 8026bf4:	deff      	udf	#255	; 0xff
 8026bf6:	bf00      	nop
 8026bf8:	20014f64 	.word	0x20014f64

08026bfc <__malloc_lock>:
 8026bfc:	4801      	ldr	r0, [pc, #4]	; (8026c04 <__malloc_lock+0x8>)
 8026bfe:	f000 ba3f 	b.w	8027080 <__retarget_lock_acquire_recursive>
 8026c02:	bf00      	nop
 8026c04:	200150ad 	.word	0x200150ad

08026c08 <__malloc_unlock>:
 8026c08:	4801      	ldr	r0, [pc, #4]	; (8026c10 <__malloc_unlock+0x8>)
 8026c0a:	f000 ba3a 	b.w	8027082 <__retarget_lock_release_recursive>
 8026c0e:	bf00      	nop
 8026c10:	200150ad 	.word	0x200150ad

08026c14 <__cxa_atexit>:
 8026c14:	b510      	push	{r4, lr}
 8026c16:	4c05      	ldr	r4, [pc, #20]	; (8026c2c <__cxa_atexit+0x18>)
 8026c18:	4613      	mov	r3, r2
 8026c1a:	b12c      	cbz	r4, 8026c28 <__cxa_atexit+0x14>
 8026c1c:	460a      	mov	r2, r1
 8026c1e:	4601      	mov	r1, r0
 8026c20:	2002      	movs	r0, #2
 8026c22:	f000 fa3d 	bl	80270a0 <__register_exitproc>
 8026c26:	bd10      	pop	{r4, pc}
 8026c28:	4620      	mov	r0, r4
 8026c2a:	e7fc      	b.n	8026c26 <__cxa_atexit+0x12>
 8026c2c:	080270a1 	.word	0x080270a1

08026c30 <std>:
 8026c30:	2300      	movs	r3, #0
 8026c32:	b510      	push	{r4, lr}
 8026c34:	4604      	mov	r4, r0
 8026c36:	e9c0 3300 	strd	r3, r3, [r0]
 8026c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026c3e:	6083      	str	r3, [r0, #8]
 8026c40:	8181      	strh	r1, [r0, #12]
 8026c42:	6643      	str	r3, [r0, #100]	; 0x64
 8026c44:	81c2      	strh	r2, [r0, #14]
 8026c46:	6183      	str	r3, [r0, #24]
 8026c48:	4619      	mov	r1, r3
 8026c4a:	2208      	movs	r2, #8
 8026c4c:	305c      	adds	r0, #92	; 0x5c
 8026c4e:	f000 f8f4 	bl	8026e3a <memset>
 8026c52:	4b05      	ldr	r3, [pc, #20]	; (8026c68 <std+0x38>)
 8026c54:	6263      	str	r3, [r4, #36]	; 0x24
 8026c56:	4b05      	ldr	r3, [pc, #20]	; (8026c6c <std+0x3c>)
 8026c58:	62a3      	str	r3, [r4, #40]	; 0x28
 8026c5a:	4b05      	ldr	r3, [pc, #20]	; (8026c70 <std+0x40>)
 8026c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8026c5e:	4b05      	ldr	r3, [pc, #20]	; (8026c74 <std+0x44>)
 8026c60:	6224      	str	r4, [r4, #32]
 8026c62:	6323      	str	r3, [r4, #48]	; 0x30
 8026c64:	bd10      	pop	{r4, pc}
 8026c66:	bf00      	nop
 8026c68:	08026db5 	.word	0x08026db5
 8026c6c:	08026dd7 	.word	0x08026dd7
 8026c70:	08026e0f 	.word	0x08026e0f
 8026c74:	08026e33 	.word	0x08026e33

08026c78 <stdio_exit_handler>:
 8026c78:	4a02      	ldr	r2, [pc, #8]	; (8026c84 <stdio_exit_handler+0xc>)
 8026c7a:	4903      	ldr	r1, [pc, #12]	; (8026c88 <stdio_exit_handler+0x10>)
 8026c7c:	4803      	ldr	r0, [pc, #12]	; (8026c8c <stdio_exit_handler+0x14>)
 8026c7e:	f000 b87b 	b.w	8026d78 <_fwalk_sglue>
 8026c82:	bf00      	nop
 8026c84:	20000110 	.word	0x20000110
 8026c88:	080278a9 	.word	0x080278a9
 8026c8c:	2000011c 	.word	0x2000011c

08026c90 <cleanup_stdio>:
 8026c90:	6841      	ldr	r1, [r0, #4]
 8026c92:	4b0c      	ldr	r3, [pc, #48]	; (8026cc4 <cleanup_stdio+0x34>)
 8026c94:	4299      	cmp	r1, r3
 8026c96:	b510      	push	{r4, lr}
 8026c98:	4604      	mov	r4, r0
 8026c9a:	d001      	beq.n	8026ca0 <cleanup_stdio+0x10>
 8026c9c:	f000 fe04 	bl	80278a8 <_fflush_r>
 8026ca0:	68a1      	ldr	r1, [r4, #8]
 8026ca2:	4b09      	ldr	r3, [pc, #36]	; (8026cc8 <cleanup_stdio+0x38>)
 8026ca4:	4299      	cmp	r1, r3
 8026ca6:	d002      	beq.n	8026cae <cleanup_stdio+0x1e>
 8026ca8:	4620      	mov	r0, r4
 8026caa:	f000 fdfd 	bl	80278a8 <_fflush_r>
 8026cae:	68e1      	ldr	r1, [r4, #12]
 8026cb0:	4b06      	ldr	r3, [pc, #24]	; (8026ccc <cleanup_stdio+0x3c>)
 8026cb2:	4299      	cmp	r1, r3
 8026cb4:	d004      	beq.n	8026cc0 <cleanup_stdio+0x30>
 8026cb6:	4620      	mov	r0, r4
 8026cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026cbc:	f000 bdf4 	b.w	80278a8 <_fflush_r>
 8026cc0:	bd10      	pop	{r4, pc}
 8026cc2:	bf00      	nop
 8026cc4:	20014f6c 	.word	0x20014f6c
 8026cc8:	20014fd4 	.word	0x20014fd4
 8026ccc:	2001503c 	.word	0x2001503c

08026cd0 <global_stdio_init.part.0>:
 8026cd0:	b510      	push	{r4, lr}
 8026cd2:	4b0b      	ldr	r3, [pc, #44]	; (8026d00 <global_stdio_init.part.0+0x30>)
 8026cd4:	4c0b      	ldr	r4, [pc, #44]	; (8026d04 <global_stdio_init.part.0+0x34>)
 8026cd6:	4a0c      	ldr	r2, [pc, #48]	; (8026d08 <global_stdio_init.part.0+0x38>)
 8026cd8:	601a      	str	r2, [r3, #0]
 8026cda:	4620      	mov	r0, r4
 8026cdc:	2200      	movs	r2, #0
 8026cde:	2104      	movs	r1, #4
 8026ce0:	f7ff ffa6 	bl	8026c30 <std>
 8026ce4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8026ce8:	2201      	movs	r2, #1
 8026cea:	2109      	movs	r1, #9
 8026cec:	f7ff ffa0 	bl	8026c30 <std>
 8026cf0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8026cf4:	2202      	movs	r2, #2
 8026cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026cfa:	2112      	movs	r1, #18
 8026cfc:	f7ff bf98 	b.w	8026c30 <std>
 8026d00:	200150a4 	.word	0x200150a4
 8026d04:	20014f6c 	.word	0x20014f6c
 8026d08:	08026c79 	.word	0x08026c79

08026d0c <__sfp_lock_acquire>:
 8026d0c:	4801      	ldr	r0, [pc, #4]	; (8026d14 <__sfp_lock_acquire+0x8>)
 8026d0e:	f000 b9b7 	b.w	8027080 <__retarget_lock_acquire_recursive>
 8026d12:	bf00      	nop
 8026d14:	200150ae 	.word	0x200150ae

08026d18 <__sfp_lock_release>:
 8026d18:	4801      	ldr	r0, [pc, #4]	; (8026d20 <__sfp_lock_release+0x8>)
 8026d1a:	f000 b9b2 	b.w	8027082 <__retarget_lock_release_recursive>
 8026d1e:	bf00      	nop
 8026d20:	200150ae 	.word	0x200150ae

08026d24 <__sinit>:
 8026d24:	b510      	push	{r4, lr}
 8026d26:	4604      	mov	r4, r0
 8026d28:	f7ff fff0 	bl	8026d0c <__sfp_lock_acquire>
 8026d2c:	6a23      	ldr	r3, [r4, #32]
 8026d2e:	b11b      	cbz	r3, 8026d38 <__sinit+0x14>
 8026d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026d34:	f7ff bff0 	b.w	8026d18 <__sfp_lock_release>
 8026d38:	4b04      	ldr	r3, [pc, #16]	; (8026d4c <__sinit+0x28>)
 8026d3a:	6223      	str	r3, [r4, #32]
 8026d3c:	4b04      	ldr	r3, [pc, #16]	; (8026d50 <__sinit+0x2c>)
 8026d3e:	681b      	ldr	r3, [r3, #0]
 8026d40:	2b00      	cmp	r3, #0
 8026d42:	d1f5      	bne.n	8026d30 <__sinit+0xc>
 8026d44:	f7ff ffc4 	bl	8026cd0 <global_stdio_init.part.0>
 8026d48:	e7f2      	b.n	8026d30 <__sinit+0xc>
 8026d4a:	bf00      	nop
 8026d4c:	08026c91 	.word	0x08026c91
 8026d50:	200150a4 	.word	0x200150a4

08026d54 <fiprintf>:
 8026d54:	b40e      	push	{r1, r2, r3}
 8026d56:	b503      	push	{r0, r1, lr}
 8026d58:	4601      	mov	r1, r0
 8026d5a:	ab03      	add	r3, sp, #12
 8026d5c:	4805      	ldr	r0, [pc, #20]	; (8026d74 <fiprintf+0x20>)
 8026d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8026d62:	6800      	ldr	r0, [r0, #0]
 8026d64:	9301      	str	r3, [sp, #4]
 8026d66:	f000 fa6f 	bl	8027248 <_vfiprintf_r>
 8026d6a:	b002      	add	sp, #8
 8026d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8026d70:	b003      	add	sp, #12
 8026d72:	4770      	bx	lr
 8026d74:	20000168 	.word	0x20000168

08026d78 <_fwalk_sglue>:
 8026d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026d7c:	4607      	mov	r7, r0
 8026d7e:	4688      	mov	r8, r1
 8026d80:	4614      	mov	r4, r2
 8026d82:	2600      	movs	r6, #0
 8026d84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026d88:	f1b9 0901 	subs.w	r9, r9, #1
 8026d8c:	d505      	bpl.n	8026d9a <_fwalk_sglue+0x22>
 8026d8e:	6824      	ldr	r4, [r4, #0]
 8026d90:	2c00      	cmp	r4, #0
 8026d92:	d1f7      	bne.n	8026d84 <_fwalk_sglue+0xc>
 8026d94:	4630      	mov	r0, r6
 8026d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026d9a:	89ab      	ldrh	r3, [r5, #12]
 8026d9c:	2b01      	cmp	r3, #1
 8026d9e:	d907      	bls.n	8026db0 <_fwalk_sglue+0x38>
 8026da0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026da4:	3301      	adds	r3, #1
 8026da6:	d003      	beq.n	8026db0 <_fwalk_sglue+0x38>
 8026da8:	4629      	mov	r1, r5
 8026daa:	4638      	mov	r0, r7
 8026dac:	47c0      	blx	r8
 8026dae:	4306      	orrs	r6, r0
 8026db0:	3568      	adds	r5, #104	; 0x68
 8026db2:	e7e9      	b.n	8026d88 <_fwalk_sglue+0x10>

08026db4 <__sread>:
 8026db4:	b510      	push	{r4, lr}
 8026db6:	460c      	mov	r4, r1
 8026db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026dbc:	f000 f8ee 	bl	8026f9c <_read_r>
 8026dc0:	2800      	cmp	r0, #0
 8026dc2:	bfab      	itete	ge
 8026dc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8026dc8:	181b      	addge	r3, r3, r0
 8026dca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026dce:	bfac      	ite	ge
 8026dd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8026dd2:	81a3      	strhlt	r3, [r4, #12]
 8026dd4:	bd10      	pop	{r4, pc}

08026dd6 <__swrite>:
 8026dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026dda:	461f      	mov	r7, r3
 8026ddc:	898b      	ldrh	r3, [r1, #12]
 8026dde:	05db      	lsls	r3, r3, #23
 8026de0:	4605      	mov	r5, r0
 8026de2:	460c      	mov	r4, r1
 8026de4:	4616      	mov	r6, r2
 8026de6:	d505      	bpl.n	8026df4 <__swrite+0x1e>
 8026de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026dec:	2302      	movs	r3, #2
 8026dee:	2200      	movs	r2, #0
 8026df0:	f000 f8c2 	bl	8026f78 <_lseek_r>
 8026df4:	89a3      	ldrh	r3, [r4, #12]
 8026df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026dfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026dfe:	81a3      	strh	r3, [r4, #12]
 8026e00:	4632      	mov	r2, r6
 8026e02:	463b      	mov	r3, r7
 8026e04:	4628      	mov	r0, r5
 8026e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026e0a:	f000 b8fd 	b.w	8027008 <_write_r>

08026e0e <__sseek>:
 8026e0e:	b510      	push	{r4, lr}
 8026e10:	460c      	mov	r4, r1
 8026e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026e16:	f000 f8af 	bl	8026f78 <_lseek_r>
 8026e1a:	1c43      	adds	r3, r0, #1
 8026e1c:	89a3      	ldrh	r3, [r4, #12]
 8026e1e:	bf15      	itete	ne
 8026e20:	6560      	strne	r0, [r4, #84]	; 0x54
 8026e22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026e26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026e2a:	81a3      	strheq	r3, [r4, #12]
 8026e2c:	bf18      	it	ne
 8026e2e:	81a3      	strhne	r3, [r4, #12]
 8026e30:	bd10      	pop	{r4, pc}

08026e32 <__sclose>:
 8026e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026e36:	f000 b839 	b.w	8026eac <_close_r>

08026e3a <memset>:
 8026e3a:	4402      	add	r2, r0
 8026e3c:	4603      	mov	r3, r0
 8026e3e:	4293      	cmp	r3, r2
 8026e40:	d100      	bne.n	8026e44 <memset+0xa>
 8026e42:	4770      	bx	lr
 8026e44:	f803 1b01 	strb.w	r1, [r3], #1
 8026e48:	e7f9      	b.n	8026e3e <memset+0x4>

08026e4a <_raise_r>:
 8026e4a:	291f      	cmp	r1, #31
 8026e4c:	b538      	push	{r3, r4, r5, lr}
 8026e4e:	4604      	mov	r4, r0
 8026e50:	460d      	mov	r5, r1
 8026e52:	d904      	bls.n	8026e5e <_raise_r+0x14>
 8026e54:	2316      	movs	r3, #22
 8026e56:	6003      	str	r3, [r0, #0]
 8026e58:	f04f 30ff 	mov.w	r0, #4294967295
 8026e5c:	bd38      	pop	{r3, r4, r5, pc}
 8026e5e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8026e60:	b112      	cbz	r2, 8026e68 <_raise_r+0x1e>
 8026e62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026e66:	b94b      	cbnz	r3, 8026e7c <_raise_r+0x32>
 8026e68:	4620      	mov	r0, r4
 8026e6a:	f000 f8bb 	bl	8026fe4 <_getpid_r>
 8026e6e:	462a      	mov	r2, r5
 8026e70:	4601      	mov	r1, r0
 8026e72:	4620      	mov	r0, r4
 8026e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026e78:	f000 b8a2 	b.w	8026fc0 <_kill_r>
 8026e7c:	2b01      	cmp	r3, #1
 8026e7e:	d00a      	beq.n	8026e96 <_raise_r+0x4c>
 8026e80:	1c59      	adds	r1, r3, #1
 8026e82:	d103      	bne.n	8026e8c <_raise_r+0x42>
 8026e84:	2316      	movs	r3, #22
 8026e86:	6003      	str	r3, [r0, #0]
 8026e88:	2001      	movs	r0, #1
 8026e8a:	e7e7      	b.n	8026e5c <_raise_r+0x12>
 8026e8c:	2400      	movs	r4, #0
 8026e8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026e92:	4628      	mov	r0, r5
 8026e94:	4798      	blx	r3
 8026e96:	2000      	movs	r0, #0
 8026e98:	e7e0      	b.n	8026e5c <_raise_r+0x12>
	...

08026e9c <raise>:
 8026e9c:	4b02      	ldr	r3, [pc, #8]	; (8026ea8 <raise+0xc>)
 8026e9e:	4601      	mov	r1, r0
 8026ea0:	6818      	ldr	r0, [r3, #0]
 8026ea2:	f7ff bfd2 	b.w	8026e4a <_raise_r>
 8026ea6:	bf00      	nop
 8026ea8:	20000168 	.word	0x20000168

08026eac <_close_r>:
 8026eac:	b538      	push	{r3, r4, r5, lr}
 8026eae:	4d06      	ldr	r5, [pc, #24]	; (8026ec8 <_close_r+0x1c>)
 8026eb0:	2300      	movs	r3, #0
 8026eb2:	4604      	mov	r4, r0
 8026eb4:	4608      	mov	r0, r1
 8026eb6:	602b      	str	r3, [r5, #0]
 8026eb8:	f7db f953 	bl	8002162 <_close>
 8026ebc:	1c43      	adds	r3, r0, #1
 8026ebe:	d102      	bne.n	8026ec6 <_close_r+0x1a>
 8026ec0:	682b      	ldr	r3, [r5, #0]
 8026ec2:	b103      	cbz	r3, 8026ec6 <_close_r+0x1a>
 8026ec4:	6023      	str	r3, [r4, #0]
 8026ec6:	bd38      	pop	{r3, r4, r5, pc}
 8026ec8:	200150a8 	.word	0x200150a8

08026ecc <_reclaim_reent>:
 8026ecc:	4b29      	ldr	r3, [pc, #164]	; (8026f74 <_reclaim_reent+0xa8>)
 8026ece:	681b      	ldr	r3, [r3, #0]
 8026ed0:	4283      	cmp	r3, r0
 8026ed2:	b570      	push	{r4, r5, r6, lr}
 8026ed4:	4604      	mov	r4, r0
 8026ed6:	d04b      	beq.n	8026f70 <_reclaim_reent+0xa4>
 8026ed8:	69c3      	ldr	r3, [r0, #28]
 8026eda:	b143      	cbz	r3, 8026eee <_reclaim_reent+0x22>
 8026edc:	68db      	ldr	r3, [r3, #12]
 8026ede:	2b00      	cmp	r3, #0
 8026ee0:	d144      	bne.n	8026f6c <_reclaim_reent+0xa0>
 8026ee2:	69e3      	ldr	r3, [r4, #28]
 8026ee4:	6819      	ldr	r1, [r3, #0]
 8026ee6:	b111      	cbz	r1, 8026eee <_reclaim_reent+0x22>
 8026ee8:	4620      	mov	r0, r4
 8026eea:	f000 f937 	bl	802715c <_free_r>
 8026eee:	6961      	ldr	r1, [r4, #20]
 8026ef0:	b111      	cbz	r1, 8026ef8 <_reclaim_reent+0x2c>
 8026ef2:	4620      	mov	r0, r4
 8026ef4:	f000 f932 	bl	802715c <_free_r>
 8026ef8:	69e1      	ldr	r1, [r4, #28]
 8026efa:	b111      	cbz	r1, 8026f02 <_reclaim_reent+0x36>
 8026efc:	4620      	mov	r0, r4
 8026efe:	f000 f92d 	bl	802715c <_free_r>
 8026f02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8026f04:	b111      	cbz	r1, 8026f0c <_reclaim_reent+0x40>
 8026f06:	4620      	mov	r0, r4
 8026f08:	f000 f928 	bl	802715c <_free_r>
 8026f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026f0e:	b111      	cbz	r1, 8026f16 <_reclaim_reent+0x4a>
 8026f10:	4620      	mov	r0, r4
 8026f12:	f000 f923 	bl	802715c <_free_r>
 8026f16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8026f18:	b111      	cbz	r1, 8026f20 <_reclaim_reent+0x54>
 8026f1a:	4620      	mov	r0, r4
 8026f1c:	f000 f91e 	bl	802715c <_free_r>
 8026f20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8026f22:	b111      	cbz	r1, 8026f2a <_reclaim_reent+0x5e>
 8026f24:	4620      	mov	r0, r4
 8026f26:	f000 f919 	bl	802715c <_free_r>
 8026f2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8026f2c:	b111      	cbz	r1, 8026f34 <_reclaim_reent+0x68>
 8026f2e:	4620      	mov	r0, r4
 8026f30:	f000 f914 	bl	802715c <_free_r>
 8026f34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8026f36:	b111      	cbz	r1, 8026f3e <_reclaim_reent+0x72>
 8026f38:	4620      	mov	r0, r4
 8026f3a:	f000 f90f 	bl	802715c <_free_r>
 8026f3e:	6a23      	ldr	r3, [r4, #32]
 8026f40:	b1b3      	cbz	r3, 8026f70 <_reclaim_reent+0xa4>
 8026f42:	4620      	mov	r0, r4
 8026f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026f48:	4718      	bx	r3
 8026f4a:	5949      	ldr	r1, [r1, r5]
 8026f4c:	b941      	cbnz	r1, 8026f60 <_reclaim_reent+0x94>
 8026f4e:	3504      	adds	r5, #4
 8026f50:	69e3      	ldr	r3, [r4, #28]
 8026f52:	2d80      	cmp	r5, #128	; 0x80
 8026f54:	68d9      	ldr	r1, [r3, #12]
 8026f56:	d1f8      	bne.n	8026f4a <_reclaim_reent+0x7e>
 8026f58:	4620      	mov	r0, r4
 8026f5a:	f000 f8ff 	bl	802715c <_free_r>
 8026f5e:	e7c0      	b.n	8026ee2 <_reclaim_reent+0x16>
 8026f60:	680e      	ldr	r6, [r1, #0]
 8026f62:	4620      	mov	r0, r4
 8026f64:	f000 f8fa 	bl	802715c <_free_r>
 8026f68:	4631      	mov	r1, r6
 8026f6a:	e7ef      	b.n	8026f4c <_reclaim_reent+0x80>
 8026f6c:	2500      	movs	r5, #0
 8026f6e:	e7ef      	b.n	8026f50 <_reclaim_reent+0x84>
 8026f70:	bd70      	pop	{r4, r5, r6, pc}
 8026f72:	bf00      	nop
 8026f74:	20000168 	.word	0x20000168

08026f78 <_lseek_r>:
 8026f78:	b538      	push	{r3, r4, r5, lr}
 8026f7a:	4d07      	ldr	r5, [pc, #28]	; (8026f98 <_lseek_r+0x20>)
 8026f7c:	4604      	mov	r4, r0
 8026f7e:	4608      	mov	r0, r1
 8026f80:	4611      	mov	r1, r2
 8026f82:	2200      	movs	r2, #0
 8026f84:	602a      	str	r2, [r5, #0]
 8026f86:	461a      	mov	r2, r3
 8026f88:	f7db f912 	bl	80021b0 <_lseek>
 8026f8c:	1c43      	adds	r3, r0, #1
 8026f8e:	d102      	bne.n	8026f96 <_lseek_r+0x1e>
 8026f90:	682b      	ldr	r3, [r5, #0]
 8026f92:	b103      	cbz	r3, 8026f96 <_lseek_r+0x1e>
 8026f94:	6023      	str	r3, [r4, #0]
 8026f96:	bd38      	pop	{r3, r4, r5, pc}
 8026f98:	200150a8 	.word	0x200150a8

08026f9c <_read_r>:
 8026f9c:	b538      	push	{r3, r4, r5, lr}
 8026f9e:	4d07      	ldr	r5, [pc, #28]	; (8026fbc <_read_r+0x20>)
 8026fa0:	4604      	mov	r4, r0
 8026fa2:	4608      	mov	r0, r1
 8026fa4:	4611      	mov	r1, r2
 8026fa6:	2200      	movs	r2, #0
 8026fa8:	602a      	str	r2, [r5, #0]
 8026faa:	461a      	mov	r2, r3
 8026fac:	f7db f8a0 	bl	80020f0 <_read>
 8026fb0:	1c43      	adds	r3, r0, #1
 8026fb2:	d102      	bne.n	8026fba <_read_r+0x1e>
 8026fb4:	682b      	ldr	r3, [r5, #0]
 8026fb6:	b103      	cbz	r3, 8026fba <_read_r+0x1e>
 8026fb8:	6023      	str	r3, [r4, #0]
 8026fba:	bd38      	pop	{r3, r4, r5, pc}
 8026fbc:	200150a8 	.word	0x200150a8

08026fc0 <_kill_r>:
 8026fc0:	b538      	push	{r3, r4, r5, lr}
 8026fc2:	4d07      	ldr	r5, [pc, #28]	; (8026fe0 <_kill_r+0x20>)
 8026fc4:	2300      	movs	r3, #0
 8026fc6:	4604      	mov	r4, r0
 8026fc8:	4608      	mov	r0, r1
 8026fca:	4611      	mov	r1, r2
 8026fcc:	602b      	str	r3, [r5, #0]
 8026fce:	f7db f875 	bl	80020bc <_kill>
 8026fd2:	1c43      	adds	r3, r0, #1
 8026fd4:	d102      	bne.n	8026fdc <_kill_r+0x1c>
 8026fd6:	682b      	ldr	r3, [r5, #0]
 8026fd8:	b103      	cbz	r3, 8026fdc <_kill_r+0x1c>
 8026fda:	6023      	str	r3, [r4, #0]
 8026fdc:	bd38      	pop	{r3, r4, r5, pc}
 8026fde:	bf00      	nop
 8026fe0:	200150a8 	.word	0x200150a8

08026fe4 <_getpid_r>:
 8026fe4:	f7db b862 	b.w	80020ac <_getpid>

08026fe8 <_sbrk_r>:
 8026fe8:	b538      	push	{r3, r4, r5, lr}
 8026fea:	4d06      	ldr	r5, [pc, #24]	; (8027004 <_sbrk_r+0x1c>)
 8026fec:	2300      	movs	r3, #0
 8026fee:	4604      	mov	r4, r0
 8026ff0:	4608      	mov	r0, r1
 8026ff2:	602b      	str	r3, [r5, #0]
 8026ff4:	f7db f8ea 	bl	80021cc <_sbrk>
 8026ff8:	1c43      	adds	r3, r0, #1
 8026ffa:	d102      	bne.n	8027002 <_sbrk_r+0x1a>
 8026ffc:	682b      	ldr	r3, [r5, #0]
 8026ffe:	b103      	cbz	r3, 8027002 <_sbrk_r+0x1a>
 8027000:	6023      	str	r3, [r4, #0]
 8027002:	bd38      	pop	{r3, r4, r5, pc}
 8027004:	200150a8 	.word	0x200150a8

08027008 <_write_r>:
 8027008:	b538      	push	{r3, r4, r5, lr}
 802700a:	4d07      	ldr	r5, [pc, #28]	; (8027028 <_write_r+0x20>)
 802700c:	4604      	mov	r4, r0
 802700e:	4608      	mov	r0, r1
 8027010:	4611      	mov	r1, r2
 8027012:	2200      	movs	r2, #0
 8027014:	602a      	str	r2, [r5, #0]
 8027016:	461a      	mov	r2, r3
 8027018:	f7db f887 	bl	800212a <_write>
 802701c:	1c43      	adds	r3, r0, #1
 802701e:	d102      	bne.n	8027026 <_write_r+0x1e>
 8027020:	682b      	ldr	r3, [r5, #0]
 8027022:	b103      	cbz	r3, 8027026 <_write_r+0x1e>
 8027024:	6023      	str	r3, [r4, #0]
 8027026:	bd38      	pop	{r3, r4, r5, pc}
 8027028:	200150a8 	.word	0x200150a8

0802702c <__errno>:
 802702c:	4b01      	ldr	r3, [pc, #4]	; (8027034 <__errno+0x8>)
 802702e:	6818      	ldr	r0, [r3, #0]
 8027030:	4770      	bx	lr
 8027032:	bf00      	nop
 8027034:	20000168 	.word	0x20000168

08027038 <__libc_init_array>:
 8027038:	b570      	push	{r4, r5, r6, lr}
 802703a:	4d0d      	ldr	r5, [pc, #52]	; (8027070 <__libc_init_array+0x38>)
 802703c:	4c0d      	ldr	r4, [pc, #52]	; (8027074 <__libc_init_array+0x3c>)
 802703e:	1b64      	subs	r4, r4, r5
 8027040:	10a4      	asrs	r4, r4, #2
 8027042:	2600      	movs	r6, #0
 8027044:	42a6      	cmp	r6, r4
 8027046:	d109      	bne.n	802705c <__libc_init_array+0x24>
 8027048:	4d0b      	ldr	r5, [pc, #44]	; (8027078 <__libc_init_array+0x40>)
 802704a:	4c0c      	ldr	r4, [pc, #48]	; (802707c <__libc_init_array+0x44>)
 802704c:	f000 fd6e 	bl	8027b2c <_init>
 8027050:	1b64      	subs	r4, r4, r5
 8027052:	10a4      	asrs	r4, r4, #2
 8027054:	2600      	movs	r6, #0
 8027056:	42a6      	cmp	r6, r4
 8027058:	d105      	bne.n	8027066 <__libc_init_array+0x2e>
 802705a:	bd70      	pop	{r4, r5, r6, pc}
 802705c:	f855 3b04 	ldr.w	r3, [r5], #4
 8027060:	4798      	blx	r3
 8027062:	3601      	adds	r6, #1
 8027064:	e7ee      	b.n	8027044 <__libc_init_array+0xc>
 8027066:	f855 3b04 	ldr.w	r3, [r5], #4
 802706a:	4798      	blx	r3
 802706c:	3601      	adds	r6, #1
 802706e:	e7f2      	b.n	8027056 <__libc_init_array+0x1e>
 8027070:	081a37a8 	.word	0x081a37a8
 8027074:	081a37a8 	.word	0x081a37a8
 8027078:	081a37a8 	.word	0x081a37a8
 802707c:	081a37c0 	.word	0x081a37c0

08027080 <__retarget_lock_acquire_recursive>:
 8027080:	4770      	bx	lr

08027082 <__retarget_lock_release_recursive>:
 8027082:	4770      	bx	lr

08027084 <memcpy>:
 8027084:	440a      	add	r2, r1
 8027086:	4291      	cmp	r1, r2
 8027088:	f100 33ff 	add.w	r3, r0, #4294967295
 802708c:	d100      	bne.n	8027090 <memcpy+0xc>
 802708e:	4770      	bx	lr
 8027090:	b510      	push	{r4, lr}
 8027092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027096:	f803 4f01 	strb.w	r4, [r3, #1]!
 802709a:	4291      	cmp	r1, r2
 802709c:	d1f9      	bne.n	8027092 <memcpy+0xe>
 802709e:	bd10      	pop	{r4, pc}

080270a0 <__register_exitproc>:
 80270a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80270a4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8027158 <__register_exitproc+0xb8>
 80270a8:	4606      	mov	r6, r0
 80270aa:	f8d8 0000 	ldr.w	r0, [r8]
 80270ae:	461f      	mov	r7, r3
 80270b0:	460d      	mov	r5, r1
 80270b2:	4691      	mov	r9, r2
 80270b4:	f7ff ffe4 	bl	8027080 <__retarget_lock_acquire_recursive>
 80270b8:	4b23      	ldr	r3, [pc, #140]	; (8027148 <__register_exitproc+0xa8>)
 80270ba:	681c      	ldr	r4, [r3, #0]
 80270bc:	b934      	cbnz	r4, 80270cc <__register_exitproc+0x2c>
 80270be:	4c23      	ldr	r4, [pc, #140]	; (802714c <__register_exitproc+0xac>)
 80270c0:	601c      	str	r4, [r3, #0]
 80270c2:	4b23      	ldr	r3, [pc, #140]	; (8027150 <__register_exitproc+0xb0>)
 80270c4:	b113      	cbz	r3, 80270cc <__register_exitproc+0x2c>
 80270c6:	681b      	ldr	r3, [r3, #0]
 80270c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80270cc:	6863      	ldr	r3, [r4, #4]
 80270ce:	2b1f      	cmp	r3, #31
 80270d0:	dd07      	ble.n	80270e2 <__register_exitproc+0x42>
 80270d2:	f8d8 0000 	ldr.w	r0, [r8]
 80270d6:	f7ff ffd4 	bl	8027082 <__retarget_lock_release_recursive>
 80270da:	f04f 30ff 	mov.w	r0, #4294967295
 80270de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80270e2:	b32e      	cbz	r6, 8027130 <__register_exitproc+0x90>
 80270e4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80270e8:	b968      	cbnz	r0, 8027106 <__register_exitproc+0x66>
 80270ea:	4b1a      	ldr	r3, [pc, #104]	; (8027154 <__register_exitproc+0xb4>)
 80270ec:	2b00      	cmp	r3, #0
 80270ee:	d0f0      	beq.n	80270d2 <__register_exitproc+0x32>
 80270f0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80270f4:	f7ff fcd2 	bl	8026a9c <malloc>
 80270f8:	2800      	cmp	r0, #0
 80270fa:	d0ea      	beq.n	80270d2 <__register_exitproc+0x32>
 80270fc:	2300      	movs	r3, #0
 80270fe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8027102:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8027106:	6863      	ldr	r3, [r4, #4]
 8027108:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802710c:	2201      	movs	r2, #1
 802710e:	409a      	lsls	r2, r3
 8027110:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8027114:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8027118:	4313      	orrs	r3, r2
 802711a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802711e:	2e02      	cmp	r6, #2
 8027120:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8027124:	bf02      	ittt	eq
 8027126:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802712a:	4313      	orreq	r3, r2
 802712c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8027130:	6863      	ldr	r3, [r4, #4]
 8027132:	f8d8 0000 	ldr.w	r0, [r8]
 8027136:	1c5a      	adds	r2, r3, #1
 8027138:	3302      	adds	r3, #2
 802713a:	6062      	str	r2, [r4, #4]
 802713c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8027140:	f7ff ff9f 	bl	8027082 <__retarget_lock_release_recursive>
 8027144:	2000      	movs	r0, #0
 8027146:	e7ca      	b.n	80270de <__register_exitproc+0x3e>
 8027148:	2001513c 	.word	0x2001513c
 802714c:	200150b0 	.word	0x200150b0
 8027150:	08029c90 	.word	0x08029c90
 8027154:	08026a9d 	.word	0x08026a9d
 8027158:	2000016c 	.word	0x2000016c

0802715c <_free_r>:
 802715c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802715e:	2900      	cmp	r1, #0
 8027160:	d044      	beq.n	80271ec <_free_r+0x90>
 8027162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027166:	9001      	str	r0, [sp, #4]
 8027168:	2b00      	cmp	r3, #0
 802716a:	f1a1 0404 	sub.w	r4, r1, #4
 802716e:	bfb8      	it	lt
 8027170:	18e4      	addlt	r4, r4, r3
 8027172:	f7ff fd43 	bl	8026bfc <__malloc_lock>
 8027176:	4a1e      	ldr	r2, [pc, #120]	; (80271f0 <_free_r+0x94>)
 8027178:	9801      	ldr	r0, [sp, #4]
 802717a:	6813      	ldr	r3, [r2, #0]
 802717c:	b933      	cbnz	r3, 802718c <_free_r+0x30>
 802717e:	6063      	str	r3, [r4, #4]
 8027180:	6014      	str	r4, [r2, #0]
 8027182:	b003      	add	sp, #12
 8027184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027188:	f7ff bd3e 	b.w	8026c08 <__malloc_unlock>
 802718c:	42a3      	cmp	r3, r4
 802718e:	d908      	bls.n	80271a2 <_free_r+0x46>
 8027190:	6825      	ldr	r5, [r4, #0]
 8027192:	1961      	adds	r1, r4, r5
 8027194:	428b      	cmp	r3, r1
 8027196:	bf01      	itttt	eq
 8027198:	6819      	ldreq	r1, [r3, #0]
 802719a:	685b      	ldreq	r3, [r3, #4]
 802719c:	1949      	addeq	r1, r1, r5
 802719e:	6021      	streq	r1, [r4, #0]
 80271a0:	e7ed      	b.n	802717e <_free_r+0x22>
 80271a2:	461a      	mov	r2, r3
 80271a4:	685b      	ldr	r3, [r3, #4]
 80271a6:	b10b      	cbz	r3, 80271ac <_free_r+0x50>
 80271a8:	42a3      	cmp	r3, r4
 80271aa:	d9fa      	bls.n	80271a2 <_free_r+0x46>
 80271ac:	6811      	ldr	r1, [r2, #0]
 80271ae:	1855      	adds	r5, r2, r1
 80271b0:	42a5      	cmp	r5, r4
 80271b2:	d10b      	bne.n	80271cc <_free_r+0x70>
 80271b4:	6824      	ldr	r4, [r4, #0]
 80271b6:	4421      	add	r1, r4
 80271b8:	1854      	adds	r4, r2, r1
 80271ba:	42a3      	cmp	r3, r4
 80271bc:	6011      	str	r1, [r2, #0]
 80271be:	d1e0      	bne.n	8027182 <_free_r+0x26>
 80271c0:	681c      	ldr	r4, [r3, #0]
 80271c2:	685b      	ldr	r3, [r3, #4]
 80271c4:	6053      	str	r3, [r2, #4]
 80271c6:	440c      	add	r4, r1
 80271c8:	6014      	str	r4, [r2, #0]
 80271ca:	e7da      	b.n	8027182 <_free_r+0x26>
 80271cc:	d902      	bls.n	80271d4 <_free_r+0x78>
 80271ce:	230c      	movs	r3, #12
 80271d0:	6003      	str	r3, [r0, #0]
 80271d2:	e7d6      	b.n	8027182 <_free_r+0x26>
 80271d4:	6825      	ldr	r5, [r4, #0]
 80271d6:	1961      	adds	r1, r4, r5
 80271d8:	428b      	cmp	r3, r1
 80271da:	bf04      	itt	eq
 80271dc:	6819      	ldreq	r1, [r3, #0]
 80271de:	685b      	ldreq	r3, [r3, #4]
 80271e0:	6063      	str	r3, [r4, #4]
 80271e2:	bf04      	itt	eq
 80271e4:	1949      	addeq	r1, r1, r5
 80271e6:	6021      	streq	r1, [r4, #0]
 80271e8:	6054      	str	r4, [r2, #4]
 80271ea:	e7ca      	b.n	8027182 <_free_r+0x26>
 80271ec:	b003      	add	sp, #12
 80271ee:	bd30      	pop	{r4, r5, pc}
 80271f0:	20014f64 	.word	0x20014f64

080271f4 <__sfputc_r>:
 80271f4:	6893      	ldr	r3, [r2, #8]
 80271f6:	3b01      	subs	r3, #1
 80271f8:	2b00      	cmp	r3, #0
 80271fa:	b410      	push	{r4}
 80271fc:	6093      	str	r3, [r2, #8]
 80271fe:	da08      	bge.n	8027212 <__sfputc_r+0x1e>
 8027200:	6994      	ldr	r4, [r2, #24]
 8027202:	42a3      	cmp	r3, r4
 8027204:	db01      	blt.n	802720a <__sfputc_r+0x16>
 8027206:	290a      	cmp	r1, #10
 8027208:	d103      	bne.n	8027212 <__sfputc_r+0x1e>
 802720a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802720e:	f000 bb73 	b.w	80278f8 <__swbuf_r>
 8027212:	6813      	ldr	r3, [r2, #0]
 8027214:	1c58      	adds	r0, r3, #1
 8027216:	6010      	str	r0, [r2, #0]
 8027218:	7019      	strb	r1, [r3, #0]
 802721a:	4608      	mov	r0, r1
 802721c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027220:	4770      	bx	lr

08027222 <__sfputs_r>:
 8027222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027224:	4606      	mov	r6, r0
 8027226:	460f      	mov	r7, r1
 8027228:	4614      	mov	r4, r2
 802722a:	18d5      	adds	r5, r2, r3
 802722c:	42ac      	cmp	r4, r5
 802722e:	d101      	bne.n	8027234 <__sfputs_r+0x12>
 8027230:	2000      	movs	r0, #0
 8027232:	e007      	b.n	8027244 <__sfputs_r+0x22>
 8027234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027238:	463a      	mov	r2, r7
 802723a:	4630      	mov	r0, r6
 802723c:	f7ff ffda 	bl	80271f4 <__sfputc_r>
 8027240:	1c43      	adds	r3, r0, #1
 8027242:	d1f3      	bne.n	802722c <__sfputs_r+0xa>
 8027244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027248 <_vfiprintf_r>:
 8027248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802724c:	460d      	mov	r5, r1
 802724e:	b09d      	sub	sp, #116	; 0x74
 8027250:	4614      	mov	r4, r2
 8027252:	4698      	mov	r8, r3
 8027254:	4606      	mov	r6, r0
 8027256:	b118      	cbz	r0, 8027260 <_vfiprintf_r+0x18>
 8027258:	6a03      	ldr	r3, [r0, #32]
 802725a:	b90b      	cbnz	r3, 8027260 <_vfiprintf_r+0x18>
 802725c:	f7ff fd62 	bl	8026d24 <__sinit>
 8027260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027262:	07d9      	lsls	r1, r3, #31
 8027264:	d405      	bmi.n	8027272 <_vfiprintf_r+0x2a>
 8027266:	89ab      	ldrh	r3, [r5, #12]
 8027268:	059a      	lsls	r2, r3, #22
 802726a:	d402      	bmi.n	8027272 <_vfiprintf_r+0x2a>
 802726c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802726e:	f7ff ff07 	bl	8027080 <__retarget_lock_acquire_recursive>
 8027272:	89ab      	ldrh	r3, [r5, #12]
 8027274:	071b      	lsls	r3, r3, #28
 8027276:	d501      	bpl.n	802727c <_vfiprintf_r+0x34>
 8027278:	692b      	ldr	r3, [r5, #16]
 802727a:	b99b      	cbnz	r3, 80272a4 <_vfiprintf_r+0x5c>
 802727c:	4629      	mov	r1, r5
 802727e:	4630      	mov	r0, r6
 8027280:	f000 fb78 	bl	8027974 <__swsetup_r>
 8027284:	b170      	cbz	r0, 80272a4 <_vfiprintf_r+0x5c>
 8027286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027288:	07dc      	lsls	r4, r3, #31
 802728a:	d504      	bpl.n	8027296 <_vfiprintf_r+0x4e>
 802728c:	f04f 30ff 	mov.w	r0, #4294967295
 8027290:	b01d      	add	sp, #116	; 0x74
 8027292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027296:	89ab      	ldrh	r3, [r5, #12]
 8027298:	0598      	lsls	r0, r3, #22
 802729a:	d4f7      	bmi.n	802728c <_vfiprintf_r+0x44>
 802729c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802729e:	f7ff fef0 	bl	8027082 <__retarget_lock_release_recursive>
 80272a2:	e7f3      	b.n	802728c <_vfiprintf_r+0x44>
 80272a4:	2300      	movs	r3, #0
 80272a6:	9309      	str	r3, [sp, #36]	; 0x24
 80272a8:	2320      	movs	r3, #32
 80272aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80272ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80272b2:	2330      	movs	r3, #48	; 0x30
 80272b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8027468 <_vfiprintf_r+0x220>
 80272b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80272bc:	f04f 0901 	mov.w	r9, #1
 80272c0:	4623      	mov	r3, r4
 80272c2:	469a      	mov	sl, r3
 80272c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80272c8:	b10a      	cbz	r2, 80272ce <_vfiprintf_r+0x86>
 80272ca:	2a25      	cmp	r2, #37	; 0x25
 80272cc:	d1f9      	bne.n	80272c2 <_vfiprintf_r+0x7a>
 80272ce:	ebba 0b04 	subs.w	fp, sl, r4
 80272d2:	d00b      	beq.n	80272ec <_vfiprintf_r+0xa4>
 80272d4:	465b      	mov	r3, fp
 80272d6:	4622      	mov	r2, r4
 80272d8:	4629      	mov	r1, r5
 80272da:	4630      	mov	r0, r6
 80272dc:	f7ff ffa1 	bl	8027222 <__sfputs_r>
 80272e0:	3001      	adds	r0, #1
 80272e2:	f000 80a9 	beq.w	8027438 <_vfiprintf_r+0x1f0>
 80272e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80272e8:	445a      	add	r2, fp
 80272ea:	9209      	str	r2, [sp, #36]	; 0x24
 80272ec:	f89a 3000 	ldrb.w	r3, [sl]
 80272f0:	2b00      	cmp	r3, #0
 80272f2:	f000 80a1 	beq.w	8027438 <_vfiprintf_r+0x1f0>
 80272f6:	2300      	movs	r3, #0
 80272f8:	f04f 32ff 	mov.w	r2, #4294967295
 80272fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027300:	f10a 0a01 	add.w	sl, sl, #1
 8027304:	9304      	str	r3, [sp, #16]
 8027306:	9307      	str	r3, [sp, #28]
 8027308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802730c:	931a      	str	r3, [sp, #104]	; 0x68
 802730e:	4654      	mov	r4, sl
 8027310:	2205      	movs	r2, #5
 8027312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027316:	4854      	ldr	r0, [pc, #336]	; (8027468 <_vfiprintf_r+0x220>)
 8027318:	f7d8 ff6a 	bl	80001f0 <memchr>
 802731c:	9a04      	ldr	r2, [sp, #16]
 802731e:	b9d8      	cbnz	r0, 8027358 <_vfiprintf_r+0x110>
 8027320:	06d1      	lsls	r1, r2, #27
 8027322:	bf44      	itt	mi
 8027324:	2320      	movmi	r3, #32
 8027326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802732a:	0713      	lsls	r3, r2, #28
 802732c:	bf44      	itt	mi
 802732e:	232b      	movmi	r3, #43	; 0x2b
 8027330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027334:	f89a 3000 	ldrb.w	r3, [sl]
 8027338:	2b2a      	cmp	r3, #42	; 0x2a
 802733a:	d015      	beq.n	8027368 <_vfiprintf_r+0x120>
 802733c:	9a07      	ldr	r2, [sp, #28]
 802733e:	4654      	mov	r4, sl
 8027340:	2000      	movs	r0, #0
 8027342:	f04f 0c0a 	mov.w	ip, #10
 8027346:	4621      	mov	r1, r4
 8027348:	f811 3b01 	ldrb.w	r3, [r1], #1
 802734c:	3b30      	subs	r3, #48	; 0x30
 802734e:	2b09      	cmp	r3, #9
 8027350:	d94d      	bls.n	80273ee <_vfiprintf_r+0x1a6>
 8027352:	b1b0      	cbz	r0, 8027382 <_vfiprintf_r+0x13a>
 8027354:	9207      	str	r2, [sp, #28]
 8027356:	e014      	b.n	8027382 <_vfiprintf_r+0x13a>
 8027358:	eba0 0308 	sub.w	r3, r0, r8
 802735c:	fa09 f303 	lsl.w	r3, r9, r3
 8027360:	4313      	orrs	r3, r2
 8027362:	9304      	str	r3, [sp, #16]
 8027364:	46a2      	mov	sl, r4
 8027366:	e7d2      	b.n	802730e <_vfiprintf_r+0xc6>
 8027368:	9b03      	ldr	r3, [sp, #12]
 802736a:	1d19      	adds	r1, r3, #4
 802736c:	681b      	ldr	r3, [r3, #0]
 802736e:	9103      	str	r1, [sp, #12]
 8027370:	2b00      	cmp	r3, #0
 8027372:	bfbb      	ittet	lt
 8027374:	425b      	neglt	r3, r3
 8027376:	f042 0202 	orrlt.w	r2, r2, #2
 802737a:	9307      	strge	r3, [sp, #28]
 802737c:	9307      	strlt	r3, [sp, #28]
 802737e:	bfb8      	it	lt
 8027380:	9204      	strlt	r2, [sp, #16]
 8027382:	7823      	ldrb	r3, [r4, #0]
 8027384:	2b2e      	cmp	r3, #46	; 0x2e
 8027386:	d10c      	bne.n	80273a2 <_vfiprintf_r+0x15a>
 8027388:	7863      	ldrb	r3, [r4, #1]
 802738a:	2b2a      	cmp	r3, #42	; 0x2a
 802738c:	d134      	bne.n	80273f8 <_vfiprintf_r+0x1b0>
 802738e:	9b03      	ldr	r3, [sp, #12]
 8027390:	1d1a      	adds	r2, r3, #4
 8027392:	681b      	ldr	r3, [r3, #0]
 8027394:	9203      	str	r2, [sp, #12]
 8027396:	2b00      	cmp	r3, #0
 8027398:	bfb8      	it	lt
 802739a:	f04f 33ff 	movlt.w	r3, #4294967295
 802739e:	3402      	adds	r4, #2
 80273a0:	9305      	str	r3, [sp, #20]
 80273a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8027478 <_vfiprintf_r+0x230>
 80273a6:	7821      	ldrb	r1, [r4, #0]
 80273a8:	2203      	movs	r2, #3
 80273aa:	4650      	mov	r0, sl
 80273ac:	f7d8 ff20 	bl	80001f0 <memchr>
 80273b0:	b138      	cbz	r0, 80273c2 <_vfiprintf_r+0x17a>
 80273b2:	9b04      	ldr	r3, [sp, #16]
 80273b4:	eba0 000a 	sub.w	r0, r0, sl
 80273b8:	2240      	movs	r2, #64	; 0x40
 80273ba:	4082      	lsls	r2, r0
 80273bc:	4313      	orrs	r3, r2
 80273be:	3401      	adds	r4, #1
 80273c0:	9304      	str	r3, [sp, #16]
 80273c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80273c6:	4829      	ldr	r0, [pc, #164]	; (802746c <_vfiprintf_r+0x224>)
 80273c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80273cc:	2206      	movs	r2, #6
 80273ce:	f7d8 ff0f 	bl	80001f0 <memchr>
 80273d2:	2800      	cmp	r0, #0
 80273d4:	d03f      	beq.n	8027456 <_vfiprintf_r+0x20e>
 80273d6:	4b26      	ldr	r3, [pc, #152]	; (8027470 <_vfiprintf_r+0x228>)
 80273d8:	bb1b      	cbnz	r3, 8027422 <_vfiprintf_r+0x1da>
 80273da:	9b03      	ldr	r3, [sp, #12]
 80273dc:	3307      	adds	r3, #7
 80273de:	f023 0307 	bic.w	r3, r3, #7
 80273e2:	3308      	adds	r3, #8
 80273e4:	9303      	str	r3, [sp, #12]
 80273e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80273e8:	443b      	add	r3, r7
 80273ea:	9309      	str	r3, [sp, #36]	; 0x24
 80273ec:	e768      	b.n	80272c0 <_vfiprintf_r+0x78>
 80273ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80273f2:	460c      	mov	r4, r1
 80273f4:	2001      	movs	r0, #1
 80273f6:	e7a6      	b.n	8027346 <_vfiprintf_r+0xfe>
 80273f8:	2300      	movs	r3, #0
 80273fa:	3401      	adds	r4, #1
 80273fc:	9305      	str	r3, [sp, #20]
 80273fe:	4619      	mov	r1, r3
 8027400:	f04f 0c0a 	mov.w	ip, #10
 8027404:	4620      	mov	r0, r4
 8027406:	f810 2b01 	ldrb.w	r2, [r0], #1
 802740a:	3a30      	subs	r2, #48	; 0x30
 802740c:	2a09      	cmp	r2, #9
 802740e:	d903      	bls.n	8027418 <_vfiprintf_r+0x1d0>
 8027410:	2b00      	cmp	r3, #0
 8027412:	d0c6      	beq.n	80273a2 <_vfiprintf_r+0x15a>
 8027414:	9105      	str	r1, [sp, #20]
 8027416:	e7c4      	b.n	80273a2 <_vfiprintf_r+0x15a>
 8027418:	fb0c 2101 	mla	r1, ip, r1, r2
 802741c:	4604      	mov	r4, r0
 802741e:	2301      	movs	r3, #1
 8027420:	e7f0      	b.n	8027404 <_vfiprintf_r+0x1bc>
 8027422:	ab03      	add	r3, sp, #12
 8027424:	9300      	str	r3, [sp, #0]
 8027426:	462a      	mov	r2, r5
 8027428:	4b12      	ldr	r3, [pc, #72]	; (8027474 <_vfiprintf_r+0x22c>)
 802742a:	a904      	add	r1, sp, #16
 802742c:	4630      	mov	r0, r6
 802742e:	f3af 8000 	nop.w
 8027432:	4607      	mov	r7, r0
 8027434:	1c78      	adds	r0, r7, #1
 8027436:	d1d6      	bne.n	80273e6 <_vfiprintf_r+0x19e>
 8027438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802743a:	07d9      	lsls	r1, r3, #31
 802743c:	d405      	bmi.n	802744a <_vfiprintf_r+0x202>
 802743e:	89ab      	ldrh	r3, [r5, #12]
 8027440:	059a      	lsls	r2, r3, #22
 8027442:	d402      	bmi.n	802744a <_vfiprintf_r+0x202>
 8027444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027446:	f7ff fe1c 	bl	8027082 <__retarget_lock_release_recursive>
 802744a:	89ab      	ldrh	r3, [r5, #12]
 802744c:	065b      	lsls	r3, r3, #25
 802744e:	f53f af1d 	bmi.w	802728c <_vfiprintf_r+0x44>
 8027452:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027454:	e71c      	b.n	8027290 <_vfiprintf_r+0x48>
 8027456:	ab03      	add	r3, sp, #12
 8027458:	9300      	str	r3, [sp, #0]
 802745a:	462a      	mov	r2, r5
 802745c:	4b05      	ldr	r3, [pc, #20]	; (8027474 <_vfiprintf_r+0x22c>)
 802745e:	a904      	add	r1, sp, #16
 8027460:	4630      	mov	r0, r6
 8027462:	f000 f879 	bl	8027558 <_printf_i>
 8027466:	e7e4      	b.n	8027432 <_vfiprintf_r+0x1ea>
 8027468:	08029c94 	.word	0x08029c94
 802746c:	08029c9e 	.word	0x08029c9e
 8027470:	00000000 	.word	0x00000000
 8027474:	08027223 	.word	0x08027223
 8027478:	08029c9a 	.word	0x08029c9a

0802747c <_printf_common>:
 802747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027480:	4616      	mov	r6, r2
 8027482:	4699      	mov	r9, r3
 8027484:	688a      	ldr	r2, [r1, #8]
 8027486:	690b      	ldr	r3, [r1, #16]
 8027488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802748c:	4293      	cmp	r3, r2
 802748e:	bfb8      	it	lt
 8027490:	4613      	movlt	r3, r2
 8027492:	6033      	str	r3, [r6, #0]
 8027494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027498:	4607      	mov	r7, r0
 802749a:	460c      	mov	r4, r1
 802749c:	b10a      	cbz	r2, 80274a2 <_printf_common+0x26>
 802749e:	3301      	adds	r3, #1
 80274a0:	6033      	str	r3, [r6, #0]
 80274a2:	6823      	ldr	r3, [r4, #0]
 80274a4:	0699      	lsls	r1, r3, #26
 80274a6:	bf42      	ittt	mi
 80274a8:	6833      	ldrmi	r3, [r6, #0]
 80274aa:	3302      	addmi	r3, #2
 80274ac:	6033      	strmi	r3, [r6, #0]
 80274ae:	6825      	ldr	r5, [r4, #0]
 80274b0:	f015 0506 	ands.w	r5, r5, #6
 80274b4:	d106      	bne.n	80274c4 <_printf_common+0x48>
 80274b6:	f104 0a19 	add.w	sl, r4, #25
 80274ba:	68e3      	ldr	r3, [r4, #12]
 80274bc:	6832      	ldr	r2, [r6, #0]
 80274be:	1a9b      	subs	r3, r3, r2
 80274c0:	42ab      	cmp	r3, r5
 80274c2:	dc26      	bgt.n	8027512 <_printf_common+0x96>
 80274c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80274c8:	1e13      	subs	r3, r2, #0
 80274ca:	6822      	ldr	r2, [r4, #0]
 80274cc:	bf18      	it	ne
 80274ce:	2301      	movne	r3, #1
 80274d0:	0692      	lsls	r2, r2, #26
 80274d2:	d42b      	bmi.n	802752c <_printf_common+0xb0>
 80274d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80274d8:	4649      	mov	r1, r9
 80274da:	4638      	mov	r0, r7
 80274dc:	47c0      	blx	r8
 80274de:	3001      	adds	r0, #1
 80274e0:	d01e      	beq.n	8027520 <_printf_common+0xa4>
 80274e2:	6823      	ldr	r3, [r4, #0]
 80274e4:	6922      	ldr	r2, [r4, #16]
 80274e6:	f003 0306 	and.w	r3, r3, #6
 80274ea:	2b04      	cmp	r3, #4
 80274ec:	bf02      	ittt	eq
 80274ee:	68e5      	ldreq	r5, [r4, #12]
 80274f0:	6833      	ldreq	r3, [r6, #0]
 80274f2:	1aed      	subeq	r5, r5, r3
 80274f4:	68a3      	ldr	r3, [r4, #8]
 80274f6:	bf0c      	ite	eq
 80274f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80274fc:	2500      	movne	r5, #0
 80274fe:	4293      	cmp	r3, r2
 8027500:	bfc4      	itt	gt
 8027502:	1a9b      	subgt	r3, r3, r2
 8027504:	18ed      	addgt	r5, r5, r3
 8027506:	2600      	movs	r6, #0
 8027508:	341a      	adds	r4, #26
 802750a:	42b5      	cmp	r5, r6
 802750c:	d11a      	bne.n	8027544 <_printf_common+0xc8>
 802750e:	2000      	movs	r0, #0
 8027510:	e008      	b.n	8027524 <_printf_common+0xa8>
 8027512:	2301      	movs	r3, #1
 8027514:	4652      	mov	r2, sl
 8027516:	4649      	mov	r1, r9
 8027518:	4638      	mov	r0, r7
 802751a:	47c0      	blx	r8
 802751c:	3001      	adds	r0, #1
 802751e:	d103      	bne.n	8027528 <_printf_common+0xac>
 8027520:	f04f 30ff 	mov.w	r0, #4294967295
 8027524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027528:	3501      	adds	r5, #1
 802752a:	e7c6      	b.n	80274ba <_printf_common+0x3e>
 802752c:	18e1      	adds	r1, r4, r3
 802752e:	1c5a      	adds	r2, r3, #1
 8027530:	2030      	movs	r0, #48	; 0x30
 8027532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027536:	4422      	add	r2, r4
 8027538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802753c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027540:	3302      	adds	r3, #2
 8027542:	e7c7      	b.n	80274d4 <_printf_common+0x58>
 8027544:	2301      	movs	r3, #1
 8027546:	4622      	mov	r2, r4
 8027548:	4649      	mov	r1, r9
 802754a:	4638      	mov	r0, r7
 802754c:	47c0      	blx	r8
 802754e:	3001      	adds	r0, #1
 8027550:	d0e6      	beq.n	8027520 <_printf_common+0xa4>
 8027552:	3601      	adds	r6, #1
 8027554:	e7d9      	b.n	802750a <_printf_common+0x8e>
	...

08027558 <_printf_i>:
 8027558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802755c:	7e0f      	ldrb	r7, [r1, #24]
 802755e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027560:	2f78      	cmp	r7, #120	; 0x78
 8027562:	4691      	mov	r9, r2
 8027564:	4680      	mov	r8, r0
 8027566:	460c      	mov	r4, r1
 8027568:	469a      	mov	sl, r3
 802756a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802756e:	d807      	bhi.n	8027580 <_printf_i+0x28>
 8027570:	2f62      	cmp	r7, #98	; 0x62
 8027572:	d80a      	bhi.n	802758a <_printf_i+0x32>
 8027574:	2f00      	cmp	r7, #0
 8027576:	f000 80d4 	beq.w	8027722 <_printf_i+0x1ca>
 802757a:	2f58      	cmp	r7, #88	; 0x58
 802757c:	f000 80c0 	beq.w	8027700 <_printf_i+0x1a8>
 8027580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027588:	e03a      	b.n	8027600 <_printf_i+0xa8>
 802758a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802758e:	2b15      	cmp	r3, #21
 8027590:	d8f6      	bhi.n	8027580 <_printf_i+0x28>
 8027592:	a101      	add	r1, pc, #4	; (adr r1, 8027598 <_printf_i+0x40>)
 8027594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027598:	080275f1 	.word	0x080275f1
 802759c:	08027605 	.word	0x08027605
 80275a0:	08027581 	.word	0x08027581
 80275a4:	08027581 	.word	0x08027581
 80275a8:	08027581 	.word	0x08027581
 80275ac:	08027581 	.word	0x08027581
 80275b0:	08027605 	.word	0x08027605
 80275b4:	08027581 	.word	0x08027581
 80275b8:	08027581 	.word	0x08027581
 80275bc:	08027581 	.word	0x08027581
 80275c0:	08027581 	.word	0x08027581
 80275c4:	08027709 	.word	0x08027709
 80275c8:	08027631 	.word	0x08027631
 80275cc:	080276c3 	.word	0x080276c3
 80275d0:	08027581 	.word	0x08027581
 80275d4:	08027581 	.word	0x08027581
 80275d8:	0802772b 	.word	0x0802772b
 80275dc:	08027581 	.word	0x08027581
 80275e0:	08027631 	.word	0x08027631
 80275e4:	08027581 	.word	0x08027581
 80275e8:	08027581 	.word	0x08027581
 80275ec:	080276cb 	.word	0x080276cb
 80275f0:	682b      	ldr	r3, [r5, #0]
 80275f2:	1d1a      	adds	r2, r3, #4
 80275f4:	681b      	ldr	r3, [r3, #0]
 80275f6:	602a      	str	r2, [r5, #0]
 80275f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80275fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027600:	2301      	movs	r3, #1
 8027602:	e09f      	b.n	8027744 <_printf_i+0x1ec>
 8027604:	6820      	ldr	r0, [r4, #0]
 8027606:	682b      	ldr	r3, [r5, #0]
 8027608:	0607      	lsls	r7, r0, #24
 802760a:	f103 0104 	add.w	r1, r3, #4
 802760e:	6029      	str	r1, [r5, #0]
 8027610:	d501      	bpl.n	8027616 <_printf_i+0xbe>
 8027612:	681e      	ldr	r6, [r3, #0]
 8027614:	e003      	b.n	802761e <_printf_i+0xc6>
 8027616:	0646      	lsls	r6, r0, #25
 8027618:	d5fb      	bpl.n	8027612 <_printf_i+0xba>
 802761a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802761e:	2e00      	cmp	r6, #0
 8027620:	da03      	bge.n	802762a <_printf_i+0xd2>
 8027622:	232d      	movs	r3, #45	; 0x2d
 8027624:	4276      	negs	r6, r6
 8027626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802762a:	485a      	ldr	r0, [pc, #360]	; (8027794 <_printf_i+0x23c>)
 802762c:	230a      	movs	r3, #10
 802762e:	e012      	b.n	8027656 <_printf_i+0xfe>
 8027630:	682b      	ldr	r3, [r5, #0]
 8027632:	6820      	ldr	r0, [r4, #0]
 8027634:	1d19      	adds	r1, r3, #4
 8027636:	6029      	str	r1, [r5, #0]
 8027638:	0605      	lsls	r5, r0, #24
 802763a:	d501      	bpl.n	8027640 <_printf_i+0xe8>
 802763c:	681e      	ldr	r6, [r3, #0]
 802763e:	e002      	b.n	8027646 <_printf_i+0xee>
 8027640:	0641      	lsls	r1, r0, #25
 8027642:	d5fb      	bpl.n	802763c <_printf_i+0xe4>
 8027644:	881e      	ldrh	r6, [r3, #0]
 8027646:	4853      	ldr	r0, [pc, #332]	; (8027794 <_printf_i+0x23c>)
 8027648:	2f6f      	cmp	r7, #111	; 0x6f
 802764a:	bf0c      	ite	eq
 802764c:	2308      	moveq	r3, #8
 802764e:	230a      	movne	r3, #10
 8027650:	2100      	movs	r1, #0
 8027652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027656:	6865      	ldr	r5, [r4, #4]
 8027658:	60a5      	str	r5, [r4, #8]
 802765a:	2d00      	cmp	r5, #0
 802765c:	bfa2      	ittt	ge
 802765e:	6821      	ldrge	r1, [r4, #0]
 8027660:	f021 0104 	bicge.w	r1, r1, #4
 8027664:	6021      	strge	r1, [r4, #0]
 8027666:	b90e      	cbnz	r6, 802766c <_printf_i+0x114>
 8027668:	2d00      	cmp	r5, #0
 802766a:	d04b      	beq.n	8027704 <_printf_i+0x1ac>
 802766c:	4615      	mov	r5, r2
 802766e:	fbb6 f1f3 	udiv	r1, r6, r3
 8027672:	fb03 6711 	mls	r7, r3, r1, r6
 8027676:	5dc7      	ldrb	r7, [r0, r7]
 8027678:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802767c:	4637      	mov	r7, r6
 802767e:	42bb      	cmp	r3, r7
 8027680:	460e      	mov	r6, r1
 8027682:	d9f4      	bls.n	802766e <_printf_i+0x116>
 8027684:	2b08      	cmp	r3, #8
 8027686:	d10b      	bne.n	80276a0 <_printf_i+0x148>
 8027688:	6823      	ldr	r3, [r4, #0]
 802768a:	07de      	lsls	r6, r3, #31
 802768c:	d508      	bpl.n	80276a0 <_printf_i+0x148>
 802768e:	6923      	ldr	r3, [r4, #16]
 8027690:	6861      	ldr	r1, [r4, #4]
 8027692:	4299      	cmp	r1, r3
 8027694:	bfde      	ittt	le
 8027696:	2330      	movle	r3, #48	; 0x30
 8027698:	f805 3c01 	strble.w	r3, [r5, #-1]
 802769c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80276a0:	1b52      	subs	r2, r2, r5
 80276a2:	6122      	str	r2, [r4, #16]
 80276a4:	f8cd a000 	str.w	sl, [sp]
 80276a8:	464b      	mov	r3, r9
 80276aa:	aa03      	add	r2, sp, #12
 80276ac:	4621      	mov	r1, r4
 80276ae:	4640      	mov	r0, r8
 80276b0:	f7ff fee4 	bl	802747c <_printf_common>
 80276b4:	3001      	adds	r0, #1
 80276b6:	d14a      	bne.n	802774e <_printf_i+0x1f6>
 80276b8:	f04f 30ff 	mov.w	r0, #4294967295
 80276bc:	b004      	add	sp, #16
 80276be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80276c2:	6823      	ldr	r3, [r4, #0]
 80276c4:	f043 0320 	orr.w	r3, r3, #32
 80276c8:	6023      	str	r3, [r4, #0]
 80276ca:	4833      	ldr	r0, [pc, #204]	; (8027798 <_printf_i+0x240>)
 80276cc:	2778      	movs	r7, #120	; 0x78
 80276ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80276d2:	6823      	ldr	r3, [r4, #0]
 80276d4:	6829      	ldr	r1, [r5, #0]
 80276d6:	061f      	lsls	r7, r3, #24
 80276d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80276dc:	d402      	bmi.n	80276e4 <_printf_i+0x18c>
 80276de:	065f      	lsls	r7, r3, #25
 80276e0:	bf48      	it	mi
 80276e2:	b2b6      	uxthmi	r6, r6
 80276e4:	07df      	lsls	r7, r3, #31
 80276e6:	bf48      	it	mi
 80276e8:	f043 0320 	orrmi.w	r3, r3, #32
 80276ec:	6029      	str	r1, [r5, #0]
 80276ee:	bf48      	it	mi
 80276f0:	6023      	strmi	r3, [r4, #0]
 80276f2:	b91e      	cbnz	r6, 80276fc <_printf_i+0x1a4>
 80276f4:	6823      	ldr	r3, [r4, #0]
 80276f6:	f023 0320 	bic.w	r3, r3, #32
 80276fa:	6023      	str	r3, [r4, #0]
 80276fc:	2310      	movs	r3, #16
 80276fe:	e7a7      	b.n	8027650 <_printf_i+0xf8>
 8027700:	4824      	ldr	r0, [pc, #144]	; (8027794 <_printf_i+0x23c>)
 8027702:	e7e4      	b.n	80276ce <_printf_i+0x176>
 8027704:	4615      	mov	r5, r2
 8027706:	e7bd      	b.n	8027684 <_printf_i+0x12c>
 8027708:	682b      	ldr	r3, [r5, #0]
 802770a:	6826      	ldr	r6, [r4, #0]
 802770c:	6961      	ldr	r1, [r4, #20]
 802770e:	1d18      	adds	r0, r3, #4
 8027710:	6028      	str	r0, [r5, #0]
 8027712:	0635      	lsls	r5, r6, #24
 8027714:	681b      	ldr	r3, [r3, #0]
 8027716:	d501      	bpl.n	802771c <_printf_i+0x1c4>
 8027718:	6019      	str	r1, [r3, #0]
 802771a:	e002      	b.n	8027722 <_printf_i+0x1ca>
 802771c:	0670      	lsls	r0, r6, #25
 802771e:	d5fb      	bpl.n	8027718 <_printf_i+0x1c0>
 8027720:	8019      	strh	r1, [r3, #0]
 8027722:	2300      	movs	r3, #0
 8027724:	6123      	str	r3, [r4, #16]
 8027726:	4615      	mov	r5, r2
 8027728:	e7bc      	b.n	80276a4 <_printf_i+0x14c>
 802772a:	682b      	ldr	r3, [r5, #0]
 802772c:	1d1a      	adds	r2, r3, #4
 802772e:	602a      	str	r2, [r5, #0]
 8027730:	681d      	ldr	r5, [r3, #0]
 8027732:	6862      	ldr	r2, [r4, #4]
 8027734:	2100      	movs	r1, #0
 8027736:	4628      	mov	r0, r5
 8027738:	f7d8 fd5a 	bl	80001f0 <memchr>
 802773c:	b108      	cbz	r0, 8027742 <_printf_i+0x1ea>
 802773e:	1b40      	subs	r0, r0, r5
 8027740:	6060      	str	r0, [r4, #4]
 8027742:	6863      	ldr	r3, [r4, #4]
 8027744:	6123      	str	r3, [r4, #16]
 8027746:	2300      	movs	r3, #0
 8027748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802774c:	e7aa      	b.n	80276a4 <_printf_i+0x14c>
 802774e:	6923      	ldr	r3, [r4, #16]
 8027750:	462a      	mov	r2, r5
 8027752:	4649      	mov	r1, r9
 8027754:	4640      	mov	r0, r8
 8027756:	47d0      	blx	sl
 8027758:	3001      	adds	r0, #1
 802775a:	d0ad      	beq.n	80276b8 <_printf_i+0x160>
 802775c:	6823      	ldr	r3, [r4, #0]
 802775e:	079b      	lsls	r3, r3, #30
 8027760:	d413      	bmi.n	802778a <_printf_i+0x232>
 8027762:	68e0      	ldr	r0, [r4, #12]
 8027764:	9b03      	ldr	r3, [sp, #12]
 8027766:	4298      	cmp	r0, r3
 8027768:	bfb8      	it	lt
 802776a:	4618      	movlt	r0, r3
 802776c:	e7a6      	b.n	80276bc <_printf_i+0x164>
 802776e:	2301      	movs	r3, #1
 8027770:	4632      	mov	r2, r6
 8027772:	4649      	mov	r1, r9
 8027774:	4640      	mov	r0, r8
 8027776:	47d0      	blx	sl
 8027778:	3001      	adds	r0, #1
 802777a:	d09d      	beq.n	80276b8 <_printf_i+0x160>
 802777c:	3501      	adds	r5, #1
 802777e:	68e3      	ldr	r3, [r4, #12]
 8027780:	9903      	ldr	r1, [sp, #12]
 8027782:	1a5b      	subs	r3, r3, r1
 8027784:	42ab      	cmp	r3, r5
 8027786:	dcf2      	bgt.n	802776e <_printf_i+0x216>
 8027788:	e7eb      	b.n	8027762 <_printf_i+0x20a>
 802778a:	2500      	movs	r5, #0
 802778c:	f104 0619 	add.w	r6, r4, #25
 8027790:	e7f5      	b.n	802777e <_printf_i+0x226>
 8027792:	bf00      	nop
 8027794:	08029ca5 	.word	0x08029ca5
 8027798:	08029cb6 	.word	0x08029cb6

0802779c <__sflush_r>:
 802779c:	898a      	ldrh	r2, [r1, #12]
 802779e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80277a2:	4605      	mov	r5, r0
 80277a4:	0710      	lsls	r0, r2, #28
 80277a6:	460c      	mov	r4, r1
 80277a8:	d458      	bmi.n	802785c <__sflush_r+0xc0>
 80277aa:	684b      	ldr	r3, [r1, #4]
 80277ac:	2b00      	cmp	r3, #0
 80277ae:	dc05      	bgt.n	80277bc <__sflush_r+0x20>
 80277b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80277b2:	2b00      	cmp	r3, #0
 80277b4:	dc02      	bgt.n	80277bc <__sflush_r+0x20>
 80277b6:	2000      	movs	r0, #0
 80277b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80277bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80277be:	2e00      	cmp	r6, #0
 80277c0:	d0f9      	beq.n	80277b6 <__sflush_r+0x1a>
 80277c2:	2300      	movs	r3, #0
 80277c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80277c8:	682f      	ldr	r7, [r5, #0]
 80277ca:	6a21      	ldr	r1, [r4, #32]
 80277cc:	602b      	str	r3, [r5, #0]
 80277ce:	d032      	beq.n	8027836 <__sflush_r+0x9a>
 80277d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80277d2:	89a3      	ldrh	r3, [r4, #12]
 80277d4:	075a      	lsls	r2, r3, #29
 80277d6:	d505      	bpl.n	80277e4 <__sflush_r+0x48>
 80277d8:	6863      	ldr	r3, [r4, #4]
 80277da:	1ac0      	subs	r0, r0, r3
 80277dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80277de:	b10b      	cbz	r3, 80277e4 <__sflush_r+0x48>
 80277e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80277e2:	1ac0      	subs	r0, r0, r3
 80277e4:	2300      	movs	r3, #0
 80277e6:	4602      	mov	r2, r0
 80277e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80277ea:	6a21      	ldr	r1, [r4, #32]
 80277ec:	4628      	mov	r0, r5
 80277ee:	47b0      	blx	r6
 80277f0:	1c43      	adds	r3, r0, #1
 80277f2:	89a3      	ldrh	r3, [r4, #12]
 80277f4:	d106      	bne.n	8027804 <__sflush_r+0x68>
 80277f6:	6829      	ldr	r1, [r5, #0]
 80277f8:	291d      	cmp	r1, #29
 80277fa:	d82b      	bhi.n	8027854 <__sflush_r+0xb8>
 80277fc:	4a29      	ldr	r2, [pc, #164]	; (80278a4 <__sflush_r+0x108>)
 80277fe:	410a      	asrs	r2, r1
 8027800:	07d6      	lsls	r6, r2, #31
 8027802:	d427      	bmi.n	8027854 <__sflush_r+0xb8>
 8027804:	2200      	movs	r2, #0
 8027806:	6062      	str	r2, [r4, #4]
 8027808:	04d9      	lsls	r1, r3, #19
 802780a:	6922      	ldr	r2, [r4, #16]
 802780c:	6022      	str	r2, [r4, #0]
 802780e:	d504      	bpl.n	802781a <__sflush_r+0x7e>
 8027810:	1c42      	adds	r2, r0, #1
 8027812:	d101      	bne.n	8027818 <__sflush_r+0x7c>
 8027814:	682b      	ldr	r3, [r5, #0]
 8027816:	b903      	cbnz	r3, 802781a <__sflush_r+0x7e>
 8027818:	6560      	str	r0, [r4, #84]	; 0x54
 802781a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802781c:	602f      	str	r7, [r5, #0]
 802781e:	2900      	cmp	r1, #0
 8027820:	d0c9      	beq.n	80277b6 <__sflush_r+0x1a>
 8027822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027826:	4299      	cmp	r1, r3
 8027828:	d002      	beq.n	8027830 <__sflush_r+0x94>
 802782a:	4628      	mov	r0, r5
 802782c:	f7ff fc96 	bl	802715c <_free_r>
 8027830:	2000      	movs	r0, #0
 8027832:	6360      	str	r0, [r4, #52]	; 0x34
 8027834:	e7c0      	b.n	80277b8 <__sflush_r+0x1c>
 8027836:	2301      	movs	r3, #1
 8027838:	4628      	mov	r0, r5
 802783a:	47b0      	blx	r6
 802783c:	1c41      	adds	r1, r0, #1
 802783e:	d1c8      	bne.n	80277d2 <__sflush_r+0x36>
 8027840:	682b      	ldr	r3, [r5, #0]
 8027842:	2b00      	cmp	r3, #0
 8027844:	d0c5      	beq.n	80277d2 <__sflush_r+0x36>
 8027846:	2b1d      	cmp	r3, #29
 8027848:	d001      	beq.n	802784e <__sflush_r+0xb2>
 802784a:	2b16      	cmp	r3, #22
 802784c:	d101      	bne.n	8027852 <__sflush_r+0xb6>
 802784e:	602f      	str	r7, [r5, #0]
 8027850:	e7b1      	b.n	80277b6 <__sflush_r+0x1a>
 8027852:	89a3      	ldrh	r3, [r4, #12]
 8027854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027858:	81a3      	strh	r3, [r4, #12]
 802785a:	e7ad      	b.n	80277b8 <__sflush_r+0x1c>
 802785c:	690f      	ldr	r7, [r1, #16]
 802785e:	2f00      	cmp	r7, #0
 8027860:	d0a9      	beq.n	80277b6 <__sflush_r+0x1a>
 8027862:	0793      	lsls	r3, r2, #30
 8027864:	680e      	ldr	r6, [r1, #0]
 8027866:	bf08      	it	eq
 8027868:	694b      	ldreq	r3, [r1, #20]
 802786a:	600f      	str	r7, [r1, #0]
 802786c:	bf18      	it	ne
 802786e:	2300      	movne	r3, #0
 8027870:	eba6 0807 	sub.w	r8, r6, r7
 8027874:	608b      	str	r3, [r1, #8]
 8027876:	f1b8 0f00 	cmp.w	r8, #0
 802787a:	dd9c      	ble.n	80277b6 <__sflush_r+0x1a>
 802787c:	6a21      	ldr	r1, [r4, #32]
 802787e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027880:	4643      	mov	r3, r8
 8027882:	463a      	mov	r2, r7
 8027884:	4628      	mov	r0, r5
 8027886:	47b0      	blx	r6
 8027888:	2800      	cmp	r0, #0
 802788a:	dc06      	bgt.n	802789a <__sflush_r+0xfe>
 802788c:	89a3      	ldrh	r3, [r4, #12]
 802788e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027892:	81a3      	strh	r3, [r4, #12]
 8027894:	f04f 30ff 	mov.w	r0, #4294967295
 8027898:	e78e      	b.n	80277b8 <__sflush_r+0x1c>
 802789a:	4407      	add	r7, r0
 802789c:	eba8 0800 	sub.w	r8, r8, r0
 80278a0:	e7e9      	b.n	8027876 <__sflush_r+0xda>
 80278a2:	bf00      	nop
 80278a4:	dfbffffe 	.word	0xdfbffffe

080278a8 <_fflush_r>:
 80278a8:	b538      	push	{r3, r4, r5, lr}
 80278aa:	690b      	ldr	r3, [r1, #16]
 80278ac:	4605      	mov	r5, r0
 80278ae:	460c      	mov	r4, r1
 80278b0:	b913      	cbnz	r3, 80278b8 <_fflush_r+0x10>
 80278b2:	2500      	movs	r5, #0
 80278b4:	4628      	mov	r0, r5
 80278b6:	bd38      	pop	{r3, r4, r5, pc}
 80278b8:	b118      	cbz	r0, 80278c2 <_fflush_r+0x1a>
 80278ba:	6a03      	ldr	r3, [r0, #32]
 80278bc:	b90b      	cbnz	r3, 80278c2 <_fflush_r+0x1a>
 80278be:	f7ff fa31 	bl	8026d24 <__sinit>
 80278c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80278c6:	2b00      	cmp	r3, #0
 80278c8:	d0f3      	beq.n	80278b2 <_fflush_r+0xa>
 80278ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80278cc:	07d0      	lsls	r0, r2, #31
 80278ce:	d404      	bmi.n	80278da <_fflush_r+0x32>
 80278d0:	0599      	lsls	r1, r3, #22
 80278d2:	d402      	bmi.n	80278da <_fflush_r+0x32>
 80278d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80278d6:	f7ff fbd3 	bl	8027080 <__retarget_lock_acquire_recursive>
 80278da:	4628      	mov	r0, r5
 80278dc:	4621      	mov	r1, r4
 80278de:	f7ff ff5d 	bl	802779c <__sflush_r>
 80278e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80278e4:	07da      	lsls	r2, r3, #31
 80278e6:	4605      	mov	r5, r0
 80278e8:	d4e4      	bmi.n	80278b4 <_fflush_r+0xc>
 80278ea:	89a3      	ldrh	r3, [r4, #12]
 80278ec:	059b      	lsls	r3, r3, #22
 80278ee:	d4e1      	bmi.n	80278b4 <_fflush_r+0xc>
 80278f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80278f2:	f7ff fbc6 	bl	8027082 <__retarget_lock_release_recursive>
 80278f6:	e7dd      	b.n	80278b4 <_fflush_r+0xc>

080278f8 <__swbuf_r>:
 80278f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80278fa:	460e      	mov	r6, r1
 80278fc:	4614      	mov	r4, r2
 80278fe:	4605      	mov	r5, r0
 8027900:	b118      	cbz	r0, 802790a <__swbuf_r+0x12>
 8027902:	6a03      	ldr	r3, [r0, #32]
 8027904:	b90b      	cbnz	r3, 802790a <__swbuf_r+0x12>
 8027906:	f7ff fa0d 	bl	8026d24 <__sinit>
 802790a:	69a3      	ldr	r3, [r4, #24]
 802790c:	60a3      	str	r3, [r4, #8]
 802790e:	89a3      	ldrh	r3, [r4, #12]
 8027910:	071a      	lsls	r2, r3, #28
 8027912:	d525      	bpl.n	8027960 <__swbuf_r+0x68>
 8027914:	6923      	ldr	r3, [r4, #16]
 8027916:	b31b      	cbz	r3, 8027960 <__swbuf_r+0x68>
 8027918:	6823      	ldr	r3, [r4, #0]
 802791a:	6922      	ldr	r2, [r4, #16]
 802791c:	1a98      	subs	r0, r3, r2
 802791e:	6963      	ldr	r3, [r4, #20]
 8027920:	b2f6      	uxtb	r6, r6
 8027922:	4283      	cmp	r3, r0
 8027924:	4637      	mov	r7, r6
 8027926:	dc04      	bgt.n	8027932 <__swbuf_r+0x3a>
 8027928:	4621      	mov	r1, r4
 802792a:	4628      	mov	r0, r5
 802792c:	f7ff ffbc 	bl	80278a8 <_fflush_r>
 8027930:	b9e0      	cbnz	r0, 802796c <__swbuf_r+0x74>
 8027932:	68a3      	ldr	r3, [r4, #8]
 8027934:	3b01      	subs	r3, #1
 8027936:	60a3      	str	r3, [r4, #8]
 8027938:	6823      	ldr	r3, [r4, #0]
 802793a:	1c5a      	adds	r2, r3, #1
 802793c:	6022      	str	r2, [r4, #0]
 802793e:	701e      	strb	r6, [r3, #0]
 8027940:	6962      	ldr	r2, [r4, #20]
 8027942:	1c43      	adds	r3, r0, #1
 8027944:	429a      	cmp	r2, r3
 8027946:	d004      	beq.n	8027952 <__swbuf_r+0x5a>
 8027948:	89a3      	ldrh	r3, [r4, #12]
 802794a:	07db      	lsls	r3, r3, #31
 802794c:	d506      	bpl.n	802795c <__swbuf_r+0x64>
 802794e:	2e0a      	cmp	r6, #10
 8027950:	d104      	bne.n	802795c <__swbuf_r+0x64>
 8027952:	4621      	mov	r1, r4
 8027954:	4628      	mov	r0, r5
 8027956:	f7ff ffa7 	bl	80278a8 <_fflush_r>
 802795a:	b938      	cbnz	r0, 802796c <__swbuf_r+0x74>
 802795c:	4638      	mov	r0, r7
 802795e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027960:	4621      	mov	r1, r4
 8027962:	4628      	mov	r0, r5
 8027964:	f000 f806 	bl	8027974 <__swsetup_r>
 8027968:	2800      	cmp	r0, #0
 802796a:	d0d5      	beq.n	8027918 <__swbuf_r+0x20>
 802796c:	f04f 37ff 	mov.w	r7, #4294967295
 8027970:	e7f4      	b.n	802795c <__swbuf_r+0x64>
	...

08027974 <__swsetup_r>:
 8027974:	b538      	push	{r3, r4, r5, lr}
 8027976:	4b2a      	ldr	r3, [pc, #168]	; (8027a20 <__swsetup_r+0xac>)
 8027978:	4605      	mov	r5, r0
 802797a:	6818      	ldr	r0, [r3, #0]
 802797c:	460c      	mov	r4, r1
 802797e:	b118      	cbz	r0, 8027988 <__swsetup_r+0x14>
 8027980:	6a03      	ldr	r3, [r0, #32]
 8027982:	b90b      	cbnz	r3, 8027988 <__swsetup_r+0x14>
 8027984:	f7ff f9ce 	bl	8026d24 <__sinit>
 8027988:	89a3      	ldrh	r3, [r4, #12]
 802798a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802798e:	0718      	lsls	r0, r3, #28
 8027990:	d422      	bmi.n	80279d8 <__swsetup_r+0x64>
 8027992:	06d9      	lsls	r1, r3, #27
 8027994:	d407      	bmi.n	80279a6 <__swsetup_r+0x32>
 8027996:	2309      	movs	r3, #9
 8027998:	602b      	str	r3, [r5, #0]
 802799a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802799e:	81a3      	strh	r3, [r4, #12]
 80279a0:	f04f 30ff 	mov.w	r0, #4294967295
 80279a4:	e034      	b.n	8027a10 <__swsetup_r+0x9c>
 80279a6:	0758      	lsls	r0, r3, #29
 80279a8:	d512      	bpl.n	80279d0 <__swsetup_r+0x5c>
 80279aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80279ac:	b141      	cbz	r1, 80279c0 <__swsetup_r+0x4c>
 80279ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80279b2:	4299      	cmp	r1, r3
 80279b4:	d002      	beq.n	80279bc <__swsetup_r+0x48>
 80279b6:	4628      	mov	r0, r5
 80279b8:	f7ff fbd0 	bl	802715c <_free_r>
 80279bc:	2300      	movs	r3, #0
 80279be:	6363      	str	r3, [r4, #52]	; 0x34
 80279c0:	89a3      	ldrh	r3, [r4, #12]
 80279c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80279c6:	81a3      	strh	r3, [r4, #12]
 80279c8:	2300      	movs	r3, #0
 80279ca:	6063      	str	r3, [r4, #4]
 80279cc:	6923      	ldr	r3, [r4, #16]
 80279ce:	6023      	str	r3, [r4, #0]
 80279d0:	89a3      	ldrh	r3, [r4, #12]
 80279d2:	f043 0308 	orr.w	r3, r3, #8
 80279d6:	81a3      	strh	r3, [r4, #12]
 80279d8:	6923      	ldr	r3, [r4, #16]
 80279da:	b94b      	cbnz	r3, 80279f0 <__swsetup_r+0x7c>
 80279dc:	89a3      	ldrh	r3, [r4, #12]
 80279de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80279e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80279e6:	d003      	beq.n	80279f0 <__swsetup_r+0x7c>
 80279e8:	4621      	mov	r1, r4
 80279ea:	4628      	mov	r0, r5
 80279ec:	f000 f840 	bl	8027a70 <__smakebuf_r>
 80279f0:	89a0      	ldrh	r0, [r4, #12]
 80279f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80279f6:	f010 0301 	ands.w	r3, r0, #1
 80279fa:	d00a      	beq.n	8027a12 <__swsetup_r+0x9e>
 80279fc:	2300      	movs	r3, #0
 80279fe:	60a3      	str	r3, [r4, #8]
 8027a00:	6963      	ldr	r3, [r4, #20]
 8027a02:	425b      	negs	r3, r3
 8027a04:	61a3      	str	r3, [r4, #24]
 8027a06:	6923      	ldr	r3, [r4, #16]
 8027a08:	b943      	cbnz	r3, 8027a1c <__swsetup_r+0xa8>
 8027a0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027a0e:	d1c4      	bne.n	802799a <__swsetup_r+0x26>
 8027a10:	bd38      	pop	{r3, r4, r5, pc}
 8027a12:	0781      	lsls	r1, r0, #30
 8027a14:	bf58      	it	pl
 8027a16:	6963      	ldrpl	r3, [r4, #20]
 8027a18:	60a3      	str	r3, [r4, #8]
 8027a1a:	e7f4      	b.n	8027a06 <__swsetup_r+0x92>
 8027a1c:	2000      	movs	r0, #0
 8027a1e:	e7f7      	b.n	8027a10 <__swsetup_r+0x9c>
 8027a20:	20000168 	.word	0x20000168

08027a24 <__swhatbuf_r>:
 8027a24:	b570      	push	{r4, r5, r6, lr}
 8027a26:	460c      	mov	r4, r1
 8027a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027a2c:	2900      	cmp	r1, #0
 8027a2e:	b096      	sub	sp, #88	; 0x58
 8027a30:	4615      	mov	r5, r2
 8027a32:	461e      	mov	r6, r3
 8027a34:	da0d      	bge.n	8027a52 <__swhatbuf_r+0x2e>
 8027a36:	89a3      	ldrh	r3, [r4, #12]
 8027a38:	f013 0f80 	tst.w	r3, #128	; 0x80
 8027a3c:	f04f 0100 	mov.w	r1, #0
 8027a40:	bf0c      	ite	eq
 8027a42:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8027a46:	2340      	movne	r3, #64	; 0x40
 8027a48:	2000      	movs	r0, #0
 8027a4a:	6031      	str	r1, [r6, #0]
 8027a4c:	602b      	str	r3, [r5, #0]
 8027a4e:	b016      	add	sp, #88	; 0x58
 8027a50:	bd70      	pop	{r4, r5, r6, pc}
 8027a52:	466a      	mov	r2, sp
 8027a54:	f000 f848 	bl	8027ae8 <_fstat_r>
 8027a58:	2800      	cmp	r0, #0
 8027a5a:	dbec      	blt.n	8027a36 <__swhatbuf_r+0x12>
 8027a5c:	9901      	ldr	r1, [sp, #4]
 8027a5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8027a62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8027a66:	4259      	negs	r1, r3
 8027a68:	4159      	adcs	r1, r3
 8027a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027a6e:	e7eb      	b.n	8027a48 <__swhatbuf_r+0x24>

08027a70 <__smakebuf_r>:
 8027a70:	898b      	ldrh	r3, [r1, #12]
 8027a72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027a74:	079d      	lsls	r5, r3, #30
 8027a76:	4606      	mov	r6, r0
 8027a78:	460c      	mov	r4, r1
 8027a7a:	d507      	bpl.n	8027a8c <__smakebuf_r+0x1c>
 8027a7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027a80:	6023      	str	r3, [r4, #0]
 8027a82:	6123      	str	r3, [r4, #16]
 8027a84:	2301      	movs	r3, #1
 8027a86:	6163      	str	r3, [r4, #20]
 8027a88:	b002      	add	sp, #8
 8027a8a:	bd70      	pop	{r4, r5, r6, pc}
 8027a8c:	ab01      	add	r3, sp, #4
 8027a8e:	466a      	mov	r2, sp
 8027a90:	f7ff ffc8 	bl	8027a24 <__swhatbuf_r>
 8027a94:	9900      	ldr	r1, [sp, #0]
 8027a96:	4605      	mov	r5, r0
 8027a98:	4630      	mov	r0, r6
 8027a9a:	f7ff f82f 	bl	8026afc <_malloc_r>
 8027a9e:	b948      	cbnz	r0, 8027ab4 <__smakebuf_r+0x44>
 8027aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027aa4:	059a      	lsls	r2, r3, #22
 8027aa6:	d4ef      	bmi.n	8027a88 <__smakebuf_r+0x18>
 8027aa8:	f023 0303 	bic.w	r3, r3, #3
 8027aac:	f043 0302 	orr.w	r3, r3, #2
 8027ab0:	81a3      	strh	r3, [r4, #12]
 8027ab2:	e7e3      	b.n	8027a7c <__smakebuf_r+0xc>
 8027ab4:	89a3      	ldrh	r3, [r4, #12]
 8027ab6:	6020      	str	r0, [r4, #0]
 8027ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027abc:	81a3      	strh	r3, [r4, #12]
 8027abe:	9b00      	ldr	r3, [sp, #0]
 8027ac0:	6163      	str	r3, [r4, #20]
 8027ac2:	9b01      	ldr	r3, [sp, #4]
 8027ac4:	6120      	str	r0, [r4, #16]
 8027ac6:	b15b      	cbz	r3, 8027ae0 <__smakebuf_r+0x70>
 8027ac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027acc:	4630      	mov	r0, r6
 8027ace:	f000 f81d 	bl	8027b0c <_isatty_r>
 8027ad2:	b128      	cbz	r0, 8027ae0 <__smakebuf_r+0x70>
 8027ad4:	89a3      	ldrh	r3, [r4, #12]
 8027ad6:	f023 0303 	bic.w	r3, r3, #3
 8027ada:	f043 0301 	orr.w	r3, r3, #1
 8027ade:	81a3      	strh	r3, [r4, #12]
 8027ae0:	89a3      	ldrh	r3, [r4, #12]
 8027ae2:	431d      	orrs	r5, r3
 8027ae4:	81a5      	strh	r5, [r4, #12]
 8027ae6:	e7cf      	b.n	8027a88 <__smakebuf_r+0x18>

08027ae8 <_fstat_r>:
 8027ae8:	b538      	push	{r3, r4, r5, lr}
 8027aea:	4d07      	ldr	r5, [pc, #28]	; (8027b08 <_fstat_r+0x20>)
 8027aec:	2300      	movs	r3, #0
 8027aee:	4604      	mov	r4, r0
 8027af0:	4608      	mov	r0, r1
 8027af2:	4611      	mov	r1, r2
 8027af4:	602b      	str	r3, [r5, #0]
 8027af6:	f7da fb40 	bl	800217a <_fstat>
 8027afa:	1c43      	adds	r3, r0, #1
 8027afc:	d102      	bne.n	8027b04 <_fstat_r+0x1c>
 8027afe:	682b      	ldr	r3, [r5, #0]
 8027b00:	b103      	cbz	r3, 8027b04 <_fstat_r+0x1c>
 8027b02:	6023      	str	r3, [r4, #0]
 8027b04:	bd38      	pop	{r3, r4, r5, pc}
 8027b06:	bf00      	nop
 8027b08:	200150a8 	.word	0x200150a8

08027b0c <_isatty_r>:
 8027b0c:	b538      	push	{r3, r4, r5, lr}
 8027b0e:	4d06      	ldr	r5, [pc, #24]	; (8027b28 <_isatty_r+0x1c>)
 8027b10:	2300      	movs	r3, #0
 8027b12:	4604      	mov	r4, r0
 8027b14:	4608      	mov	r0, r1
 8027b16:	602b      	str	r3, [r5, #0]
 8027b18:	f7da fb3f 	bl	800219a <_isatty>
 8027b1c:	1c43      	adds	r3, r0, #1
 8027b1e:	d102      	bne.n	8027b26 <_isatty_r+0x1a>
 8027b20:	682b      	ldr	r3, [r5, #0]
 8027b22:	b103      	cbz	r3, 8027b26 <_isatty_r+0x1a>
 8027b24:	6023      	str	r3, [r4, #0]
 8027b26:	bd38      	pop	{r3, r4, r5, pc}
 8027b28:	200150a8 	.word	0x200150a8

08027b2c <_init>:
 8027b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027b2e:	bf00      	nop
 8027b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027b32:	bc08      	pop	{r3}
 8027b34:	469e      	mov	lr, r3
 8027b36:	4770      	bx	lr

08027b38 <_fini>:
 8027b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027b3a:	bf00      	nop
 8027b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027b3e:	bc08      	pop	{r3}
 8027b40:	469e      	mov	lr, r3
 8027b42:	4770      	bx	lr
